package model

import (
	"fmt"
	"io"
	"strconv"

	"gopkg.in/guregu/null.v4"
)

// The information about the price that's charged to a shop every plan period.
// The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
type AppPricingDetails interface {
	IsAppPricingDetails()
}

// Services and features purchased once by the store.
type AppPurchase interface {
	IsAppPurchase()
}

// The value of the discount.
type AppSubscriptionDiscountValue interface {
	IsAppSubscriptionDiscountValue()
}

// A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
type CalculatedDiscountApplication interface {
	IsCalculatedDiscountApplication()
}

// The main embed of a comment event.
type CommentEventEmbed interface {
	IsCommentEventEmbed()
}

// The subject line of a comment event.
type CommentEventSubject interface {
	IsCommentEventSubject()
}

// Represents a session preceding an order, often used for building a timeline of events leading to an order.
type CustomerMoment interface {
	IsCustomerMoment()
}

// All possible instruments for CustomerPaymentMethods.
type CustomerPaymentInstrument interface {
	IsCustomerPaymentInstrument()
}

// The value (weight or price) that the condition field is compared to.
type DeliveryConditionCriteria interface {
	IsDeliveryConditionCriteria()
}

// A rate provided by a merchant-defined rate or a participant.
type DeliveryRateProvider interface {
	IsDeliveryRateProvider()
}

// Discount applications capture the intentions of a discount source at
// the time of application on an order's line items or shipping lines.
type DiscountApplication interface {
	IsDiscountApplication()
}

// An automatic discount.
type DiscountAutomatic interface {
	IsDiscountAutomatic()
}

// A code discount.
type DiscountCode interface {
	IsDiscountCode()
}

// The prerequisite quantity required for the discount to be applicable.
type DiscountCustomerBuysValue interface {
	IsDiscountCustomerBuysValue()
}

// The value of the discount and how it will be applied.
type DiscountCustomerGetsValue interface {
	IsDiscountCustomerGetsValue()
}

// The selection of customers who can use this discount.
type DiscountCustomerSelection interface {
	IsDiscountCustomerSelection()
}

// The type of discount that will be applied. Currently, only percentage off is supported.
type DiscountEffect interface {
	IsDiscountEffect()
}

// Entitled or prerequisite items on a discount. An item could be either collection or product or product_variant.
type DiscountItems interface {
	IsDiscountItems()
}

// The minimum subtotal or quantity requirements for the discount.
type DiscountMinimumRequirement interface {
	IsDiscountMinimumRequirement()
}

// The selection of shipping countries to which this discount applies.
type DiscountShippingDestinationSelection interface {
	IsDiscountShippingDestinationSelection()
}

// Represents an error in the input of a mutation.
type DisplayableError interface {
	IsDisplayableError()
}

// Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
// addition of a product.
type Event interface {
	IsEvent()
}

// A file interface.
type File interface {
	IsFile()
}

// Represents an object that has a list of events.
type HasEvents interface {
	IsHasEvents()
}

// Localization extensions associated with the specified resource. For example, the tax id for government invoice.
type HasLocalizationExtensions interface {
	IsHasLocalizationExtensions()
}

// Resources that metafield definitions can be applied to.
type HasMetafieldDefinitions interface {
	IsHasMetafieldDefinitions()
}

// Represents information about the metafields associated to the specified resource.
type HasMetafields interface {
	IsHasMetafields()
}

// Published translations associated with the resource.
type HasPublishedTranslations interface {
	IsHasPublishedTranslations()
}

// Interoperability metadata for types that directly correspond to a REST Admin API resource.
// For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
type LegacyInteroperability interface {
	IsLegacyInteroperability()
}

// Represents a media interface.
type Media interface {
	IsMedia()
}

// The resource referenced by the metafield value.
type MetafieldReference interface {
	IsMetafieldReference()
}

// A default cursor that you can use in queries to paginate your results. Each edge in a connection can
// return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
// the starting point to retrieve the nodes before or after it in a connection.
//
// To learn more about using cursor-based pagination, refer to
// [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
type Navigable interface {
	IsNavigable()
}

// An object with an ID field to support global identification, in accordance with the
// [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
// This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
// and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
type Node interface {
	IsNode()
}

// Online Store preview URL of the object.
type OnlineStorePreviewable interface {
	IsOnlineStorePreviewable()
}

// A change that has been applied to an order.
type OrderStagedChange interface {
	IsOrderStagedChange()
}

// The value of the price rule.
type PriceRuleValue interface {
	IsPriceRuleValue()
}

// The value of the pricing object.
type PricingValue interface {
	IsPricingValue()
}

// Represents a resource that can be published to a channel.
// A publishable resource can be either a Product or Collection.
type Publishable interface {
	IsPublishable()
}

// An individual sale record associated with a sales agreement.
type Sale interface {
	IsSale()
}

// An addition, removal, modification, or other sale commitment associated with an order.
type SalesAgreement interface {
	IsSalesAgreement()
}

// The filters used in segment queries associated with a shop.
type SegmentFilter interface {
	IsSegmentFilter()
}

// Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
// three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
// policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanBillingPolicy interface {
	IsSellingPlanBillingPolicy()
}

// Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
// every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
// pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanDeliveryPolicy interface {
	IsSellingPlanDeliveryPolicy()
}

// Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
// for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
// associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
// hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
// to restore them later.
type SellingPlanPricingPolicy interface {
	IsSellingPlanPricingPolicy()
}

// Represents a selling plan pricing policy adjustment value type.
type SellingPlanPricingPolicyAdjustmentValue interface {
	IsSellingPlanPricingPolicyAdjustmentValue()
}

// Represents selling plan pricing policy common fields.
type SellingPlanPricingPolicyBase interface {
	IsSellingPlanPricingPolicyBase()
}

// The charge descriptors for a payments account.
type ShopifyPaymentsChargeStatementDescriptor interface {
	IsShopifyPaymentsChargeStatementDescriptor()
}

// Describes the delivery method to use to get the physical goods to the customer.
type SubscriptionDeliveryMethod interface {
	IsSubscriptionDeliveryMethod()
}

// Subscription draft discount types.
type SubscriptionDiscount interface {
	IsSubscriptionDiscount()
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountValue interface {
	IsSubscriptionDiscountValue()
}

// The result of the query to fetch shipping options for the subscription contract.
type SubscriptionShippingOptionResult interface {
	IsSubscriptionShippingOptionResult()
}

// Information about the payment instrument used for this transaction.
type TenderTransactionDetails interface {
	IsTenderTransactionDetails()
}

// An endpoint to which webhook subscriptions send webhooks events.
type WebhookSubscriptionEndpoint interface {
	IsWebhookSubscriptionEndpoint()
}

// Represents the permission required to access a Shopify Admin API or Storefront API resource for a shop. Access scopes are granted by merchants to requesting applications.
type AccessScope struct {
	// Description of the resource access provided by the access scope when granted to an application.
	Description string `json:"description"`
	// Represents the access scope as a readable string. Typically follows the format `{action}_{resource}`: a `read` or `write` action, followed by the resource on which the action is allowed to be performed on, separated by an underscore. For example, `read_orders`; `write_products`.
	//
	Handle string `json:"handle"`
}

// The additional fees that have been applied to the order.
type AdditionalFee struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The name of the additional fee.
	Name string `json:"name"`
	// The price of the additional fee.
	Price *MoneyBag `json:"price,omitempty"`
	// A list of taxes charged on the additional fee.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
}

func (AdditionalFee) IsNode() {}

// A sale associated with an order price adjustment.
type AdjustmentSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (AdjustmentSale) IsSale() {}

// Whether all items in the cart are entitled to the discount.
type AllDiscountItems struct {
	// Whether all items are selected. The value is hardcoded to `true`.
	AllItems bool `json:"allItems"`
}

func (AllDiscountItems) IsDiscountItems() {}

// A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
// Versions are commonly referred to by their handle (for example, `2021-10`).
type APIVersion struct {
	// The human-readable name of the version.
	DisplayName string `json:"displayName"`
	// The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
	Handle string `json:"handle"`
	// Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
	Supported bool `json:"supported"`
}

// A Shopify application.
type App struct {
	// A unique application API identifier.
	APIKey string `json:"apiKey"`
	// App store page URL of the app.
	AppStoreAppURL *string `json:"appStoreAppUrl,omitempty"`
	// App store page URL of the developer who created the app.
	AppStoreDeveloperURL *string `json:"appStoreDeveloperUrl,omitempty"`
	// The access scopes available to the app.
	AvailableAccessScopes []AccessScope `json:"availableAccessScopes,omitempty"`
	// Banner image for the app.
	Banner *Image `json:"banner,omitempty"`
	// Description of the app.
	Description *string `json:"description,omitempty"`
	// The name of the app developer.
	DeveloperName *string `json:"developerName,omitempty"`
	// The type of app developer.
	DeveloperType AppDeveloperType `json:"developerType"`
	// Website of the developer who created the app.
	DeveloperURL string `json:"developerUrl"`
	// Whether the app uses the Embedded App SDK.
	Embedded bool `json:"embedded"`
	// Requirements that must be met before the app can be installed.
	FailedRequirements []FailedRequirement `json:"failedRequirements,omitempty"`
	// A list of app features that are shown in the Shopify App Store listing.
	Features []string `json:"features,omitempty"`
	// Feedback from this app about the store.
	Feedback *AppFeedback `json:"feedback,omitempty"`
	// Handle of the app.
	Handle *string `json:"handle,omitempty"`
	// Icon that represents the app.
	Icon *Image `json:"icon,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Webpage where you can install the app.
	InstallURL *string `json:"installUrl,omitempty"`
	// Corresponding AppInstallation for this shop and App.
	// Returns null if the App is not installed.
	//
	Installation *AppInstallation `json:"installation,omitempty"`
	// Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
	//
	IsPostPurchaseAppInUse bool `json:"isPostPurchaseAppInUse"`
	// Webpage that the app starts in.
	LaunchURL string `json:"launchUrl"`
	// Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
	//
	NavigationItems []NavigationItem `json:"navigationItems,omitempty"`
	// Whether the app was previously installed on the current shop.
	PreviouslyInstalled bool `json:"previouslyInstalled"`
	// Detailed information about the app pricing.
	PricingDetails *string `json:"pricingDetails,omitempty"`
	// Summary of the app pricing details.
	PricingDetailsSummary string `json:"pricingDetailsSummary"`
	// Link to app privacy policy.
	PrivacyPolicyURL *string `json:"privacyPolicyUrl,omitempty"`
	// The public category for the app.
	PublicCategory AppPublicCategory `json:"publicCategory"`
	// Whether the app is published to the Shopify App Store.
	Published bool `json:"published"`
	// The access scopes requested by the app.
	RequestedAccessScopes []AccessScope `json:"requestedAccessScopes,omitempty"`
	// Screenshots of the app.
	Screenshots []Image `json:"screenshots,omitempty"`
	// Whether the app was developed by Shopify.
	ShopifyDeveloped bool `json:"shopifyDeveloped"`
	// Access the Storefront API is possible on this app.
	StorefrontAPIAvailable bool `json:"storefrontApiAvailable"`
	// Name of the app.
	Title string `json:"title"`
	// Message that appears when the app is uninstalled. For example:
	// By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
	//
	UninstallMessage string `json:"uninstallMessage"`
	// Webpage where you can uninstall the app.
	UninstallURL *string `json:"uninstallUrl,omitempty"`
	// The webhook API version for the app.
	WebhookAPIVersion string `json:"webhookApiVersion"`
}

func (App) IsNode() {}

// An auto-generated type for paginating through multiple Apps.
type AppConnection struct {
	// A list of edges.
	Edges []AppEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
type AppCredit struct {
	// The amount that can be used towards future app purchases in Shopify.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The date and time when the app credit was created.
	CreatedAt string `json:"createdAt"`
	// The description of the app credit.
	Description string `json:"description"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Whether the app credit is a test transaction.
	Test bool `json:"test"`
}

func (AppCredit) IsNode() {}

// An auto-generated type for paginating through multiple AppCredits.
type AppCreditConnection struct {
	// A list of edges.
	Edges []AppCreditEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appCreditCreate` mutation.
type AppCreditCreatePayload struct {
	// The newly created app credit.
	AppCredit *AppCredit `json:"appCredit,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppCredit and a cursor during pagination.
type AppCreditEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppCreditEdge.
	Node *AppCredit `json:"node,omitempty"`
}

// An auto-generated type which holds one App and a cursor during pagination.
type AppEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppEdge.
	Node *App `json:"node,omitempty"`
}

// Reports the status of shops and their resources and displays this information
// within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
// to set up an app on their store.
type AppFeedback struct {
	// The application associated to the feedback.
	App *App `json:"app,omitempty"`
	// A link to where merchants can resolve errors.
	Link *Link `json:"link,omitempty"`
	// The feedback message presented to the merchant.
	Messages []UserError `json:"messages,omitempty"`
}

// Represents an installed application on a shop.
type AppInstallation struct {
	// The access scopes granted to the application by a merchant during installation.
	AccessScopes []AccessScope `json:"accessScopes,omitempty"`
	// The active application subscriptions billed to the shop on a recurring basis.
	ActiveSubscriptions []AppSubscription `json:"activeSubscriptions,omitempty"`
	// All subscriptions created for a shop.
	AllSubscriptions *AppSubscriptionConnection `json:"allSubscriptions,omitempty"`
	// Application which is installed.
	App *App `json:"app,omitempty"`
	// Channel associated with the installed application.
	Channel *Channel `json:"channel,omitempty"`
	// Credits that can be used towards future app purchases.
	Credits *AppCreditConnection `json:"credits,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The URL to launch the application.
	LaunchURL string `json:"launchUrl"`
	// One-time purchases to a shop.
	OneTimePurchases *AppPurchaseOneTimeConnection `json:"oneTimePurchases,omitempty"`
	// The publication associated with the installed application.
	Publication *Publication `json:"publication,omitempty"`
	// Lookup an AppPurchaseConfirmation by ID.
	PurchaseConfirmation *AppPurchaseConfirmation `json:"purchaseConfirmation,omitempty"`
	// The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
	RevenueAttributionRecords *AppRevenueAttributionRecordConnection `json:"revenueAttributionRecords,omitempty"`
	// Storefront API access is enabled on the app and granted by a Shop staff member. Storefront API calls should succeed.
	StorefrontAPIAccessible bool `json:"storefrontApiAccessible"`
	// Subscriptions charge to a shop on a recurring basis.
	Subscriptions []AppSubscription `json:"subscriptions,omitempty"`
	// The URL to uninstall the application.
	UninstallURL *string `json:"uninstallUrl,omitempty"`
}

func (AppInstallation) IsNode() {}

// An auto-generated type for paginating through multiple AppInstallations.
type AppInstallationConnection struct {
	// A list of edges.
	Edges []AppInstallationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one AppInstallation and a cursor during pagination.
type AppInstallationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppInstallationEdge.
	Node *AppInstallation `json:"node,omitempty"`
}

// The pricing model for the app subscription.
// The pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.
type AppPlanInput struct {
	// The pricing details for usage-based billing.
	AppUsagePricingDetails *AppUsagePricingInput `json:"appUsagePricingDetails,omitempty"`
	// The pricing details for recurring billing.
	AppRecurringPricingDetails *AppRecurringPricingInput `json:"appRecurringPricingDetails,omitempty"`
}

// The app plan that the merchant is subscribed to.
type AppPlanV2 struct {
	// The plan billed to a shop on a recurring basis.
	PricingDetails AppPricingDetails `json:"pricingDetails"`
}

// Provides a way for merchants to approve or decline the app purchase.
type AppPurchaseConfirmation struct {
	// The URL where the merchant approves or declines the app purchase.
	URL string `json:"url"`
}

// Services and features purchased once by a store.
type AppPurchaseOneTime struct {
	// The date and time when the app purchase occurred.
	CreatedAt string `json:"createdAt"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The name of the app purchase.
	Name string `json:"name"`
	// The amount to be charged to the store for the app purchase.
	Price *MoneyV2 `json:"price,omitempty"`
	// The URL where the merchant is redirected after approving the app purchase.
	ReturnURL string `json:"returnUrl"`
	// The status of the app purchase.
	Status AppPurchaseStatus `json:"status"`
	// Whether the app purchase is a test transaction.
	Test bool `json:"test"`
}

func (AppPurchaseOneTime) IsAppPurchase() {}
func (AppPurchaseOneTime) IsNode()        {}

// An auto-generated type for paginating through multiple AppPurchaseOneTimes.
type AppPurchaseOneTimeConnection struct {
	// A list of edges.
	Edges []AppPurchaseOneTimeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appPurchaseOneTimeCreate` mutation.
type AppPurchaseOneTimeCreatePayload struct {
	// The newly created app one-time purchase.
	AppPurchaseOneTime *AppPurchaseOneTime `json:"appPurchaseOneTime,omitempty"`
	// The URL that the merchant can access to approve or decline the newly created app one-time purchase.
	//
	// If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
	// If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
	//
	// You get paid after the charge is activated.
	//
	ConfirmationURL *string `json:"confirmationUrl,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
type AppPurchaseOneTimeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppPurchaseOneTimeEdge.
	Node *AppPurchaseOneTime `json:"node,omitempty"`
}

// The pricing information about a subscription app.
// The object contains an interval (the frequency at which the shop is billed for an app subscription) and
// a price (the amount to be charged to the subscribing shop at each interval).
type AppRecurringPricing struct {
	// The discount applied to the subscription for a given number of billing intervals.
	Discount *AppSubscriptionDiscount `json:"discount,omitempty"`
	// The frequency at which the subscribing shop is billed for an app subscription.
	Interval AppPricingInterval `json:"interval"`
	// The amount and currency to be charged to the subscribing shop every billing interval.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (AppRecurringPricing) IsAppPricingDetails() {}

// Instructs the app subscription to generate a fixed charge on a recurring basis. The frequency is specified by the billing interval.
type AppRecurringPricingInput struct {
	// How often the app subscription generates a charge.
	Interval *AppPricingInterval `json:"interval,omitempty"`
	// The amount to be charged to the store every billing interval. The only permitted currency code is USD.
	Price *MoneyInput `json:"price,omitempty"`
	// The discount applied to the subscription for a given number of billing intervals.
	Discount *AppSubscriptionDiscountInput `json:"discount,omitempty"`
}

// Represents app revenue that was captured externally by the partner.
type AppRevenueAttributionRecord struct {
	// The financial amount captured in this attribution.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The timestamp when the financial amount was captured.
	CapturedAt string `json:"capturedAt"`
	// The timestamp at which this revenue attribution was issued.
	CreatedAt string `json:"createdAt"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The unique value submitted during the creation of the app revenue attribution record.
	// For more information, refer to
	// [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	//
	IdempotencyKey string `json:"idempotencyKey"`
	// Indicates whether this is a test submission.
	Test bool `json:"test"`
	// The type of revenue attribution.
	Type AppRevenueAttributionType `json:"type"`
}

func (AppRevenueAttributionRecord) IsNode() {}

// An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
type AppRevenueAttributionRecordConnection struct {
	// A list of edges.
	Edges []AppRevenueAttributionRecordEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appRevenueAttributionRecordCreate` mutation.
type AppRevenueAttributionRecordCreatePayload struct {
	// The created app revenue attribution record.
	AppRevenueAttributionRecord *AppRevenueAttributionRecord `json:"appRevenueAttributionRecord,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AppRevenueAttributionRecordCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AppRevenueAttributionRecordCreate`.
type AppRevenueAttributionRecordCreateUserError struct {
	// The error code.
	Code *AppRevenueAttributionRecordCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AppRevenueAttributionRecordCreateUserError) IsDisplayableError() {}

// Return type for `appRevenueAttributionRecordDelete` mutation.
type AppRevenueAttributionRecordDeletePayload struct {
	// The ID of the revenue attribution that was deleted, if one was.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AppRevenueAttributionRecordDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AppRevenueAttributionRecordDelete`.
type AppRevenueAttributionRecordDeleteUserError struct {
	// The error code.
	Code *AppRevenueAttributionRecordDeleteUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AppRevenueAttributionRecordDeleteUserError) IsDisplayableError() {}

// An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
type AppRevenueAttributionRecordEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppRevenueAttributionRecordEdge.
	Node *AppRevenueAttributionRecord `json:"node,omitempty"`
}

// Allows to supply an app revenue attribution record.
type AppRevenueAttributionRecordInput struct {
	// The unique value submitted during creation.
	// For more information, refer to
	// [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	//
	IdempotencyKey string `json:"idempotencyKey"`
	// The timestamp when the financial amount was captured.
	CapturedAt string `json:"capturedAt"`
	// The financial amount captured in this attribution.
	Amount *MoneyInput `json:"amount,omitempty"`
	// The type of revenue attribution.
	Type AppRevenueAttributionType `json:"type"`
	// Indicates whether this is a test submission.
	Test bool `json:"test"`
}

// Provides users access to services and/or features for a duration of time.
type AppSubscription struct {
	// The app the subscription is generating charges for.
	App *App `json:"app,omitempty"`
	// The date and time when the app subscription was created.
	CreatedAt string `json:"createdAt"`
	// The date and time when the current app subscription period ends.
	CurrentPeriodEnd *string `json:"currentPeriodEnd,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The plans attached to the app subscription.
	LineItems []AppSubscriptionLineItem `json:"lineItems,omitempty"`
	// The name of the app subscription.
	Name string `json:"name"`
	// The URL that the merchant is redirected to after approving the app subscription.
	ReturnURL string `json:"returnUrl"`
	// The status of the app subscription.
	Status AppSubscriptionStatus `json:"status"`
	// Specifies whether the app subscription is a test transaction.
	Test bool `json:"test"`
	// The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
	TrialDays int `json:"trialDays"`
}

func (AppSubscription) IsNode() {}

// Return type for `appSubscriptionCancel` mutation.
type AppSubscriptionCancelPayload struct {
	// The cancelled app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple AppSubscriptions.
type AppSubscriptionConnection struct {
	// A list of edges.
	Edges []AppSubscriptionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appSubscriptionCreate` mutation.
type AppSubscriptionCreatePayload struct {
	// The newly-created app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
	ConfirmationURL *string `json:"confirmationUrl,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Discount applied to the recurring pricing portion of a subscription.
type AppSubscriptionDiscount struct {
	// The total number of billing intervals to which the discount will be applied.
	// The discount will be applied to an indefinite number of billing intervals if this value is blank.
	//
	DurationLimitInIntervals *int `json:"durationLimitInIntervals,omitempty"`
	// The price of the subscription after the discount is applied.
	PriceAfterDiscount *MoneyV2 `json:"priceAfterDiscount,omitempty"`
	// The remaining number of billing intervals to which the discount will be applied.
	RemainingDurationInIntervals *int `json:"remainingDurationInIntervals,omitempty"`
	// The value of the discount applied every billing interval.
	Value AppSubscriptionDiscountValue `json:"value"`
}

// The fixed amount value of a discount.
type AppSubscriptionDiscountAmount struct {
	// The fixed amount value of a discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
}

func (AppSubscriptionDiscountAmount) IsAppSubscriptionDiscountValue() {}

// Specifies a discount to the recurring pricing portion of a subscription over a number of billing intervals.
type AppSubscriptionDiscountInput struct {
	// The value to be discounted every billing interval.
	Value *AppSubscriptionDiscountValueInput `json:"value,omitempty"`
	// The total number of billing intervals to which the discount will be applied.
	// The discount will be applied to an indefinite number of billing intervals if this value is left blank.
	//
	DurationLimitInIntervals *int `json:"durationLimitInIntervals,omitempty"`
}

// The percentage value of a discount.
type AppSubscriptionDiscountPercentage struct {
	// The percentage value of a discount.
	Percentage float64 `json:"percentage"`
}

func (AppSubscriptionDiscountPercentage) IsAppSubscriptionDiscountValue() {}

// Specifies the value discounted every billing interval.
type AppSubscriptionDiscountValueInput struct {
	// The percentage value of a discount.
	Percentage *float64 `json:"percentage,omitempty"`
	// The monetary value of a discount.
	Amount *null.String `json:"amount,omitempty"`
}

// An auto-generated type which holds one AppSubscription and a cursor during pagination.
type AppSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppSubscriptionEdge.
	Node *AppSubscription `json:"node,omitempty"`
}

// The plan attached to an app subscription.
type AppSubscriptionLineItem struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The pricing model for the app subscription.
	Plan *AppPlanV2 `json:"plan,omitempty"`
	// A list of the store's usage records for a usage pricing plan.
	UsageRecords *AppUsageRecordConnection `json:"usageRecords,omitempty"`
}

// Allows an app to add more than one pricing plan to an app subscription.
type AppSubscriptionLineItemInput struct {
	// The pricing model for the app subscription.
	Plan *AppPlanInput `json:"plan,omitempty"`
}

// Return type for `appSubscriptionLineItemUpdate` mutation.
type AppSubscriptionLineItemUpdatePayload struct {
	// The updated app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// The URL where the merchant approves or declines the updated app subscription line item.
	ConfirmationURL *string `json:"confirmationUrl,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Defines a usage pricing model for the app subscription.
// These charges are variable based on how much the merchant uses the app.
type AppUsagePricing struct {
	// The total usage records for interval.
	BalanceUsed *MoneyV2 `json:"balanceUsed,omitempty"`
	// The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
	// This prevents billing from exceeding a maximum threshold over the duration of the billing period.
	// For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
	//
	CappedAmount *MoneyV2 `json:"cappedAmount,omitempty"`
	// The frequency with which the app usage records are billed.
	Interval AppPricingInterval `json:"interval"`
	// The terms and conditions for app usage pricing.
	// Must be present in order to create usage charges.
	// The terms are presented to the merchant when they approve an app's usage charges.
	//
	Terms string `json:"terms"`
}

func (AppUsagePricing) IsAppPricingDetails() {}

// Allows an app to issue arbitrary charges for app usage associated with a subscription.
type AppUsagePricingInput struct {
	// The maximum amount of usage charges that can be incurred within a subscription billing interval.
	CappedAmount *MoneyInput `json:"cappedAmount,omitempty"`
	// The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates.
	Terms string `json:"terms"`
}

// Store usage for app subscriptions with usage pricing.
type AppUsageRecord struct {
	// The date and time when the usage record was created.
	CreatedAt string `json:"createdAt"`
	// The description of the app usage record.
	Description string `json:"description"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The price of the usage record. The only permitted currency code is USD.
	Price *MoneyV2 `json:"price,omitempty"`
	// Defines the usage pricing plan the merchant is subscribed to.
	SubscriptionLineItem *AppSubscriptionLineItem `json:"subscriptionLineItem,omitempty"`
}

func (AppUsageRecord) IsNode() {}

// An auto-generated type for paginating through multiple AppUsageRecords.
type AppUsageRecordConnection struct {
	// A list of edges.
	Edges []AppUsageRecordEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appUsageRecordCreate` mutation.
type AppUsageRecordCreatePayload struct {
	// The newly created app usage record.
	AppUsageRecord *AppUsageRecord `json:"appUsageRecord,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
type AppUsageRecordEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppUsageRecordEdge.
	Node *AppUsageRecord `json:"node,omitempty"`
}

// The values for an association segment filter.
type AssociationFilterValue struct {
	// The localized name of the value.
	LocalizedName string `json:"localizedName"`
	// The query name of the value.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple AssociationFilterValues.
type AssociationFilterValueConnection struct {
	// A list of edges.
	Edges []AssociationFilterValueEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one AssociationFilterValue and a cursor during pagination.
type AssociationFilterValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AssociationFilterValueEdge.
	Node *AssociationFilterValue `json:"node,omitempty"`
}

// A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
type AssociationSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
	// A list of values for an association segment filter.
	Values *AssociationFilterValueConnection `json:"values,omitempty"`
}

func (AssociationSegmentFilter) IsSegmentFilter() {}

// Represents a generic custom attribute.
type Attribute struct {
	// Key or name of the attribute.
	Key string `json:"key"`
	// Value of the attribute.
	Value *string `json:"value,omitempty"`
}

// Specifies the input fields required for an attribute.
type AttributeInput struct {
	// Key or name of the attribute.
	Key string `json:"key"`
	// Value of the attribute.
	Value string `json:"value"`
}

// The statistics for a given attribute.
type AttributeStatistics struct {
	// The average for a given attribute.
	Average float64 `json:"average"`
	// The sum for a given attribute.
	Sum float64 `json:"sum"`
}

// Automatic discount applications capture the intentions of a discount that was automatically applied.
type AutomaticDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the discount application.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (AutomaticDiscountApplication) IsDiscountApplication() {}

// Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
// the addition of a product.
type BasicEvent struct {
	// The name of the app that created the event.
	AppTitle *string `json:"appTitle,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser"`
	// The date and time when the event was created.
	CreatedAt string `json:"createdAt"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Human readable text that describes the event.
	Message string `json:"message"`
}

func (BasicEvent) IsEvent() {}
func (BasicEvent) IsNode()  {}

// Represents an error that happens during the execution of a billing attempt mutation.
type BillingAttemptUserError struct {
	// The error code.
	Code *BillingAttemptUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BillingAttemptUserError) IsDisplayableError() {}

// A filter with a Boolean value that's been added to a segment query.
type BooleanSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (BooleanSegmentFilter) IsSegmentFilter() {}

// Represents an error that happens during execution of a bulk mutation.
type BulkMutationUserError struct {
	// The error code.
	Code *BulkMutationErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BulkMutationUserError) IsDisplayableError() {}

// An asynchronous long-running operation to fetch data in bulk or to bulk import data.
//
// Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
// they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
// a link to the data in [JSONL](http://jsonlines.org/) format.
//
// Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
type BulkOperation struct {
	// When the bulk operation was successfully completed.
	CompletedAt *string `json:"completedAt,omitempty"`
	// When the bulk operation was created.
	CreatedAt string `json:"createdAt"`
	// Error code for failed operations.
	ErrorCode *BulkOperationErrorCode `json:"errorCode,omitempty"`
	// File size in bytes of the file in the `url` field.
	FileSize *string `json:"fileSize,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// A running count of all the objects processed.
	// For example, when fetching all the products and their variants, this field counts both products and variants.
	// This field can be used to track operation progress.
	//
	ObjectCount string `json:"objectCount"`
	// The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
	// The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
	//
	PartialDataURL *string `json:"partialDataUrl,omitempty"`
	// GraphQL query document specified in `bulkOperationRunQuery`.
	Query string `json:"query"`
	// A running count of all the objects that are processed at the root of the query.
	// For example, when fetching all the products and their variants, this field only counts products.
	// This field can be used to track operation progress.
	//
	RootObjectCount string `json:"rootObjectCount"`
	// Status of the bulk operation.
	Status BulkOperationStatus `json:"status"`
	// The bulk operation's type.
	Type BulkOperationType `json:"type"`
	// The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
	// The URL expires 7 days after the operation completes.
	//
	URL *string `json:"url,omitempty"`
}

func (BulkOperation) IsNode() {}

// Return type for `bulkOperationCancel` mutation.
type BulkOperationCancelPayload struct {
	// The bulk operation to be canceled.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `bulkOperationRunMutation` mutation.
type BulkOperationRunMutationPayload struct {
	// The newly created bulk operation.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BulkMutationUserError `json:"userErrors,omitempty"`
}

// Return type for `bulkOperationRunQuery` mutation.
type BulkOperationRunQueryPayload struct {
	// The newly created bulk operation.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `bulkProductResourceFeedbackCreate` mutation.
type BulkProductResourceFeedbackCreatePayload struct {
	// The feedback that is created.
	Feedback []ProductResourceFeedback `json:"feedback,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BulkProductResourceFeedbackCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
type BulkProductResourceFeedbackCreateUserError struct {
	// The error code.
	Code *BulkProductResourceFeedbackCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BulkProductResourceFeedbackCreateUserError) IsDisplayableError() {}

// A discount that is automatically applied to an order that is being edited.
type CalculatedAutomaticDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedAutomaticDiscountApplication) IsCalculatedDiscountApplication() {}

// An amount discounting the line that has been allocated by an associated discount application.
type CalculatedDiscountAllocation struct {
	// The money amount allocated by the discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount that the allocated amount originated from.
	DiscountApplication CalculatedDiscountApplication `json:"discountApplication"`
}

// An auto-generated type for paginating through multiple CalculatedDiscountApplications.
type CalculatedDiscountApplicationConnection struct {
	// A list of edges.
	Edges []CalculatedDiscountApplicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
type CalculatedDiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CalculatedDiscountApplicationEdge.
	Node CalculatedDiscountApplication `json:"node"`
}

// A discount code that is applied to an order that is being edited.
type CalculatedDiscountCodeApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The string identifying the discount code that was used at the time of application.
	Code string `json:"code"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedDiscountCodeApplication) IsCalculatedDiscountApplication() {}

// The computed properties for a draft order.
type CalculatedDraftOrder struct {
	// Order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
	AvailableShippingRates []ShippingRate `json:"availableShippingRates,omitempty"`
	// Customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty"`
	// Line items in the draft order with their computed properties.
	LineItems []CalculatedDraftOrderLineItem `json:"lineItems,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	//
	SubtotalPrice null.String `json:"subtotalPrice"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Total amount of the draft order (includes taxes, shipping charges, and discounts).
	TotalPrice null.String `json:"totalPrice"`
	// Total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// Total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax"`
}

// The computed line items for a draft order.
type CalculatedDraftOrderLineItem struct {
	// Discount applied to the line item.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// Indicates if this is a product variant line item, or a custom line item.
	Custom bool `json:"custom"`
	// List of additional information about the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Total price with discounts applied.
	DiscountedTotal *MoneyV2 `json:"discountedTotal,omitempty"`
	// Unit price with discounts applied.
	DiscountedUnitPrice *MoneyV2 `json:"discountedUnitPrice,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Image associated with the draft order line item.
	Image *Image `json:"image,omitempty"`
	// Indicates whether the line item represents the puchase of a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// Name of the product.
	Name string `json:"name"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	//
	OriginalTotal *MoneyV2 `json:"originalTotal,omitempty"`
	// Variant price without any discounts applied.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// Product associated with the draft order line item.
	Product *Product `json:"product,omitempty"`
	// Number of variant items requested in the draft order.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Variant SKU number.
	Sku *string `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// Title of the product or variant (this field only applies to custom line items).
	Title string `json:"title"`
	// Total value of the discount.
	TotalDiscount *MoneyV2 `json:"totalDiscount,omitempty"`
	// Variant associated with the draft order line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty"`
	// Weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty"`
}

// A line item involved in order editing that may be newly added or have new changes applied.
type CalculatedLineItem struct {
	// The discounts that have been allocated onto the line item by discount applications.
	CalculatedDiscountAllocations []CalculatedDiscountAllocation `json:"calculatedDiscountAllocations,omitempty"`
	// The list of additional information about the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of items that can be edited.
	EditableQuantity int `json:"editableQuantity"`
	// The editable quantity prior to any changes made in the current edit.
	EditableQuantityBeforeChanges int `json:"editableQuantityBeforeChanges"`
	// The total price of editable lines in shop and presentment currencies.
	EditableSubtotalSet *MoneyBag `json:"editableSubtotalSet,omitempty"`
	// Whether the calculated line item has a staged discount.
	HasStagedLineItemDiscount bool `json:"hasStagedLineItemDiscount"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image object associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// The variant unit price in shop and presentment currencies, without any discounts applied.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The total number of items.
	Quantity int `json:"quantity"`
	// Whether the line item can be restocked or not.
	Restockable bool `json:"restockable"`
	// Whether the changes on the line item will result in a restock.
	Restocking bool `json:"restocking"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty"`
	// A list of changes that affect this line item.
	StagedChanges []OrderStagedChange `json:"stagedChanges,omitempty"`
	// The title of the product.
	Title string `json:"title"`
	// The total price of uneditable lines in shop and presentment currencies.
	UneditableSubtotalSet *MoneyBag `json:"uneditableSubtotalSet,omitempty"`
	// The product variant associated with this line item. The value is null for custom line items and items where
	// the variant has been deleted.
	//
	Variant *ProductVariant `json:"variant,omitempty"`
	// The title of the variant.
	VariantTitle *string `json:"variantTitle,omitempty"`
}

// An auto-generated type for paginating through multiple CalculatedLineItems.
type CalculatedLineItemConnection struct {
	// A list of edges.
	Edges []CalculatedLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
type CalculatedLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CalculatedLineItemEdge.
	Node *CalculatedLineItem `json:"node,omitempty"`
}

// Represents a discount that was manually created for an order that is being edited.
type CalculatedManualDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedManualDiscountApplication) IsCalculatedDiscountApplication() {}

// An order with edits applied but not saved.
type CalculatedOrder struct {
	// Returns only the new discount applications being added to the order in the current edit.
	//
	AddedDiscountApplications *CalculatedDiscountApplicationConnection `json:"addedDiscountApplications,omitempty"`
	// Returns only the new line items being added to the order during the current edit.
	//
	AddedLineItems *CalculatedLineItemConnection `json:"addedLineItems,omitempty"`
	// Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty"`
	// Whether the changes have been applied and saved to the order.
	Committed bool `json:"committed"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Returns all items on the order that existed before starting the edit.
	// Will include any changes that have been made.
	// Will not include line items added during the current edit.
	//
	LineItems *CalculatedLineItemConnection `json:"lineItems,omitempty"`
	// The HTML of the customer notification for the order edit.
	NotificationPreviewHTML *string `json:"notificationPreviewHtml,omitempty"`
	// The customer notification title.
	NotificationPreviewTitle string `json:"notificationPreviewTitle"`
	// The order without any changes applied.
	Order *Order `json:"order,omitempty"`
	// The order without any changes applied.
	//
	OriginalOrder *Order `json:"originalOrder,omitempty"`
	// List of changes made to the order during the current edit.
	//
	StagedChanges *OrderStagedChangeConnection `json:"stagedChanges,omitempty"`
	// The sum of the quantities for the line items that contribute to the order's subtotal.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity"`
	// The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal does not include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// Taxes charged for the line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Total price of the order less the total amount received from the customer in shop and presentment currencies.
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

func (CalculatedOrder) IsNode() {}

// A discount created by a Shopify script for an order that is being edited.
type CalculatedScriptDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedScriptDiscountApplication) IsCalculatedDiscountApplication() {}

// A channel represents an app where you sell a group of products and collections.
// A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
type Channel struct {
	// Underlying app used by the channel.
	App *App `json:"app,omitempty"`
	// The collection publications for the list of collections published to the channel.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the channel.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Unique identifier for the channel.
	Handle string `json:"handle"`
	// Whether the collection is available to the channel.
	HasCollection bool `json:"hasCollection"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Name of the channel.
	Name string `json:"name"`
	// Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.
	//
	NavigationItems []NavigationItem `json:"navigationItems,omitempty"`
	// Home page for the channel.
	OverviewPath *string `json:"overviewPath,omitempty"`
	// The product publications for the products published to the channel.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product publications for the list of products published to the channel.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the channel.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether or not this channel supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing"`
}

func (Channel) IsNode() {}

// An auto-generated type for paginating through multiple Channels.
type ChannelConnection struct {
	// A list of edges.
	Edges []ChannelEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Channel and a cursor during pagination.
type ChannelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ChannelEdge.
	Node *Channel `json:"node,omitempty"`
}

// Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
//
// Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
//
// Collections can also be created for a custom group of products. These are called custom or manual collections.
type Collection struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount"`
	// A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
	//
	Description string `json:"description"`
	// The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
	//
	DescriptionHTML string `json:"descriptionHtml"`
	// Information about the collection that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty"`
	// A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
	//
	// If the title is changed, the handle doesn't automatically change.
	//
	// The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
	//
	Handle string `json:"handle"`
	// Whether the collection includes the specified product.
	HasProduct bool `json:"hasProduct"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image associated with the collection.
	Image *Image `json:"image,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The products that are included in the collection.
	Products *ProductConnection `json:"products,omitempty"`
	// The number of products in the collection.
	ProductsCount int `json:"productsCount"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount"`
	// The channels where the collection is published.
	Publications *CollectionPublicationConnection `json:"publications,omitempty"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// For a smart (automated) collection, specifies the rules that determine whether a product is included.
	//
	RuleSet *CollectionRuleSet `json:"ruleSet,omitempty"`
	// If the default SEO fields for page title and description have been modified, contains the modified information.
	//
	Seo *Seo `json:"seo,omitempty"`
	// The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
	//
	SortOrder CollectionSortOrder `json:"sortOrder"`
	// The Storefront GraphQL API ID of the `Collection`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
	// The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
	//
	Title string `json:"title"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (Collection) IsHasMetafieldDefinitions()  {}
func (Collection) IsHasMetafields()            {}
func (Collection) IsHasPublishedTranslations() {}
func (Collection) IsNode()                     {}
func (Collection) IsPublishable()              {}

// Return type for `collectionAddProducts` mutation.
type CollectionAddProductsPayload struct {
	// The updated collection.
	Collection *Collection `json:"collection,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Collections.
type CollectionConnection struct {
	// A list of edges.
	Edges []CollectionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `collectionCreate` mutation.
type CollectionCreatePayload struct {
	// The collection that has been created.
	Collection *Collection `json:"collection,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the collection to delete.
type CollectionDeleteInput struct {
	// The ID of the collection to be deleted.
	ID string `json:"id"`
}

// Return type for `collectionDelete` mutation.
type CollectionDeletePayload struct {
	// The ID of the collection that was deleted.
	DeletedCollectionID *string `json:"deletedCollectionId,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Collection and a cursor during pagination.
type CollectionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CollectionEdge.
	Node *Collection `json:"node,omitempty"`
}

// Specifies the input fields required to create a collection.
type CollectionInput struct {
	// The description of the collection, in HTML format.
	DescriptionHTML *string `json:"descriptionHtml,omitempty"`
	// A unique human-friendly string for the collection. Automatically generated from the collection's title.
	//
	Handle *string `json:"handle,omitempty"`
	// Specifies the collection to update or create a new collection if absent.
	ID *string `json:"id,omitempty"`
	// The image associated with the collection.
	Image *ImageInput `json:"image,omitempty"`
	// Initial list of collection products. Only valid with `productCreate` and without rules.
	Products []string `json:"products,omitempty"`
	// Initial list of collection publications. Only valid with `productCreate`. This argument is deprecated: Use PublishablePublish instead.
	Publications []CollectionPublicationInput `json:"publications,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The rules used to assign products to the collection.
	//
	RuleSet *CollectionRuleSetInput `json:"ruleSet,omitempty"`
	// The theme template used when viewing the collection in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
	// The order in which the collection's products are sorted.
	SortOrder *CollectionSortOrder `json:"sortOrder,omitempty"`
	// Required for creating a new collection.
	Title *string `json:"title,omitempty"`
	// The metafields to associate with this collection.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// SEO information for the collection.
	Seo *SEOInput `json:"seo,omitempty"`
	// Indicates whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	//
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty"`
}

// Represents the publications where a collection is published.
type CollectionPublication struct {
	// The channel where the collection will be published.
	Channel *Channel `json:"channel,omitempty"`
	// The collection to be published on the publication.
	Collection *Collection `json:"collection,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished"`
	// The publication where the collection will be published.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the publication was or is going to be published.
	PublishDate string `json:"publishDate"`
}

// An auto-generated type for paginating through multiple CollectionPublications.
type CollectionPublicationConnection struct {
	// A list of edges.
	Edges []CollectionPublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CollectionPublication and a cursor during pagination.
type CollectionPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CollectionPublicationEdge.
	Node *CollectionPublication `json:"node,omitempty"`
}

// Specifies the publications to which a collection will be published.
type CollectionPublicationInput struct {
	// The ID of the publication.
	PublicationID *string `json:"publicationId,omitempty"`
	// The ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *string `json:"channelId,omitempty"`
	// This argument is deprecated: Use publicationId instead.
	ChannelHandle *string `json:"channelHandle,omitempty"`
}

// Specifies a collection to publish and the sales channels to publish it to.
type CollectionPublishInput struct {
	// The collection to create or update publications for.
	ID string `json:"id"`
	// The channels where the collection will be published.
	CollectionPublications []CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionPublish` mutation.
type CollectionPublishPayload struct {
	// The published collection.
	Collection *Collection `json:"collection,omitempty"`
	// The channels where the collection has been published.
	CollectionPublications []CollectionPublication `json:"collectionPublications,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionRemoveProducts` mutation.
type CollectionRemoveProductsPayload struct {
	// The asynchronous job removing the products.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionReorderProducts` mutation.
type CollectionReorderProductsPayload struct {
	// The asynchronous job reordering the products.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents at rule that's used to assign products to a collection.
type CollectionRule struct {
	// The attribute that the rule focuses on (for example, `title` or `product_type`).
	Column CollectionRuleColumn `json:"column"`
	// The value that the operator is applied to (for example, `Hats`).
	Condition string `json:"condition"`
	// The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).
	//
	Relation CollectionRuleRelation `json:"relation"`
}

// Collections may use rules to automatically include the matching products. This defines restrictions for a type of rule.
type CollectionRuleConditions struct {
	// Allowed relations of the rule.
	AllowedRelations []CollectionRuleRelation `json:"allowedRelations,omitempty"`
	// Most commonly used relation for this rule.
	DefaultRelation CollectionRuleRelation `json:"defaultRelation"`
	// Type of the rule.
	RuleType CollectionRuleColumn `json:"ruleType"`
}

// Specifies a rule to associate with a collection.
type CollectionRuleInput struct {
	// The attribute that the rule focuses on (for example, `title` or `product_type`).
	Column CollectionRuleColumn `json:"column"`
	// The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).
	//
	Relation CollectionRuleRelation `json:"relation"`
	// The value that the operator is applied to (for example, `Hats`).
	Condition string `json:"condition"`
}

// The set of rules that are used to determine which products are included in the collection.
type CollectionRuleSet struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match one or more of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	//
	AppliedDisjunctively bool `json:"appliedDisjunctively"`
	// The rules used to assign products to the collection.
	Rules []CollectionRule `json:"rules,omitempty"`
}

// Specifies a rule set for the collection.
type CollectionRuleSetInput struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match one or more of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	//
	AppliedDisjunctively bool `json:"appliedDisjunctively"`
	// The rules used to assign products to the collection.
	Rules []CollectionRuleInput `json:"rules,omitempty"`
}

// Specifies the collection to unpublish and the sales channels to remove it from.
type CollectionUnpublishInput struct {
	// The collection to create or update publications for.
	ID string `json:"id"`
	// The channels where the collection is published.
	CollectionPublications []CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionUnpublish` mutation.
type CollectionUnpublishPayload struct {
	// The collection that has been unpublished.
	Collection *Collection `json:"collection,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionUpdate` mutation.
type CollectionUpdatePayload struct {
	// The updated collection.
	Collection *Collection `json:"collection,omitempty"`
	// The asynchronous job updating the products based on the new rule set.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Comment events are generated by staff members of a shop.
// They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
type CommentEvent struct {
	// The name of the app that created the event.
	AppTitle *string `json:"appTitle,omitempty"`
	// The attachments associated with the comment event.
	Attachments []CommentEventAttachment `json:"attachments,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser"`
	// The name of the user that authored the comment event.
	Author *StaffMember `json:"author,omitempty"`
	// Whether the comment event can be deleted. If true, then the comment event can be deleted.
	CanDelete bool `json:"canDelete"`
	// Whether the comment event can be edited. If true, then the comment event can be edited.
	CanEdit bool `json:"canEdit"`
	// The date and time when the event was created.
	CreatedAt string `json:"createdAt"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert"`
	// Whether the comment event has been edited. If true, then the comment event has been edited.
	Edited bool `json:"edited"`
	// The object reference associated with the comment event. For example, a product or discount).
	Embed CommentEventEmbed `json:"embed"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Human readable text that describes the event.
	Message string `json:"message"`
	// The raw body of the comment event.
	RawMessage string `json:"rawMessage"`
	// The parent subject to which the comment event belongs.
	Subject CommentEventSubject `json:"subject"`
}

func (CommentEvent) IsEvent() {}
func (CommentEvent) IsNode()  {}

// A file attachment associated to a comment event.
type CommentEventAttachment struct {
	// The file extension of the comment event attachment, indicating the file format.
	FileExtension *string `json:"fileExtension,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image attached to the comment event.
	Image *Image `json:"image,omitempty"`
	// The filename of the comment event attachment.
	Name string `json:"name"`
	// The size of the attachment.
	Size int `json:"size"`
	// The URL of the attachment.
	URL string `json:"url"`
}

// The context data that determines the pricing of a variant.
type ContextualPricingContext struct {
	// The country code used to fetch country-specific prices.
	Country *CountryCode `json:"country,omitempty"`
}

// The list of all the countries from the combined shipping zones for the shop.
type CountriesInShippingZones struct {
	// The list of all the countries from all the combined shipping zones.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether 'Rest of World' has been defined in any of the shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
}

// The country-specific harmonized system code and ISO country code for an inventory item.
type CountryHarmonizedSystemCode struct {
	// The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
	CountryCode CountryCode `json:"countryCode"`
	// The country-specific harmonized system code. These are usually longer than 6 digits.
	HarmonizedSystemCode string `json:"harmonizedSystemCode"`
}

// An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
type CountryHarmonizedSystemCodeConnection struct {
	// A list of edges.
	Edges []CountryHarmonizedSystemCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
type CountryHarmonizedSystemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CountryHarmonizedSystemCodeEdge.
	Node *CountryHarmonizedSystemCode `json:"node,omitempty"`
}

// The fields required to specify a harmonized system code.
type CountryHarmonizedSystemCodeInput struct {
	// Country specific harmonized system code.
	HarmonizedSystemCode string `json:"harmonizedSystemCode"`
	// The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
	CountryCode CountryCode `json:"countryCode"`
}

// Specifies the input fields required to create a media object.
type CreateMediaInput struct {
	// The original source of the media object. May be an external URL or signed upload URL.
	OriginalSource string `json:"originalSource"`
	// The alt text associated to the media.
	Alt *string `json:"alt,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
}

// Currency formats configured for the merchant. These formats are available to use within Liquid.
type CurrencyFormats struct {
	// Money without currency in HTML.
	MoneyFormat string `json:"moneyFormat"`
	// Money without currency in emails.
	MoneyInEmailsFormat string `json:"moneyInEmailsFormat"`
	// Money with currency in HTML.
	MoneyWithCurrencyFormat string `json:"moneyWithCurrencyFormat"`
	// Money with currency in emails.
	MoneyWithCurrencyInEmailsFormat string `json:"moneyWithCurrencyInEmailsFormat"`
}

// A setting for a presentment currency.
type CurrencySetting struct {
	// The currency's ISO code.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The full name of the currency.
	CurrencyName string `json:"currencyName"`
	// Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
	Enabled bool `json:"enabled"`
	// The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
	RateUpdatedAt *string `json:"rateUpdatedAt,omitempty"`
}

// An auto-generated type for paginating through multiple CurrencySettings.
type CurrencySettingConnection struct {
	// A list of edges.
	Edges []CurrencySettingEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CurrencySetting and a cursor during pagination.
type CurrencySettingEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CurrencySettingEdge.
	Node *CurrencySetting `json:"node,omitempty"`
}

// Represents information about a customer of the shop, such as the customer's contact details, their order
// history, and whether they've agreed to receive marketing material by email.
//
// **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type Customer struct {
	// Whether the customer has agreed to receive marketing material.
	AcceptsMarketing bool `json:"acceptsMarketing"`
	// The date and time when the customer consented or objected to receiving marketing material by email.
	//
	AcceptsMarketingUpdatedAt string `json:"acceptsMarketingUpdatedAt"`
	// A list of addresses associated with the customer.
	Addresses []MailingAddress `json:"addresses,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmount *null.String `json:"averageOrderAmount,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmountV2 *MoneyV2 `json:"averageOrderAmountV2,omitempty"`
	// Whether the merchant can delete the customer from their store.
	//
	// A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
	// order, they can't be deleted from a store.
	//
	CanDelete bool `json:"canDelete"`
	// The date and time when the customer was added to the store.
	CreatedAt string `json:"createdAt"`
	// The default address associated with the customer.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty"`
	// The full name of the customer, based on the values for first_name and last_name. If the first_name and
	// last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
	//
	DisplayName string `json:"displayName"`
	// The customer's email address.
	Email *string `json:"email,omitempty"`
	// A list of events associated with the customer.
	Events *EventConnection `json:"events,omitempty"`
	// The customer's first name.
	FirstName *string `json:"firstName,omitempty"`
	// Whether the customer has a note associated with them.
	HasNote bool `json:"hasNote"`
	// Whether the merchant has added timeline comments about the customer on the customer's page.
	//
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image associated with the customer.
	Image *Image `json:"image,omitempty"`
	// The customer's last name.
	LastName *string `json:"lastName,omitempty"`
	// The customer's last order.
	LastOrder *Order `json:"lastOrder,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The amount of time since the customer was first added to the store.
	//
	// Example: 'about 12 years'.
	//
	LifetimeDuration string `json:"lifetimeDuration"`
	// The customer's locale.
	Locale string `json:"locale"`
	// The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
	// customer gave when they consented to receive marketing material by email.
	//
	// If the customer does not accept email marketing, then this property is `null`.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// A unique identifier for the customer that's used with Multipass login.
	MultipassIdentifier *string `json:"multipassIdentifier,omitempty"`
	// A note about the customer.
	Note *string `json:"note,omitempty"`
	// A list of the customer's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The number of orders that the customer has made at the store in their lifetime.
	OrdersCount string `json:"ordersCount"`
	// A list of the customer's payment methods.
	PaymentMethods *CustomerPaymentMethodConnection `json:"paymentMethods,omitempty"`
	// The customer's phone number.
	Phone *string `json:"phone,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Possible subscriber states of a customer defined by their subscription contracts.
	ProductSubscriberStatus CustomerProductSubscriberStatus `json:"productSubscriberStatus"`
	// The current SMS marketing state for the customer's phone number.
	//
	// If the customer does not have a phone number, then this property is `null`.
	//
	SmsMarketingConsent *CustomerSmsMarketingConsentState `json:"smsMarketingConsent,omitempty"`
	// The state of the customer's account with the shop.
	State CustomerState `json:"state"`
	// A list of the customer's subscription contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
	// A comma separated list of tags that have been added to the customer.
	Tags []string `json:"tags,omitempty"`
	// Whether the customer is exempt from being charged taxes on their orders.
	TaxExempt bool `json:"taxExempt"`
	// The list of tax exemptions applied to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
	// The total amount that the customer has spent on orders in their lifetime.
	TotalSpent null.String `json:"totalSpent"`
	// The total amount that the customer has spent on orders in their lifetime.
	TotalSpentV2 *MoneyV2 `json:"totalSpentV2,omitempty"`
	// The URL to unsubscribe the customer from the mailing list.
	UnsubscribeURL string `json:"unsubscribeUrl"`
	// The date and time when the customer was last updated.
	UpdatedAt string `json:"updatedAt"`
	// Whether the email address is formatted correctly. This does not
	// guarantee that the email address actually exists.
	//
	ValidEmailAddress bool `json:"validEmailAddress"`
	// Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
	VerifiedEmail bool `json:"verifiedEmail"`
}

func (Customer) IsCommentEventEmbed()       {}
func (Customer) IsCommentEventSubject()     {}
func (Customer) IsHasEvents()               {}
func (Customer) IsHasMetafieldDefinitions() {}
func (Customer) IsHasMetafields()           {}
func (Customer) IsLegacyInteroperability()  {}
func (Customer) IsNode()                    {}

// Return type for `customerAddTaxExemptions` mutation.
type CustomerAddTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Customers.
type CustomerConnection struct {
	// A list of edges.
	Edges []CustomerEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerCreate` mutation.
type CustomerCreatePayload struct {
	// The created customer.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a card instrument for customer payment method.
type CustomerCreditCard struct {
	// The billing address of the card.
	BillingAddress *CustomerCreditCardBillingAddress `json:"billingAddress,omitempty"`
	// The brand of the card.
	Brand string `json:"brand"`
	// Whether the card is about to expire.
	ExpiresSoon bool `json:"expiresSoon"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear"`
	// The card's BIN number.
	FirstDigits *string `json:"firstDigits,omitempty"`
	// The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The last 4 digits of the card.
	LastDigits string `json:"lastDigits"`
	// The masked card number with only the last 4 digits displayed.
	MaskedNumber string `json:"maskedNumber"`
	// The name of the card holder.
	Name string `json:"name"`
	// The source of the card if coming from a wallet such as Apple Pay.
	Source *string `json:"source,omitempty"`
	// The last 4 digits of the Device Account Number.
	VirtualLastDigits *string `json:"virtualLastDigits,omitempty"`
}

func (CustomerCreditCard) IsCustomerPaymentInstrument() {}

// The billing address of a credit card payment instrument.
type CustomerCreditCardBillingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty"`
}

// Specifies the customer to delete.
type CustomerDeleteInput struct {
	// The ID of the customer to delete.
	ID string `json:"id"`
}

// Return type for `customerDelete` mutation.
type CustomerDeletePayload struct {
	// The ID of the deleted customer.
	DeletedCustomerID *string `json:"deletedCustomerId,omitempty"`
	// The shop of the deleted customer.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Customer and a cursor during pagination.
type CustomerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerEdge.
	Node *Customer `json:"node,omitempty"`
}

// Represents an email address.
type CustomerEmailAddress struct {
	// The customer's default email address.
	EmailAddress string `json:"emailAddress"`
	// Specifies if the customer has subscribed to email marketing.
	MarketingState CustomerEmailAddressMarketingState `json:"marketingState"`
	// The URL to unsubscribe a member from all mailing lists.
	MarketingUnsubscribeURL string `json:"marketingUnsubscribeUrl"`
	// Whether the customer has opted in to having their opened emails tracked.
	//
	OpenTrackingLevel CustomerEmailAddressOpenTrackingLevel `json:"openTrackingLevel"`
	// The URL that can be used to opt a customer in or out of email open tracking.
	//
	OpenTrackingURL string `json:"openTrackingUrl"`
}

// Return type for `customerGenerateAccountActivationUrl` mutation.
type CustomerGenerateAccountActivationURLPayload struct {
	// The generated account activation URL.
	AccountActivationURL *string `json:"accountActivationUrl,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Provides the fields and values to use when creating or updating a customer.
type CustomerInput struct {
	// Whether the customer has consented to receive marketing material via email.
	AcceptsMarketing *bool `json:"acceptsMarketing,omitempty"`
	// The date and time when the customer consented or objected to receiving marketing material by email.
	//
	AcceptsMarketingUpdatedAt *string `json:"acceptsMarketingUpdatedAt,omitempty"`
	// The addresses for a customer.
	Addresses []MailingAddressInput `json:"addresses,omitempty"`
	// The unique email address of the customer.
	Email *string `json:"email,omitempty"`
	// The customer's first name.
	FirstName *string `json:"firstName,omitempty"`
	// The ID of the customer to update.
	ID *string `json:"id,omitempty"`
	// The customer's last name.
	LastName *string `json:"lastName,omitempty"`
	// The customer's locale.
	Locale *string `json:"locale,omitempty"`
	// The marketing subscription opt-in level used when the customer consented to receiving marketing material by email.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty"`
	// Additional metafields to associate to the customer.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// A note about the customer.
	Note *string `json:"note,omitempty"`
	// The unique phone number for the customer.
	Phone *string `json:"phone,omitempty"`
	// The private metafields to associate with the customer.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
	//
	// Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// The marketing consent information when the customer consented to receiving marketing
	//         material by SMS. The `phone` field is required when creating a customer with SMS
	//         marketing consent information.
	SmsMarketingConsent *CustomerSmsMarketingConsentInput `json:"smsMarketingConsent,omitempty"`
	// Whether the customer is exempt from paying taxes on their order.
	TaxExempt *bool `json:"taxExempt,omitempty"`
	// The list of tax exemptions to apply to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
}

// Represents a customer's visiting activities on a shop's online store.
type CustomerJourney struct {
	// The position of the current order within the customer's order history.
	CustomerOrderIndex int `json:"customerOrderIndex"`
	// The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
	DaysToConversion int `json:"daysToConversion"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty"`
	// Events preceding a customer order, such as shop sessions.
	Moments []CustomerMoment `json:"moments,omitempty"`
}

// Represents a customer's visiting activities on a shop's online store.
type CustomerJourneySummary struct {
	// The position of the current order within the customer's order history. Test orders aren't included.
	CustomerOrderIndex *int `json:"customerOrderIndex,omitempty"`
	// The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
	DaysToConversion *int `json:"daysToConversion,omitempty"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty"`
	// The events preceding a customer's order, such as shop sessions.
	Moments *CustomerMomentConnection `json:"moments,omitempty"`
	// The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
	MomentsCount *int `json:"momentsCount,omitempty"`
	// Whether or not the attributed sessions for the order have been created yet.
	Ready bool `json:"ready"`
}

// An auto-generated type for paginating through multiple CustomerMoments.
type CustomerMomentConnection struct {
	// A list of edges.
	Edges []CustomerMomentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CustomerMoment and a cursor during pagination.
type CustomerMomentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerMomentEdge.
	Node CustomerMoment `json:"node"`
}

// The billing address of a payment instrument.
type CustomerPaymentInstrumentBillingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The name of the buyer of the address.
	Name *string `json:"name,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty"`
}

// A customer's payment method.
type CustomerPaymentMethod struct {
	// The customer to whom the payment method belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The ID of this payment method.
	ID string `json:"id"`
	// The instrument for this payment method.
	Instrument CustomerPaymentInstrument `json:"instrument"`
	// The time that the payment method was revoked.
	RevokedAt *string `json:"revokedAt,omitempty"`
	// The revocation reason for this payment method.
	RevokedReason *CustomerPaymentMethodRevocationReason `json:"revokedReason,omitempty"`
	// List Subscription Contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
}

func (CustomerPaymentMethod) IsNode() {}

// An auto-generated type for paginating through multiple CustomerPaymentMethods.
type CustomerPaymentMethodConnection struct {
	// A list of edges.
	Edges []CustomerPaymentMethodEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerPaymentMethodCreditCardCreate` mutation.
type CustomerPaymentMethodCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodCreditCardUpdate` mutation.
type CustomerPaymentMethodCreditCardUpdatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
type CustomerPaymentMethodEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerPaymentMethodEdge.
	Node *CustomerPaymentMethod `json:"node,omitempty"`
}

// Return type for `customerPaymentMethodGetUpdateUrl` mutation.
type CustomerPaymentMethodGetUpdateURLPayload struct {
	// The URL to redirect the customer to update the payment method.
	UpdatePaymentMethodURL *string `json:"updatePaymentMethodUrl,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodGetUpdateURLUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
type CustomerPaymentMethodGetUpdateURLUserError struct {
	// The error code.
	Code *CustomerPaymentMethodGetUpdateURLUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodGetUpdateURLUserError) IsDisplayableError() {}

// Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
type CustomerPaymentMethodPaypalBillingAgreementCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
type CustomerPaymentMethodPaypalBillingAgreementUpdatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodRemoteCreate` mutation.
type CustomerPaymentMethodRemoteCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodRemoteUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
type CustomerPaymentMethodRemoteCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Input for a remote gateway payment method, only one remote reference permitted.
type CustomerPaymentMethodRemoteInput struct {
	// Input containing the fields for a remote stripe payment method.
	//
	StripePaymentMethod *RemoteStripePaymentMethodInput `json:"stripePaymentMethod,omitempty"`
	// Input containing the fields for a remote authorize net customer profile.
	//
	AuthorizeNetCustomerPaymentProfile *RemoteAuthorizeNetCustomerPaymentProfileInput `json:"authorizeNetCustomerPaymentProfile,omitempty"`
}

// Represents an error in the input of a mutation.
type CustomerPaymentMethodRemoteUserError struct {
	// The error code.
	Code *CustomerPaymentMethodRemoteUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodRemoteUserError) IsDisplayableError() {}

// Return type for `customerPaymentMethodRevoke` mutation.
type CustomerPaymentMethodRevokePayload struct {
	// The ID of the revoked customer payment method.
	RevokedCustomerPaymentMethodID *string `json:"revokedCustomerPaymentMethodId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodSendUpdateEmail` mutation.
type CustomerPaymentMethodSendUpdateEmailPayload struct {
	// The customer to whom an update payment method email was sent.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error in the input of a mutation.
type CustomerPaymentMethodUserError struct {
	// The error code.
	Code *CustomerPaymentMethodUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodUserError) IsDisplayableError() {}

// Represents a PayPal instrument for customer payment method.
type CustomerPaypalBillingAgreement struct {
	// The billing address of this payment method.
	BillingAddress *CustomerPaymentInstrumentBillingAddress `json:"billingAddress,omitempty"`
	// Whether the PayPal billing agreement is inactive.
	Inactive bool `json:"inactive"`
	// Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The customers's PayPal account email address.
	PaypalAccountEmail *string `json:"paypalAccountEmail,omitempty"`
}

func (CustomerPaypalBillingAgreement) IsCustomerPaymentInstrument() {}

// A phone number.
type CustomerPhoneNumber struct {
	// Whether the customer has subscribed to SMS marketing material.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
	// A customer's phone number.
	PhoneNumber string `json:"phoneNumber"`
}

// Return type for `customerRemoveTaxExemptions` mutation.
type CustomerRemoveTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerReplaceTaxExemptions` mutation.
type CustomerReplaceTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a Shop Pay card instrument for customer payment method.
type CustomerShopPayAgreement struct {
	// Whether the card is about to expire.
	ExpiresSoon bool `json:"expiresSoon"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear"`
	// Whether the Shop Pay billing agreement is inactive.
	Inactive bool `json:"inactive"`
	// The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The last 4 digits of the card.
	LastDigits string `json:"lastDigits"`
	// The masked card number with only the last 4 digits displayed.
	MaskedNumber string `json:"maskedNumber"`
	// The name of the card holder.
	Name string `json:"name"`
}

func (CustomerShopPayAgreement) IsCustomerPaymentInstrument() {}

// An error that occurs during execution of an SMS marketing consent mutation.
type CustomerSmsMarketingConsentError struct {
	// The error code.
	Code *CustomerSmsMarketingConsentErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerSmsMarketingConsentError) IsDisplayableError() {}

// The marketing consent information when the customer consented to
//
//	receiving marketing material by SMS.
type CustomerSmsMarketingConsentInput struct {
	// The marketing subscription opt in level set when the customer consented to receive marketing information.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty"`
	// The current SMS marketing state for the customer.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
	// The date and time when the customer consented to receive marketing material by SMS.
	// If no date is provided, then the date and time when the consent information was sent is used.
	//
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty"`
}

// The record of when a customer consented to receive marketing material by SMS.
//
// The customer's consent state reflects the record with the most recent date when consent was updated.
type CustomerSmsMarketingConsentState struct {
	// The source from which the SMS marketing information for the customer was collected.
	ConsentCollectedFrom *CustomerConsentCollectedFrom `json:"consentCollectedFrom,omitempty"`
	// The date and time when the customer consented to receive marketing material by SMS.
	// If no date is provided, then the date and time when the consent information was sent is used.
	//
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty"`
	// The marketing subscription opt in level set when the customer consented to receive marketing information.
	//
	MarketingOptInLevel CustomerMarketingOptInLevel `json:"marketingOptInLevel"`
	// The current SMS marketing state for the customer.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
}

// The SMS marketing consent information to update for a given customer ID.
type CustomerSmsMarketingConsentUpdateInput struct {
	// The ID of the customer to update the SMS marketing consent information for. The customer must have a unique phone number associated to the record. If not, add the phone number using the `customerUpdate` mutation first.
	CustomerID string `json:"customerId"`
	// The marketing consent information when the customer consented to receiving marketing material by SMS.
	SmsMarketingConsent *CustomerSmsMarketingConsentInput `json:"smsMarketingConsent,omitempty"`
}

// Return type for `customerSmsMarketingConsentUpdate` mutation.
type CustomerSmsMarketingConsentUpdatePayload struct {
	// The updated customer.
	//
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerSmsMarketingConsentError `json:"userErrors,omitempty"`
}

// Return type for `customerUpdateDefaultAddress` mutation.
type CustomerUpdateDefaultAddressPayload struct {
	// The customer whose address was updated.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerUpdate` mutation.
type CustomerUpdatePayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
type CustomerVisit struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// URL of the first page the customer landed on for the session.
	LandingPage *string `json:"landingPage,omitempty"`
	// Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
	LandingPageHTML *string `json:"landingPageHtml,omitempty"`
	// Represent actions taken by an app, on behalf of a merchant,
	// to market Shopify resources such as products, collections, and discounts.
	//
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty"`
	// The date and time when the customer's session occurred.
	OccurredAt string `json:"occurredAt"`
	// Marketing referral code from the link that the customer clicked to visit the store.
	// Supports the following URL attributes: _ref_, _source_, or _r_.
	// For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
	//
	ReferralCode *string `json:"referralCode,omitempty"`
	// Referral information with URLs linked in HTML.
	ReferralInfoHTML string `json:"referralInfoHtml"`
	// Webpage where the customer clicked a link that sent them to the online store.
	// For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
	//
	ReferrerURL *string `json:"referrerUrl,omitempty"`
	// Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
	// a website domain, QR code, or unknown.
	//
	Source string `json:"source"`
	// Describes the source explicitly for first or last session.
	SourceDescription *string `json:"sourceDescription,omitempty"`
	// Type of marketing tactic.
	SourceType *MarketingTactic `json:"sourceType,omitempty"`
	// A set of UTM parameters gathered from the URL parameters of the referrer.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty"`
}

func (CustomerVisit) IsCustomerMoment() {}
func (CustomerVisit) IsNode()           {}

// A filter with a date value that's been added to a segment query.
type DateSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (DateSegmentFilter) IsSegmentFilter() {}

// Deletion events chronicle the destruction of resources (e.g. products and collections).
// Once deleted, the deletion event is the only trace of the original's existence,
// as the resource itself has been removed and can no longer be accessed.
type DeletionEvent struct {
	// The date and time when the deletion event for the related resource was generated.
	OccurredAt string `json:"occurredAt"`
	// The id of the resource that was deleted.
	SubjectID string `json:"subjectId"`
	// The type of resource that was deleted.
	SubjectType DeletionEventSubjectType `json:"subjectType"`
}

// An auto-generated type for paginating through multiple DeletionEvents.
type DeletionEventConnection struct {
	// A list of edges.
	Edges []DeletionEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeletionEvent and a cursor during pagination.
type DeletionEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeletionEventEdge.
	Node *DeletionEvent `json:"node,omitempty"`
}

// A shipping service and a list of countries that the service is available for.
type DeliveryAvailableService struct {
	// The countries the service provider ships to.
	Countries *DeliveryCountryCodesOrRestOfWorld `json:"countries,omitempty"`
	// The name of the service.
	Name string `json:"name"`
}

// A shipping service provider or a carrier account.
type DeliveryCarrierService struct {
	// The list of services offered for given destinations.
	AvailableServicesForCountries []DeliveryAvailableService `json:"availableServicesForCountries,omitempty"`
	// The properly formatted name of the shipping service provider, ready to display.
	FormattedName *string `json:"formattedName,omitempty"`
	// The logo of the service provider.
	Icon *Image `json:"icon,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The name of the shipping service provider.
	Name *string `json:"name,omitempty"`
}

func (DeliveryCarrierService) IsNode() {}

// A carrier service and the associated list of shop locations.
type DeliveryCarrierServiceAndLocations struct {
	// The carrier service.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The list of locations that support this carrier service.
	Locations []Location `json:"locations,omitempty"`
}

// A condition that must pass for a delivery method definition to be applied to an order.
type DeliveryCondition struct {
	// The value (weight or price) that the condition field is compared to.
	ConditionCriteria DeliveryConditionCriteria `json:"conditionCriteria"`
	// The field to compare the criterion value against, using the operator.
	Field DeliveryConditionField `json:"field"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The operator to compare the field and criterion value.
	Operator DeliveryConditionOperator `json:"operator"`
}

func (DeliveryCondition) IsNode() {}

// A country that is used to define a shipping zone.
type DeliveryCountry struct {
	// A two-letter country code in ISO 3166-1 alpha-2 standard.
	// It also includes a flag indicating whether the country should be
	// a part of the 'Rest Of World' shipping zone.
	//
	Code *DeliveryCountryCodeOrRestOfWorld `json:"code,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The full name of the country.
	Name string `json:"name"`
	// The list of regions associated with this country.
	Provinces []DeliveryProvince `json:"provinces,omitempty"`
	// The translated name of the country. The translation returned is based on the system's locale.
	TranslatedName string `json:"translatedName"`
}

func (DeliveryCountry) IsNode() {}

// The country details and the associated shipping zone.
type DeliveryCountryAndZone struct {
	// The country details.
	Country *DeliveryCountry `json:"country,omitempty"`
	// The name of the shipping zone.
	Zone string `json:"zone"`
}

// The country code and whether the country is a part of the 'Rest Of World' shipping zone.
type DeliveryCountryCodeOrRestOfWorld struct {
	// The country code in the ISO 3166-1 alpha-2 format.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// Whether the country is a part of the 'Rest of World' shipping zone.
	RestOfWorld bool `json:"restOfWorld"`
}

// The list of country codes and information whether the countries
// are a part of the 'Rest Of World' shipping zone.
type DeliveryCountryCodesOrRestOfWorld struct {
	// List of applicable country codes in the ISO 3166-1 alpha-2 format.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the countries are a part of the 'Rest of World' shipping zone.
	RestOfWorld bool `json:"restOfWorld"`
}

// Input fields to specify a country.
type DeliveryCountryInput struct {
	// The country code of the country in the ISO 3166-1 alpha-2 format.
	Code *CountryCode `json:"code,omitempty"`
	// Whether the country is a part of the 'Rest of World' shipping zone.
	RestOfWorld *bool `json:"restOfWorld,omitempty"`
	// The regions associated with this country.
	Provinces []DeliveryProvinceInput `json:"provinces,omitempty"`
	// Associate all available provinces with this country.
	IncludeAllProvinces *bool `json:"includeAllProvinces,omitempty"`
}

// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
type DeliveryLegacyModeBlocked struct {
	// Whether the shop can convert to full multi-location delivery profiles mode.
	Blocked bool `json:"blocked"`
	// The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
	Reasons []DeliveryLegacyModeBlockedReason `json:"reasons,omitempty"`
}

// A location group is a collection of active locations. They share zones and delivery methods across delivery
// profiles.
type DeliveryLocationGroup struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// A list of active locations that are part of this location group.
	Locations *LocationConnection `json:"locations,omitempty"`
}

func (DeliveryLocationGroup) IsNode() {}

// Links a location group with a zone and the associated method definitions.
type DeliveryLocationGroupZone struct {
	// The number of method definitions for the zone.
	MethodDefinitionCounts *DeliveryMethodDefinitionCounts `json:"methodDefinitionCounts,omitempty"`
	// The method definitions associated to a zone and location group.
	MethodDefinitions *DeliveryMethodDefinitionConnection `json:"methodDefinitions,omitempty"`
	// The zone associated to a location group.
	Zone *DeliveryZone `json:"zone,omitempty"`
}

// An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
type DeliveryLocationGroupZoneConnection struct {
	// A list of edges.
	Edges []DeliveryLocationGroupZoneEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
type DeliveryLocationGroupZoneEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryLocationGroupZoneEdge.
	Node *DeliveryLocationGroupZone `json:"node,omitempty"`
}

// Input fields for a delivery zone associated to a location group and profile.
type DeliveryLocationGroupZoneInput struct {
	// A globally-unique identifier of the zone.
	ID *string `json:"id,omitempty"`
	// The name of the zone.
	Name *string `json:"name,omitempty"`
	// Countries to associate with the zone.
	Countries []DeliveryCountryInput `json:"countries,omitempty"`
	// Method definitions to create.
	MethodDefinitionsToCreate []DeliveryMethodDefinitionInput `json:"methodDefinitionsToCreate,omitempty"`
	// Method definitions to update.
	MethodDefinitionsToUpdate []DeliveryMethodDefinitionInput `json:"methodDefinitionsToUpdate,omitempty"`
}

// The delivery method used by a fulfillment order.
type DeliveryMethod struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The maximum date and time by which the delivery is expected to be completed.
	MaxDeliveryDateTime *string `json:"maxDeliveryDateTime,omitempty"`
	// The type of the delivery method.
	MethodType DeliveryMethodType `json:"methodType"`
	// The minimum date and time by which the delivery is expected to be completed.
	MinDeliveryDateTime *string `json:"minDeliveryDateTime,omitempty"`
}

func (DeliveryMethod) IsNode() {}

// A method definition contains the delivery rate and the conditions that must be met for the method to be
// applied.
type DeliveryMethodDefinition struct {
	// Whether this method definition is active.
	Active bool `json:"active"`
	// The description of the method definition.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The method conditions that must pass for this method definition to be applied to an order.
	MethodConditions []DeliveryCondition `json:"methodConditions,omitempty"`
	// The name of the method definition.
	Name string `json:"name"`
	// The provided rate for this method definition, from a rate definition or participant.
	RateProvider DeliveryRateProvider `json:"rateProvider"`
}

func (DeliveryMethodDefinition) IsNode() {}

// An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
type DeliveryMethodDefinitionConnection struct {
	// A list of edges.
	Edges []DeliveryMethodDefinitionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The number of method definitions for a zone, separated into merchant-owned and participant definitions.
type DeliveryMethodDefinitionCounts struct {
	// The number of participant method definitions for the specified zone.
	ParticipantDefinitionsCount int `json:"participantDefinitionsCount"`
	// The number of merchant-defined method definitions for the specified zone.
	RateDefinitionsCount int `json:"rateDefinitionsCount"`
}

// An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
type DeliveryMethodDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryMethodDefinitionEdge.
	Node *DeliveryMethodDefinition `json:"node,omitempty"`
}

// Input fields for a method definition.
type DeliveryMethodDefinitionInput struct {
	// A globally-unique identifier of the method definition. Use only when updating a method definiton.
	ID *string `json:"id,omitempty"`
	// The name of the method definition.
	Name *string `json:"name,omitempty"`
	// The description of the method definition.
	Description *string `json:"description,omitempty"`
	// Whether or not to use this method definition during rate calculation.
	Active *bool `json:"active,omitempty"`
	// A rate definition to apply to the method definition.
	RateDefinition *DeliveryRateDefinitionInput `json:"rateDefinition,omitempty"`
	// A participant to apply to the method definition.
	Participant *DeliveryParticipantInput `json:"participant,omitempty"`
	// Weight conditions on the method definition.
	WeightConditionsToCreate []DeliveryWeightConditionInput `json:"weightConditionsToCreate,omitempty"`
	// Price conditions on the method definition.
	PriceConditionsToCreate []DeliveryPriceConditionInput `json:"priceConditionsToCreate,omitempty"`
	// Conditions on the method definition to update.
	ConditionsToUpdate []DeliveryUpdateConditionInput `json:"conditionsToUpdate,omitempty"`
}

// A participant defines carrier-calculated rates for shipping services
// with a possible merchant-defined fixed fee or a percentage-of-rate fee.
type DeliveryParticipant struct {
	// Whether to display new shipping services automatically to the customer when the service becomes available.
	//
	AdaptToNewServicesFlag bool `json:"adaptToNewServicesFlag"`
	// The carrier used for this participant.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The merchant-defined fixed fee for this participant.
	FixedFee *MoneyV2 `json:"fixedFee,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The carrier-specific services offered by the participant, and whether each service is active.
	ParticipantServices []DeliveryParticipantService `json:"participantServices,omitempty"`
	// The merchant-defined percentage-of-rate fee for this participant.
	PercentageOfRateFee float64 `json:"percentageOfRateFee"`
}

func (DeliveryParticipant) IsNode()                 {}
func (DeliveryParticipant) IsDeliveryRateProvider() {}

// The input fields for a participant.
type DeliveryParticipantInput struct {
	// A globally-unique identifier of the participant.
	ID *string `json:"id,omitempty"`
	// The `gid` of the `CarrierService` for this participant.
	CarrierServiceID *string `json:"carrierServiceId,omitempty"`
	// The fixed feed that is defined by the merchant for this participant.
	FixedFee *MoneyInput `json:"fixedFee,omitempty"`
	// The merchant-defined percentage-of-rate fee for this participant.
	PercentageOfRateFee *float64 `json:"percentageOfRateFee,omitempty"`
	// The list of shipping services offered by the participant.
	ParticipantServices []DeliveryParticipantServiceInput `json:"participantServices,omitempty"`
	// Whether to automatically display new shipping services to the customer when a service becomes available.
	//
	AdaptToNewServices *bool `json:"adaptToNewServices,omitempty"`
}

// A mail service provided by the participant.
type DeliveryParticipantService struct {
	// Whether the service is active.
	Active bool `json:"active"`
	// The name of the service.
	Name string `json:"name"`
}

// The input fields for a shipping service provided by a participant.
type DeliveryParticipantServiceInput struct {
	// The name of the service.
	Name string `json:"name"`
	// Whether the service is active.
	Active bool `json:"active"`
}

// The input fields for a price-based condition of a delivery method definition.
type DeliveryPriceConditionInput struct {
	// The monetary value to compare the price of an order to.
	Criteria *MoneyInput `json:"criteria,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// How many product variants are in a profile. This count is capped at 500.
type DeliveryProductVariantsCount struct {
	// Whether the count has reached the cap of 500.
	Capped bool `json:"capped"`
	// The product variant count.
	Count int `json:"count"`
}

// A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
type DeliveryProfile struct {
	// The number of active shipping rates for the profile.
	ActiveMethodDefinitionsCount int `json:"activeMethodDefinitionsCount"`
	// Whether this is the default profile.
	Default bool `json:"default"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Whether this shop has enabled legacy compatibility mode for delivery profiles.
	LegacyMode bool `json:"legacyMode"`
	// The number of locations without rates defined.
	LocationsWithoutRatesCount int `json:"locationsWithoutRatesCount"`
	// The name of the delivery profile.
	Name string `json:"name"`
	// The number of active origin locations for the profile.
	OriginLocationCount int `json:"originLocationCount"`
	// The number of product variants for this profile. The count for the default profile is not supported and will return -1.
	ProductVariantsCount int `json:"productVariantsCount"`
	// How many product variants are in this profile.
	ProductVariantsCountV2 *DeliveryProductVariantsCount `json:"productVariantsCountV2,omitempty"`
	// The products and variants associated with this profile.
	ProfileItems *DeliveryProfileItemConnection `json:"profileItems,omitempty"`
	// The location groups and associated zones using this profile.
	ProfileLocationGroups []DeliveryProfileLocationGroup `json:"profileLocationGroups,omitempty"`
	// Selling plan groups associated with the specified delivery profile.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// List of locations that have not been assigned to a location group for this profile.
	UnassignedLocations []Location `json:"unassignedLocations,omitempty"`
	// The number of countries with active rates to deliver to.
	ZoneCountryCount int `json:"zoneCountryCount"`
}

func (DeliveryProfile) IsNode() {}

// An auto-generated type for paginating through multiple DeliveryProfiles.
type DeliveryProfileConnection struct {
	// A list of edges.
	Edges []DeliveryProfileEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
type DeliveryProfileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryProfileEdge.
	Node *DeliveryProfile `json:"node,omitempty"`
}

// The input fields for a delivery profile.
type DeliveryProfileInput struct {
	// The name of the delivery profile.
	Name *string `json:"name,omitempty"`
	// The list of location groups associated with the delivery profile.
	ProfileLocationGroups []DeliveryProfileLocationGroupInput `json:"profileLocationGroups,omitempty"`
	// The list of location groups to be created in the delivery profile.
	LocationGroupsToCreate []DeliveryProfileLocationGroupInput `json:"locationGroupsToCreate,omitempty"`
	// The list of location groups to be updated in the delivery profile.
	LocationGroupsToUpdate []DeliveryProfileLocationGroupInput `json:"locationGroupsToUpdate,omitempty"`
	// The list of location groups to be deleted from the delivery profile.
	LocationGroupsToDelete []string `json:"locationGroupsToDelete,omitempty"`
	// The list of product variant IDs to be associated with the delivery profile.
	VariantsToAssociate []string `json:"variantsToAssociate,omitempty"`
	// The list of product variant IDs to be dissociated from the delivery profile.
	// The dissociated product variants are moved back to the default delivery profile.
	//
	VariantsToDissociate []string `json:"variantsToDissociate,omitempty"`
	// The list of zone IDs to delete.
	ZonesToDelete []string `json:"zonesToDelete,omitempty"`
	// The list of method definition IDs to delete.
	MethodDefinitionsToDelete []string `json:"methodDefinitionsToDelete,omitempty"`
	// The list of condition IDs to delete.
	ConditionsToDelete []string `json:"conditionsToDelete,omitempty"`
	// The list of selling plan groups to be associated with the delivery profile.
	SellingPlanGroupsToAssociate []string `json:"sellingPlanGroupsToAssociate,omitempty"`
	// The list of selling plan groups to be dissociated with the delivery profile.
	SellingPlanGroupsToDissociate []string `json:"sellingPlanGroupsToDissociate,omitempty"`
}

// A product and the subset of associated variants that are part of this delivery profile.
type DeliveryProfileItem struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// A product associated with this profile.
	Product *Product `json:"product,omitempty"`
	// The product variants associated with this delivery profile.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
}

func (DeliveryProfileItem) IsNode() {}

// An auto-generated type for paginating through multiple DeliveryProfileItems.
type DeliveryProfileItemConnection struct {
	// A list of edges.
	Edges []DeliveryProfileItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
type DeliveryProfileItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryProfileItemEdge.
	Node *DeliveryProfileItem `json:"node,omitempty"`
}

// Links a location group with zones. Both are associated to a delivery profile.
type DeliveryProfileLocationGroup struct {
	// The countries already selected in any zone for the specified location group.
	CountriesInAnyZone []DeliveryCountryAndZone `json:"countriesInAnyZone,omitempty"`
	// The collection of locations that make up the specified location group.
	LocationGroup *DeliveryLocationGroup `json:"locationGroup,omitempty"`
	// The applicable zones associated to the specified location group.
	LocationGroupZones *DeliveryLocationGroupZoneConnection `json:"locationGroupZones,omitempty"`
}

// The input fields for a location group associated to a delivery profile.
type DeliveryProfileLocationGroupInput struct {
	// The globally-unique identifier of the delivery profile location group.
	ID *string `json:"id,omitempty"`
	// The list of location IDs to be moved to this location group.
	Locations []string `json:"locations,omitempty"`
	// The list of location group zones to create.
	ZonesToCreate []DeliveryLocationGroupZoneInput `json:"zonesToCreate,omitempty"`
	// The list of location group zones to update.
	ZonesToUpdate []DeliveryLocationGroupZoneInput `json:"zonesToUpdate,omitempty"`
}

// A region that is used to define a shipping zone.
type DeliveryProvince struct {
	// The code of the region.
	Code string `json:"code"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The full name of the region.
	Name string `json:"name"`
	// The translated name of the region. The translation returned is based on the system's locale.
	TranslatedName string `json:"translatedName"`
}

func (DeliveryProvince) IsNode() {}

// The input fields to specify a region.
type DeliveryProvinceInput struct {
	// The code of the region.
	Code string `json:"code"`
}

// The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
type DeliveryRateDefinition struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The price of this rate.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (DeliveryRateDefinition) IsNode()                 {}
func (DeliveryRateDefinition) IsDeliveryRateProvider() {}

// Input fields for a rate definition.
type DeliveryRateDefinitionInput struct {
	// A globally-unique identifier of the rate definition.
	ID *string `json:"id,omitempty"`
	// The price of the rate definition.
	Price *MoneyInput `json:"price,omitempty"`
}

// The `DeliverySetting` object enables you to manage shop-wide shipping settings.
// You can enable legacy compatibility mode for the multi-location delivery profiles feature
// if the legacy mode isn't blocked.
type DeliverySetting struct {
	// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
	LegacyModeBlocked *DeliveryLegacyModeBlocked `json:"legacyModeBlocked,omitempty"`
	// Enables legacy compatability mode for the multi-location delivery profiles feature.
	LegacyModeProfiles bool `json:"legacyModeProfiles"`
}

// Input fields for shop-level delivery settings.
type DeliverySettingInput struct {
	// Enables legacy compatability mode for the multi-location delivery profiles feature.
	LegacyModeProfiles *bool `json:"legacyModeProfiles,omitempty"`
}

// Return type for `deliverySettingUpdate` mutation.
type DeliverySettingUpdatePayload struct {
	// The updated delivery shop level settings.
	Setting *DeliverySetting `json:"setting,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryShippingOriginAssign` mutation.
type DeliveryShippingOriginAssignPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for updating the condition of a delivery method definition.
type DeliveryUpdateConditionInput struct {
	// A globally-unique identifier of the condition.
	ID string `json:"id"`
	// The value that will be used in comparison.
	Criteria *float64 `json:"criteria,omitempty"`
	// The unit associated with the value that will be used in comparison.
	CriteriaUnit *string `json:"criteriaUnit,omitempty"`
	// The property of an order that will be used in comparison.
	Field *DeliveryConditionField `json:"field,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// The input fields for a weight-based condition of a delivery method definition.
type DeliveryWeightConditionInput struct {
	// The weight value to compare the weight of an order to.
	Criteria *WeightInput `json:"criteria,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
type DeliveryZone struct {
	// The list of countries within the zone.
	Countries []DeliveryCountry `json:"countries,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The name of the zone.
	Name string `json:"name"`
}

func (DeliveryZone) IsNode() {}

// An amount discounting the line that has been allocated by an associated discount application.
type DiscountAllocation struct {
	// Money amount allocated by the discount application.
	AllocatedAmount *MoneyV2 `json:"allocatedAmount,omitempty"`
	// Money amount allocated by the discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount of which this allocated amount originated from.
	DiscountApplication DiscountApplication `json:"discountApplication"`
}

// The fixed amount value of a discount.
type DiscountAmount struct {
	// The value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem bool `json:"appliesOnEachItem"`
}

func (DiscountAmount) IsDiscountCustomerGetsValue() {}

// Specifies the value of the discount and how it is applied.
type DiscountAmountInput struct {
	// The value of the discount.
	Amount *null.String `json:"amount,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountApplications.
type DiscountApplicationConnection struct {
	// A list of edges.
	Edges []DiscountApplicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountApplication and a cursor during pagination.
type DiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountApplicationEdge.
	Node DiscountApplication `json:"node"`
}

// Return type for `discountAutomaticActivate` mutation.
type DiscountAutomaticActivatePayload struct {
	// The activated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic basic discount.
type DiscountAutomaticBasic struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount"`
}

func (DiscountAutomaticBasic) IsDiscountAutomatic() {}

// Return type for `discountAutomaticBasicCreate` mutation.
type DiscountAutomaticBasicCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update automatic basic discount.
type DiscountAutomaticBasicInput struct {
	// The title of the discount.
	Title *string `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
}

// Return type for `discountAutomaticBasicUpdate` mutation.
type DiscountAutomaticBasicUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticBulkDelete` mutation.
type DiscountAutomaticBulkDeletePayload struct {
	// The asynchronous job removing the automatic discounts.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic BXGY discount.
type DiscountAutomaticBxgy struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A legacy unique identifier for the discount.
	ID string `json:"id"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
}

func (DiscountAutomaticBxgy) IsDiscountAutomatic() {}
func (DiscountAutomaticBxgy) IsHasEvents()         {}
func (DiscountAutomaticBxgy) IsNode()              {}

// Return type for `discountAutomaticBxgyCreate` mutation.
type DiscountAutomaticBxgyCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update automatic bogo discount.
type DiscountAutomaticBxgyInput struct {
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *string `json:"usesPerOrderLimit,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
}

// Return type for `discountAutomaticBxgyUpdate` mutation.
type DiscountAutomaticBxgyUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountAutomatics.
type DiscountAutomaticConnection struct {
	// A list of edges.
	Edges []DiscountAutomaticEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `discountAutomaticDeactivate` mutation.
type DiscountAutomaticDeactivatePayload struct {
	// The deactivated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticDelete` mutation.
type DiscountAutomaticDeletePayload struct {
	// The deleted automatic discount ID.
	DeletedAutomaticDiscountID *string `json:"deletedAutomaticDiscountId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
type DiscountAutomaticEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountAutomaticEdge.
	Node DiscountAutomatic `json:"node"`
}

// An automatic discount wrapper node.
type DiscountAutomaticNode struct {
	// An automatic discount.
	AutomaticDiscount DiscountAutomatic `json:"automaticDiscount"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
}

func (DiscountAutomaticNode) IsHasEvents() {}
func (DiscountAutomaticNode) IsNode()      {}

// An auto-generated type for paginating through multiple DiscountAutomaticNodes.
type DiscountAutomaticNodeConnection struct {
	// A list of edges.
	Edges []DiscountAutomaticNodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
type DiscountAutomaticNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountAutomaticNodeEdge.
	Node *DiscountAutomaticNode `json:"node,omitempty"`
}

// Return type for `discountCodeActivate` mutation.
type DiscountCodeActivatePayload struct {
	// The activated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
type DiscountCodeApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The string identifying the discount code that was used at the time of application.
	Code string `json:"code"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (DiscountCodeApplication) IsDiscountApplication() {}

// A basic code discount.
type DiscountCodeBasic struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
}

func (DiscountCodeBasic) IsDiscountCode() {}

// Return type for `discountCodeBasicCreate` mutation.
type DiscountCodeBasicCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update code basic discount.
type DiscountCodeBasicInput struct {
	// The title of the discount.
	Title *string `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
}

// Return type for `discountCodeBasicUpdate` mutation.
type DiscountCodeBasicUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkActivate` mutation.
type DiscountCodeBulkActivatePayload struct {
	// The asynchronous job that activates the code discounts.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDeactivate` mutation.
type DiscountCodeBulkDeactivatePayload struct {
	// The asynchronous job that deactivates the code discounts.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDelete` mutation.
type DiscountCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the code discounts.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A BXGY code discount.
type DiscountCodeBxgy struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
}

func (DiscountCodeBxgy) IsDiscountCode() {}

// Return type for `discountCodeBxgyCreate` mutation.
type DiscountCodeBxgyCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update a BXGY code discount.
type DiscountCodeBxgyInput struct {
	// The title of the discount.
	Title *string `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
}

// Return type for `discountCodeBxgyUpdate` mutation.
type DiscountCodeBxgyUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDeactivate` mutation.
type DiscountCodeDeactivatePayload struct {
	// The deactivated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDelete` mutation.
type DiscountCodeDeletePayload struct {
	// The deleted code discount ID.
	DeletedCodeDiscountID *string `json:"deletedCodeDiscountId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A free shipping code discount.
type DiscountCodeFreeShipping struct {
	// Whether the discount applies on regular one-time-purchase shipping lines.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase"`
	// Whether the discount applies on subscription shipping lines.
	AppliesOnSubscription bool `json:"appliesOnSubscription"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// A shipping destination that qualifies for the discount.
	DestinationSelection DiscountShippingDestinationSelection `json:"destinationSelection"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// The maximum shipping price amount accepted to qualify for the discount.
	MaximumShippingPrice *MoneyV2 `json:"maximumShippingPrice,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
}

func (DiscountCodeFreeShipping) IsDiscountCode() {}

// Return type for `discountCodeFreeShippingCreate` mutation.
type DiscountCodeFreeShippingCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update free shipping code discount.
type DiscountCodeFreeShippingInput struct {
	// The title of the discount.
	Title *string `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// A list of destinations where the discount will apply.
	Destination *DiscountShippingDestinationSelectionInput `json:"destination,omitempty"`
	// The maximum shipping price that qualifies for the discount.
	MaximumShippingPrice *null.String `json:"maximumShippingPrice,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty"`
}

// Return type for `discountCodeFreeShippingUpdate` mutation.
type DiscountCodeFreeShippingUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A code discount wrapper node.
type DiscountCodeNode struct {
	// A code discount.
	CodeDiscount DiscountCode `json:"codeDiscount"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
}

func (DiscountCodeNode) IsHasEvents() {}
func (DiscountCodeNode) IsNode()      {}

// An auto-generated type for paginating through multiple DiscountCodeNodes.
type DiscountCodeNodeConnection struct {
	// A list of edges.
	Edges []DiscountCodeNodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
type DiscountCodeNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountCodeNodeEdge.
	Node *DiscountCodeNode `json:"node,omitempty"`
}

// Return type for `discountCodeRedeemCodeBulkDelete` mutation.
type DiscountCodeRedeemCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the discount redeem codes.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A list of collections that the discount can have as a prerequisite or entitlement.
type DiscountCollections struct {
	// A list of collections that the discount can have as a prerequisite or entitlement.
	Collections *CollectionConnection `json:"collections,omitempty"`
}

func (DiscountCollections) IsDiscountItems() {}

// Specifies the collections attached to a discount.
type DiscountCollectionsInput struct {
	// Specifies list of collection ids to add.
	Add []string `json:"add,omitempty"`
	// Specifies list of collection ids to remove.
	Remove []string `json:"remove,omitempty"`
}

// The shipping destination where the discount applies.
type DiscountCountries struct {
	// The codes for the countries where the discount can be used.
	Countries []CountryCode `json:"countries,omitempty"`
	// Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
}

func (DiscountCountries) IsDiscountShippingDestinationSelection() {}

// Specifies a list of countries to add or remove from the free shipping discount.
type DiscountCountriesInput struct {
	// The country codes to add to the list of countries where the discount applies.
	Add []CountryCode `json:"add,omitempty"`
	// The country codes to remove from the list of countries where the discount applies.
	Remove []CountryCode `json:"remove,omitempty"`
	// Whether the discount code is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty"`
}

// Whether the discount applies to all countries.
type DiscountCountryAll struct {
	// Always true when resolved to this type.
	AllCountries bool `json:"allCountries"`
}

func (DiscountCountryAll) IsDiscountShippingDestinationSelection() {}

// Whether the discount applies to all customers.
type DiscountCustomerAll struct {
	// Always true when resolved to this type.
	AllCustomers bool `json:"allCustomers"`
}

func (DiscountCustomerAll) IsDiscountCustomerSelection() {}

// The prerequisite items and prerequisite value.
type DiscountCustomerBuys struct {
	// The items required for the discount to be applicable.
	Items DiscountItems `json:"items"`
	// The prerequisite value.
	Value DiscountCustomerBuysValue `json:"value"`
}

// Specifies the prerequisite items and prerequisite quantity.
type DiscountCustomerBuysInput struct {
	// The quantity of prerequisite items.
	Value *DiscountCustomerBuysValueInput `json:"value,omitempty"`
	// The IDs of items that the customer buys. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty"`
}

// Specifies the prerequisite quantity for the discount.
type DiscountCustomerBuysValueInput struct {
	// The quantity of prerequisite items.
	Quantity *string `json:"quantity,omitempty"`
	// The prerequisite purchase amount required for the discount to be applicable.
	Amount *null.String `json:"amount,omitempty"`
}

// The qualifying items in an order, the quantity of each one, and the total value of the discount.
type DiscountCustomerGets struct {
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription bool `json:"appliesOnSubscription"`
	// The items to which the discount applies.
	Items DiscountItems `json:"items"`
	// Entitled quantity and the discount value.
	Value DiscountCustomerGetsValue `json:"value"`
}

// Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
type DiscountCustomerGetsInput struct {
	// The quantity of items discounted and the discount value.
	Value *DiscountCustomerGetsValueInput `json:"value,omitempty"`
	// The IDs of the items that the customer gets. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty"`
}

// Specifies the quantity of items discounted and the discount value.
type DiscountCustomerGetsValueInput struct {
	// The quantity of the items that are discounted and the discount value.
	DiscountOnQuantity *DiscountOnQuantityInput `json:"discountOnQuantity,omitempty"`
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty"`
	// The value of the discount.
	DiscountAmount *DiscountAmountInput `json:"discountAmount,omitempty"`
}

// A list of customer segments that contain the customers that the discount applies to.
type DiscountCustomerSegments struct {
	// A list of customer segments that contain the customers who can use the discount.
	Segments []Segment `json:"segments,omitempty"`
}

func (DiscountCustomerSegments) IsDiscountCustomerSelection() {}

// Specifies which customer segments to add to or remove from the discount.
type DiscountCustomerSegmentsInput struct {
	// A list of customer segments to add to the current list of customer segments.
	Add []string `json:"add,omitempty"`
	// A list of customer segments to remove from the current list of customer segments.
	Remove []string `json:"remove,omitempty"`
}

// Specifies the customers who can use this discount.
type DiscountCustomerSelectionInput struct {
	// Whether all customers can use this discount.
	All *bool `json:"all,omitempty"`
	// The list of customer IDs to add or remove from the list of customers.
	Customers *DiscountCustomersInput `json:"customers,omitempty"`
	// The list of customer segment IDs to add or remove from the list of customer segments.
	CustomerSegments *DiscountCustomerSegmentsInput `json:"customerSegments,omitempty"`
}

// A list of customers to whom the discount applies.
type DiscountCustomers struct {
	// A list of the customers that can use the discount.
	Customers []Customer `json:"customers,omitempty"`
}

func (DiscountCustomers) IsDiscountCustomerSelection() {}

// Specifies which customers to add to or remove from the discount.
type DiscountCustomersInput struct {
	// A list of customers to add to the current list of customers who can use the discount.
	Add []string `json:"add,omitempty"`
	// A list of customers to remove from the current list of customers who can use the discount.
	Remove []string `json:"remove,omitempty"`
}

// Specifies how the discount will be applied. Currently, only percentage off is supported.
type DiscountEffectInput struct {
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty"`
}

// Specifies the items attached to a discount.
type DiscountItemsInput struct {
	// The products and product variants that are attached to a discount.
	Products *DiscountProductsInput `json:"products,omitempty"`
	// The collections that are attached to a discount.
	Collections *DiscountCollectionsInput `json:"collections,omitempty"`
	// Whether all items should be selected.
	All *bool `json:"all,omitempty"`
}

// The minimum quantity of items required for the discount to apply.
type DiscountMinimumQuantity struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity string `json:"greaterThanOrEqualToQuantity"`
}

func (DiscountMinimumQuantity) IsDiscountMinimumRequirement() {}

// Specifies the quantity minimum requirements for a discount.
type DiscountMinimumQuantityInput struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity *string `json:"greaterThanOrEqualToQuantity,omitempty"`
}

// Specifies the quantity or subtotal minimum requirements for a discount.
type DiscountMinimumRequirementInput struct {
	// The minimum required quantity.
	Quantity *DiscountMinimumQuantityInput `json:"quantity,omitempty"`
	// The minimum required subtotal.
	Subtotal *DiscountMinimumSubtotalInput `json:"subtotal,omitempty"`
}

// The minimum subtotal required for the discount to apply.
type DiscountMinimumSubtotal struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *MoneyV2 `json:"greaterThanOrEqualToSubtotal,omitempty"`
}

func (DiscountMinimumSubtotal) IsDiscountMinimumRequirement() {}

// Specifies the subtotal minimum requirements for a discount.
type DiscountMinimumSubtotalInput struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *null.String `json:"greaterThanOrEqualToSubtotal,omitempty"`
}

// The quantity of items discounted, the discount value, and how the discount will be applied.
type DiscountOnQuantity struct {
	// The discount's effect on qualifying items.
	Effect DiscountEffect `json:"effect"`
	// The number of items being discounted.
	Quantity *DiscountQuantity `json:"quantity,omitempty"`
}

func (DiscountOnQuantity) IsDiscountCustomerGetsValue() {}

// Specifies the quantity of items discounted and the discount value.
type DiscountOnQuantityInput struct {
	// The quantity of items that are discounted.
	Quantity *string `json:"quantity,omitempty"`
	// The percentage value of the discount.
	Effect *DiscountEffectInput `json:"effect,omitempty"`
}

// The percentage value of the discount.
type DiscountPercentage struct {
	// The percentage value of the discount.
	Percentage float64 `json:"percentage"`
}

func (DiscountPercentage) IsDiscountCustomerGetsValue() {}
func (DiscountPercentage) IsDiscountEffect()            {}

// The entitled or prerequisite products and product variants for a discount.
type DiscountProducts struct {
	// A list of product variants that the discount can have as a prerequisite or entitlement.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// A list of products that the discount can have as a prerequisite or entitlement.
	Products *ProductConnection `json:"products,omitempty"`
}

func (DiscountProducts) IsDiscountItems() {}

// Specifies the products and product variants attached to a discount.
type DiscountProductsInput struct {
	// Specifies list of product ids to add.
	ProductsToAdd []string `json:"productsToAdd,omitempty"`
	// Specifies list of product ids to remove.
	ProductsToRemove []string `json:"productsToRemove,omitempty"`
	// Specifies list of product variant ids to add.
	ProductVariantsToAdd []string `json:"productVariantsToAdd,omitempty"`
	// Specifies list of product variant ids to remove.
	ProductVariantsToRemove []string `json:"productVariantsToRemove,omitempty"`
}

// The prerequisite purchase amount required for the discount to be applicable.
type DiscountPurchaseAmount struct {
	// Decimal money amount.
	Amount null.String `json:"amount"`
}

func (DiscountPurchaseAmount) IsDiscountCustomerBuysValue() {}

// The quantity of items in discount.
type DiscountQuantity struct {
	// The quantity of items.
	Quantity string `json:"quantity"`
}

func (DiscountQuantity) IsDiscountCustomerBuysValue() {}

// A redeem code for a code discount.
type DiscountRedeemCode struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The code of a discount.
	Code string `json:"code"`
	// The application that created the discount code.
	CreatedBy *App `json:"createdBy,omitempty"`
	// A globally-unique identifier of the discount redeem code.
	ID string `json:"id"`
}

// Return type for `discountRedeemCodeBulkAdd` mutation.
type DiscountRedeemCodeBulkAddPayload struct {
	// Tracks the progress of the bulk code creation.
	BulkCreation *DiscountRedeemCodeBulkCreation `json:"bulkCreation,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Represents a bulk creation of discount redeem codes.
type DiscountRedeemCodeBulkCreation struct {
	// The codes associated with the bulk creation.
	Codes *DiscountRedeemCodeBulkCreationCodeConnection `json:"codes,omitempty"`
	// The number of codes to create.
	CodesCount int `json:"codesCount"`
	// The date and time when the bulk creation was created.
	CreatedAt string `json:"createdAt"`
	// The code discount associated with the created codes.
	DiscountCode *DiscountCodeNode `json:"discountCode,omitempty"`
	// Whether the bulk creation is still queued (`false`) or has been run (`true`).
	Done bool `json:"done"`
	// The number of codes that weren't created successfully.
	FailedCount int `json:"failedCount"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The number of codes created successfully.
	ImportedCount int `json:"importedCount"`
}

func (DiscountRedeemCodeBulkCreation) IsNode() {}

// Represents a discount redeem code created by a bulk creation.
type DiscountRedeemCodeBulkCreationCode struct {
	// The code of a discount that is sent for creation.
	Code string `json:"code"`
	// The discount redeem code of the successfully created code.
	//
	// If the code cannot be created, the field will be null.
	//
	DiscountRedeemCode *DiscountRedeemCode `json:"discountRedeemCode,omitempty"`
	// A list of errors during the creation process of the code.
	Errors []DiscountUserError `json:"errors,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
type DiscountRedeemCodeBulkCreationCodeConnection struct {
	// A list of edges.
	Edges []DiscountRedeemCodeBulkCreationCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
type DiscountRedeemCodeBulkCreationCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
	Node *DiscountRedeemCodeBulkCreationCode `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountRedeemCodes.
type DiscountRedeemCodeConnection struct {
	// A list of edges.
	Edges []DiscountRedeemCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
type DiscountRedeemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountRedeemCodeEdge.
	Node *DiscountRedeemCode `json:"node,omitempty"`
}

// Specifies the code attached to a discount.
type DiscountRedeemCodeInput struct {
	// The code of a discount.
	Code string `json:"code"`
}

// The shareable URL for the discount code.
type DiscountShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty"`
	// The type of page that's associated with the URL.
	TargetType DiscountShareableURLTargetType `json:"targetType"`
	// The title of the page that's associated with the URL.
	Title string `json:"title"`
	// The URL for the discount code.
	URL string `json:"url"`
}

// Specifies the destinations where the free shipping discount will be applied.
type DiscountShippingDestinationSelectionInput struct {
	// Whether the discount code applies to all countries.
	All *bool `json:"all,omitempty"`
	// A list of countries where the discount code will apply.
	Countries *DiscountCountriesInput `json:"countries,omitempty"`
}

// An error that occurs during the execution of a discount mutation.
type DiscountUserError struct {
	// The error code.
	Code *DiscountErrorCode `json:"code,omitempty"`
	// Extra information about this error.
	ExtraInfo *string `json:"extraInfo,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DiscountUserError) IsDisplayableError() {}

// A unique string that represents the address of a Shopify store on the Internet.
type Domain struct {
	// The host name of the domain (eg: `example.com`).
	Host string `json:"host"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The localization of the domain, if it does not redirect.
	Localization *DomainLocalization `json:"localization,omitempty"`
	// Whether SSL is enabled or not.
	SslEnabled bool `json:"sslEnabled"`
	// The URL of the domain (eg: `https://example.com`).
	URL string `json:"url"`
}

func (Domain) IsNode() {}

// The country and language settings assigned to a domain.
type DomainLocalization struct {
	// The ISO codes for the domain’s alternate locales.
	AlternateLocales []string `json:"alternateLocales,omitempty"`
	// The ISO code for the country assigned to the domain, or "*" for a domain set to "Rest of world".
	Country *string `json:"country,omitempty"`
	// The ISO code for the domain’s default locale.
	DefaultLocale string `json:"defaultLocale"`
}

// Returns unfulfilled line items grouped by their fulfillment service. Each draft fulfillment contains additional information, such as whether the fulfillment requires shipping and whether a shipping label can be printed for it.
type DraftFulfillment struct {
	// Whether a label can be purchased.
	AllowLabelPurchase bool `json:"allowLabelPurchase"`
	// The line items (which might correspond to a variant) that are part of this draft fulfillment.
	LineItems []LineItem `json:"lineItems,omitempty"`
	// Whether a fulfillment requires shipping.
	RequiresShipping bool `json:"requiresShipping"`
	// The service responsible for fulfilling the fulfillment.
	Service *FulfillmentService `json:"service,omitempty"`
}

// Represents a draft order. Merchants can use draft orders to create orders on behalf of their customers.
//
// ***Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type DraftOrder struct {
	// Order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// The billing address of the customer.
	//
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Date and time when the draft order converted to a new order,
	// and the draft order's status changed to **Completed**.
	//
	CompletedAt *string `json:"completedAt,omitempty"`
	// Date and time when the draft order was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// Three letter code for the currency of the store at the time that the invoice is sent.
	//
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// Custom information added to the draft order on behalf of your customer.
	//
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty"`
	// Email address of the customer, which is used to send notifications to.
	Email *string `json:"email,omitempty"`
	// List of events associated with the draft order.
	Events *EventConnection `json:"events,omitempty"`
	// Whether the merchant has added timeline comments to the draft order.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Date and time when the invoice was last emailed to the customer.
	InvoiceSentAt *string `json:"invoiceSentAt,omitempty"`
	// Link to the checkout, which is sent to your customer in the invoice email.
	InvoiceURL *string `json:"invoiceUrl,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// List of the line items in the draft order.
	LineItems *DraftOrderLineItemConnection `json:"lineItems,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Unique identifier for the draft order, which is unique within the store. For example, _#D1223_.
	//
	Name string `json:"name"`
	// Text from an optional note attached to the draft order.
	Note2 *string `json:"note2,omitempty"`
	// Order that was created from this draft order.
	Order *Order `json:"order,omitempty"`
	// The associated payment term for this draft order.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Whether or not the Draft Order is ready and can be completed. Draft Orders
	//         may have asynchronous operations that can take time to finish.
	Ready bool `json:"ready"`
	// The shipping address of the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// Status of the draft order.
	Status DraftOrderStatus `json:"status"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	//
	SubtotalPrice null.String `json:"subtotalPrice"`
	// A comma separated list of tags associated with the draft order. Updating `tags` overwrites
	// any existing tags that were previously added to the draft order. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// Whether the draft order is tax exempt.
	TaxExempt bool `json:"taxExempt"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the line item prices include taxes.
	TaxesIncluded bool `json:"taxesIncluded"`
	// Total amount of the draft order (includes taxes, shipping charges, and discounts).
	TotalPrice null.String `json:"totalPrice"`
	// Total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// Total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax"`
	// Total weight (grams) of the draft order.
	TotalWeight string `json:"totalWeight"`
	// Date and time when the draft order was last changed.
	// The format is YYYY-MM-DD HH:mm:ss (for example, 2016-02-05 17:04:01).
	//
	UpdatedAt string `json:"updatedAt"`
}

func (DraftOrder) IsCommentEventEmbed()         {}
func (DraftOrder) IsCommentEventSubject()       {}
func (DraftOrder) IsHasEvents()                 {}
func (DraftOrder) IsHasLocalizationExtensions() {}
func (DraftOrder) IsHasMetafields()             {}
func (DraftOrder) IsLegacyInteroperability()    {}
func (DraftOrder) IsNode()                      {}

// The order-level discount applied to a draft order.
type DraftOrderAppliedDiscount struct {
	// Amount of the order-level discount that is applied to the draft order.
	Amount null.String `json:"amount"`
	// Amount of money discounted.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Description of the order-level discount.
	Description string `json:"description"`
	// Name of the order-level discount.
	Title *string `json:"title,omitempty"`
	// Amount of the order level discount (when value_type is percentage,
	// the value in this field is the percentage discount).
	//
	Value float64 `json:"value"`
	// Type of the order-level discount.
	ValueType DraftOrderAppliedDiscountType `json:"valueType"`
}

// The input fields for applying an order-level discount to a draft order.
type DraftOrderAppliedDiscountInput struct {
	// The applied amount of the discount.
	//
	Amount *null.String `json:"amount,omitempty"`
	// Reason for the discount.
	//
	Description *string `json:"description,omitempty"`
	// Title of the discount.
	//
	Title *string `json:"title,omitempty"`
	// The value of the discount.
	// If the type of the discount is fixed amount, then this is a fixed dollar amount.
	// If the type is percentage, then this is the percentage.
	//
	Value float64 `json:"value"`
	// The type of discount.
	//
	ValueType DraftOrderAppliedDiscountType `json:"valueType"`
}

// Return type for `draftOrderCalculate` mutation.
type DraftOrderCalculatePayload struct {
	// The calculated properties for a draft order.
	CalculatedDraftOrder *CalculatedDraftOrder `json:"calculatedDraftOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderComplete` mutation.
type DraftOrderCompletePayload struct {
	// The completed draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DraftOrders.
type DraftOrderConnection struct {
	// A list of edges.
	Edges []DraftOrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `draftOrderCreate` mutation.
type DraftOrderCreatePayload struct {
	// The created draft order.
	//
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the draft order to delete by its ID.
type DraftOrderDeleteInput struct {
	// The ID of the draft order to delete.
	//
	ID string `json:"id"`
}

// Return type for `draftOrderDelete` mutation.
type DraftOrderDeletePayload struct {
	// The ID of the deleted draft order.
	//
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DraftOrder and a cursor during pagination.
type DraftOrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DraftOrderEdge.
	Node *DraftOrder `json:"node,omitempty"`
}

// The input fields used to create or update a draft order.
type DraftOrderInput struct {
	// The discount that will be applied to the draft order.
	// A draft order line item can have one discount. A draft order can also have one order-level discount.
	//
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty"`
	// The mailing address associated with the payment method.
	//
	BillingAddress *MailingAddressInput `json:"billingAddress,omitempty"`
	// Customer associated with the draft order.
	//
	CustomerID *string `json:"customerId,omitempty"`
	// Extra information added to the customer.
	//
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
	// The customer's email address.
	//
	Email *string `json:"email,omitempty"`
	// Product variant line item or custom line item associated to the draft order.
	// Each draft order must include at least one line item.
	//
	LineItems []DraftOrderLineItemInput `json:"lineItems,omitempty"`
	// Metafields attached to the draft order.
	//
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// The private metafields attached to the draft order.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The localization extensions attached to the draft order. For example, Tax IDs.
	LocalizationExtensions []LocalizationExtensionInput `json:"localizationExtensions,omitempty"`
	// The text of an optional note that a shop owner can attach to the draft order.
	//
	Note *string `json:"note,omitempty"`
	// The mailing address to where the order will be shipped.
	//
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty"`
	// A shipping line object, which details the shipping method used.
	//
	ShippingLine *ShippingLineInput `json:"shippingLine,omitempty"`
	// A comma separated list of tags that have been added to the draft order.
	//
	Tags []string `json:"tags,omitempty"`
	// Whether or not taxes are exempt for the draft order.
	// If false, then Shopify will refer to the taxable field for each line item.
	// If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
	//
	TaxExempt *bool `json:"taxExempt,omitempty"`
	// Sent as part of a draft order object to load customer shipping information.
	//
	UseCustomerDefaultAddress *bool `json:"useCustomerDefaultAddress,omitempty"`
	// The fields used to create payment terms.
	PaymentTerms *PaymentTermsInput `json:"paymentTerms,omitempty"`
}

// Return type for `draftOrderInvoicePreview` mutation.
type DraftOrderInvoicePreviewPayload struct {
	// HTML to preview the draft order invoice email.
	PreviewHTML *string `json:"previewHtml,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderInvoiceSend` mutation.
type DraftOrderInvoiceSendPayload struct {
	// The draft order an invoice email is sent for.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a line item included in a draft order.
type DraftOrderLineItem struct {
	// Discount which will be applied to the line item or the overall order.
	//
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// Whether this is a product variant line item, or a custom line item.
	// If set to true indicates a custom line item. If set to false indicates a product variant line item.
	//
	Custom bool `json:"custom"`
	// List of additional information about the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Line item price after discounts are applied.
	//
	DiscountedTotal null.String `json:"discountedTotal"`
	// The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
	//
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Weight in grams. Can only be specified if this is a custom line item.
	//
	Grams *int `json:"grams,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Image associated with the draft order line item.
	Image *Image `json:"image,omitempty"`
	// Whether the line item represents the puchase of a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// Name of the product.
	Name string `json:"name"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// Variant price without any discounts applied.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The product corresponding to the line item’s product variant.
	//
	Product *Product `json:"product,omitempty"`
	// Number of variant items requested in the draft order.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Variant SKU number.
	Sku *string `json:"sku,omitempty"`
	// A list of tax line objects, each of which details the total taxes applicable to the order.
	//
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// Title of the product or variant (this field only applies to custom line items).
	Title string `json:"title"`
	// Total value of the discount applied to the line item.
	//
	TotalDiscount null.String `json:"totalDiscount"`
	// Associated variant for the line item.
	//
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty"`
	// Weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty"`
}

func (DraftOrderLineItem) IsNode() {}

// An auto-generated type for paginating through multiple DraftOrderLineItems.
type DraftOrderLineItemConnection struct {
	// A list of edges.
	Edges []DraftOrderLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
type DraftOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DraftOrderLineItemEdge.
	Node *DraftOrderLineItem `json:"node,omitempty"`
}

// The input fields used to create a line item for a draft order.
type DraftOrderLineItemInput struct {
	// Discount which will be applied to the line item.
	//
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty"`
	// Represents a generic custom attribute using a key value pair.
	//
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
	// The weight in grams. This value is ignored when `variantId` is provided. This argument is deprecated: Use `weight` instead.
	Grams *int `json:"grams,omitempty"`
	// The price without any discounts applied. This value is ignored when `variantId` is provided.
	OriginalUnitPrice *null.String `json:"originalUnitPrice,omitempty"`
	// The number of products that were purchased.
	//
	Quantity int `json:"quantity"`
	// Whether physical shipping is required. This value is ignored when `variantId` is provided.
	//
	RequiresShipping *bool `json:"requiresShipping,omitempty"`
	// The SKU number of the item. This value is ignored when `variantId` is provided.
	Sku *string `json:"sku,omitempty"`
	// Whether the item is taxable. This value is ignored when `variantId` is provided.
	Taxable *bool `json:"taxable,omitempty"`
	// Title of the item. Ignored when `variantId` is provided.
	Title *string `json:"title,omitempty"`
	// The ID of the product variant corresponding to the line item.
	// Null if custom line item. Required if product variant line item.
	//
	VariantID *string `json:"variantId,omitempty"`
	// Specifies the weight unit and value inputs.
	// This value is ignored when `variantId` is provided.
	//
	Weight *WeightInput `json:"weight,omitempty"`
}

// Return type for `draftOrderUpdate` mutation.
type DraftOrderUpdatePayload struct {
	// The updated draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The duty details for a line item.
type Duty struct {
	// The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// The harmonized system code of the item used in calculating the duty.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The amount of the duty.
	Price *MoneyBag `json:"price,omitempty"`
	// A list of taxes charged on the duty.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
}

func (Duty) IsNode() {}

// A sale associated with a duty charge.
type DutySale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The duty for the associated sale.
	Duty *Duty `json:"duty,omitempty"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (DutySale) IsSale() {}

// The attribute editable information.
type EditableProperty struct {
	// Whether the attribute is locked for editing.
	Locked bool `json:"locked"`
	// The reason the attribute is locked for editing.
	Reason *string `json:"reason,omitempty"`
}

// Specifies the fields for an email.
type EmailInput struct {
	// Specifies the email subject.
	Subject *string `json:"subject,omitempty"`
	// Specifies the email recipient.
	To *string `json:"to,omitempty"`
	// Specifies the email sender.
	From *string `json:"from,omitempty"`
	// Specifies the email body.
	Body *string `json:"body,omitempty"`
	// Specifies any bcc recipients for the email.
	Bcc []string `json:"bcc,omitempty"`
	// Specifies a custom message to include in the email.
	CustomMessage *string `json:"customMessage,omitempty"`
}

// The email sender configuration for a shop. This allows Shopify to send emails that are properly authenticated for a given domain.
type EmailSenderConfiguration struct {
	// The list of DNS records that merchants need to configure for the current sender domain.
	SenderDomainDNSRecords []EmailSenderConfigurationDNSRecord `json:"senderDomainDnsRecords,omitempty"`
}

// Represents a DNS record that needs to be configured for Shopify to send emails from a domain.
type EmailSenderConfigurationDNSRecord struct {
	// The hostname of the DNS record.
	Name string `json:"name"`
	// The type of the DNS record.
	Type string `json:"type"`
	// The value of the DNS record.
	Value string `json:"value"`
}

// The values for an enum segment filter.
type EnumFilterValue struct {
	// The localized name of the value.
	LocalizedName string `json:"localizedName"`
	// The query name of the value.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple EnumFilterValues.
type EnumFilterValueConnection struct {
	// A list of edges.
	Edges []EnumFilterValueEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one EnumFilterValue and a cursor during pagination.
type EnumFilterValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of EnumFilterValueEdge.
	Node *EnumFilterValue `json:"node,omitempty"`
}

// A filter with a set of possible values that's been added to a segment query.
type EnumSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
	// A list of values for an enum segment filter.
	Values *EnumFilterValueConnection `json:"values,omitempty"`
}

func (EnumSegmentFilter) IsSegmentFilter() {}

// Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
type EventBridgeWebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// Specifies the input fields for an EventBridge webhook subscription.
type EventBridgeWebhookSubscriptionInput struct {
	// The ARN of the EventBridge partner event source.
	Arn *string `json:"arn,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty"`
}

// Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
type EventBridgeWebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// An auto-generated type for paginating through multiple Events.
type EventConnection struct {
	// A list of edges.
	Edges []EventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Event and a cursor during pagination.
type EventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of EventEdge.
	Node Event `json:"node"`
}

// The values for an event segment filter.
type EventFilterValue struct {
	// The localized name of the value.
	LocalizedName string `json:"localizedName"`
	// The query name of the value.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple EventFilterValues.
type EventFilterValueConnection struct {
	// A list of edges.
	Edges []EventFilterValueEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one EventFilterValue and a cursor during pagination.
type EventFilterValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of EventFilterValueEdge.
	Node *EventFilterValue `json:"node,omitempty"`
}

// A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
type EventSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
	// A list of values for an event segment filter.
	Values *EventFilterValueConnection `json:"values,omitempty"`
}

func (EventSegmentFilter) IsSegmentFilter() {}

// Represents a video hosted outside of Shopify.
type ExternalVideo struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty"`
	// The embed URL of the video for the respective host.
	EmbedURL string `json:"embedUrl"`
	// The URL.
	EmbeddedURL string `json:"embeddedUrl"`
	// The host of the external video.
	Host MediaHost `json:"host"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The origin URL of the video on the respective host.
	OriginURL string `json:"originUrl"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (ExternalVideo) IsMedia() {}
func (ExternalVideo) IsNode()  {}

// Requirements that must be met before an app can be installed.
type FailedRequirement struct {
	// Action to be taken to resolve a failed requirement, including URL link.
	Action *NavigationItem `json:"action,omitempty"`
	// A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
	// encounters when trying to make use of their Shop and its resources.
	//
	Message string `json:"message"`
}

// An auto-generated type for paginating through multiple Files.
type FileConnection struct {
	// A list of edges.
	Edges []FileEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields that are required to create a file object.
type FileCreateInput struct {
	// An external URL or a signed upload URL of the file object.
	//
	OriginalSource string `json:"originalSource"`
	// The file content type.
	ContentType *FileContentType `json:"contentType,omitempty"`
	// The alt text associated with the file.
	Alt *string `json:"alt,omitempty"`
}

// Return type for `fileCreate` mutation.
type FileCreatePayload struct {
	// The newly created files.
	Files []File `json:"files,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// Return type for `fileDelete` mutation.
type FileDeletePayload struct {
	// The IDs of the deleted files.
	DeletedFileIds []string `json:"deletedFileIds,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one File and a cursor during pagination.
type FileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FileEdge.
	Node File `json:"node"`
}

// A file error.
type FileError struct {
	// Code representing the type of error.
	Code FileErrorCode `json:"code"`
	// Additional details regarding the error.
	Details *string `json:"details,omitempty"`
	// Translated error message.
	Message string `json:"message"`
}

// The input fields that are required to update a file object.
type FileUpdateInput struct {
	// The file to update.
	ID string `json:"id"`
	// The alt text associated with the file.
	Alt *string `json:"alt,omitempty"`
}

// Return type for `fileUpdate` mutation.
type FileUpdatePayload struct {
	// The list of updated files.
	Files []File `json:"files,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// An error that happens during the execution of a Files API query or mutation.
type FilesUserError struct {
	// The error code.
	Code *FilesErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FilesUserError) IsDisplayableError() {}

// A filter option is one possible value in a search filter.
type FilterOption struct {
	// The filter option's label for display purposes.
	Label string `json:"label"`
	// The filter option's value.
	Value string `json:"value"`
}

// A filter with a double-precision, floating-point value that's been added to a segment query.
type FloatSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (FloatSegmentFilter) IsSegmentFilter() {}

// Return type for `flowTriggerReceive` mutation.
type FlowTriggerReceivePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order.
type Fulfillment struct {
	// The date and time when the fulfillment was created.
	CreatedAt string `json:"createdAt"`
	// The date that this fulfillment was delivered.
	DeliveredAt *string `json:"deliveredAt,omitempty"`
	// Human readable display status for this fulfillment.
	DisplayStatus *FulfillmentDisplayStatus `json:"displayStatus,omitempty"`
	// The estimated date that this fulfillment will arrive.
	EstimatedDeliveryAt *string `json:"estimatedDeliveryAt,omitempty"`
	// The history of events associated with this fulfillment.
	Events *FulfillmentEventConnection `json:"events,omitempty"`
	// List of the fulfillment's line items.
	FulfillmentLineItems *FulfillmentLineItemConnection `json:"fulfillmentLineItems,omitempty"`
	// A paginated list of fulfillment orders for the fulfillment.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The date and time when the fulfillment went into transit.
	InTransitAt *string `json:"inTransitAt,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The location that the fulfillment was processed at.
	Location *Location `json:"location,omitempty"`
	// Human readable reference identifier for this fulfillment.
	Name string `json:"name"`
	// The order for which the fulfillment was created.
	Order *Order `json:"order,omitempty"`
	// The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
	OriginAddress *FulfillmentOriginAddress `json:"originAddress,omitempty"`
	// Whether any of the line items in the fulfillment require shipping.
	RequiresShipping bool `json:"requiresShipping"`
	// Fulfillment service associated with the fulfillment.
	Service *FulfillmentService `json:"service,omitempty"`
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
	// Sum of all line item quantities for the fulfillment.
	TotalQuantity int `json:"totalQuantity"`
	// Tracking information associated with the fulfillment,
	// such as the tracking company, tracking number, and tracking URL.
	//
	TrackingInfo []FulfillmentTrackingInfo `json:"trackingInfo,omitempty"`
	// The date and time when the fulfillment was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (Fulfillment) IsLegacyInteroperability() {}
func (Fulfillment) IsNode()                   {}

// Return type for `fulfillmentCancel` mutation.
type FulfillmentCancelPayload struct {
	// The canceled fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Fulfillments.
type FulfillmentConnection struct {
	// A list of edges.
	Edges []FulfillmentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `fulfillmentCreate` mutation.
type FulfillmentCreatePayload struct {
	// The created fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The order for which the fulfillment is created.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentCreateV2` mutation.
type FulfillmentCreateV2Payload struct {
	// The created fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Fulfillment and a cursor during pagination.
type FulfillmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentEdge.
	Node *Fulfillment `json:"node,omitempty"`
}

// The fulfillment event that describes the fulfilllment status at a particular time.
type FulfillmentEvent struct {
	// The time at which this fulfillment event happened.
	HappenedAt string `json:"happenedAt"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The status of this fulfillment event.
	Status FulfillmentEventStatus `json:"status"`
}

func (FulfillmentEvent) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentEvents.
type FulfillmentEventConnection struct {
	// A list of edges.
	Edges []FulfillmentEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
type FulfillmentEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentEventEdge.
	Node *FulfillmentEvent `json:"node,omitempty"`
}

// A fulfillment hold currently applied on a fulfillment order.
type FulfillmentHold struct {
	// The reason for the fulfillment hold.
	Reason FulfillmentHoldReason `json:"reason"`
	// Additional information about the fulfillment hold reason.
	ReasonNotes *string `json:"reasonNotes,omitempty"`
}

// The input fields used to create a fulfillment.
type FulfillmentInput struct {
	// The ID of the order to be fulfilled.
	OrderID string `json:"orderId"`
	// The order line items to be fulfilled.
	LineItems []FulfillmentLineItemInput `json:"lineItems,omitempty"`
	// Tracking numbers associated with the fulfillment.
	TrackingNumbers []string `json:"trackingNumbers,omitempty"`
	// The URLs to track the fulfillment.
	TrackingUrls []string `json:"trackingUrls,omitempty"`
	// The name of the tracking company.
	TrackingCompany *string `json:"trackingCompany,omitempty"`
	// Whether the customer is notified when the fulfillment is created.
	// If `true`, then a notification is sent when the fulfillment is created.
	//
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
	// A reference to the [ShippingMethod](https://shopify.dev/api/admin-graphql/latest/objects/shippingmethod) code, for example `FREE_SHIPPING`.
	ShippingMethod *string `json:"shippingMethod,omitempty"`
	// The ID of the location from which the line items will be fulfilled.
	LocationID string `json:"locationId"`
	// Indicates whether fulfillment should be created in an `OPEN` state.
	CreateAsOpen *bool `json:"createAsOpen,omitempty"`
	// The address at which the fulfillment occurred.
	// Typically this is the address of a warehouse or a fulfillment center.
	//
	OriginAddress *FulfillmentOriginAddressInput `json:"originAddress,omitempty"`
}

// Represents a line item from an order that's included in a fulfillment.
type FulfillmentLineItem struct {
	// The total price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total price after discounts are applied in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The associated order's line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The total price before discounts are applied.
	OriginalTotal null.String `json:"originalTotal"`
	// The total price before discounts are applied in shop and presentment currencies.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// Number of line items in the fulfillment.
	Quantity *int `json:"quantity,omitempty"`
}

func (FulfillmentLineItem) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentLineItems.
type FulfillmentLineItemConnection struct {
	// A list of edges.
	Edges []FulfillmentLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
type FulfillmentLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentLineItemEdge.
	Node *FulfillmentLineItem `json:"node,omitempty"`
}

// The input fields used to include a line item from an order in a fulfillment.
type FulfillmentLineItemInput struct {
	// The ID of the line item.
	ID string `json:"id"`
	// The quantity of the line item to be fulfilled.
	Quantity *int `json:"quantity,omitempty"`
}

// Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
// in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
// for an order at a given location.
type FulfillmentOrder struct {
	// The fulfillment order's assigned location. This is the location expected to perform fulfillment.
	AssignedLocation *FulfillmentOrderAssignedLocation `json:"assignedLocation,omitempty"`
	// Delivery method of this fulfillment order.
	DeliveryMethod *DeliveryMethod `json:"deliveryMethod,omitempty"`
	// The destination where the items should be sent.
	Destination *FulfillmentOrderDestination `json:"destination,omitempty"`
	// The date and time at which the fulfillment order will be fulfillable.
	FulfillAt *string `json:"fulfillAt,omitempty"`
	// The latest date and time by which all items in the fulfillment order need to be fulfilled.
	FulfillBy *string `json:"fulfillBy,omitempty"`
	// The fulfillment holds applied on the fulfillment order.
	FulfillmentHolds []FulfillmentHold `json:"fulfillmentHolds,omitempty"`
	// A list of fulfillments for the fulfillment order.
	Fulfillments *FulfillmentConnection `json:"fulfillments,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The duties delivery method of this fulfillment order.
	InternationalDuties *FulfillmentOrderInternationalDuties `json:"internationalDuties,omitempty"`
	// A list of the fulfillment order's line items.
	LineItems *FulfillmentOrderLineItemConnection `json:"lineItems,omitempty"`
	// A list of locations that the fulfillment order can potentially move to.
	LocationsForMove *FulfillmentOrderLocationForMoveConnection `json:"locationsForMove,omitempty"`
	// A list of requests sent by the merchant to the fulfillment service for this fulfillment order.
	MerchantRequests *FulfillmentOrderMerchantRequestConnection `json:"merchantRequests,omitempty"`
	// The order that's associated with the fulfillment order.
	Order *Order `json:"order,omitempty"`
	// The request status of the fulfillment order.
	RequestStatus FulfillmentOrderRequestStatus `json:"requestStatus"`
	// The status of the fulfillment order.
	Status FulfillmentOrderStatus `json:"status"`
	// The actions that can be performed on this fulfillment order.
	SupportedActions []FulfillmentOrderSupportedAction `json:"supportedActions,omitempty"`
}

func (FulfillmentOrder) IsNode() {}

// Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
type FulfillmentOrderAcceptCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
type FulfillmentOrderAcceptFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the assigned location of a fulfillment order, which is a snapshot of the location
// at which the fulfillment order was created. The assigned location is expected to perform fulfillment.
type FulfillmentOrderAssignedLocation struct {
	// The first line of the address for the location.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address for the location.
	Address2 *string `json:"address2,omitempty"`
	// The city of the location.
	City *string `json:"city,omitempty"`
	// The two-letter country code of the location.
	CountryCode CountryCode `json:"countryCode"`
	// The location where the fulfillment order was created. This can differ from the
	// `FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order
	// was closed.
	//
	Location *Location `json:"location,omitempty"`
	// The name of the location.
	Name string `json:"name"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty"`
	// The province of the location.
	Province *string `json:"province,omitempty"`
	// The ZIP code of the location.
	Zip *string `json:"zip,omitempty"`
}

// Return type for `fulfillmentOrderCancel` mutation.
type FulfillmentOrderCancelPayload struct {
	// The fulfillment order that was marked as canceled.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The fulfillment order that was created to replace the canceled fulfillment order.
	ReplacementFulfillmentOrder *FulfillmentOrder `json:"replacementFulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderClose` mutation.
type FulfillmentOrderClosePayload struct {
	// The fulfillment order that was marked as incomplete.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple FulfillmentOrders.
type FulfillmentOrderConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Represents the destination where the items should be sent upon fulfillment.
type FulfillmentOrderDestination struct {
	// The first line of the address of the destination.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address of the destination.
	Address2 *string `json:"address2,omitempty"`
	// The city of the destination.
	City *string `json:"city,omitempty"`
	// The company of the destination.
	Company *string `json:"company,omitempty"`
	// The two-letter country code of the destination.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The email of the customer at the destination.
	Email *string `json:"email,omitempty"`
	// The first name of the customer at the destination.
	FirstName *string `json:"firstName,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The last name of the customer at the destination.
	LastName *string `json:"lastName,omitempty"`
	// The phone number of the customer at the destination.
	Phone *string `json:"phone,omitempty"`
	// The province of the destination.
	Province *string `json:"province,omitempty"`
	// The ZIP code of the destination.
	Zip *string `json:"zip,omitempty"`
}

func (FulfillmentOrderDestination) IsNode() {}

// An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
type FulfillmentOrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderEdge.
	Node *FulfillmentOrder `json:"node,omitempty"`
}

// Input arguments for the fulfillment hold applied on the fulfillment order.
type FulfillmentOrderHoldInput struct {
	// The reason for the fulfillment hold.
	Reason FulfillmentHoldReason `json:"reason"`
	// Additional information about the fulfillment hold reason.
	ReasonNotes *string `json:"reasonNotes,omitempty"`
	// Whether the merchant receives a notification about the fulfillment hold. The default value is `false`.
	NotifyMerchant *bool `json:"notifyMerchant,omitempty"`
}

// Return type for `fulfillmentOrderHold` mutation.
type FulfillmentOrderHoldPayload struct {
	// The fulfillment order on which a fulfillment hold was applied.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderHoldUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderHold`.
type FulfillmentOrderHoldUserError struct {
	// The error code.
	Code *FulfillmentOrderHoldUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderHoldUserError) IsDisplayableError() {}

// The international duties relevant to a fulfillment order.
type FulfillmentOrderInternationalDuties struct {
	// The method of duties payment. Example values: `DDP`, `DAP`.
	Incoterm string `json:"incoterm"`
}

// Represents a line item belonging to a fulfillment order.
type FulfillmentOrderLineItem struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The associated order line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The number of units remaining to be fulfilled.
	RemainingQuantity int `json:"remainingQuantity"`
	// The total number of units to be fulfilled.
	TotalQuantity int `json:"totalQuantity"`
}

func (FulfillmentOrderLineItem) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
type FulfillmentOrderLineItemConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
type FulfillmentOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderLineItemEdge.
	Node *FulfillmentOrderLineItem `json:"node,omitempty"`
}

// The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.
type FulfillmentOrderLineItemInput struct {
	// The ID of the fulfillment order line item.
	ID string `json:"id"`
	// The quantity of the fulfillment order line item.
	Quantity int `json:"quantity"`
}

// The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
type FulfillmentOrderLineItemsInput struct {
	// The ID of the fulfillment order.
	FulfillmentOrderID string `json:"fulfillmentOrderId"`
	// The fulfillment order line items to be fulfilled.
	// If left blank, all line items of the fulfillment order will be fulfilled.
	//
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty"`
}

// A location that a fulfillment order can potentially move to.
type FulfillmentOrderLocationForMove struct {
	// The location being considered as the fulfillment order's new assigned location.
	Location *Location `json:"location,omitempty"`
	// A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
	// moved to the location.
	//
	Message *string `json:"message,omitempty"`
	// Whether the fulfillment order can be moved to the location.
	Movable bool `json:"movable"`
}

// An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
type FulfillmentOrderLocationForMoveConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderLocationForMoveEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
type FulfillmentOrderLocationForMoveEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderLocationForMoveEdge.
	Node *FulfillmentOrderLocationForMove `json:"node,omitempty"`
}

// Represents a request made by the merchant to a fulfillment service for a fulfillment order.
type FulfillmentOrderMerchantRequest struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The kind of request made.
	Kind FulfillmentOrderMerchantRequestKind `json:"kind"`
	// The optional message that the merchant included in the request.
	Message *string `json:"message,omitempty"`
	// Additional options requested by the merchant. These depend on the `kind` of the request.
	// For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
	// merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
	// `notifyCustomer` when making calls to `FulfillmentCreateV2`.
	//
	RequestOptions *string `json:"requestOptions,omitempty"`
	// The response from the fulfillment service.
	ResponseData *string `json:"responseData,omitempty"`
	// The timestamp when the request was made.
	SentAt string `json:"sentAt"`
}

func (FulfillmentOrderMerchantRequest) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
type FulfillmentOrderMerchantRequestConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderMerchantRequestEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
type FulfillmentOrderMerchantRequestEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderMerchantRequestEdge.
	Node *FulfillmentOrderMerchantRequest `json:"node,omitempty"`
}

// Return type for `fulfillmentOrderMove` mutation.
type FulfillmentOrderMovePayload struct {
	// A new fulfillment order representing of the all line items that were moved to the new location.
	MovedFulfillmentOrder *FulfillmentOrder `json:"movedFulfillmentOrder,omitempty"`
	// The fulfillment order that was moved. On success, this fulfillment order will be closed.
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty"`
	// A new fulfillment order representing the remaining line items that are still assigned to the original
	// location. This field is returned when any line items on the original fulfillment order can't be moved
	// because they are are not stocked at the new location.
	//
	RemainingFulfillmentOrder *FulfillmentOrder `json:"remainingFulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderOpen` mutation.
type FulfillmentOrderOpenPayload struct {
	// The fulfillment order that was transitioned to open and is fulfillable.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
type FulfillmentOrderRejectCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
type FulfillmentOrderRejectFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderReleaseHold` mutation.
type FulfillmentOrderReleaseHoldPayload struct {
	// The fulfillment order on which the hold was released.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderReleaseHoldUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
type FulfillmentOrderReleaseHoldUserError struct {
	// The error code.
	Code *FulfillmentOrderReleaseHoldUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderReleaseHoldUserError) IsDisplayableError() {}

// Return type for `fulfillmentOrderReschedule` mutation.
type FulfillmentOrderReschedulePayload struct {
	// The fulfillment order that was rescheduled.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderRescheduleUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderReschedule`.
type FulfillmentOrderRescheduleUserError struct {
	// The error code.
	Code *FulfillmentOrderRescheduleUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderRescheduleUserError) IsDisplayableError() {}

// Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
type FulfillmentOrderSubmitCancellationRequestPayload struct {
	// The fulfillment order specified in the cancelation request.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
type FulfillmentOrderSubmitFulfillmentRequestPayload struct {
	// The original fulfillment order intended to request fulfillment for.
	//
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty"`
	// The fulfillment order that was submitted to the fulfillment service. This will be the same as
	// the original fulfillment order field. The exception to this is partial fulfillment requests or
	// fulfillment request for cancelled or incomplete fulfillment orders.
	//
	SubmittedFulfillmentOrder *FulfillmentOrder `json:"submittedFulfillmentOrder,omitempty"`
	// This field will only be present for partial fulfillment requests. This will represent the new
	// fulfillment order with the remaining line items not submitted to the fulfillment service.
	//
	UnsubmittedFulfillmentOrder *FulfillmentOrder `json:"unsubmittedFulfillmentOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// One of the actions that the fulfillment order supports in its current state.
type FulfillmentOrderSupportedAction struct {
	// The action value.
	Action FulfillmentOrderAction `json:"action"`
	// The external URL to be used to initiate the fulfillment process outside Shopify.
	// Applicable only when the `action` value is `EXTERNAL`.
	//
	ExternalURL *string `json:"externalUrl,omitempty"`
}

// The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
type FulfillmentOriginAddress struct {
	// The street address of the fulfillment location.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty"`
	// The city in which the fulfillment location is located.
	City *string `json:"city,omitempty"`
	// The country code of the fulfillment location.
	CountryCode string `json:"countryCode"`
	// The province code of the fulfillment location.
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip code of the fulfillment location.
	Zip *string `json:"zip,omitempty"`
}

// The input fields used to include the address at which the fulfillment occurred. Typically the address of a warehouse or a fulfillment center.
type FulfillmentOriginAddressInput struct {
	// The street address of the fulfillment location.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty"`
	// The city in which the fulfillment location is located.
	City *string `json:"city,omitempty"`
	// The zip code of the fulfillment location.
	Zip *string `json:"zip,omitempty"`
	// The province of the fulfillment location.
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The country of the fulfillment location.
	CountryCode string `json:"countryCode"`
}

// Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner.
type FulfillmentService struct {
	// The callback URL the fulfillment service has registered for requests.
	CallbackURL *string `json:"callbackUrl,omitempty"`
	// Whether the fulfillment service has opted into fulfillment order based requests.
	FulfillmentOrdersOptIn bool `json:"fulfillmentOrdersOptIn"`
	// Human-readable unique identifier for this fulfillment service.
	Handle string `json:"handle"`
	// The ID of the fulfillment service.
	ID string `json:"id"`
	// Whether the fulfillment service tracks product inventory and provides updates to Shopify.
	InventoryManagement bool `json:"inventoryManagement"`
	// Location associated with the fulfillment service.
	Location *Location `json:"location,omitempty"`
	// Whether the fulfillment service can stock inventory alongside other locations.
	PermitsSkuSharing bool `json:"permitsSkuSharing"`
	// Whether the fulfillment service supports local deliveries.
	ProductBased bool `json:"productBased"`
	// The name of the fulfillment service as seen by merchants.
	ServiceName string `json:"serviceName"`
	// Shipping methods associated with the fulfillment service provider.
	ShippingMethods []ShippingMethod `json:"shippingMethods,omitempty"`
	// Type associated with the fulfillment service.
	Type FulfillmentServiceType `json:"type"`
}

// Return type for `fulfillmentServiceCreate` mutation.
type FulfillmentServiceCreatePayload struct {
	// The created fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceDelete` mutation.
type FulfillmentServiceDeletePayload struct {
	// The ID of the deleted fulfillment service.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceUpdate` mutation.
type FulfillmentServiceUpdatePayload struct {
	// The updated fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the tracking information for a fulfillment.
type FulfillmentTrackingInfo struct {
	// The name of the tracking company.
	Company *string `json:"company,omitempty"`
	// The tracking number of the fulfillment.
	Number *string `json:"number,omitempty"`
	// The URLs to track the fulfillment.
	URL *string `json:"url,omitempty"`
}

// Return type for `fulfillmentTrackingInfoUpdate` mutation.
type FulfillmentTrackingInfoUpdatePayload struct {
	// The updated fulfillment with tracking information.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
type FulfillmentTrackingInfoUpdateV2Payload struct {
	// The updated fulfillment with tracking information.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields that specify all possible fields for tracking information.
type FulfillmentTrackingInput struct {
	// The tracking number of the fulfillment.
	Number *string `json:"number,omitempty"`
	// The URL to track the fulfillment.
	URL *string `json:"url,omitempty"`
	// The name of the tracking company.
	Company *string `json:"company,omitempty"`
}

// The input fields used to create a fulfillment from fulfillment orders.
type FulfillmentV2Input struct {
	// The fulfillment's tracking information, including a tracking URL, a tracking number,
	// and the company associated with the fulfillment.
	//
	TrackingInfo *FulfillmentTrackingInput `json:"trackingInfo,omitempty"`
	// Whether the customer is notified.
	// If `true`, then a notification is sent when the fulfillment is created.
	//
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
	// Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
	// order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
	// fulfillment order line items are left blank then all the fulfillment order line items of the
	// associated fulfillment order ID will be fulfilled.
	//
	LineItemsByFulfillmentOrder []FulfillmentOrderLineItemsInput `json:"lineItemsByFulfillmentOrder,omitempty"`
	// Address information about the location from which the order was fulfilled.
	//
	OriginAddress *FulfillmentOriginAddressInput `json:"originAddress,omitempty"`
}

// A generic file.
type GenericFile struct {
	// A word or phrase to describe the contents or the function of a file.
	Alt *string `json:"alt,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
	//
	CreatedAt string `json:"createdAt"`
	// Any errors that have occurred on the file.
	FileErrors []FileError `json:"fileErrors,omitempty"`
	// The status of the file.
	FileStatus FileStatus `json:"fileStatus"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The mime type of the file.
	MimeType *string `json:"mimeType,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// The URL of the file.
	URL *string `json:"url,omitempty"`
}

func (GenericFile) IsFile()               {}
func (GenericFile) IsNode()               {}
func (GenericFile) IsMetafieldReference() {}

// Represents an issued gift card.
type GiftCard struct {
	// The gift card's remaining balance.
	Balance *MoneyV2 `json:"balance,omitempty"`
	// The date and time at which the gift card was created.
	CreatedAt string `json:"createdAt"`
	// The customer who will receive the gift card.
	Customer *Customer `json:"customer,omitempty"`
	// The date and time at which the gift card was disabled.
	DisabledAt *string `json:"disabledAt,omitempty"`
	// Whether the gift card is enabled.
	Enabled bool `json:"enabled"`
	// The date at which the gift card will expire.
	ExpiresOn *string `json:"expiresOn,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The initial value of the gift card.
	InitialValue *MoneyV2 `json:"initialValue,omitempty"`
	// The final four characters of the gift card code.
	LastCharacters string `json:"lastCharacters"`
	// The gift card code. Everything but the final four characters is masked.
	MaskedCode string `json:"maskedCode"`
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty"`
	// The order associated with the gift card. This value is `null` if the gift card was issued manually.
	//
	Order *Order `json:"order,omitempty"`
}

func (GiftCard) IsNode() {}

// An auto-generated type for paginating through multiple GiftCards.
type GiftCardConnection struct {
	// A list of edges.
	Edges []GiftCardEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields to issue a gift card.
type GiftCardCreateInput struct {
	// The initial value of the gift card.
	InitialValue null.String `json:"initialValue"`
	// The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).
	// It is not case sensitive. If not provided, then a random code will be generated.
	//
	Code *string `json:"code,omitempty"`
	// The ID of the customer who will receive the gift card. Requires `write_customers` access_scope.
	CustomerID *string `json:"customerId,omitempty"`
	// The date at which the gift card will expire. If not provided, then the gift card will never expire.
	//
	ExpiresOn *string `json:"expiresOn,omitempty"`
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty"`
	// The suffix of the Liquid template that is used to render the gift card online.
	// For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
	// If not provided, then the default `gift_card.liquid` template is used.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
}

// Return type for `giftCardCreate` mutation.
type GiftCardCreatePayload struct {
	// The created gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty"`
	// The created gift card's code.
	GiftCardCode *string `json:"giftCardCode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []GiftCardUserError `json:"userErrors,omitempty"`
}

// Return type for `giftCardDisable` mutation.
type GiftCardDisablePayload struct {
	// The disabled gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one GiftCard and a cursor during pagination.
type GiftCardEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of GiftCardEdge.
	Node *GiftCard `json:"node,omitempty"`
}

// A sale associated with a gift card.
type GiftCardSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (GiftCardSale) IsSale() {}

// Specifies the input fields to update a gift card.
type GiftCardUpdateInput struct {
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty"`
	// The date at which the gift card will expire. If set to `null`, then the gift card will never expire.
	//
	ExpiresOn *string `json:"expiresOn,omitempty"`
	// The ID of the customer who will receive the gift card. The ID cannot be changed if the gift card already has an assigned customer ID.
	//
	CustomerID *string `json:"customerId,omitempty"`
	// The suffix of the Liquid template that is used to render the gift card online.
	// For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
}

// Return type for `giftCardUpdate` mutation.
type GiftCardUpdatePayload struct {
	// The updated gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during the execution of a gift card mutation.
type GiftCardUserError struct {
	// The error code.
	Code *GiftCardErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (GiftCardUserError) IsDisplayableError() {}

// Represents an image resource.
type Image struct {
	// A word or phrase to share the nature or contents of an image.
	AltText *string `json:"altText,omitempty"`
	// The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Height *int `json:"height,omitempty"`
	// A unique identifier for the image.
	ID *string `json:"id,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The location of the original image as a URL.
	//
	// If there are any existing transformations in the original source URL, they will remain and not be stripped.
	//
	OriginalSrc string `json:"originalSrc"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The location of the image as a URL.
	Src string `json:"src"`
	// The location of the transformed image as a URL.
	//
	// All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
	// Otherwise any transformations which an image type does not support will be ignored.
	//
	TransformedSrc string `json:"transformedSrc"`
	// The location of the image as a URL.
	//
	// If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
	//
	// All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
	//
	// If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
	//
	URL string `json:"url"`
	// The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Width *int `json:"width,omitempty"`
}

func (Image) IsHasMetafields() {}

// An auto-generated type for paginating through multiple Images.
type ImageConnection struct {
	// A list of edges.
	Edges []ImageEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Image and a cursor during pagination.
type ImageEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ImageEdge.
	Node *Image `json:"node,omitempty"`
}

// Specifies the input fields for an image.
type ImageInput struct {
	// A globally-unique identifier.
	ID *string `json:"id,omitempty"`
	// A word or phrase to share the nature or contents of an image.
	AltText *string `json:"altText,omitempty"`
	// The URL of the image. May be a signed upload URL.
	Src *string `json:"src,omitempty"`
}

// The available options for transforming an image.
//
// All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
type ImageTransformInput struct {
	// Crop the image according to the specified region.
	Crop *CropRegion `json:"crop,omitempty"`
	// Image width in pixels between 1 and 5760.
	//
	MaxWidth *int `json:"maxWidth,omitempty"`
	// Image height in pixels between 1 and 5760.
	//
	MaxHeight *int `json:"maxHeight,omitempty"`
	// Image size multiplier for high-resolution retina displays. Must be within 1..3.
	//
	Scale *int `json:"scale,omitempty"`
	// Convert the source image into the preferred content type.
	// Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
	//
	PreferredContentType *ImageContentType `json:"preferredContentType,omitempty"`
}

// Upload parameter of an image.
type ImageUploadParameter struct {
	// Parameter name.
	Name string `json:"name"`
	// Parameter value.
	Value string `json:"value"`
}

// A filter with an integer that's been added to a segment query.
type IntegerSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (IntegerSegmentFilter) IsSegmentFilter() {}

// Return type for `inventoryActivate` mutation.
type InventoryActivatePayload struct {
	// The inventory level that was activated.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the items and their adjustments.
type InventoryAdjustItemInput struct {
	// ID of the inventory item to adjust.
	InventoryItemID string `json:"inventoryItemId"`
	// The change applied to the `available` quantity of the item at the location.
	AvailableDelta int `json:"availableDelta"`
}

// Specifies the fields required to adjust the inventory quantity.
type InventoryAdjustQuantityInput struct {
	// ID of the inventory level to adjust.
	InventoryLevelID string `json:"inventoryLevelId"`
	// The change applied to the `available` quantity of the item at the location.
	AvailableDelta int `json:"availableDelta"`
}

// Return type for `inventoryAdjustQuantity` mutation.
type InventoryAdjustQuantityPayload struct {
	// Represents the updated inventory quantity of an inventory item at a specific location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `inventoryBulkAdjustQuantityAtLocation` mutation.
type InventoryBulkAdjustQuantityAtLocationPayload struct {
	// Represents the updated inventory quantities of an inventory item at the location.
	InventoryLevels []InventoryLevel `json:"inventoryLevels,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `inventoryDeactivate` mutation.
type InventoryDeactivatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the goods available to be shipped to a customer.
// It holds essential information about the goods, including SKU and whether it is tracked.
type InventoryItem struct {
	// The ISO 3166-1 alpha-2 country code of where the item originated from.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// A list of country specific harmonized system codes.
	CountryHarmonizedSystemCodes *CountryHarmonizedSystemCodeConnection `json:"countryHarmonizedSystemCodes,omitempty"`
	// The date and time when the inventory item was created.
	CreatedAt string `json:"createdAt"`
	// The number of inventory items that share the same SKU with this item.
	DuplicateSkuCount int `json:"duplicateSkuCount"`
	// The harmonized system code of the item.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The URL that points to the inventory history for the item.
	InventoryHistoryURL *string `json:"inventoryHistoryUrl,omitempty"`
	// The inventory item's quantities at the specified location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// A list of the inventory item's quantities for each location that the inventory item can be stocked at.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The number of locations where this inventory item is stocked.
	LocationsCount int `json:"locationsCount"`
	// The ISO 3166-2 alpha-2 province code of where the item originated from.
	ProvinceCodeOfOrigin *string `json:"provinceCodeOfOrigin,omitempty"`
	// Whether the inventory item requires shipping.
	RequiresShipping bool `json:"requiresShipping"`
	// Inventory item SKU.
	Sku *string `json:"sku,omitempty"`
	// Whether inventory levels are tracked for the item.
	Tracked bool `json:"tracked"`
	// Whether the value of the `tracked` field for the inventory item can be changed.
	TrackedEditable *EditableProperty `json:"trackedEditable,omitempty"`
	// Unit cost associated with the inventory item.
	UnitCost *MoneyV2 `json:"unitCost,omitempty"`
	// The date and time when the inventory item was updated.
	UpdatedAt string `json:"updatedAt"`
	// The variant that owns this inventory item.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (InventoryItem) IsLegacyInteroperability() {}
func (InventoryItem) IsNode()                   {}

// An auto-generated type for paginating through multiple InventoryItems.
type InventoryItemConnection struct {
	// A list of edges.
	Edges []InventoryItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryItem and a cursor during pagination.
type InventoryItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of InventoryItemEdge.
	Node *InventoryItem `json:"node,omitempty"`
}

// Specifies the input fields for an inventory item.
type InventoryItemInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty"`
	// Whether the inventory item is tracked.
	Tracked *bool `json:"tracked,omitempty"`
}

// Inventory item.
type InventoryItemUpdateInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty"`
	// Whether the inventory item is tracked. The value must be true to adjust the item's inventory levels.
	Tracked *bool `json:"tracked,omitempty"`
	// The ISO 3166-1 alpha-2 country code of where the item originated from.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// The ISO 3166-2 alpha-2 province/state code of where the item originated from.
	ProvinceCodeOfOrigin *string `json:"provinceCodeOfOrigin,omitempty"`
	// The harmonized system code of the inventory item. This must be a number between 6 and 13 digits.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// List of country-specific harmonized system codes.
	CountryHarmonizedSystemCodes []CountryHarmonizedSystemCodeInput `json:"countryHarmonizedSystemCodes,omitempty"`
}

// Return type for `inventoryItemUpdate` mutation.
type InventoryItemUpdatePayload struct {
	// The inventory item that was updated.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The quantities of an inventory item that are related to a specific location.
type InventoryLevel struct {
	// The quantity of inventory items that are available at the inventory level's associated location.
	Available int `json:"available"`
	// Whether the inventory items associated with the inventory level can be deactivated.
	CanDeactivate bool `json:"canDeactivate"`
	// The date and time when the inventory level was created.
	CreatedAt string `json:"createdAt"`
	// Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
	DeactivationAlert *string `json:"deactivationAlert,omitempty"`
	// Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
	DeactivationAlertHTML *string `json:"deactivationAlertHtml,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The quantity of inventory items that are going to the inventory level's associated location.
	Incoming int `json:"incoming"`
	// Inventory item associated with the inventory level.
	Item *InventoryItem `json:"item,omitempty"`
	// The location associated with the inventory level.
	Location *Location `json:"location,omitempty"`
	// The date and time when the inventory level was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (InventoryLevel) IsNode() {}

// An auto-generated type for paginating through multiple InventoryLevels.
type InventoryLevelConnection struct {
	// A list of edges.
	Edges []InventoryLevelEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryLevel and a cursor during pagination.
type InventoryLevelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of InventoryLevelEdge.
	Node *InventoryLevel `json:"node,omitempty"`
}

// Specifies the input fields for an inventory level.
type InventoryLevelInput struct {
	// The available quantity of an inventory item at a location.
	AvailableQuantity int `json:"availableQuantity"`
	// The ID of a location.
	LocationID string `json:"locationId"`
}

// A job corresponds to some long running task that the client should poll for status.
type Job struct {
	// This indicates if the job is still queued or has been run.
	Done bool `json:"done"`
	// A globally-unique identifier that's returned when running an asynchronous mutation.
	ID string `json:"id"`
	// This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
	Query *QueryRoot `json:"query,omitempty"`
}

// The total number of pending orders on a shop if less then a maximum, or that maximum.
// The atMax field indicates when this maximum has been reached.
type LimitedPendingOrderCount struct {
	// This is set when the number of pending orders has reached the maximum.
	AtMax bool `json:"atMax"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	//
	Count int `json:"count"`
}

// Represents a single line item on an order.
type LineItem struct {
	// Whether the line item can be restocked.
	CanRestock bool `json:"canRestock"`
	// The subscription contract associated with this line item.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// The line item's quantity, minus the removed quantity.
	CurrentQuantity int `json:"currentQuantity"`
	// A list of additional information about the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied, in shop currency.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total line price after discounts are applied, in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The duties associated with the line item.
	Duties []Duty `json:"duties,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity"`
	// The service provider that fulfills the line item.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	//
	FulfillmentStatus string `json:"fulfillmentStatus"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable"`
	// The name of the product.
	Name string `json:"name"`
	// The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity"`
	// The total price without discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant unit price without discounts applied, in shop currency.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty"`
	// The number of variant units ordered.
	Quantity int `json:"quantity"`
	// The line item's quantity, minus the removed quantity.
	RefundableQuantity int `json:"refundableQuantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Whether the line item can be restocked.
	Restockable bool `json:"restockable"`
	// The selling plan details associated with the line item.
	SellingPlan *LineItemSellingPlan `json:"sellingPlan,omitempty"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty"`
	// Staff attributed to the initial sale of the line item.
	StaffMember *StaffMember `json:"staffMember,omitempty"`
	// The taxes charged for this line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product.
	Title string `json:"title"`
	// The sum of all AppliedDiscounts on this line item, in shop currency.
	TotalDiscount null.String `json:"totalDiscount"`
	// The sum of all AppliedDiscounts on this line item, in shop and presentment currencies.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units, in shop currency.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal"`
	// The total discounted value of unfulfilled units, in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal"`
	// The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty"`
	// The name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty"`
}

func (LineItem) IsNode() {}

// An auto-generated type for paginating through multiple LineItems.
type LineItemConnection struct {
	// A list of edges.
	Edges []LineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItem and a cursor during pagination.
type LineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LineItemEdge.
	Node *LineItem `json:"node,omitempty"`
}

// Represents a single line item on an order.
type LineItemMutable struct {
	// Whether the line item can be restocked.
	CanRestock bool `json:"canRestock"`
	// A list of additional information about the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied, in shop currency.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total line price after discounts are applied, in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity"`
	// The service provider that fulfills the line item.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	//
	FulfillmentStatus string `json:"fulfillmentStatus"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable"`
	// The name of the product.
	Name string `json:"name"`
	// The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity"`
	// The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant unit price without discounts applied, in shop currency.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty"`
	// The number of variant units ordered.
	Quantity int `json:"quantity"`
	// The line item's quantity, minus the removed quantity.
	RefundableQuantity int `json:"refundableQuantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Whether the line item can be restocked.
	Restockable bool `json:"restockable"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty"`
	// Staff attributed to the initial sale of the line item.
	StaffMember *StaffMember `json:"staffMember,omitempty"`
	// The TaxLine object connected to this line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product.
	Title string `json:"title"`
	// The sum of all AppliedDiscounts on this line item, in shop currency.
	TotalDiscount null.String `json:"totalDiscount"`
	// The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units, in shop currency.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal"`
	// The total discounted value of unfulfilled units, in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal"`
	// The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty"`
	// The name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty"`
}

func (LineItemMutable) IsNode() {}

// An auto-generated type for paginating through multiple LineItemMutables.
type LineItemMutableConnection struct {
	// A list of edges.
	Edges []LineItemMutableEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItemMutable and a cursor during pagination.
type LineItemMutableEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LineItemMutableEdge.
	Node *LineItemMutable `json:"node,omitempty"`
}

// Represents the selling plan for a line item.
type LineItemSellingPlan struct {
	// The name of the selling plan for display purposes.
	Name string `json:"name"`
}

// A link to direct users to.
type Link struct {
	// A context-sensitive label for the link.
	Label string `json:"label"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The URL that the link visits.
	URL string `json:"url"`
}

func (Link) IsHasPublishedTranslations() {}

// A locale.
type Locale struct {
	// Locale ISO code.
	IsoCode string `json:"isoCode"`
	// Human-readable locale name.
	Name string `json:"name"`
}

// Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
type LocalizationExtension struct {
	// Country ISO 3166-1 alpha-2 code.
	CountryCode CountryCode `json:"countryCode"`
	// The localized extension keys that are allowed.
	Key LocalizationExtensionKey `json:"key"`
	// The purpose of this localization extension.
	Purpose LocalizationExtensionPurpose `json:"purpose"`
	// The localized extension title.
	Title string `json:"title"`
	// The value of the field.
	Value string `json:"value"`
}

// An auto-generated type for paginating through multiple LocalizationExtensions.
type LocalizationExtensionConnection struct {
	// A list of edges.
	Edges []LocalizationExtensionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
type LocalizationExtensionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LocalizationExtensionEdge.
	Node *LocalizationExtension `json:"node,omitempty"`
}

// Specifies the input fields for a LocalizationExtensionInput.
type LocalizationExtensionInput struct {
	// The key for the localization extension.
	Key LocalizationExtensionKey `json:"key"`
	// The localization extension value.
	Value string `json:"value"`
}

// Represents the location where the physical good resides.
type Location struct {
	// Whether this location can be reactivated.
	Activatable bool `json:"activatable"`
	// The address of this location.
	Address *LocationAddress `json:"address,omitempty"`
	// Whether the location address has been verified.
	AddressVerified bool `json:"addressVerified"`
	// Whether this location can be deactivated.
	Deactivatable bool `json:"deactivatable"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
	DeactivatedAt *string `json:"deactivatedAt,omitempty"`
	// Whether this location can be deleted.
	Deletable bool `json:"deletable"`
	// Name of the service provider that fulfills from this location.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Whether this location can fulfill online orders.
	FulfillsOnlineOrders bool `json:"fulfillsOnlineOrders"`
	// Whether this location has active inventory.
	HasActiveInventory bool `json:"hasActiveInventory"`
	// Whether this location has orders that need to be fulfilled.
	HasUnfulfilledOrders bool `json:"hasUnfulfilledOrders"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The quantities of an inventory item at this location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// A list of the quantities of the inventory items that can be stocked at this location.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// Whether the location is active.
	IsActive bool `json:"isActive"`
	// Whether the location is your primary location for shipping inventory.
	IsPrimary bool `json:"isPrimary"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// The name of the location.
	Name string `json:"name"`
	// Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
	ShipsInventory bool `json:"shipsInventory"`
	// List of suggested addresses for this location (empty if none).
	SuggestedAddresses []LocationSuggestedAddress `json:"suggestedAddresses,omitempty"`
}

func (Location) IsHasMetafieldDefinitions() {}
func (Location) IsLegacyInteroperability()  {}
func (Location) IsNode()                    {}

// Represents the address of a location.
type LocationAddress struct {
	// The first line of the address for the location.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address for the location.
	Address2 *string `json:"address2,omitempty"`
	// The city of the location.
	City *string `json:"city,omitempty"`
	// The country of the location.
	Country *string `json:"country,omitempty"`
	// The country code of the location.
	CountryCode *string `json:"countryCode,omitempty"`
	// A formatted version of the address for the location.
	Formatted []string `json:"formatted,omitempty"`
	// The latitude coordinates of the location.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude coordinates of the location.
	Longitude *float64 `json:"longitude,omitempty"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty"`
	// The province of the location.
	Province *string `json:"province,omitempty"`
	// The code for the province, state, or district of the address of the location.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The ZIP code of the location.
	Zip *string `json:"zip,omitempty"`
}

// An auto-generated type for paginating through multiple Locations.
type LocationConnection struct {
	// A list of edges.
	Edges []LocationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Location and a cursor during pagination.
type LocationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LocationEdge.
	Node *Location `json:"node,omitempty"`
}

// Represents a suggested address for a location.
type LocationSuggestedAddress struct {
	// The first line of the suggested address.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the suggested address.
	Address2 *string `json:"address2,omitempty"`
	// The city of the suggested address.
	City *string `json:"city,omitempty"`
	// The country of the suggested address.
	Country *string `json:"country,omitempty"`
	// The country code of the suggested address.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// A formatted version of the suggested address.
	Formatted []string `json:"formatted,omitempty"`
	// The province of the suggested address.
	Province *string `json:"province,omitempty"`
	// The code for the province, state, or district of the suggested address.
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The ZIP code of the suggested address.
	Zip *string `json:"zip,omitempty"`
}

// Represents a customer mailing address.
//
// For example, a customer's default address and an order's billing address are both mailling addresses.
type MailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	//
	Address2 *string `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	//
	City *string `json:"city,omitempty"`
	// The name of the customer's company or organization.
	//
	Company *string `json:"company,omitempty"`
	// The name of the country.
	//
	Country *string `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCode *string `json:"countryCode,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCodeV2 *CountryCode `json:"countryCodeV2,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty"`
	// A formatted version of the address, customized by the provided arguments.
	Formatted []string `json:"formatted,omitempty"`
	// A comma-separated list of the values for city, province, and country.
	FormattedArea *string `json:"formattedArea,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty"`
	// The latitude coordinate of the customer address.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude coordinate of the customer address.
	Longitude *float64 `json:"longitude,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	//
	Name *string `json:"name,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty"`
}

func (MailingAddress) IsNode() {}

// The fields used to create or update a mailing address.
type MailingAddressInput struct {
	// The first line of the address. Typically the street address or PO Box number.
	//
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	//
	Address2 *string `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	//
	City *string `json:"city,omitempty"`
	// The name of the customer's company or organization.
	//
	Company *string `json:"company,omitempty"`
	// The name of the country. This argument is deprecated: Use `countryCode` instead.
	Country *string `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty"`
	// This argument is deprecated: Not needed for 90% of mutations, and provided separately where it is needed.
	ID *string `json:"id,omitempty"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district. This argument is deprecated: Use `provinceCode` instead.
	Province *string `json:"province,omitempty"`
	// The code for the region of the address, such as the province, state, or district.
	// For example QC for Quebec, Canada.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty"`
}

// Manual discount applications capture the intentions of a discount that was manually created for an order.
type ManualDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The description of the discount application.
	Description *string `json:"description,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the discount application.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (ManualDiscountApplication) IsDiscountApplication() {}

// The marketing activity resource represents marketing that a
//
//	merchant created through an app.
type MarketingActivity struct {
	// The URL of the marketing activity listing page in the marketing section.
	ActivityListURL *string `json:"activityListUrl,omitempty"`
	// The amount spent on the marketing activity.
	AdSpend *MoneyV2 `json:"adSpend,omitempty"`
	// The admin url used to edit this activity.
	AdminEditURL string `json:"adminEditUrl"`
	// The app which created this marketing activity.
	App *App `json:"app,omitempty"`
	// The errors generated when an app publishes the marketing activity.
	AppErrors *MarketingActivityExtensionAppErrors `json:"appErrors,omitempty"`
	// The step type of a marketing automation activity.
	AutomationStepType *string `json:"automationStepType,omitempty"`
	// The trigger description for the automation step.
	AutomationTriggerDescription *string `json:"automationTriggerDescription,omitempty"`
	// The allocated budget for the marketing activity.
	Budget *MarketingBudget `json:"budget,omitempty"`
	// The date and time when the marketing activity was created.
	CreatedAt string `json:"createdAt"`
	// The time at which the most recent error occurred, which is set by the app.
	ErrorOccurredAt *string `json:"errorOccurredAt,omitempty"`
	// The flow editor URL to which the marketing activity is associated.
	FlowEditorURL *string `json:"flowEditorUrl,omitempty"`
	// The completed content in the marketing activity creation form.
	FormData *string `json:"formData,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Whether the marketing activity is in the main workflow version of
	//           the marketing automation.
	InMainWorkflowVersion bool `json:"inMainWorkflowVersion"`
	// The available marketing channels for a marketing activity.
	MarketingChannel MarketingChannel `json:"marketingChannel"`
	// Associated marketing event of this marketing activity.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty"`
	// The scheduled end time of the marketing activity, which is set by the app.
	ScheduledToEndAt *string `json:"scheduledToEndAt,omitempty"`
	// The scheduled start time of the marketing activity, which is set by the app.
	ScheduledToStartAt *string `json:"scheduledToStartAt,omitempty"`
	// A contextual description of the marketing activity based on the platform and tactic used.
	SourceAndMedium string `json:"sourceAndMedium"`
	// The current state of the marketing activity.
	Status MarketingActivityStatus `json:"status"`
	// The severity of the marketing activity's status.
	StatusBadgeType *MarketingActivityStatusBadgeType `json:"statusBadgeType,omitempty"`
	// The severity of the marketing activity's status.
	StatusBadgeTypeV2 *BadgeType `json:"statusBadgeTypeV2,omitempty"`
	// The rendered status of the marketing activity.
	StatusLabel string `json:"statusLabel"`
	// The [date and time](
	//           https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
	//           ) when the activity's status last changed.
	StatusTransitionedAt *string `json:"statusTransitionedAt,omitempty"`
	// The method of marketing used for this marketing activity.
	Tactic MarketingTactic `json:"tactic"`
	// The status to which the marketing activity is currently transitioning.
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty"`
	// The marketing activity's title, which is rendered on the marketing listing page.
	Title string `json:"title"`
	// Whether or not the marketing activity is tracking opens.
	TrackingOpens bool `json:"trackingOpens"`
	// The date and time when the marketing activity was updated.
	UpdatedAt string `json:"updatedAt"`
	// The set of [Urchin Tracking Module](
	//           https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
	//           ) used in the URL for tracking this marketing activity.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty"`
}

func (MarketingActivity) IsNode() {}

// This type combines budget amount and its marketing budget type.
type MarketingActivityBudgetInput struct {
	// Budget type for marketing activity.
	BudgetType *MarketingBudgetBudgetType `json:"budgetType,omitempty"`
	// Amount of budget for the marketing activity.
	Total *MoneyInput `json:"total,omitempty"`
}

// An auto-generated type for paginating through multiple MarketingActivities.
type MarketingActivityConnection struct {
	// A list of edges.
	Edges []MarketingActivityEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields required to create a marketing activity.
type MarketingActivityCreateInput struct {
	// The title of the marketing activity.
	MarketingActivityTitle *string `json:"marketingActivityTitle,omitempty"`
	// The form data in JSON serialized as a string.
	FormData *string `json:"formData,omitempty"`
	// The ID of the marketing activity extension.
	MarketingActivityExtensionID string `json:"marketingActivityExtensionId"`
	// Encoded context containing marketing campaign id.
	Context *string `json:"context,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App.
	//
	Utm *UTMInput `json:"utm,omitempty"`
	// The current state of the marketing activity.
	Status MarketingActivityStatus `json:"status"`
	// The budget for this marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty"`
}

// Return type for `marketingActivityCreate` mutation.
type MarketingActivityCreatePayload struct {
	// The created marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The path to return back to shopify admin from embedded editor.
	RedirectPath *string `json:"redirectPath,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MarketingActivity and a cursor during pagination.
type MarketingActivityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketingActivityEdge.
	Node *MarketingActivity `json:"node,omitempty"`
}

// Represents errors returned from apps when using the marketing activity extension.
type MarketingActivityExtensionAppErrors struct {
	// The app error type.
	Code MarketingActivityExtensionAppErrorCode `json:"code"`
	// The list of errors returned by the app.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to update a marketing activity.
type MarketingActivityUpdateInput struct {
	// The ID of the marketing activity.
	ID string `json:"id"`
	// The ID of the recommendation that the marketing activity was created from, if one exists.
	MarketingRecommendationID *string `json:"marketingRecommendationId,omitempty"`
	// The title of the marketing activity.
	Title *string `json:"title,omitempty"`
	// The event context of the marketing activity. The event context is relayed from
	//                the external editor URL.
	EventContext *string `json:"eventContext,omitempty"`
	// Whether the marketing activity uses the external editor.
	UseExternalEditor *bool `json:"useExternalEditor,omitempty"`
	// Whether the marketing activity is tracking the email open rate.
	TrackingOpens *bool `json:"trackingOpens,omitempty"`
	// The budget for the marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty"`
	// The cumulative amount spent on the marketing activity. This argument is deprecated: Use `MarketingEngagementCreate.MarketingEngagementInput.adSpend` GraphQL to send the ad spend.
	AdSpend *MoneyInput `json:"adSpend,omitempty"`
	// The current state of the marketing activity. Learn more about
	// [marketing activity status](/apps/app-extensions/marketing-activities/reference/status).
	//
	Status *MarketingActivityStatus `json:"status,omitempty"`
	// The target state that the marketing activity is transitioning to. Learn more about [marketing activity status](/apps/app-extensions/marketing-activities/reference/status).
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty"`
	// The time at which the activity is scheduled to start.
	ScheduledToStartAt *string `json:"scheduledToStartAt,omitempty"`
	// The time at which the activity is scheduled to end.
	ScheduledToEndAt *string `json:"scheduledToEndAt,omitempty"`
	// The form data of the marketing activity. This is only used if the marketing activity is
	//               integrated with the external editor.
	FormData *string `json:"formData,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App. The utm field can only be set once and never modified.
	//
	Utm *UTMInput `json:"utm,omitempty"`
	// A list of the item IDs that were marketed in this marketing activity. Valid types for these items are:
	// * `Product`
	// * `Shop`
	//
	MarketedResources []string `json:"marketedResources,omitempty"`
	// Encoded context provided by Shopify during the update marketing activity callback. This argument is deprecated: This context is no longer needed by Shopify in the callback.
	Context *string `json:"context,omitempty"`
	// Error messages generated when the app was trying to complete this activity.
	// Learn more about the
	// JSON[format expected for the error messages](/apps/app-extensions/marketing-activities/reference
	// /status#failed-status).
	//
	Errors *string `json:"errors,omitempty"`
	// The time at which the most recent error occurred.
	ErrorOccurredAt *string `json:"errorOccurredAt,omitempty"`
}

// Return type for `marketingActivityUpdate` mutation.
type MarketingActivityUpdatePayload struct {
	// The updated marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The redirect path from the embedded editor to the Shopify admin.
	RedirectPath *string `json:"redirectPath,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// This type combines budget amount and its marketing budget type.
type MarketingBudget struct {
	// The budget type for a marketing activity.
	BudgetType MarketingBudgetBudgetType `json:"budgetType"`
	// The amount of budget for marketing activity.
	Total *MoneyV2 `json:"total,omitempty"`
}

// Marketing engagement represents customer activity taken on a marketing event.
type MarketingEngagement struct {
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyV2 `json:"adSpend,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty"`
	// The total number of comments for the day.
	CommentsCount *int `json:"commentsCount,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty"`
	// The total number of fails for the day.
	FailsCount *int `json:"failsCount,omitempty"`
	// The total number of favorites for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *string `json:"fetchedAt,omitempty"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty"`
	// The marketing activity related to this engagement.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The date that these engagements occurred on.
	OccurredOn string `json:"occurredOn"`
	// The total number of sends for the day.
	SendsCount *int `json:"sendsCount,omitempty"`
	// The total number of shares for the day.
	SharesCount *int `json:"sharesCount,omitempty"`
	// The total number of unique clicks for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty"`
	// The total number of unsubscribes for the day.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *string `json:"utcOffset,omitempty"`
	// The total number of views for the day.
	ViewsCount *int `json:"viewsCount,omitempty"`
}

// Return type for `marketingEngagementCreate` mutation.
type MarketingEngagementCreatePayload struct {
	// The marketing engagement that was created.
	MarketingEngagement *MarketingEngagement `json:"marketingEngagement,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// This object represents marketing engagement input fields for a marketing engagement.
type MarketingEngagementInput struct {
	// The date that these engagements occurred on.
	OccurredOn string `json:"occurredOn"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty"`
	// The total number of views for the day.
	ViewsCount *int `json:"viewsCount,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty"`
	// The total number of shares for the day.
	SharesCount *int `json:"sharesCount,omitempty"`
	// The total number of favorites for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty"`
	// The total number of comments for the day.
	CommentsCount *int `json:"commentsCount,omitempty"`
	// The total number of unsubscribes for the day.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty"`
	// The total number of fails for the day.
	FailsCount *int `json:"failsCount,omitempty"`
	// The total number of sends for the day.
	SendsCount *int `json:"sendsCount,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty"`
	// The total number of unique clicks for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty"`
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyInput `json:"adSpend,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *string `json:"utcOffset,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *string `json:"fetchedAt,omitempty"`
}

// Represents actions that market a merchant's store or products.
type MarketingEvent struct {
	// The app that the marketing event is attributed to.
	App *App `json:"app,omitempty"`
	// The marketing channel used by the marketing event.
	Channel *MarketingChannel `json:"channel,omitempty"`
	// A human-readable description of the marketing event.
	Description *string `json:"description,omitempty"`
	// The date and time when the marketing event ended.
	EndedAt *string `json:"endedAt,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The URL where the marketing event can be managed.
	ManageURL *string `json:"manageUrl,omitempty"`
	// The URL where the marketing event can be previewed.
	PreviewURL *string `json:"previewUrl,omitempty"`
	// An optional ID that helps Shopify validate engagement data.
	RemoteID *string `json:"remoteId,omitempty"`
	// The date and time when the marketing event is scheduled to end.
	ScheduledToEndAt *string `json:"scheduledToEndAt,omitempty"`
	// Where the `MarketingEvent` occurred and what kind of content was used.
	// Because `utmSource` and `utmMedium` are often used interchangeably, this is
	// based on a combination of `marketingChannel`, `referringDomain`, and `type` to
	// provide a consistent representation for any given piece of marketing
	// regardless of the app that created it.
	//
	SourceAndMedium string `json:"sourceAndMedium"`
	// The date and time when the marketing event started.
	StartedAt string `json:"startedAt"`
	// The display text for the marketing event type.
	TargetTypeDisplayText string `json:"targetTypeDisplayText"`
	// The marketing event type.
	Type MarketingTactic `json:"type"`
	// The name of the marketing campaign.
	UtmCampaign *string `json:"utmCampaign,omitempty"`
	// The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
	UtmMedium *string `json:"utmMedium,omitempty"`
	// The referrer of the marketing event. Example values: `google`, `newsletter`.
	UtmSource *string `json:"utmSource,omitempty"`
}

func (MarketingEvent) IsLegacyInteroperability() {}
func (MarketingEvent) IsNode()                   {}

// An auto-generated type for paginating through multiple MarketingEvents.
type MarketingEventConnection struct {
	// A list of edges.
	Edges []MarketingEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MarketingEvent and a cursor during pagination.
type MarketingEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketingEventEdge.
	Node *MarketingEvent `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple Media.
type MediaConnection struct {
	// A list of edges.
	Edges []MediaEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Media and a cursor during pagination.
type MediaEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MediaEdge.
	Node Media `json:"node"`
}

// Represents a media error.
type MediaError struct {
	// Code representing the type of error.
	Code MediaErrorCode `json:"code"`
	// Additional details regarding the error.
	Details *string `json:"details,omitempty"`
	// Translated error message.
	Message string `json:"message"`
}

// An image hosted on Shopify.
type MediaImage struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
	//
	CreatedAt string `json:"createdAt"`
	// Any errors that have occurred on the file.
	FileErrors []FileError `json:"fileErrors,omitempty"`
	// The status of the file.
	FileStatus FileStatus `json:"fileStatus"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The image for the media. Returns `null` until `status` is `READY`.
	Image *Image `json:"image,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The MIME type of the image.
	MimeType *string `json:"mimeType,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (MediaImage) IsFile()               {}
func (MediaImage) IsMedia()              {}
func (MediaImage) IsNode()               {}
func (MediaImage) IsMetafieldReference() {}

// Represents the preview image for a media.
type MediaPreviewImage struct {
	// The preview image for the media. Returns `null` until `status` is `READY`.
	Image *Image `json:"image,omitempty"`
	// Current status of the preview image.
	Status MediaPreviewImageStatus `json:"status"`
}

// Represents an error that happens during execution of a Media query or mutation.
type MediaUserError struct {
	// The error code.
	Code *MediaUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MediaUserError) IsDisplayableError() {}

// Represents a media warning.
type MediaWarning struct {
	// The code representing the type of warning.
	Code MediaWarningCode `json:"code"`
	// Translated warning message.
	Message *string `json:"message,omitempty"`
}

// Merchant approval for accelerated onboarding to channel integration apps.
type MerchantApprovalSignals struct {
	// Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
	IdentityVerified bool `json:"identityVerified"`
	// Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop is not marked for verification.
	VerifiedByShopify bool `json:"verifiedByShopify"`
}

// Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
// For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
// Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
// Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
type Metafield struct {
	// The date and time when the metafield was created.
	CreatedAt string `json:"createdAt"`
	// The optional, associated metafield definition that maps to this metafield's namespace and key pair.
	//
	Definition *MetafieldDefinition `json:"definition,omitempty"`
	// The description of the metafield.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The unique identifier for the metafield in its namespace.
	//
	Key string `json:"key"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// A container for a group of metafields.
	// Grouping metafields within a namespace prevents your metafields from conflicting with other metafields that have the same key name.
	//
	Namespace string `json:"namespace"`
	// The resource that the metafield is attached to.
	Owner HasMetafields `json:"owner"`
	// The resource that the metafield is attached to.
	//
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// Returns a reference object if the metafield definition's type is a resource reference.
	Reference MetafieldReference `json:"reference"`
	// The type of data that the metafield stores in the `value` field.
	// See the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Type string `json:"type"`
	// The date and time when the metafield was updated.
	UpdatedAt string `json:"updatedAt"`
	// The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
	//
	Value string `json:"value"`
}

func (Metafield) IsLegacyInteroperability() {}
func (Metafield) IsNode()                   {}

// An auto-generated type for paginating through multiple Metafields.
type MetafieldConnection struct {
	// A list of edges.
	Edges []MetafieldEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Metafield definitions enable you to define additional validation constraints for metafields, and enable the
// merchant to edit metafield values in context.
type MetafieldDefinition struct {
	// The date and time when the metafield definition was created.
	CreatedAt string `json:"createdAt"`
	// The description of a metafield definition.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The key name used to identify a metafield definition within a namespace.
	Key string `json:"key"`
	// The list of metafields associated with a metafield definition.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The count of metafields under a metafield definition.
	MetafieldsCount int `json:"metafieldsCount"`
	// The human-readable name for the metafield definition.
	Name string `json:"name"`
	// The namespace of the metafield definition. You can use a namespace to group related metafields.
	Namespace string `json:"namespace"`
	// The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.
	//
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The position of the metafield definition in the pinned list.
	PinnedPosition *int `json:"pinnedPosition,omitempty"`
	// The standard metafield definition template associated with a metafield definition.
	StandardTemplate *StandardMetafieldDefinitionTemplate `json:"standardTemplate,omitempty"`
	// The type of data that the metafield will store.
	Type *MetafieldDefinitionType `json:"type,omitempty"`
	// The date and time when the metafield definition was updated.
	UpdatedAt string `json:"updatedAt"`
	// The validation status for the existing metafields within a metafield definition.
	ValidationStatus MetafieldDefinitionValidationStatus `json:"validationStatus"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
	// that the metafield will only store dates after the specific minimum date.
	//
	Validations []MetafieldDefinitionValidation `json:"validations,omitempty"`
	// Whether metafields for the metafield definition are visible using the Storefront API.
	VisibleToStorefrontAPI bool `json:"visibleToStorefrontApi"`
}

func (MetafieldDefinition) IsNode() {}

// An auto-generated type for paginating through multiple MetafieldDefinitions.
type MetafieldDefinitionConnection struct {
	// A list of edges.
	Edges []MetafieldDefinitionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `metafieldDefinitionCreate` mutation.
type MetafieldDefinitionCreatePayload struct {
	// The metafield definition that was created.
	CreatedDefinition *MetafieldDefinition `json:"createdDefinition,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionCreate`.
type MetafieldDefinitionCreateUserError struct {
	// The error code.
	Code *MetafieldDefinitionCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionCreateUserError) IsDisplayableError() {}

// Return type for `metafieldDefinitionDelete` mutation.
type MetafieldDefinitionDeletePayload struct {
	// The id of the deleted metafield definition.
	DeletedDefinitionID *string `json:"deletedDefinitionId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionDelete`.
type MetafieldDefinitionDeleteUserError struct {
	// The error code.
	Code *MetafieldDefinitionDeleteUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionDeleteUserError) IsDisplayableError() {}

// An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
type MetafieldDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldDefinitionEdge.
	Node *MetafieldDefinition `json:"node,omitempty"`
}

// Specifies the input fields that are required to create a metafield definition.
type MetafieldDefinitionInput struct {
	// The namespace to group a metafield definition.
	Namespace string `json:"namespace"`
	// The key name used to identify a metafield definition within a namespace.
	Key string `json:"key"`
	// The human-readable name for the metafield definition.
	Name string `json:"name"`
	// The description for the metafield definition.
	Description *string `json:"description,omitempty"`
	// The resource type that the metafield definition is attached to.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The type of data that the metafield will store.
	Type string `json:"type"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
	// that the metafield will only store dates after the specific minimum date.
	//
	Validations []MetafieldDefinitionValidationInput `json:"validations,omitempty"`
	// Whether metafields for the definition are visible using the Storefront API.
	VisibleToStorefrontAPI *bool `json:"visibleToStorefrontApi,omitempty"`
	// Whether to pin the metafield definition.
	Pin *bool `json:"pin,omitempty"`
}

// Return type for `metafieldDefinitionPin` mutation.
type MetafieldDefinitionPinPayload struct {
	// The metafield definition that was pinned.
	PinnedDefinition *MetafieldDefinition `json:"pinnedDefinition,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionPinUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionPin`.
type MetafieldDefinitionPinUserError struct {
	// The error code.
	Code *MetafieldDefinitionPinUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionPinUserError) IsDisplayableError() {}

// The type and name for the optional validation configuration of a metafield.
//
// For example, a supported validation might consist of a `max` name and a `number_integer` type.
// This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
type MetafieldDefinitionSupportedValidation struct {
	// The name of the metafield definition validation.
	Name string `json:"name"`
	// The type of input for the validation.
	Type string `json:"type"`
}

// A metafield definition type provides basic foundation and validation for a metafield.
type MetafieldDefinitionType struct {
	// The category associated with the metafield definition type.
	Category string `json:"category"`
	// The name of the type for the metafield definition.
	// See the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Name string `json:"name"`
	// The supported validations for a metafield definition type.
	SupportedValidations []MetafieldDefinitionSupportedValidation `json:"supportedValidations,omitempty"`
	// Whether metafields without a definition can be migrated to a definition of this type.
	SupportsDefinitionMigrations bool `json:"supportsDefinitionMigrations"`
	// The value type for a metafield created with this definition type.
	ValueType MetafieldValueType `json:"valueType"`
}

// Return type for `metafieldDefinitionUnpin` mutation.
type MetafieldDefinitionUnpinPayload struct {
	// The metafield definition that was unpinned.
	UnpinnedDefinition *MetafieldDefinition `json:"unpinnedDefinition,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionUnpinUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionUnpin`.
type MetafieldDefinitionUnpinUserError struct {
	// The error code.
	Code *MetafieldDefinitionUnpinUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionUnpinUserError) IsDisplayableError() {}

// Specifies the input fields that are required to update a metafield definition.
type MetafieldDefinitionUpdateInput struct {
	// The namespace to group a metafield definition.
	Namespace string `json:"namespace"`
	// The key name used to identify a metafield definition within a namespace.
	Key string `json:"key"`
	// The human-readable name for the metafield definition.
	Name *string `json:"name,omitempty"`
	// The description for the metafield definition.
	Description *string `json:"description,omitempty"`
	// The resource type that the metafield definition is attached to.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// Whether to pin the metafield definition.
	Pin *bool `json:"pin,omitempty"`
	// Whether metafields for the definition are visible using the Storefront API.
	VisibleToStorefrontAPI *bool `json:"visibleToStorefrontApi,omitempty"`
}

// Return type for `metafieldDefinitionUpdate` mutation.
type MetafieldDefinitionUpdatePayload struct {
	// The metafield definition that was updated.
	UpdatedDefinition *MetafieldDefinition `json:"updatedDefinition,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionUpdate`.
type MetafieldDefinitionUpdateUserError struct {
	// The error code.
	Code *MetafieldDefinitionUpdateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionUpdateUserError) IsDisplayableError() {}

// A configured metafield definition validation.
//
// For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
// and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
//
// Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
type MetafieldDefinitionValidation struct {
	// The validation name.
	Name string `json:"name"`
	// The name for the metafield type of this validation.
	Type string `json:"type"`
	// The validation value.
	Value *string `json:"value,omitempty"`
}

// The name and value for a metafield definition validation.
//
// For example, for a metafield definition of `single_line_text_field` type, you can set a validation with the name `min` and a value of `10`.
// This validation will ensure that the value of the metafield is at least 10 characters.
//
// Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
type MetafieldDefinitionValidationInput struct {
	// The name for the metafield definition validation.
	Name string `json:"name"`
	// The value for the metafield definition validation.
	Value string `json:"value"`
}

// Specifies the input fields to delete a metafield.
type MetafieldDeleteInput struct {
	// The ID of the metafield to delete.
	ID string `json:"id"`
}

// Return type for `metafieldDelete` mutation.
type MetafieldDeletePayload struct {
	// The ID of the deleted metafield.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Metafield and a cursor during pagination.
type MetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldEdge.
	Node *Metafield `json:"node,omitempty"`
}

// The input fields to use to create or update a metafield through a mutation on the owning resource.
// An alternative way to create or update a metafield is by using the
// [metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
type MetafieldInput struct {
	// The description of the metafield.
	Description *string `json:"description,omitempty"`
	// The unique ID of the metafield. You don't include an ID when you create a metafield because the metafield ID
	// is created automatically. The ID is required when you update a metafield.
	//
	ID *string `json:"id,omitempty"`
	// The namespace for a metafield. The namespace is required when you create a metafield and is optional when you
	// update a metafield.
	//
	Namespace *string `json:"namespace,omitempty"`
	// The key name of the metafield. Required when creating but optional when updating.
	Key *string `json:"key,omitempty"`
	// The value of a metafield.
	Value *string `json:"value,omitempty"`
	// The metafield's [type](https://shopify.dev/apps/metafields/types). The metafield type is required
	// when you create a metafield and is optional when you update a metafield.
	//
	Type *string `json:"type,omitempty"`
}

// By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
// you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
// of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
//
// See [expose metafields in the Storefront API](https://shopify.dev/custom-storefront/products/metafields#expose-metafields)
// for more details.
type MetafieldStorefrontVisibility struct {
	// The date and time when the metafield was set to visible in the Storefront API.
	CreatedAt string `json:"createdAt"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The key of a metafield to make visible in the Storefront API.
	Key string `json:"key"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The namespace of a metafield to make visible in the Storefront API.
	Namespace string `json:"namespace"`
	// The owner type of a metafield to make visible in the Storefront API.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The date and time when the `MetafieldStorefrontVisilibty` record was updated.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (MetafieldStorefrontVisibility) IsLegacyInteroperability() {}
func (MetafieldStorefrontVisibility) IsNode()                   {}

// An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
type MetafieldStorefrontVisibilityConnection struct {
	// A list of edges.
	Edges []MetafieldStorefrontVisibilityEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityCreate` mutation.
type MetafieldStorefrontVisibilityCreatePayload struct {
	// The `MetafieldStorefrontVisibility` that was created.
	MetafieldStorefrontVisibility *MetafieldStorefrontVisibility `json:"metafieldStorefrontVisibility,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityDelete` mutation.
type MetafieldStorefrontVisibilityDeletePayload struct {
	// The ID of the deleted `MetafieldStorefrontVisibility` record.
	DeletedMetafieldStorefrontVisibilityID *string `json:"deletedMetafieldStorefrontVisibilityId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
type MetafieldStorefrontVisibilityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldStorefrontVisibilityEdge.
	Node *MetafieldStorefrontVisibility `json:"node,omitempty"`
}

// Specifies the input fields to create a `MetafieldStorefrontVisibility` record.
type MetafieldStorefrontVisibilityInput struct {
	// The namespace of a metafield to make visible in the Storefront API.
	Namespace string `json:"namespace"`
	// The key of a metafield to make visible in the Storefront API.
	Key string `json:"key"`
	// The owner type of a metafield to make visible in the Storefront API.
	OwnerType MetafieldOwnerType `json:"ownerType"`
}

// Specifies the input fields for a metafield value to set.
type MetafieldsSetInput struct {
	// The ID of the owner resource.
	OwnerID string `json:"ownerId"`
	// A container for a group of metafields.
	// Grouping metafields in a namespace prevents your metafields from conflicting with other metafields that have the same key name.
	//
	Namespace string `json:"namespace"`
	// The key name of the metafield.
	Key string `json:"key"`
	// The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
	//
	Value string `json:"value"`
	// The type of data that the metafield stores.
	// The type of data must be a [supported type](https://shopify.dev/apps/metafields/types).
	//
	Type string `json:"type"`
}

// Return type for `metafieldsSet` mutation.
type MetafieldsSetPayload struct {
	// The list of metafields that were set.
	Metafields []Metafield `json:"metafields,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldsSetUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldsSet`.
type MetafieldsSetUserError struct {
	// The error code.
	Code *MetafieldsSetUserErrorCode `json:"code,omitempty"`
	// The index of the array element that's causing the error.
	ElementIndex *int `json:"elementIndex,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldsSetUserError) IsDisplayableError() {}

// Represents a Shopify hosted 3D model.
type Model3d struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty"`
	// The bounding box information of the 3d model.
	BoundingBox *Model3dBoundingBox `json:"boundingBox,omitempty"`
	// The filename of the 3d model.
	Filename string `json:"filename"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The original source for a 3d model.
	OriginalSource *Model3dSource `json:"originalSource,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// The sources for a 3d model.
	Sources []Model3dSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (Model3d) IsMedia() {}
func (Model3d) IsNode()  {}

// Bounding box information of a 3d model.
type Model3dBoundingBox struct {
	// Size in meters of the smallest volume which contains the 3d model.
	//
	Size *Vector3 `json:"size,omitempty"`
}

// Represents a source for a Shopify hosted 3d model.
type Model3dSource struct {
	// The filesize of the 3d model.
	Filesize int `json:"filesize"`
	// The format of the 3d model.
	Format string `json:"format"`
	// The MIME type of the 3d model.
	MimeType string `json:"mimeType"`
	// The URL of the 3d model.
	URL string `json:"url"`
}

// A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
// when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
type MoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney *MoneyV2 `json:"presentmentMoney,omitempty"`
	// Amount in shop currency.
	ShopMoney *MoneyV2 `json:"shopMoney,omitempty"`
}

// Specifies the fields for a monetary value with currency.
type MoneyInput struct {
	// Decimal money amount.
	Amount null.String `json:"amount"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// A monetary value with currency.
type MoneyV2 struct {
	// Decimal money amount.
	Amount null.String `json:"amount"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

func (MoneyV2) IsDeliveryConditionCriteria()               {}
func (MoneyV2) IsPricingValue()                            {}
func (MoneyV2) IsSellingPlanPricingPolicyAdjustmentValue() {}

// An individual move to perform of an object to a position.
type MoveInput struct {
	// The ID of the object to be moved.
	ID string `json:"id"`
	// The new position of the object in the set, using a 0 based index.
	NewPosition string `json:"newPosition"`
}

// A signed upload parameter for uploading an asset to Shopify.
type MutationsStagedUploadTargetGenerateUploadParameter struct {
	// The upload parameter name.
	Name string `json:"name"`
	// The upload parameter value.
	Value string `json:"value"`
}

// A navigation item, holding basic link attributes.
type NavigationItem struct {
	// The unique identifier of the navigation item.
	ID string `json:"id"`
	// The name of the navigation item.
	Title string `json:"title"`
	// The URL of the page that the navigation item links to.
	URL string `json:"url"`
}

// An article in the blogging system. You can query articles from
// [the REST API](https://shopify.dev/api/admin-rest/latest/resources/article
// if you need to access more information about an article. Currently, `OnlineStoreArticle` is
// only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
// the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
type OnlineStoreArticle struct {
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStoreArticle) IsHasPublishedTranslations() {}
func (OnlineStoreArticle) IsNavigable()                {}
func (OnlineStoreArticle) IsNode()                     {}

// Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
// to be used as a type of magazine or newsletter for the shop, with content that changes over time.
type OnlineStoreBlog struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStoreBlog) IsHasPublishedTranslations() {}
func (OnlineStoreBlog) IsNode()                     {}

// A custom page on the Online Store.
type OnlineStorePage struct {
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStorePage) IsMetafieldReference()       {}
func (OnlineStorePage) IsHasPublishedTranslations() {}
func (OnlineStorePage) IsNavigable()                {}
func (OnlineStorePage) IsNode()                     {}

// An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.
// Learn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).
//
// Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
// then you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted
// access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
// [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
//
// **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type Order struct {
	// A list of addtional fees applied to the order.
	AdditionalFees []AdditionalFee `json:"additionalFees,omitempty"`
	// A list of sales agreements associated with the order.
	Agreements *SalesAgreementConnection `json:"agreements,omitempty"`
	// A list of messages that appear on the order page in the Shopify admin.
	//
	Alerts []ResourceAlert `json:"alerts,omitempty"`
	// The application that created the order.
	App *OrderApp `json:"app,omitempty"`
	// The billing address of the customer.
	//
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Whether the billing address matches the shipping address.
	BillingAddressMatchesShippingAddress bool `json:"billingAddressMatchesShippingAddress"`
	// Whether the order can be manually marked as paid.
	CanMarkAsPaid bool `json:"canMarkAsPaid"`
	// Whether a customer email exists for the order.
	CanNotifyCustomer bool `json:"canNotifyCustomer"`
	// The reason provided when the order was canceled.
	// Returns `null` if the order wasn't canceled.
	//
	CancelReason *OrderCancelReason `json:"cancelReason,omitempty"`
	// The date and time when the order was canceled.
	// Returns `null` if the order wasn't canceled.
	//
	CancelledAt *string `json:"cancelledAt,omitempty"`
	// Whether payment for the order can be captured.
	//
	Capturable bool `json:"capturable"`
	// The total order-level discount amount, before returns, in shop currency.
	CartDiscountAmount *null.String `json:"cartDiscountAmount,omitempty"`
	// The total order-level discount amount, before returns, in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty"`
	// The channel that created the order.
	Channel *Channel `json:"channel,omitempty"`
	// The IP address of the API client that created the order.
	ClientIP *string `json:"clientIp,omitempty"`
	// Whether the order is closed.
	Closed bool `json:"closed"`
	// The date and time when the order was closed.
	// Returns `null` if the order is not closed.
	//
	ClosedAt *string `json:"closedAt,omitempty"`
	// Whether inventory has been reserved for the order.
	Confirmed bool `json:"confirmed"`
	// Date and time when the order was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// The shop currency when the order was placed.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The current order-level discount amount after all order updates, in shop and presentment currencies.
	//
	CurrentCartDiscountAmountSet *MoneyBag `json:"currentCartDiscountAmountSet,omitempty"`
	// The sum of the quantities for all line items that contribute to the order's current subtotal price.
	CurrentSubtotalLineItemsQuantity int `json:"currentSubtotalLineItemsQuantity"`
	// The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	CurrentSubtotalPriceSet *MoneyBag `json:"currentSubtotalPriceSet,omitempty"`
	// A list of all tax lines applied to line items on the order, after returns.
	// Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
	//
	CurrentTaxLines []TaxLine `json:"currentTaxLines,omitempty"`
	// The total amount of additional fees after returns, in shop and presentment currencies.
	// Returns `null` if there are no additional fees for the order.
	//
	CurrentTotalAdditionalFeesSet *MoneyBag `json:"currentTotalAdditionalFeesSet,omitempty"`
	// The total amount discounted on the order after returns, in shop and presentment currencies.
	// This includes both order and line level discounts.
	//
	CurrentTotalDiscountsSet *MoneyBag `json:"currentTotalDiscountsSet,omitempty"`
	// The total amount of duties after returns, in shop and presentment currencies.
	// Returns `null` if duties aren't applicable.
	//
	CurrentTotalDutiesSet *MoneyBag `json:"currentTotalDutiesSet,omitempty"`
	// The total price of the order, after returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	//
	CurrentTotalPriceSet *MoneyBag `json:"currentTotalPriceSet,omitempty"`
	// The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
	//
	CurrentTotalTaxSet *MoneyBag `json:"currentTotalTaxSet,omitempty"`
	// The total weight of the order after returns, in grams.
	CurrentTotalWeight string `json:"currentTotalWeight"`
	// A list of the custom attributes added to the order.
	//
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer that placed the order.
	//
	Customer *Customer `json:"customer,omitempty"`
	// Whether the customer agreed to receive marketing materials.
	CustomerAcceptsMarketing bool `json:"customerAcceptsMarketing"`
	// The customer's visits and interactions with the online store before placing the order.
	//
	CustomerJourney *CustomerJourney `json:"customerJourney,omitempty"`
	// The customer's visits and interactions with the online store before placing the order.
	//
	CustomerJourneySummary *CustomerJourneySummary `json:"customerJourneySummary,omitempty"`
	// A two-letter or three-letter language code, optionally followed by a region modifier.
	//
	CustomerLocale *string `json:"customerLocale,omitempty"`
	// A list of discounts that are applied to the order.
	DiscountApplications *DiscountApplicationConnection `json:"discountApplications,omitempty"`
	// The discount code used for the order.
	DiscountCode *string `json:"discountCode,omitempty"`
	// The primary address of the customer.
	// Returns `null` if neither the shipping address nor the billing address was provided.
	//
	DisplayAddress *MailingAddress `json:"displayAddress,omitempty"`
	// The financial status of the order that can be shown to the merchant.
	// This field does not capture all the details of an order's financial state. It should only be used for display summary purposes.
	//
	DisplayFinancialStatus *OrderDisplayFinancialStatus `json:"displayFinancialStatus,omitempty"`
	// The fulfillment status for the order that can be shown to the merchant.
	// This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
	//
	DisplayFulfillmentStatus OrderDisplayFulfillmentStatus `json:"displayFulfillmentStatus"`
	// A list of the disputes associated with the order.
	Disputes []OrderDisputeSummary `json:"disputes,omitempty"`
	// A list of draft fulfillments that can be created for the order, which includes line items that can be partially fulfilled.
	//
	DraftFulfillments []DraftFulfillment `json:"draftFulfillments,omitempty"`
	// Whether the order has had any edits applied.
	Edited bool `json:"edited"`
	// The email address associated with the customer.
	Email *string `json:"email,omitempty"`
	// Whether taxes on the order are estimated.
	// This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
	//
	EstimatedTaxes bool `json:"estimatedTaxes"`
	// A list of events associated with the order.
	Events *EventConnection `json:"events,omitempty"`
	// Whether there are line items that can be fulfilled.
	// This field returns `false` when the order has no fulfillable line items.
	//
	Fulfillable bool `json:"fulfillable"`
	// A list of fulfillment orders for the order.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of shipments for the order.
	Fulfillments []Fulfillment `json:"fulfillments,omitempty"`
	// Whether the order has been paid in full.
	FullyPaid bool `json:"fullyPaid"`
	// Whether the merchant added a timeline comment to the order.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The URL of the first page of the online store that the customer visited before they submitted the order.
	LandingPageDisplayText *string `json:"landingPageDisplayText,omitempty"`
	// The first page of the online store that the customer visited before they submitted the order.
	LandingPageURL *string `json:"landingPageUrl,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// A list of the order's line items.
	LineItems *LineItemConnection `json:"lineItems,omitempty"`
	// A list of the order's line items.
	LineItemsMutable *LineItemMutableConnection `json:"lineItemsMutable,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// The fulfillment location that was assigned when the order was created.
	// Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
	//
	Location *string `json:"location,omitempty"`
	// Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
	MerchantEditable bool `json:"merchantEditable"`
	// A list of reasons why the order can't be edited. For example, "Canceled orders can’t be edited".
	//
	MerchantEditableErrors []string `json:"merchantEditableErrors,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
	// For example, "#1001", "EN1001", or "1001-A".
	// This value isn't unique across multiple stores.
	//
	Name string `json:"name"`
	// The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
	//
	NetPayment null.String `json:"netPayment"`
	// The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
	NetPaymentSet *MoneyBag `json:"netPaymentSet,omitempty"`
	// A list of line items that can't be fulfilled.
	// For example, tips and fully refunded line items can't be fulfilled.
	//
	NonFulfillableLineItems *LineItemConnection `json:"nonFulfillableLineItems,omitempty"`
	// The contents of the note associated with the order.
	//
	Note *string `json:"note,omitempty"`
	// The total amount of additional fees after returns, in shop and presentment currencies.
	// Returns `null` if there are no additional fees for the order.
	//
	OriginalTotalAdditionalFeesSet *MoneyBag `json:"originalTotalAdditionalFeesSet,omitempty"`
	// The total amount of duties before returns, in shop and presentment currencies.
	// Returns `null` if duties aren't applicable.
	//
	OriginalTotalDutiesSet *MoneyBag `json:"originalTotalDutiesSet,omitempty"`
	// The total price of the order at the time of order creation, in shop and presentment currencies.
	OriginalTotalPriceSet *MoneyBag `json:"originalTotalPriceSet,omitempty"`
	// The payment collection details for the order.
	PaymentCollectionDetails *OrderPaymentCollectionDetails `json:"paymentCollectionDetails,omitempty"`
	// A list of the names of all payment gateways used for the order.
	// For example, "Shopify Payments" and "Cash on Delivery (COD)".
	//
	PaymentGatewayNames []string `json:"paymentGatewayNames,omitempty"`
	// The payment terms associated with the order.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
	// The phone number associated with the customer.
	Phone *string `json:"phone,omitempty"`
	// The fulfillment location that was assigned when the order was created.
	// Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
	//
	PhysicalLocation *Location `json:"physicalLocation,omitempty"`
	// The payment `CurrencyCode` of the customer for the order.
	PresentmentCurrencyCode CurrencyCode `json:"presentmentCurrencyCode"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The date and time when the order was processed.
	// This date and time might not match the date and time when the order was created.
	//
	ProcessedAt string `json:"processedAt"`
	// The publication that the order was created from.
	Publication *Publication `json:"publication,omitempty"`
	// The marketing referral code from the link that the customer clicked to visit the store.
	// Supports the following URL attributes: "ref", "source", or "r".
	// For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
	//
	ReferralCode *string `json:"referralCode,omitempty"`
	// A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
	//
	ReferrerDisplayText *string `json:"referrerDisplayText,omitempty"`
	// The URL of the webpage where the customer clicked a link that sent them to your online store.
	//
	ReferrerURL *string `json:"referrerUrl,omitempty"`
	// The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
	RefundDiscrepancySet *MoneyBag `json:"refundDiscrepancySet,omitempty"`
	// Whether the order can be refunded.
	//
	Refundable bool `json:"refundable"`
	// A list of refunds that have been applied to the order.
	//
	Refunds []Refund `json:"refunds,omitempty"`
	// Whether the order has shipping lines or at least one line item on the order that requires shipping.
	//
	RequiresShipping bool `json:"requiresShipping"`
	// Whether any line item on the order can be restocked.
	//
	Restockable bool `json:"restockable"`
	// The fraud risk level of the order.
	RiskLevel OrderRiskLevel `json:"riskLevel"`
	// A list of risks associated with the order.
	Risks []OrderRisk `json:"risks,omitempty"`
	// The mailing address of the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`
	// A summary of all shipping costs on the order.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// A list of the order's shipping lines.
	ShippingLines *ShippingLineConnection `json:"shippingLines,omitempty"`
	// The URL where the customer can check the order's current status.
	StatusPageURL string `json:"statusPageUrl"`
	// The sum of the quantities for all line items that contribute to the order's subtotal price.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity"`
	// The sum of the prices for all line items after discounts and before returns, in shop currency.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	SubtotalPrice *null.String `json:"subtotalPrice,omitempty"`
	// The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// A suggested refund for the order.
	SuggestedRefund *SuggestedRefund `json:"suggestedRefund,omitempty"`
	// A comma separated list of tags associated with the order. Updating `tags` overwrites
	// any existing tags that were previously added to the order. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// A list of all tax lines applied to line items on the order, before returns.
	// Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
	//
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether taxes are included in the subtotal price of the order.
	TaxesIncluded bool `json:"taxesIncluded"`
	// Whether the order is a test.
	// Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
	// A test order cannot be converted into a real order and vice versa.
	//
	Test bool `json:"test"`
	// The authorized amount that is uncaptured or undercaptured, in shop currency.
	// This amount isn't adjusted for returns.
	//
	TotalCapturable null.String `json:"totalCapturable"`
	// The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
	// This amount isn't adjusted for returns.
	//
	TotalCapturableSet *MoneyBag `json:"totalCapturableSet,omitempty"`
	// The total amount discounted on the order before returns, in shop currency.
	// This includes both order and line level discounts.
	//
	TotalDiscounts *null.String `json:"totalDiscounts,omitempty"`
	// The total amount discounted on the order before returns, in shop and presentment currencies.
	// This includes both order and line level discounts.
	//
	TotalDiscountsSet *MoneyBag `json:"totalDiscountsSet,omitempty"`
	// The total amount not yet transacted for the order, in shop and presentment currencies.
	// A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
	//
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// The total price of the order, before returns, in shop currency.
	// This includes taxes and discounts.
	//
	TotalPrice null.String `json:"totalPrice"`
	// The total price of the order, before returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	//
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// The total amount received from the customer before returns, in shop currency.
	TotalReceived null.String `json:"totalReceived"`
	// The total amount received from the customer before returns, in shop and presentment currencies.
	TotalReceivedSet *MoneyBag `json:"totalReceivedSet,omitempty"`
	// The total amount that was refunded, in shop currency.
	TotalRefunded null.String `json:"totalRefunded"`
	// The total amount that was refunded, in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// The total amount of shipping that was refunded, in shop and presentment currencies.
	TotalRefundedShippingSet *MoneyBag `json:"totalRefundedShippingSet,omitempty"`
	// The total shipping amount before discounts and returns, in shop currency.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// The total shipping amount before discounts and returns, in shop and presentment currencies.
	TotalShippingPriceSet *MoneyBag `json:"totalShippingPriceSet,omitempty"`
	// The total tax amount before returns, in shop currency.
	TotalTax *null.String `json:"totalTax,omitempty"`
	// The total tax amount before returns, in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// The sum of all tip amounts for the order, in shop currency.
	TotalTipReceived *MoneyV2 `json:"totalTipReceived,omitempty"`
	// The sum of all tip amounts for the order, in shop and presentment currencies.
	TotalTipReceivedSet *MoneyBag `json:"totalTipReceivedSet,omitempty"`
	// The total weight of the order before returns, in grams.
	TotalWeight *string `json:"totalWeight,omitempty"`
	// A list of transactions associated with the order.
	Transactions []OrderTransaction `json:"transactions,omitempty"`
	// Whether no payments have been made for the order.
	//
	Unpaid bool `json:"unpaid"`
	// The date and time when the order was modified last.
	UpdatedAt string `json:"updatedAt"`
}

func (Order) IsCommentEventEmbed()         {}
func (Order) IsCommentEventSubject()       {}
func (Order) IsHasEvents()                 {}
func (Order) IsHasLocalizationExtensions() {}
func (Order) IsHasMetafieldDefinitions()   {}
func (Order) IsHasMetafields()             {}
func (Order) IsLegacyInteroperability()    {}
func (Order) IsNode()                      {}

// An order adjustment accounts for refunded shipping costs or the difference between calculated and actual refund
// amount.
type OrderAdjustment struct {
	// The amount of the order adjustment in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The order adjustment type.
	Kind OrderAdjustmentKind `json:"kind"`
	// The tax amount of the order adjustment in shop and presentment currencies.
	TaxAmountSet *MoneyBag `json:"taxAmountSet,omitempty"`
}

func (OrderAdjustment) IsNode() {}

// An auto-generated type for paginating through multiple OrderAdjustments.
type OrderAdjustmentConnection struct {
	// A list of edges.
	Edges []OrderAdjustmentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one OrderAdjustment and a cursor during pagination.
type OrderAdjustmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderAdjustmentEdge.
	Node *OrderAdjustment `json:"node,omitempty"`
}

// An agreement associated with an order placement.
type OrderAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique identifier for the agreement.
	ID string `json:"id"`
	// The order associated with the agreement.
	Order *Order `json:"order,omitempty"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty"`
}

func (OrderAgreement) IsSalesAgreement() {}

// The [application](https://shopify.dev/apps) that created the order.
type OrderApp struct {
	// The application icon.
	Icon *Image `json:"icon,omitempty"`
	// The name of the application.
	Name string `json:"name"`
}

// Specifies the authorized transaction to capture and the total amount to capture from it.
type OrderCaptureInput struct {
	// The ID of the order to capture.
	ID string `json:"id"`
	// The ID of the authorized transaction to capture.
	ParentTransactionID string `json:"parentTransactionId"`
	// The amount to capture. The capture amount can't be greater than the amount of the authorized transaction.
	Amount null.String `json:"amount"`
	// The currency (in ISO format) that is used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty"`
}

// Return type for `orderCapture` mutation.
type OrderCapturePayload struct {
	// The created capture transaction.
	Transaction *OrderTransaction `json:"transaction,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies an open order to close.
type OrderCloseInput struct {
	// The ID of the order to close.
	ID string `json:"id"`
}

// Return type for `orderClose` mutation.
type OrderClosePayload struct {
	// The closed order.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Orders.
type OrderConnection struct {
	// A list of edges.
	Edges []OrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// A summary of the important details for a dispute on an order.
type OrderDisputeSummary struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The type that the dispute was initiated as.
	InitiatedAs DisputeType `json:"initiatedAs"`
	// The current status of the dispute.
	Status DisputeStatus `json:"status"`
}

func (OrderDisputeSummary) IsNode() {}

// An auto-generated type which holds one Order and a cursor during pagination.
type OrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderEdge.
	Node *Order `json:"node,omitempty"`
}

// Return type for `orderEditAddCustomItem` mutation.
type OrderEditAddCustomItemPayload struct {
	// The custom line item that will be added to the order based on the current edits.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddLineItemDiscount` mutation.
type OrderEditAddLineItemDiscountPayload struct {
	// The discount applied to a line item during this order edit.
	AddedDiscountStagedChange *OrderStagedChangeAddLineItemDiscount `json:"addedDiscountStagedChange,omitempty"`
	// The line item with the edits applied but not saved.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddVariant` mutation.
type OrderEditAddVariantPayload struct {
	// The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
	// that's added during this order edit.
	//
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
	// with the edits applied but not saved.
	//
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An agreement associated with an edit to the order.
type OrderEditAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique identifier for the agreement.
	ID string `json:"id"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty"`
}

func (OrderEditAgreement) IsSalesAgreement() {}

// The input fields used to add a discount during an order edit.
type OrderEditAppliedDiscountInput struct {
	// The description of the discount.
	Description *string `json:"description,omitempty"`
	// The value of the discount as a fixed amount.
	FixedValue *MoneyInput `json:"fixedValue,omitempty"`
	// The value of the discount as a percentage.
	PercentValue *float64 `json:"percentValue,omitempty"`
}

// Return type for `orderEditBegin` mutation.
type OrderEditBeginPayload struct {
	// The order that will be edited.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditCommit` mutation.
type OrderEditCommitPayload struct {
	// The order with changes applied.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditRemoveLineItemDiscount` mutation.
type OrderEditRemoveLineItemDiscountPayload struct {
	// The calculated line item after removal of the discount.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditSetQuantity` mutation.
type OrderEditSetQuantityPayload struct {
	// The calculated line item with the edits applied but not saved.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// The calculated order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the information to be updated on an order when using the orderUpdate mutation.
type OrderInput struct {
	// The ID of the order to update.
	ID string `json:"id"`
	// A new customer email address for the order. Overwrites the existing email address.
	Email *string `json:"email,omitempty"`
	// The new contents for the note associated with the order. Overwrites the existing note.
	Note *string `json:"note,omitempty"`
	// A new list of tags for the order. Overwrites the existing tags.
	Tags []string `json:"tags,omitempty"`
	// The new shipping address for the order. Overwrites the existing shipping address.
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty"`
	// A new list of custom attributes for the order. Overwrites the existing custom attributes.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
	// A list of new metafields to add to the existing metafields for the order.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// A list of new private metafields to add to the existing private metafields for the order.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// A list of new [localization extensions](https://shopify.dev/api/admin-graphql/latest/objects/localizationextension) to add to the existing list of localization extensions for the order.
	LocalizationExtensions []LocalizationExtensionInput `json:"localizationExtensions,omitempty"`
}

// Return type for `orderInvoiceSend` mutation.
type OrderInvoiceSendPayload struct {
	// The order associated with the invoice email.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []OrderInvoiceSendUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `OrderInvoiceSend`.
type OrderInvoiceSendUserError struct {
	// The error code.
	Code *OrderInvoiceSendUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (OrderInvoiceSendUserError) IsDisplayableError() {}

// Specifies the order to mark as paid.
type OrderMarkAsPaidInput struct {
	// The ID of the order to mark as paid.
	ID string `json:"id"`
}

// Return type for `orderMarkAsPaid` mutation.
type OrderMarkAsPaidPayload struct {
	// The order marked as paid.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies a closed order to open.
type OrderOpenInput struct {
	// The ID of the order to open.
	ID string `json:"id"`
}

// Return type for `orderOpen` mutation.
type OrderOpenPayload struct {
	// The opened order.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The payment collection details for an order that requires additional payment following an edit to the order.
type OrderPaymentCollectionDetails struct {
	// The URL to use for collecting an additional payment on the order.
	AdditionalPaymentCollectionURL *string `json:"additionalPaymentCollectionUrl,omitempty"`
	// The list of vaulted payment methods for the order with their permissions.
	VaultedPaymentMethods []PaymentMandate `json:"vaultedPaymentMethods,omitempty"`
}

// Represents a fraud check on an order.
type OrderRisk struct {
	// Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
	Display bool `json:"display"`
	// The likelihood that an order is fraudulent, based on this order risk.
	//
	// The level can be set by Shopify risk analysis or by an app.
	//
	Level *OrderRiskLevel `json:"level,omitempty"`
	// The risk message that's shown to the merchant in the Shopify admin.
	Message *string `json:"message,omitempty"`
}

// A change to the order representing the addition of a
// custom line item. For example, you might want to add gift wrapping service
// as a custom line item.
type OrderStagedChangeAddCustomItem struct {
	// The price of an individual item without any discounts applied. This value cannot be negative.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// The quantity of the custom item to add to the order. This value must be greater than zero.
	Quantity int `json:"quantity"`
	// The title of the custom item.
	Title string `json:"title"`
}

func (OrderStagedChangeAddCustomItem) IsOrderStagedChange() {}

// The discount applied to an item that was added during the current order edit.
type OrderStagedChangeAddLineItemDiscount struct {
	// The description of the discount.
	Description string `json:"description"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The pricing value of the discount.
	Value PricingValue `json:"value"`
}

func (OrderStagedChangeAddLineItemDiscount) IsOrderStagedChange() {}

// A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
// added as part of an order edit.
type OrderStagedChangeAddShippingLine struct {
	// The phone number at the shipping address.
	Phone *string `json:"phone,omitempty"`
	// The shipping line's title that is shown to the buyer.
	//
	PresentmentTitle *string `json:"presentmentTitle,omitempty"`
	// The price that applies to the shipping line.
	Price *MoneyV2 `json:"price,omitempty"`
	// The title of the shipping line.
	Title *string `json:"title,omitempty"`
}

func (OrderStagedChangeAddShippingLine) IsOrderStagedChange() {}

// A change to the order representing the addition of an existing product variant.
type OrderStagedChangeAddVariant struct {
	// The quantity of the product variant that was added.
	Quantity int `json:"quantity"`
	// The product variant that was added.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (OrderStagedChangeAddVariant) IsOrderStagedChange() {}

// An auto-generated type for paginating through multiple OrderStagedChanges.
type OrderStagedChangeConnection struct {
	// A list of edges.
	Edges []OrderStagedChangeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An removal of items from an existing line item on the order.
type OrderStagedChangeDecrementItem struct {
	// The number of items removed.
	Delta int `json:"delta"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The intention to restock the removed items.
	Restock bool `json:"restock"`
}

func (OrderStagedChangeDecrementItem) IsOrderStagedChange() {}

// An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
type OrderStagedChangeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderStagedChangeEdge.
	Node OrderStagedChange `json:"node"`
}

// An addition of items to an existing line item on the order.
type OrderStagedChangeIncrementItem struct {
	// The number of items added.
	Delta int `json:"delta"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
}

func (OrderStagedChangeIncrementItem) IsOrderStagedChange() {}

// A payment transaction in the context of an order.
type OrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The amount of money.
	Amount null.String `json:"amount"`
	// The amount and currency of the transaction in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The amount and currency of the transaction.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Authorization code associated with the transaction.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
	//
	AuthorizationExpiresAt *string `json:"authorizationExpiresAt,omitempty"`
	// Date and time when the transaction was created.
	CreatedAt string `json:"createdAt"`
	// A standardized error code, independent of the payment provider.
	ErrorCode *OrderTransactionErrorCode `json:"errorCode,omitempty"`
	// The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
	//
	Fees []TransactionFee `json:"fees,omitempty"`
	// The human-readable payment gateway name used to process the transaction.
	FormattedGateway *string `json:"formattedGateway,omitempty"`
	// The payment gateway used to process the transaction.
	Gateway *string `json:"gateway,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind"`
	// Whether the transaction can be manually captured.
	ManuallyCapturable bool `json:"manuallyCapturable"`
	// Specifies the available amount to refund on the gateway.
	// This value is only available for transactions of type `SuggestedRefund`.
	//
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty"`
	// Specifies the available amount with currency to refund on the gateway.
	// This value is only available for transactions of type `SuggestedRefund`.
	//
	MaximumRefundableV2 *MoneyV2 `json:"maximumRefundableV2,omitempty"`
	// The associated order.
	Order *Order `json:"order,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty"`
	// The payment icon to display for the transaction.
	PaymentIcon *Image `json:"paymentIcon,omitempty"`
	// The payment method used for the transaction. This value is `null` if the payment method is unknown.
	PaymentMethod *PaymentMethods `json:"paymentMethod,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *string `json:"processedAt,omitempty"`
	// The transaction receipt that the payment gateway attaches to the transaction.
	// The value of this field depends on which payment gateway processed the transaction.
	//
	Receipt *string `json:"receipt,omitempty"`
	// The transaction receipt that the payment gateway attaches to the transaction.
	// The value of this field depends on which payment gateway processed the transaction.
	//
	ReceiptJSON *string `json:"receiptJson,omitempty"`
	// The settlement currency.
	SettlementCurrency *CurrencyCode `json:"settlementCurrency,omitempty"`
	// The rate used when converting the transaction amount to settlement currency.
	SettlementCurrencyRate *null.String `json:"settlementCurrencyRate,omitempty"`
	// Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
	//
	ShopifyPaymentsSet *ShopifyPaymentsTransactionSet `json:"shopifyPaymentsSet,omitempty"`
	// The status of this transaction.
	Status OrderTransactionStatus `json:"status"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test"`
	// Specifies the available amount to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettled *null.String `json:"totalUnsettled,omitempty"`
	// Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettledSet *MoneyBag `json:"totalUnsettledSet,omitempty"`
	// Specifies the available amount with currency to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettledV2 *MoneyV2 `json:"totalUnsettledV2,omitempty"`
	// Staff member who was logged into the Shopify POS device when the transaction was processed.
	User *StaffMember `json:"user,omitempty"`
}

func (OrderTransaction) IsNode() {}

// An auto-generated type for paginating through multiple OrderTransactions.
type OrderTransactionConnection struct {
	// A list of edges.
	Edges []OrderTransactionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one OrderTransaction and a cursor during pagination.
type OrderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderTransactionEdge.
	Node *OrderTransaction `json:"node,omitempty"`
}

// Specifies the information needed to create an order transaction.
type OrderTransactionInput struct {
	// The amount of money for this transaction.
	Amount null.String `json:"amount"`
	// The payment gateway to use for this transaction.
	Gateway string `json:"gateway"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind"`
	// The ID of the order associated with the transaction.
	OrderID string `json:"orderId"`
	// The ID of the optional parent transaction, for example the authorization of a capture.
	ParentID *string `json:"parentId,omitempty"`
}

// Return type for `orderUpdate` mutation.
type OrderUpdatePayload struct {
	// The updated order.
	Order *Order `json:"order,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Returns information about pagination in a connection, in accordance with the
// [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
type PageInfo struct {
	// Whether there are more pages to fetch following the current page.
	HasNextPage bool `json:"hasNextPage"`
	// Whether there are any pages prior to the current page.
	HasPreviousPage bool `json:"hasPreviousPage"`
}

// A payment instrument and the permission
// the owner of the instrument gives to the merchant to debit it.
type PaymentMandate struct {
	// The unique identifier of a payment mandate.
	ID string `json:"id"`
}

func (PaymentMandate) IsNode() {}

// Represents the payment schedule for a single payment defined in the payment terms.
type PaymentSchedule struct {
	// Amount owed for this payment schedule.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Date and time when the payment schedule is paid or fulfilled.
	CompletedAt *string `json:"completedAt,omitempty"`
	// Date and time when the payment schedule is due.
	DueAt *string `json:"dueAt,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Date and time when the invoice is sent.
	IssuedAt *string `json:"issuedAt,omitempty"`
}

func (PaymentSchedule) IsNode() {}

// An auto-generated type for paginating through multiple PaymentSchedules.
type PaymentScheduleConnection struct {
	// A list of edges.
	Edges []PaymentScheduleEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
type PaymentScheduleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PaymentScheduleEdge.
	Node *PaymentSchedule `json:"node,omitempty"`
}

// The input fields used to create a payment schedule for payment terms.
type PaymentScheduleInput struct {
	// Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms.
	DueAt *string `json:"dueAt,omitempty"`
}

// Settings related to payments.
type PaymentSettings struct {
	// List of the digital wallets which the shop supports.
	SupportedDigitalWallets []DigitalWallet `json:"supportedDigitalWallets,omitempty"`
}

// Represents the payment terms for an order or draft order.
type PaymentTerms struct {
	// Duration of payment terms in days based on the payment terms template used to create the payment terms.
	//
	DueInDays *int `json:"dueInDays,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Whether the payment terms have overdue payment schedules.
	Overdue bool `json:"overdue"`
	// List of schedules for the payment terms.
	PaymentSchedules *PaymentScheduleConnection `json:"paymentSchedules,omitempty"`
	// The name of the payment terms template used to create the payment terms.
	PaymentTermsName string `json:"paymentTermsName"`
	// The type of a payment terms template used to create the payment terms.
	PaymentTermsType PaymentTermsType `json:"paymentTermsType"`
	// The translated payment terms name.
	TranslatedName string `json:"translatedName"`
}

func (PaymentTerms) IsNode() {}

// The input fields used to create a payment terms.
type PaymentTermsCreateInput struct {
	// Specifies the payment terms template ID used to generate payment terms.
	PaymentTermsTemplateID string `json:"paymentTermsTemplateId"`
	// Specifies the payment schedules for the payment terms.
	PaymentSchedules []PaymentScheduleInput `json:"paymentSchedules,omitempty"`
}

// Return type for `paymentTermsCreate` mutation.
type PaymentTermsCreatePayload struct {
	// The created payment terms.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsCreate`.
type PaymentTermsCreateUserError struct {
	// The error code.
	Code *PaymentTermsCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsCreateUserError) IsDisplayableError() {}

// The input fields used to delete the payment terms.
type PaymentTermsDeleteInput struct {
	// The ID of the payment terms being deleted.
	PaymentTermsID string `json:"paymentTermsId"`
}

// Return type for `paymentTermsDelete` mutation.
type PaymentTermsDeletePayload struct {
	// The deleted payment terms id.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsDelete`.
type PaymentTermsDeleteUserError struct {
	// The error code.
	Code *PaymentTermsDeleteUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsDeleteUserError) IsDisplayableError() {}

// The input fields used to create a payment terms.
type PaymentTermsInput struct {
	// Specifies the payment terms template ID used to generate payment terms.
	PaymentTermsTemplateID *string `json:"paymentTermsTemplateId,omitempty"`
	// Specifies the payment schedules for the payment terms.
	PaymentSchedules []PaymentScheduleInput `json:"paymentSchedules,omitempty"`
}

// Represents the payment terms template object.
type PaymentTermsTemplate struct {
	// The description of the payment terms template.
	Description string `json:"description"`
	// The number of days between the issued date and due date if this is the net type of payment terms.
	DueInDays *int `json:"dueInDays,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The name of the payment terms template.
	Name string `json:"name"`
	// The type of the payment terms template.
	PaymentTermsType PaymentTermsType `json:"paymentTermsType"`
	// The translated payment terms template name.
	TranslatedName string `json:"translatedName"`
}

func (PaymentTermsTemplate) IsNode() {}

// The input fields used to update the payment terms.
type PaymentTermsUpdateInput struct {
	// The ID of the payment terms being updated.
	PaymentTermsID string `json:"paymentTermsId"`
	// The attributes used to update the payment terms.
	PaymentTermsAttributes *PaymentTermsInput `json:"paymentTermsAttributes,omitempty"`
}

// Return type for `paymentTermsUpdate` mutation.
type PaymentTermsUpdatePayload struct {
	// The updated payment terms.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsUpdate`.
type PaymentTermsUpdateUserError struct {
	// The error code.
	Code *PaymentTermsUpdateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsUpdateUserError) IsDisplayableError() {}

// Represents a price list, including information about related prices and eligibility rules.
// You can use price lists to specify either fixed prices or adjusted relative prices that
// override initial product variant prices. Price lists are applied to customers
// using context rules, which determine price list eligibility.
//
//	For more information on price lists, refer to
//	[*Support different pricing models using the price list API*](https://shopify.dev/api/examples/product-price-lists#update-an-existing-price-list).
type PriceList struct {
	// A set of facts about the customer, used to determine price list eligibility.
	ContextRule *PriceListContextRule `json:"contextRule,omitempty"`
	// The currency for fixed prices associated with this price list.
	Currency CurrencyCode `json:"currency"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The unique name of the price list, used as a human-readable identifier.
	Name string `json:"name"`
	// Relative adjustments to other prices.
	Parent *PriceListParent `json:"parent,omitempty"`
	// A list of prices associated with the price list.
	Prices *PriceListPriceConnection `json:"prices,omitempty"`
}

func (PriceList) IsNode() {}

// Represents the type and value of price list adjustments.
type PriceListAdjustment struct {
	// The type of price adjustment, such as percentage increase or decrease.
	Type PriceListAdjustmentType `json:"type"`
	// The value of price adjustment, where positive numbers
	//           reduce the prices and negative numbers increase them.
	Value float64 `json:"value"`
}

// Provides the fields and values to use when updating a price list parent adjustment.
type PriceListAdjustmentInput struct {
	// The value of the price adjustment, where positive numbers reduce
	//                the prices and negative numbers increase them.
	Value float64 `json:"value"`
	// The type of price adjustment, such as percentage increase or decrease.
	Type PriceListAdjustmentType `json:"type"`
}

// An auto-generated type for paginating through multiple PriceLists.
type PriceListConnection struct {
	// A list of edges.
	Edges []PriceListEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Represents a set of facts about the customer used to determine price list eligibility. For example, you can specify the country code so that the price list only applies to customers visiting from a specific country.
type PriceListContext struct {
	// The code for the country that the price list applies to.
	Country *CountryCode `json:"country,omitempty"`
}

// Represents a set of facts about the customer used to determine price list eligibility.
type PriceListContextRule struct {
	// A list of two letter country codes that determines price list eligibility.
	Countries []CountryCode `json:"countries,omitempty"`
}

// The context that the price list applies to.
type PriceListContextRuleInput struct {
	// The code for the country that the price list applies to. You can only specify one country code.
	//
	Countries []CountryCode `json:"countries,omitempty"`
}

// Provides the fields and values to use when creating a price list.
type PriceListCreateInput struct {
	// The unique name of the price list, used as a human-readable identifier.
	Name string `json:"name"`
	// Three letter currency code for fixed prices associated with this price list.
	Currency CurrencyCode `json:"currency"`
	// Relative adjustments to other prices.
	Parent *PriceListParentCreateInput `json:"parent,omitempty"`
	// A set of facts about the customer used to determine price list eligibility.
	ContextRule *PriceListContextRuleInput `json:"contextRule,omitempty"`
}

// Return type for `priceListCreate` mutation.
type PriceListCreatePayload struct {
	// The newly created price list.
	PriceList *PriceList `json:"priceList,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// Return type for `priceListDelete` mutation.
type PriceListDeletePayload struct {
	// The ID of the deleted price list.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceList and a cursor during pagination.
type PriceListEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceListEdge.
	Node *PriceList `json:"node,omitempty"`
}

// Return type for `priceListFixedPricesAdd` mutation.
type PriceListFixedPricesAddPayload struct {
	// The prices that were added to the price list.
	Prices []PriceListPrice `json:"prices,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListPriceUserError `json:"userErrors,omitempty"`
}

// Return type for `priceListFixedPricesDelete` mutation.
type PriceListFixedPricesDeletePayload struct {
	// A list of deleted variant IDs for prices.
	DeletedFixedPriceVariantIds []string `json:"deletedFixedPriceVariantIds,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListPriceUserError `json:"userErrors,omitempty"`
}

// Represents relative adjustments from one price list to other prices.
//
//	You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
//	adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
//
//	[Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
//	support both percentage increases and decreases.
type PriceListParent struct {
	// A price list adjustment.
	Adjustment *PriceListAdjustment `json:"adjustment,omitempty"`
}

// Provides the fields and values to use when creating a price list parent adjustment.
type PriceListParentCreateInput struct {
	// Provides the fields and values to use when updating a price list parent adjustment.
	Adjustment *PriceListAdjustmentInput `json:"adjustment,omitempty"`
}

// Relative adjustments to other prices.
type PriceListParentUpdateInput struct {
	// Provides the fields and values to use when updating a price list parent adjustment.
	Adjustment *PriceListAdjustmentInput `json:"adjustment,omitempty"`
}

// Represents information about pricing for a product variant
//
//	as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
type PriceListPrice struct {
	// The compare-at price of the product variant on this price list.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty"`
	// The origin of this price, either fixed (defined on the price list)
	//           or relative (calculated using an adjustment via a price list parent configuration).
	OriginType PriceListPriceOriginType `json:"originType"`
	// The price of the product variant on this price list.
	Price *MoneyV2 `json:"price,omitempty"`
	// The product variant associated with this price.
	Variant *ProductVariant `json:"variant,omitempty"`
}

// An auto-generated type for paginating through multiple PriceListPrices.
type PriceListPriceConnection struct {
	// A list of edges.
	Edges []PriceListPriceEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one PriceListPrice and a cursor during pagination.
type PriceListPriceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceListPriceEdge.
	Node *PriceListPrice `json:"node,omitempty"`
}

// Provides the fields and values to use when creating or updating a fixed price list price.
type PriceListPriceInput struct {
	// The product variant ID associated with the price list price.
	VariantID string `json:"variantId"`
	// The price of the product variant on this price list.
	Price *MoneyInput `json:"price,omitempty"`
	// The compare-at price of the product variant on this price list.
	CompareAtPrice *MoneyInput `json:"compareAtPrice,omitempty"`
}

// Error codes for failed price list price operations.
type PriceListPriceUserError struct {
	// The error code.
	Code *PriceListPriceUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceListPriceUserError) IsDisplayableError() {}

// Provides the fields and values to use when updating a price list.
type PriceListUpdateInput struct {
	// The unique name of the price list, used as a human-readable identifier.
	Name *string `json:"name,omitempty"`
	// The three-letter code for fixed prices associated with this price list.
	Currency *CurrencyCode `json:"currency,omitempty"`
	// A set of facts about buyer context used to determine price list eligibility.
	ContextRule *PriceListContextRuleInput `json:"contextRule,omitempty"`
	// Relative adjustments to other prices.
	Parent *PriceListParentUpdateInput `json:"parent,omitempty"`
}

// Return type for `priceListUpdate` mutation.
type PriceListUpdatePayload struct {
	// The updated price list.
	PriceList *PriceList `json:"priceList,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// Error codes for failed contextual pricing operations.
type PriceListUserError struct {
	// The error code.
	Code *PriceListUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceListUserError) IsDisplayableError() {}

// Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply. We recommend using the [Discount types](https://shopify.dev/api/examples/discounts) available in the GraphQL Admin API, which are intended to replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
type PriceRule struct {
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod PriceRuleAllocationMethod `json:"allocationMethod"`
	// The application that created the price rule.
	App *App `json:"app,omitempty"`
	// The date and time when the price rule was created.
	CreatedAt string `json:"createdAt"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelection `json:"customerSelection,omitempty"`
	// List of the price rule's discount codes.
	DiscountCodes *PriceRuleDiscountCodeConnection `json:"discountCodes,omitempty"`
	// How many discount codes associated with the price rule.
	DiscountCodesCount int `json:"discountCodesCount"`
	// The date and time when the price rule ends. For open-ended price rules, use `null`.
	EndsAt *string `json:"endsAt,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	EntitlementToPrerequisiteQuantityRatio *PriceRuleEntitlementToPrerequisiteQuantityRatio `json:"entitlementToPrerequisiteQuantityRatio,omitempty"`
	// The paginated list of events associated with the price rule.
	Events *EventConnection `json:"events,omitempty"`
	// A list of the price rule's features.
	Features []PriceRuleFeature `json:"features,omitempty"`
	// Indicates whether there are any timeline comments on the price rule.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlements `json:"itemEntitlements,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleLineItemPrerequisites `json:"itemPrerequisites,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer bool `json:"oncePerCustomer"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRange `json:"prerequisiteQuantityRange,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRange `json:"prerequisiteShippingPriceRange,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRange `json:"prerequisiteSubtotalRange,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatio `json:"prerequisiteToEntitlementQuantityRatio,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []PriceRuleShareableURL `json:"shareableUrls,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingLineEntitlements `json:"shippingEntitlements,omitempty"`
	// The date and time when the price rule starts.
	StartsAt string `json:"startsAt"`
	// The status of the price rule.
	Status PriceRuleStatus `json:"status"`
	// A detailed summary of the price rule.
	Summary *string `json:"summary,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target PriceRuleTarget `json:"target"`
	// The title of the price rule.
	Title string `json:"title"`
	// The total sales from orders where the price rule was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// A list of the price rule's features.
	Traits []PriceRuleTrait `json:"traits,omitempty"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// A time period during which a price rule is applicable.
	ValidityPeriod *PriceRuleValidityPeriod `json:"validityPeriod,omitempty"`
	// The value of the price rule.
	Value PriceRuleValue `json:"value"`
	// The value of the price rule.
	ValueV2 PricingValue `json:"valueV2"`
}

func (PriceRule) IsCommentEventSubject()    {}
func (PriceRule) IsHasEvents()              {}
func (PriceRule) IsLegacyInteroperability() {}
func (PriceRule) IsNode()                   {}

// Return type for `priceRuleActivate` mutation.
type PriceRuleActivatePayload struct {
	// The activated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple PriceRules.
type PriceRuleConnection struct {
	// A list of edges.
	Edges []PriceRuleEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleCreate` mutation.
type PriceRuleCreatePayload struct {
	// The newly created price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A selection of customers for whom the price rule applies.
type PriceRuleCustomerSelection struct {
	// List of customers to whom the price rule applies.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// Whether the price rule applies to all customers.
	ForAllCustomers bool `json:"forAllCustomers"`
	// A list of customer segments that contain the customers who can use the price rule.
	Segments []Segment `json:"segments,omitempty"`
}

// Specifies the input fields to update a price rule customer selection.
type PriceRuleCustomerSelectionInput struct {
	// Whether the price rule applies to all customers.
	ForAllCustomers *bool `json:"forAllCustomers,omitempty"`
	// List of customer segments that contain the customers to whom the price rule applies. No single customer IDs may be present.
	SegmentIds []string `json:"segmentIds,omitempty"`
	// List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
	CustomerIdsToAdd []string `json:"customerIdsToAdd,omitempty"`
	// A list of customers to remove from the current list of customers to whom the price rule applies.
	CustomerIdsToRemove []string `json:"customerIdsToRemove,omitempty"`
}

// Return type for `priceRuleDeactivate` mutation.
type PriceRuleDeactivatePayload struct {
	// The deactivated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `priceRuleDelete` mutation.
type PriceRuleDeletePayload struct {
	// The id price of the deleted price rule.
	DeletedPriceRuleID *string `json:"deletedPriceRuleId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The shop of the deleted price rule.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A discount code of a price rule.
type PriceRuleDiscountCode struct {
	// The application that created the discount code.
	App *App `json:"app,omitempty"`
	// The code to use the discount.
	Code string `json:"code"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount"`
}

func (PriceRuleDiscountCode) IsNode() {}

// An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
type PriceRuleDiscountCodeConnection struct {
	// A list of edges.
	Edges []PriceRuleDiscountCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleDiscountCodeCreate` mutation.
type PriceRuleDiscountCodeCreatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
type PriceRuleDiscountCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceRuleDiscountCodeEdge.
	Node *PriceRuleDiscountCode `json:"node,omitempty"`
}

// Specifies the input fields to manipulate a discount code.
type PriceRuleDiscountCodeInput struct {
	// The code to use the discount.
	Code *string `json:"code,omitempty"`
}

// Return type for `priceRuleDiscountCodeUpdate` mutation.
type PriceRuleDiscountCodeUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRule and a cursor during pagination.
type PriceRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceRuleEdge.
	Node *PriceRule `json:"node,omitempty"`
}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatio struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatioInput struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty"`
}

// The value of a fixed amount price rule.
type PriceRuleFixedAmountValue struct {
	// The monetary value of the price rule.
	Amount null.String `json:"amount"`
}

func (PriceRuleFixedAmountValue) IsPriceRuleValue() {}

// Specifies the input fields to manipulate a price rule.
type PriceRuleInput struct {
	// PriceRuleValidityPeriod for the price rule.
	ValidityPeriod *PriceRuleValidityPeriodInput `json:"validityPeriod,omitempty"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer *bool `json:"oncePerCustomer,omitempty"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Title of the price rule.
	Title *string `json:"title,omitempty"`
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod *PriceRuleAllocationMethod `json:"allocationMethod,omitempty"`
	// The value of the price rule.
	Value *PriceRuleValueInput `json:"value,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target *PriceRuleTarget `json:"target,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRangeInput `json:"prerequisiteSubtotalRange,omitempty"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRangeInput `json:"prerequisiteQuantityRange,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRangeInput `json:"prerequisiteShippingPriceRange,omitempty"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlementsInput `json:"itemEntitlements,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleItemPrerequisitesInput `json:"itemPrerequisites,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingEntitlementsInput `json:"shippingEntitlements,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. This argument is deprecated: Use `prerequisiteToEntitlementQuantityRatio` instead.
	EntitlementToPrerequisiteQuantityRatio *PriceRuleEntitlementToPrerequisiteQuantityRatioInput `json:"entitlementToPrerequisiteQuantityRatio,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatioInput `json:"prerequisiteToEntitlementQuantityRatio,omitempty"`
}

// The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
type PriceRuleItemEntitlements struct {
	// The collections to which the price rule applies.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products to which the price rule applies.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether the price rule applies to all line items.
	TargetAllLineItems bool `json:"targetAllLineItems"`
}

// Specifies the input fields to update a price rule line item entitlement.
type PriceRuleItemEntitlementsInput struct {
	// Whether the price rule applies to all items.
	TargetAllLineItems *bool `json:"targetAllLineItems,omitempty"`
	// The products to which the price rule applies.
	ProductIds []string `json:"productIds,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariantIds []string `json:"productVariantIds,omitempty"`
	// The collections to which the price rule applies.
	CollectionIds []string `json:"collectionIds,omitempty"`
}

// Specifies the input fields to update a price rule's item prerequisites.
type PriceRuleItemPrerequisitesInput struct {
	// The products needed for the price rule to be applied.
	ProductIds []string `json:"productIds,omitempty"`
	// The product variants needed for the price rule to be applied.
	ProductVariantIds []string `json:"productVariantIds,omitempty"`
	// The collections needed for the price rule to be applied.
	CollectionIds []string `json:"collectionIds,omitempty"`
}

// Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
type PriceRuleLineItemPrerequisites struct {
	// The collections required for the price rule to be applicable.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants required for the price rule to be applicable.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products required for the price rule to be applicable.
	Products *ProductConnection `json:"products,omitempty"`
}

// A money range within which the price rule is applicable.
type PriceRuleMoneyRange struct {
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty"`
	// The lower bound or equal of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty"`
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty"`
	// The upper bound or equal of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty"`
}

// Specifies the input fields to update the money range within which the price rule is applicable.
type PriceRuleMoneyRangeInput struct {
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty"`
	// The upper or equal bound of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty"`
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty"`
	// The lower or equal bound of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty"`
}

// The value of a percent price rule.
type PriceRulePercentValue struct {
	// The percent value of the price rule.
	Percentage float64 `json:"percentage"`
}

func (PriceRulePercentValue) IsPriceRuleValue() {}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatio struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatioInput struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty"`
}

// A quantity range within which the price rule is applicable.
type PriceRuleQuantityRange struct {
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty"`
	// The lower bound or equal of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty"`
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty"`
	// The upper bound or equal of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty"`
}

// Specifies the input fields to update the quantity range within which the price rule is applicable.
type PriceRuleQuantityRangeInput struct {
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty"`
	// The upper or equal bound of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty"`
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty"`
	// The lower or equal bound of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty"`
}

// Shareable URL for the discount code associated with the price rule.
type PriceRuleShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty"`
	// The type of page that's associated with the URL.
	TargetType PriceRuleShareableURLTargetType `json:"targetType"`
	// The title of the page that's associated with the URL.
	Title string `json:"title"`
	// The URL for the discount code.
	URL string `json:"url"`
}

// Specifies the input fields to update a price rule shipping entitlement.
type PriceRuleShippingEntitlementsInput struct {
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines *bool `json:"targetAllShippingLines,omitempty"`
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty"`
}

// The shipping lines to which the price rule applies to.
type PriceRuleShippingLineEntitlements struct {
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines bool `json:"targetAllShippingLines"`
}

// Return type for `priceRuleUpdate` mutation.
type PriceRuleUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a price rule mutation.
type PriceRuleUserError struct {
	// Error code to uniquely identify the error.
	Code *PriceRuleErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceRuleUserError) IsDisplayableError() {}

// A time period during which a price rule is applicable.
type PriceRuleValidityPeriod struct {
	// The time after which the price rule becomes invalid.
	End *string `json:"end,omitempty"`
	// The time after which the price rule is valid.
	Start string `json:"start"`
}

// Specifies the input fields to update the validity period of a price rule.
type PriceRuleValidityPeriodInput struct {
	// The time after which the price rule is valid.
	Start string `json:"start"`
	// The time after which the price rule becomes invalid.
	End *string `json:"end,omitempty"`
}

// Specifies the input fields to update a price rule.
type PriceRuleValueInput struct {
	// The percentage value of the price rule.
	PercentageValue *float64 `json:"percentageValue,omitempty"`
	// The fixed amount value of the price rule.
	FixedAmountValue *null.String `json:"fixedAmountValue,omitempty"`
}

// The value of the percentage pricing object.
type PricingPercentageValue struct {
	// The percentage value of the object.
	Percentage float64 `json:"percentage"`
}

func (PricingPercentageValue) IsPricingValue() {}

// Private metafields represent custom metadata that is attached to a resource.
// Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
//
// An application can create a maximum of 10 private metafields per shop resource.
type PrivateMetafield struct {
	// The date and time when the private metafield was created.
	CreatedAt string `json:"createdAt"`
	// The id of the private metafield.
	ID string `json:"id"`
	// The key name of the private metafield.
	Key string `json:"key"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The date and time when the private metafield was updated.
	UpdatedAt string `json:"updatedAt"`
	// The value of a private metafield.
	Value string `json:"value"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType"`
}

func (PrivateMetafield) IsNode() {}

// An auto-generated type for paginating through multiple PrivateMetafields.
type PrivateMetafieldConnection struct {
	// A list of edges.
	Edges []PrivateMetafieldEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for the private metafield to delete.
type PrivateMetafieldDeleteInput struct {
	// The ID of the resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
	Owner *string `json:"owner,omitempty"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The key of the private metafield.
	Key string `json:"key"`
}

// Return type for `privateMetafieldDelete` mutation.
type PrivateMetafieldDeletePayload struct {
	// The ID of private metafield that was deleted.
	DeletedPrivateMetafieldID *string `json:"deletedPrivateMetafieldId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
type PrivateMetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PrivateMetafieldEdge.
	Node *PrivateMetafield `json:"node,omitempty"`
}

// The input fields for a private metafield.
type PrivateMetafieldInput struct {
	// The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
	Owner *string `json:"owner,omitempty"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The key of the private metafield.
	Key string `json:"key"`
	// The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
	ValueInput *PrivateMetafieldValueInput `json:"valueInput,omitempty"`
}

// Return type for `privateMetafieldUpsert` mutation.
type PrivateMetafieldUpsertPayload struct {
	// The private metafield that was created or updated.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The value input contains the value and value type of the private metafield.
type PrivateMetafieldValueInput struct {
	// The value of a private metafield.
	Value string `json:"value"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType"`
}

// The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
type Product struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount"`
	// The description of the product, complete with HTML formatting.
	BodyHTML *string `json:"bodyHtml,omitempty"`
	// A list of the collections that include the product.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The pricing that applies for a customer in a given context.
	ContextualPricing *ProductContextualPricing `json:"contextualPricing,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
	//
	CreatedAt string `json:"createdAt"`
	// The custom product type specified by the merchant.
	CustomProductType *string `json:"customProductType,omitempty"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A stripped description of the product, single line with HTML tags removed.
	Description string `json:"description"`
	// The description of the product, complete with HTML formatting.
	DescriptionHTML string `json:"descriptionHtml"`
	// Stripped description of the product, single line with HTML tags removed.
	// Truncated to 60 characters.
	//
	DescriptionPlainSummary string `json:"descriptionPlainSummary"`
	// The featured image for the product.
	FeaturedImage *Image `json:"featuredImage,omitempty"`
	// The featured media for the product.
	FeaturedMedia Media `json:"featuredMedia"`
	// Information about the product that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *string `json:"giftCardTemplateSuffix,omitempty"`
	// A unique human-friendly string of the product's title.
	Handle string `json:"handle"`
	// Whether the product has only a single variant with the default option and value.
	HasOnlyDefaultVariant bool `json:"hasOnlyDefaultVariant"`
	// Whether the product has out of stock variants.
	HasOutOfStockVariants bool `json:"hasOutOfStockVariants"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The images associated with the product.
	Images *ImageConnection `json:"images,omitempty"`
	// Whether the product is in a given collection.
	InCollection bool `json:"inCollection"`
	// Whether the product is a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The media associated with the product. This can include images, 3D models, or videos.
	Media *MediaConnection `json:"media,omitempty"`
	// Total count of media belonging to a product.
	MediaCount int `json:"mediaCount"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The online store preview URL.
	OnlineStorePreviewURL *string `json:"onlineStorePreviewUrl,omitempty"`
	// The online store URL for the product.
	// A value of `null` indicates that the product is not published to the Online Store sales channel.
	//
	OnlineStoreURL *string `json:"onlineStoreUrl,omitempty"`
	// A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
	Options []ProductOption `json:"options,omitempty"`
	// The price range of the product.
	PriceRange *ProductPriceRange `json:"priceRange,omitempty"`
	// The price range of the product with prices formatted as decimals.
	PriceRangeV2 *ProductPriceRangeV2 `json:"priceRangeV2,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// A list of the channels where the product is published.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product type specified by the merchant.
	ProductType string `json:"productType"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount"`
	// A list of the channels where the product is published.
	Publications *ProductPublicationConnection `json:"publications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
	//
	PublishedAt *string `json:"publishedAt,omitempty"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication"`
	// Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
	RequiresSellingPlan bool `json:"requiresSellingPlan"`
	// The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
	ResourcePublicationOnCurrentPublication *ResourcePublicationV2 `json:"resourcePublicationOnCurrentPublication,omitempty"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// Count of selling plan groups associated with the product.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount"`
	// A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// SEO information of the product.
	Seo *Seo `json:"seo,omitempty"`
	// The standardized product type in the Shopify product taxonomy.
	StandardizedProductType *StandardizedProductType `json:"standardizedProductType,omitempty"`
	// The product status. This controls visibility across all channels.
	Status ProductStatus `json:"status"`
	// The Storefront GraphQL API ID of the `Product`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// A comma separated list of tags associated with the product. Updating `tags` overwrites
	// any existing tags that were previously added to the product. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
	// The title of the product.
	Title string `json:"title"`
	// The quantity of inventory in stock.
	TotalInventory int `json:"totalInventory"`
	// The number of variants that are associated with the product.
	TotalVariants int `json:"totalVariants"`
	// Whether inventory tracking has been enabled for the product.
	TracksInventory bool `json:"tracksInventory"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time when the product was last modified.
	// A product's `updatedAt` value can change for different reasons. For example, if an order
	// is placed for a product that has inventory tracking set up, then the inventory adjustment
	// is counted as an update.
	//
	UpdatedAt string `json:"updatedAt"`
	// A list of variants associated with the product.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
	// The name of the product's vendor.
	Vendor string `json:"vendor"`
}

func (Product) IsCommentEventEmbed()        {}
func (Product) IsMetafieldReference()       {}
func (Product) IsHasMetafieldDefinitions()  {}
func (Product) IsHasMetafields()            {}
func (Product) IsHasPublishedTranslations() {}
func (Product) IsLegacyInteroperability()   {}
func (Product) IsNavigable()                {}
func (Product) IsNode()                     {}
func (Product) IsOnlineStorePreviewable()   {}
func (Product) IsPublishable()              {}

// Specifies product images to append.
type ProductAppendImagesInput struct {
	// The ID of the product.
	ID string `json:"id"`
	// The images to be appended to the product.
	Images []ImageInput `json:"images,omitempty"`
}

// Return type for `productAppendImages` mutation.
type ProductAppendImagesPayload struct {
	// List of new images appended to the product.
	NewImages []Image `json:"newImages,omitempty"`
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productChangeStatus` mutation.
type ProductChangeStatusPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductChangeStatusUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductChangeStatus`.
type ProductChangeStatusUserError struct {
	// The error code.
	Code *ProductChangeStatusUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductChangeStatusUserError) IsDisplayableError() {}

// An auto-generated type for paginating through multiple Products.
type ProductConnection struct {
	// A list of edges.
	Edges []ProductEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The pricing of a particular product in a given context.
type ProductContextualPricing struct {
	// The pricing of the variant with the highest price in the given context.
	MaxVariantPricing *ProductVariantContextualPricing `json:"maxVariantPricing,omitempty"`
	// The pricing of the variant with the lowest price in the given context.
	MinVariantPricing *ProductVariantContextualPricing `json:"minVariantPricing,omitempty"`
	// The price range of the product with prices formatted as decimals.
	PriceRange *ProductPriceRangeV2 `json:"priceRange,omitempty"`
}

// Return type for `productCreateMedia` mutation.
type ProductCreateMediaPayload struct {
	// The newly created media.
	Media []Media `json:"media,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product associated with the media.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productCreate` mutation.
type ProductCreatePayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productDeleteImages` mutation.
type ProductDeleteImagesPayload struct {
	// This is an array of IDs of images to delete.
	DeletedImageIds []string `json:"deletedImageIds,omitempty"`
	// This is the product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the product to delete.
type ProductDeleteInput struct {
	// The ID of the product.
	ID string `json:"id"`
}

// Return type for `productDeleteMedia` mutation.
type ProductDeleteMediaPayload struct {
	// List of media IDs which were deleted.
	DeletedMediaIds []string `json:"deletedMediaIds,omitempty"`
	// List of product image IDs which were deleted.
	DeletedProductImageIds []string `json:"deletedProductImageIds,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product which media was deleted from.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productDelete` mutation.
type ProductDeletePayload struct {
	// The ID of the deleted product.
	DeletedProductID *string `json:"deletedProductId,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productDuplicate` mutation.
type ProductDuplicatePayload struct {
	// The asynchronous job duplicating the product images.
	ImageJob *Job `json:"imageJob,omitempty"`
	// The duplicated product.
	NewProduct *Product `json:"newProduct,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Product and a cursor during pagination.
type ProductEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductEdge.
	Node *Product `json:"node,omitempty"`
}

// Return type for `productImageUpdate` mutation.
type ProductImageUpdatePayload struct {
	// Image updated.
	Image *Image `json:"image,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to create a product.
type ProductInput struct {
	// The description of the product, complete with HTML formatting.
	DescriptionHTML *string `json:"descriptionHtml,omitempty"`
	// A unique human-friendly string for the product. Automatically generated from the product's title.
	//
	Handle *string `json:"handle,omitempty"`
	// Whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	//
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty"`
	// The SEO information associated with the product.
	Seo *SEOInput `json:"seo,omitempty"`
	// The product type specified by the merchant.
	ProductType *string `json:"productType,omitempty"`
	// The standardized product type in the Shopify product taxonomy.
	StandardizedProductType *StandardizedProductTypeInput `json:"standardizedProductType,omitempty"`
	// The custom product type specified by the merchant.
	CustomProductType *string `json:"customProductType,omitempty"`
	// A comma separated list tags that have been added to the product.
	Tags []string `json:"tags,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty"`
	// Whether the product is a gift card.
	GiftCard *bool `json:"giftCard,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *string `json:"giftCardTemplateSuffix,omitempty"`
	// The title of the product.
	Title *string `json:"title,omitempty"`
	// The name of the product's vendor.
	Vendor *string `json:"vendor,omitempty"`
	// A description of the product. Supports HTML formatting. This argument is deprecated: Use `descriptionHtml` instead.
	BodyHTML *string `json:"bodyHtml,omitempty"`
	// The IDs of the collections that this product will be added to.
	CollectionsToJoin []string `json:"collectionsToJoin,omitempty"`
	// The IDs of collections that will no longer include the product.
	CollectionsToLeave []string `json:"collectionsToLeave,omitempty"`
	// Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
	ID *string `json:"id,omitempty"`
	// The images to associate with the product.
	Images []ImageInput `json:"images,omitempty"`
	// The metafields to associate with this product.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// The private metafields to associate with this product.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// List of custom product options (maximum of 3 per product).
	Options []string `json:"options,omitempty"`
	// A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
	ProductPublications []ProductPublicationInput `json:"productPublications,omitempty"`
	// A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
	Publications []ProductPublicationInput `json:"publications,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishDate *string `json:"publishDate,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishOn *string `json:"publishOn,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	Published *bool `json:"published,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of variants associated with the product.
	Variants []ProductVariantInput `json:"variants,omitempty"`
	// The status of the product.
	Status *ProductStatus `json:"status,omitempty"`
	// Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
	RequiresSellingPlan *bool `json:"requiresSellingPlan,omitempty"`
}

// Return type for `productJoinSellingPlanGroups` mutation.
type ProductJoinSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productLeaveSellingPlanGroups` mutation.
type ProductLeaveSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Product property names like "Size", "Color", and "Material".
// Variants are selected based on permutations of these options.
// 255 characters limit each.
type ProductOption struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The product option’s name.
	Name string `json:"name"`
	// The product option's position.
	Position int `json:"position"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The corresponding value to the product option name.
	Values []string `json:"values,omitempty"`
}

func (ProductOption) IsHasPublishedTranslations() {}
func (ProductOption) IsNode()                     {}

// The price range of the product.
type ProductPriceRange struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// The price range of the product.
type ProductPriceRangeV2 struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// Represents the channels where a product is published.
type ProductPublication struct {
	// The channel where the product was or is published.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished"`
	// The product that was or is going to be published on the channel.
	Product *Product `json:"product,omitempty"`
	// The date that the product was or is going to be published on the channel.
	PublishDate *string `json:"publishDate,omitempty"`
}

// An auto-generated type for paginating through multiple ProductPublications.
type ProductPublicationConnection struct {
	// A list of edges.
	Edges []ProductPublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductPublication and a cursor during pagination.
type ProductPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductPublicationEdge.
	Node *ProductPublication `json:"node,omitempty"`
}

// Specifies a publication to which a product will be published.
type ProductPublicationInput struct {
	// ID of the publication.
	PublicationID *string `json:"publicationId,omitempty"`
	// ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *string `json:"channelId,omitempty"`
	// This argument is deprecated: Use publicationId instead.
	ChannelHandle *string `json:"channelHandle,omitempty"`
	// The date and time that the product was (or will be) published.
	PublishDate *string `json:"publishDate,omitempty"`
}

// Specifies a product to publish and the channels to publish it to.
type ProductPublishInput struct {
	// The product to create or update publications for.
	ID string `json:"id"`
	// The publication that the product is published to.
	ProductPublications []ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productPublish` mutation.
type ProductPublishPayload struct {
	// The product that has been published.
	Product *Product `json:"product,omitempty"`
	// The channels where the product is published.
	ProductPublications []ProductPublication `json:"productPublications,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderImages` mutation.
type ProductReorderImagesPayload struct {
	// The asynchronous job reordering the images.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderMedia` mutation.
type ProductReorderMediaPayload struct {
	// The asynchronous job reordering the media.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Reports the status of product for a Sales Channel or Storefront API.
// This might include why a product is not available in a Sales Channel
// and how a merchant might fix this.
type ProductResourceFeedback struct {
	// The time when the feedback was generated. Used to help determine whether
	// incoming feedback is outdated compared to existing feedback.
	//
	FeedbackGeneratedAt string `json:"feedbackGeneratedAt"`
	// The feedback messages presented to the merchant.
	Messages []string `json:"messages,omitempty"`
	// The ID of the product associated with the feedback.
	ProductID string `json:"productId"`
	// The timestamp of the product associated with the feedback.
	ProductUpdatedAt string `json:"productUpdatedAt"`
	// Conveys the state of the feedback and whether it requires merchant action or not.
	State ResourceFeedbackState `json:"state"`
}

// The input fields used to create a product feedback.
type ProductResourceFeedbackInput struct {
	// The ID of the product that the feedback was created on.
	ProductID string `json:"productId"`
	// Whether the merchant needs to take action on the product.
	State ResourceFeedbackState `json:"state"`
	// The date and time when the payload is constructed.
	// Used to help determine whether incoming feedback is outdated compared to feedback already received, and if it should be ignored upon arrival.
	//
	FeedbackGeneratedAt string `json:"feedbackGeneratedAt"`
	// The timestamp of the product associated with the feedback.
	ProductUpdatedAt string `json:"productUpdatedAt"`
	// A concise set of copy strings to be displayed to merchants. Used to guide merchants in resolving problems that your app encounters when trying to make use of their products.
	// You can specify up to four messages. Each message is limited to 100 characters.
	//
	Messages []string `json:"messages,omitempty"`
}

// A sale associated with a product.
type ProductSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (ProductSale) IsSale() {}

// Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
type ProductTaxonomyNode struct {
	// The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
	FullName string `json:"fullName"`
	// The ID of the product taxonomy node.
	ID string `json:"id"`
	// Whether the node is a leaf node.
	IsLeaf bool `json:"isLeaf"`
	// Whether the node is a root node.
	IsRoot bool `json:"isRoot"`
	// The name of the product taxonomy node. For example, Dog Beds.
	Name string `json:"name"`
}

func (ProductTaxonomyNode) IsNode() {}

// An auto-generated type for paginating through multiple ProductTaxonomyNodes.
type ProductTaxonomyNodeConnection struct {
	// A list of edges.
	Edges []ProductTaxonomyNodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductTaxonomyNode and a cursor during pagination.
type ProductTaxonomyNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductTaxonomyNodeEdge.
	Node *ProductTaxonomyNode `json:"node,omitempty"`
}

// Specifies a product to unpublish from a channel and the sales channels to unpublish it from.
type ProductUnpublishInput struct {
	// The ID of the product to create or update publications for.
	ID string `json:"id"`
	// The channels to unpublish the product from.
	ProductPublications []ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productUnpublish` mutation.
type ProductUnpublishPayload struct {
	// The product that has been unpublished.
	Product *Product `json:"product,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdateMedia` mutation.
type ProductUpdateMediaPayload struct {
	// The updated media.
	Media []Media `json:"media,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product which media was updated on.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdate` mutation.
type ProductUpdatePayload struct {
	// The updated product.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a product variant.
type ProductVariant struct {
	// Whether the product variant is available for sale.
	AvailableForSale bool `json:"availableForSale"`
	// The value of the barcode associated with the product.
	Barcode *string `json:"barcode,omitempty"`
	// The compare-at price of the variant in the default shop currency.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty"`
	// The pricing that applies for a customer in a given context.
	ContextualPricing *ProductVariantContextualPricing `json:"contextualPricing,omitempty"`
	// The date and time when the variant was created.
	CreatedAt string `json:"createdAt"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// The delivery profile for the variant.
	DeliveryProfile *DeliveryProfile `json:"deliveryProfile,omitempty"`
	// Display name of the variant, based on product's title + variant's title.
	DisplayName string `json:"displayName"`
	// The fulfillment service associated with the product.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Whether changes to the fulfillment service for the product variant are allowed.
	FulfillmentServiceEditable *EditableProperty `json:"fulfillmentServiceEditable,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The featured image for the variant.
	Image *Image `json:"image,omitempty"`
	// The inventory item, which is used to query for inventory information.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// The fulfillment service that tracks the number of items in stock for the product variant.
	InventoryManagement ProductVariantInventoryManagement `json:"inventoryManagement"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy ProductVariantInventoryPolicy `json:"inventoryPolicy"`
	// The total sellable quantity of the variant.
	InventoryQuantity *int `json:"inventoryQuantity,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The media associated with the product variant.
	Media *MediaConnection `json:"media,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	//
	Position int `json:"position"`
	// List of prices and compare-at prices in the presentment currencies for this shop.
	PresentmentPrices *ProductVariantPricePairConnection `json:"presentmentPrices,omitempty"`
	// The price of the product variant in the default shop currency.
	Price null.String `json:"price"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The product that this variant belongs to.
	Product *Product `json:"product,omitempty"`
	// Whether a customer needs to provide a shipping address when placing an order for the product variant.
	//
	RequiresShipping bool `json:"requiresShipping"`
	// List of product options applied to the variant.
	SelectedOptions []SelectedOption `json:"selectedOptions,omitempty"`
	// The total sellable quantity of the variant for online channels.
	// This doesn't represent the total available inventory or capture
	// [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
	//
	SellableOnlineQuantity int `json:"sellableOnlineQuantity"`
	// Count of selling plan groups associated with the product variant.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount"`
	// A list of all selling plan groups defined in the current shop associated with the product variant.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
	//
	Sku *string `json:"sku,omitempty"`
	// The Storefront GraphQL API ID of the `ProductVariant`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// The tax code for the product variant.
	TaxCode *string `json:"taxCode,omitempty"`
	// Whether a tax is charged when the product variant is sold.
	Taxable bool `json:"taxable"`
	// The title of the product variant.
	Title string `json:"title"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The date and time (ISO 8601 format) when the product variant was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
	// The weight of the product variant in the unit system specified with weight_unit.
	Weight *float64 `json:"weight,omitempty"`
	// The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
	//
	WeightUnit WeightUnit `json:"weightUnit"`
}

func (ProductVariant) IsCommentEventEmbed()        {}
func (ProductVariant) IsMetafieldReference()       {}
func (ProductVariant) IsHasMetafieldDefinitions()  {}
func (ProductVariant) IsHasMetafields()            {}
func (ProductVariant) IsHasPublishedTranslations() {}
func (ProductVariant) IsLegacyInteroperability()   {}
func (ProductVariant) IsNavigable()                {}
func (ProductVariant) IsNode()                     {}

// Specifies the input fields required to append media to a single variant.
type ProductVariantAppendMediaInput struct {
	// Specifies the variant to which media will be appended.
	VariantID string `json:"variantId"`
	// Specifies the media to append to the variant.
	MediaIds []string `json:"mediaIds,omitempty"`
}

// Return type for `productVariantAppendMedia` mutation.
type ProductVariantAppendMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty"`
	// The product variants that were updated.
	ProductVariants []ProductVariant `json:"productVariants,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MediaUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariants.
type ProductVariantConnection struct {
	// A list of edges.
	Edges []ProductVariantEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The pricing of a particular product variant in a given context.
type ProductVariantContextualPricing struct {
	// The final compare-at price after all adjustments are applied.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty"`
	// The final price after all adjustments are applied.
	Price *MoneyV2 `json:"price,omitempty"`
}

// Return type for `productVariantCreate` mutation.
type ProductVariantCreatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty"`
	// The successfully created variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantDelete` mutation.
type ProductVariantDeletePayload struct {
	// ID of the deleted product variant.
	DeletedProductVariantID *string `json:"deletedProductVariantId,omitempty"`
	// Product of the deleted product variant.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to detach media from a single variant.
type ProductVariantDetachMediaInput struct {
	// Specifies the variant from which media will be detached.
	VariantID string `json:"variantId"`
	// Specifies the media to detach from the variant.
	MediaIds []string `json:"mediaIds,omitempty"`
}

// Return type for `productVariantDetachMedia` mutation.
type ProductVariantDetachMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty"`
	// The product variants that were updated.
	ProductVariants []ProductVariant `json:"productVariants,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MediaUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ProductVariant and a cursor during pagination.
type ProductVariantEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductVariantEdge.
	Node *ProductVariant `json:"node,omitempty"`
}

// Specifies a product variant to create or update.
type ProductVariantInput struct {
	// The value of the barcode associated with the product.
	Barcode *string `json:"barcode,omitempty"`
	// The compare-at price of the variant.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty"`
	// The ID of the fulfillment service associated with the variant.
	FulfillmentServiceID *string `json:"fulfillmentServiceId,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// Specifies the product variant to update or create a new variant if absent.
	ID *string `json:"id,omitempty"`
	// The ID of the image that's associated with the variant.
	ImageID *string `json:"imageId,omitempty"`
	// The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.
	//
	ImageSrc *string `json:"imageSrc,omitempty"`
	// The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
	MediaSrc []string `json:"mediaSrc,omitempty"`
	// The fulfillment service that tracks the number of items in stock for the product variant. If you track the inventory yourself using the admin, then set the value to `shopify`. Valid values: `shopify` or the handle of a fulfillment service that has inventory management enabled.
	//  This argument is deprecated: Use tracked attribute on `inventoryItem` instead.
	InventoryManagement *ProductVariantInventoryManagement `json:"inventoryManagement,omitempty"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy *ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty"`
	// Create only field. The inventory quantities at each location where the variant is stocked.
	InventoryQuantities []InventoryLevelInput `json:"inventoryQuantities,omitempty"`
	// Inventory Item associated with the variant, used for unit cost.
	InventoryItem *InventoryItemInput `json:"inventoryItem,omitempty"`
	// Additional customizable information about the product variant.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The custom properties that a shop owner uses to define product variants.
	Options []string `json:"options,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	//
	Position *int `json:"position,omitempty"`
	// The price of the variant.
	Price *null.String `json:"price,omitempty"`
	// Create only required field. Specifies the product on which to create the variant.
	ProductID *string `json:"productId,omitempty"`
	// Whether the variant requires shipping.
	RequiresShipping *bool `json:"requiresShipping,omitempty"`
	// The SKU for the variant.
	Sku *string `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable *bool `json:"taxable,omitempty"`
	// This argument is deprecated: Variant title is not a writable field; it is generated from the selected variant options.
	Title *string `json:"title,omitempty"`
	// The tax code associated with the variant.
	TaxCode *string `json:"taxCode,omitempty"`
	// The weight of the variant.
	Weight *float64 `json:"weight,omitempty"`
	// The unit of weight that's used to measure the variant.
	WeightUnit *WeightUnit `json:"weightUnit,omitempty"`
}

// Return type for `productVariantJoinSellingPlanGroups` mutation.
type ProductVariantJoinSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantLeaveSellingPlanGroups` mutation.
type ProductVariantLeaveSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Represents a product variant position.
type ProductVariantPositionInput struct {
	// Specifies the ID of the product variant to update.
	ID string `json:"id"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	Position int `json:"position"`
}

// The compare-at price and price of a variant sharing a currency.
type ProductVariantPricePair struct {
	// The compare-at price of the variant with associated currency.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty"`
	// The price of the variant with associated currency.
	Price *MoneyV2 `json:"price,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariantPricePairs.
type ProductVariantPricePairConnection struct {
	// A list of edges.
	Edges []ProductVariantPricePairEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
type ProductVariantPricePairEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductVariantPricePairEdge.
	Node *ProductVariantPricePair `json:"node,omitempty"`
}

// Return type for `productVariantUpdate` mutation.
type ProductVariantUpdatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty"`
	// The updated variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantsBulkCreate` mutation.
type ProductVariantsBulkCreatePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty"`
	// The newly created variants.
	ProductVariants []ProductVariant `json:"productVariants,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkCreateUserError `json:"userErrors,omitempty"`
}

// Error codes for failed product variant bulk create mutations.
type ProductVariantsBulkCreateUserError struct {
	// The error code.
	Code *ProductVariantsBulkCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkCreateUserError) IsDisplayableError() {}

// Return type for `productVariantsBulkDelete` mutation.
type ProductVariantsBulkDeletePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkDeleteUserError `json:"userErrors,omitempty"`
}

// Error codes for failed bulk variant delete mutations.
type ProductVariantsBulkDeleteUserError struct {
	// The error code.
	Code *ProductVariantsBulkDeleteUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkDeleteUserError) IsDisplayableError() {}

// Specifies a product variant to create as part of a variant bulk mutation.
type ProductVariantsBulkInput struct {
	// The value of the barcode associated with the product variant.
	Barcode *string `json:"barcode,omitempty"`
	// The compare-at price of the variant.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty"`
	// The ID of the fulfillment service associated with the variant.
	FulfillmentServiceID *string `json:"fulfillmentServiceId,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty"`
	// Specifies the product variant to update or delete.
	ID *string `json:"id,omitempty"`
	// The ID of the image that's associated with the variant.
	ImageID *string `json:"imageId,omitempty"`
	// The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.
	//
	ImageSrc *string `json:"imageSrc,omitempty"`
	// The URL of the media to associate with the variant.
	MediaSrc []string `json:"mediaSrc,omitempty"`
	// Whether customers are allowed to place an order for the variant when it's out of stock.
	InventoryPolicy *ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty"`
	// Create only field. The inventory quantities at each location where the variant is stocked. The number of elements
	// in the array of inventory quantities cannot exceed 10 and the amount specified for the plan.
	//
	InventoryQuantities []InventoryLevelInput `json:"inventoryQuantities,omitempty"`
	// The inventory item associated with the variant, used for unit cost.
	InventoryItem *InventoryItemInput `json:"inventoryItem,omitempty"`
	// The additional customizable information about the product variant.
	Metafields []MetafieldInput `json:"metafields,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The custom properties that a shop owner uses to define product variants.
	Options []string `json:"options,omitempty"`
	// The price of the variant.
	Price *null.String `json:"price,omitempty"`
	// Whether the variant requires shipping.
	RequiresShipping *bool `json:"requiresShipping,omitempty"`
	// The SKU for the variant.
	Sku *string `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable *bool `json:"taxable,omitempty"`
	// The tax code associated with the variant.
	TaxCode *string `json:"taxCode,omitempty"`
	// The weight of the variant.
	Weight *float64 `json:"weight,omitempty"`
	// The unit of weight that's used to measure the variant.
	WeightUnit *WeightUnit `json:"weightUnit,omitempty"`
}

// Return type for `productVariantsBulkReorder` mutation.
type ProductVariantsBulkReorderPayload struct {
	// The updated product.
	Product *Product `json:"product,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkReorderUserError `json:"userErrors,omitempty"`
}

// Error codes for failed bulk product variants reorder operation.
type ProductVariantsBulkReorderUserError struct {
	// The error code.
	Code *ProductVariantsBulkReorderUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkReorderUserError) IsDisplayableError() {}

// Return type for `productVariantsBulkUpdate` mutation.
type ProductVariantsBulkUpdatePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty"`
	// The updated variants.
	ProductVariants []ProductVariant `json:"productVariants,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkUpdateUserError `json:"userErrors,omitempty"`
}

// Error codes for failed variant bulk update mutations.
type ProductVariantsBulkUpdateUserError struct {
	// The error code.
	Code *ProductVariantsBulkUpdateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkUpdateUserError) IsDisplayableError() {}

// Return type for `pubSubWebhookSubscriptionCreate` mutation.
type PubSubWebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []PubSubWebhookSubscriptionCreateUserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
type PubSubWebhookSubscriptionCreateUserError struct {
	// The error code.
	Code *PubSubWebhookSubscriptionCreateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PubSubWebhookSubscriptionCreateUserError) IsDisplayableError() {}

// Specifies the input fields for a PubSub webhook subscription.
type PubSubWebhookSubscriptionInput struct {
	// The Pub/Sub project ID.
	PubSubProject string `json:"pubSubProject"`
	// The Pub/Sub topic ID.
	PubSubTopic string `json:"pubSubTopic"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty"`
}

// Return type for `pubSubWebhookSubscriptionUpdate` mutation.
type PubSubWebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []PubSubWebhookSubscriptionUpdateUserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
type PubSubWebhookSubscriptionUpdateUserError struct {
	// The error code.
	Code *PubSubWebhookSubscriptionUpdateUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PubSubWebhookSubscriptionUpdateUserError) IsDisplayableError() {}

// A publication is a group of products and collections that is published to an app.
type Publication struct {
	// The app associated with the publication.
	App *App `json:"app,omitempty"`
	// The collection publications for the list of collections published to the publication.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the publication.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Whether the collection is available to the publication.
	HasCollection bool `json:"hasCollection"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Name of the publication.
	Name string `json:"name"`
	// The product publications for the list of products published to the publication.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the publication.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether or not this publication supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing"`
}

func (Publication) IsNode() {}

// An auto-generated type for paginating through multiple Publications.
type PublicationConnection struct {
	// A list of edges.
	Edges []PublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Publication and a cursor during pagination.
type PublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PublicationEdge.
	Node *Publication `json:"node,omitempty"`
}

// Specifies the input fields required to publish a resource.
type PublicationInput struct {
	// ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *string `json:"channelId,omitempty"`
	// ID of the publication.
	PublicationID *string `json:"publicationId,omitempty"`
	// The date and time that the resource was published. Setting this to a date in the future will schedule
	// the resource to be published. Only online store channels support future publishing.
	//
	PublishDate *string `json:"publishDate,omitempty"`
}

// Return type for `publishablePublish` mutation.
type PublishablePublishPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishablePublishToCurrentChannel` mutation.
type PublishablePublishToCurrentChannelPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublish` mutation.
type PublishableUnpublishPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublishToCurrentChannel` mutation.
type PublishableUnpublishToCurrentChannelPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Published translation of a field of a resource.
type PublishedTranslation struct {
	// The resource field that is being translated.
	Key string `json:"key"`
	// The locale of this translation.
	Locale string `json:"locale"`
	// The translation value.
	Value *string `json:"value,omitempty"`
}

// The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
type QueryRoot struct {
	// Lookup an App by ID or return the currently authenticated App.
	App *App `json:"app,omitempty"`
	// Fetches app by handle.
	// Returns null if the app doesn't exist.
	//
	AppByHandle *App `json:"appByHandle,omitempty"`
	// Fetches app by apiKey.
	// Returns null if the app doesn't exist.
	//
	AppByKey *App `json:"appByKey,omitempty"`
	// Credits that can be used towards future app purchases.
	AppCredits *AppCreditConnection `json:"appCredits,omitempty"`
	// Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
	AppInstallation *AppInstallation `json:"appInstallation,omitempty"`
	// List of app installations.
	AppInstallations *AppInstallationConnection `json:"appInstallations,omitempty"`
	// Returns an automatic discount resource by ID.
	AutomaticDiscount DiscountAutomatic `json:"automaticDiscount"`
	// Returns an automatic discount resource by ID.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of automatic discounts.
	AutomaticDiscountNodes *DiscountAutomaticNodeConnection `json:"automaticDiscountNodes,omitempty"`
	// List of the shop's automatic discount saved searches.
	AutomaticDiscountSavedSearches *SavedSearchConnection `json:"automaticDiscountSavedSearches,omitempty"`
	// List of automatic discounts.
	AutomaticDiscounts *DiscountAutomaticConnection `json:"automaticDiscounts,omitempty"`
	// Returns a list of activated carrier services and associated shop locations that support them.
	AvailableCarrierServices []DeliveryCarrierServiceAndLocations `json:"availableCarrierServices,omitempty"`
	// Returns a list of available locales.
	AvailableLocales []Locale `json:"availableLocales,omitempty"`
	// Returns a `DeliveryCarrierService` object by ID.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// Lookup a channel by ID.
	Channel *Channel `json:"channel,omitempty"`
	// List of the active sales channels.
	Channels *ChannelConnection `json:"channels,omitempty"`
	// Returns a code discount resource by ID.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// Returns a code discount identified by its code.
	CodeDiscountNodeByCode *DiscountCodeNode `json:"codeDiscountNodeByCode,omitempty"`
	// List of code discounts. Special fields for query params:
	//  * status: active, expired, scheduled
	//  * discount_type: bogo, fixed_amount, free_shipping, percentage.
	CodeDiscountNodes *DiscountCodeNodeConnection `json:"codeDiscountNodes,omitempty"`
	// List of the shop's code discount saved searches.
	CodeDiscountSavedSearches *SavedSearchConnection `json:"codeDiscountSavedSearches,omitempty"`
	// Returns a Collection resource by ID.
	Collection *Collection `json:"collection,omitempty"`
	// Return a collection by its handle.
	CollectionByHandle *Collection `json:"collectionByHandle,omitempty"`
	// A list of rule conditions to define how collections with rules can be created.
	CollectionRulesConditions []CollectionRuleConditions `json:"collectionRulesConditions,omitempty"`
	// List of the shop's collection saved searches.
	CollectionSavedSearches *SavedSearchConnection `json:"collectionSavedSearches,omitempty"`
	// List of collections.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Return the AppInstallation for the currently authenticated App.
	CurrentAppInstallation *AppInstallation `json:"currentAppInstallation,omitempty"`
	// Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
	CurrentBulkOperation *BulkOperation `json:"currentBulkOperation,omitempty"`
	// Returns a Customer resource by ID.
	Customer *Customer `json:"customer,omitempty"`
	// Returns a CustomerPaymentMethod resource by ID.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// List of customers.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// The paginated list of deletion events.
	DeletionEvents *DeletionEventConnection `json:"deletionEvents,omitempty"`
	// Returns a Delivery Profile resource by ID.
	DeliveryProfile *DeliveryProfile `json:"deliveryProfile,omitempty"`
	// Returns a list of saved delivery profiles.
	DeliveryProfiles *DeliveryProfileConnection `json:"deliveryProfiles,omitempty"`
	// Returns the shop-wide shipping settings.
	DeliverySettings *DeliverySetting `json:"deliverySettings,omitempty"`
	// The total number of discount codes for the shop.
	DiscountCodeCount int `json:"discountCodeCount"`
	// Returns a bulk code creation resource by ID.
	DiscountRedeemCodeBulkCreation *DiscountRedeemCodeBulkCreation `json:"discountRedeemCodeBulkCreation,omitempty"`
	// List of the shop's redeemed discount code saved searches.
	DiscountRedeemCodeSavedSearches *SavedSearchConnection `json:"discountRedeemCodeSavedSearches,omitempty"`
	// Lookup a Domain by ID.
	Domain *Domain `json:"domain,omitempty"`
	// Returns a DraftOrder resource by ID.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// List of the shop's draft order saved searches.
	DraftOrderSavedSearches *SavedSearchConnection `json:"draftOrderSavedSearches,omitempty"`
	// List of saved draft orders.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// A list of the shop's file saved searches.
	FileSavedSearches *SavedSearchConnection `json:"fileSavedSearches,omitempty"`
	// A list of files.
	Files *FileConnection `json:"files,omitempty"`
	// Returns a Fulfillment resource by ID.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// Returns a Fulfillment order resource by ID.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// Returns a FulfillmentService resource by ID.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Returns a gift card resource by ID.
	GiftCard *GiftCard `json:"giftCard,omitempty"`
	// Returns a list of gift cards.
	GiftCards *GiftCardConnection `json:"giftCards,omitempty"`
	// The total number of gift cards issued for the shop.
	GiftCardsCount string `json:"giftCardsCount"`
	// Returns an InventoryItem resource by ID.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// Returns a list of inventory items.
	InventoryItems *InventoryItemConnection `json:"inventoryItems,omitempty"`
	// Returns an InventoryLevel resource by ID.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
	//
	Job *Job `json:"job,omitempty"`
	// Returns an inventory Location resource by ID.
	Location *Location `json:"location,omitempty"`
	// Returns a list of active inventory locations.
	Locations *LocationConnection `json:"locations,omitempty"`
	// Returns a list of all origin locations available for a delivery profile.
	LocationsAvailableForDeliveryProfiles []Location `json:"locationsAvailableForDeliveryProfiles,omitempty"`
	// Returns a list of all origin locations available for a delivery profile.
	LocationsAvailableForDeliveryProfilesConnection *LocationConnection `json:"locationsAvailableForDeliveryProfilesConnection,omitempty"`
	// A list of marketing activities associated with the marketing app.
	MarketingActivities *MarketingActivityConnection `json:"marketingActivities,omitempty"`
	// Returns a MarketingActivity resource by ID.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// Returns a MarketingEvent resource by ID.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty"`
	// A list of marketing events associated with the marketing app.
	MarketingEvents *MarketingEventConnection `json:"marketingEvents,omitempty"`
	// Returns a metafield definition by ID.
	MetafieldDefinition *MetafieldDefinition `json:"metafieldDefinition,omitempty"`
	// Each metafield definition has a type, which defines the type of information that it can store.
	// This type is enforced across every instance of the resource that owns the metafield definition.
	//
	// Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
	//
	MetafieldDefinitionTypes []MetafieldDefinitionType `json:"metafieldDefinitionTypes,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of the `MetafieldStorefrontVisibility` records.
	MetafieldStorefrontVisibilities *MetafieldStorefrontVisibilityConnection `json:"metafieldStorefrontVisibilities,omitempty"`
	// Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
	// metafields to make visible in the Storefront API.
	//
	MetafieldStorefrontVisibility *MetafieldStorefrontVisibility `json:"metafieldStorefrontVisibility,omitempty"`
	// A paginated list of metafields.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a specific node (any object that implements the
	// [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
	// interface) by ID, in accordance with the
	// [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
	// This field is commonly used for refetching an object.
	//
	Node Node `json:"node"`
	// Returns the list of nodes (any objects that implement the
	// [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
	// interface) with the given IDs, in accordance with the
	// [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
	//
	Nodes []Node `json:"nodes,omitempty"`
	// Returns an Order resource by ID.
	Order *Order `json:"order,omitempty"`
	// List of the shop's order saved searches.
	OrderSavedSearches *SavedSearchConnection `json:"orderSavedSearches,omitempty"`
	// Returns a list of orders placed.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The list of payment terms templates eligible for all shops and users.
	PaymentTermsTemplates []PaymentTermsTemplate `json:"paymentTermsTemplates,omitempty"`
	// A list of price lists.
	PriceList *PriceList `json:"priceList,omitempty"`
	// All price lists for a shop.
	PriceLists *PriceListConnection `json:"priceLists,omitempty"`
	// Lookup a price rule by ID.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// List of the shop's price rule saved searches.
	PriceRuleSavedSearches *SavedSearchConnection `json:"priceRuleSavedSearches,omitempty"`
	// List of price rules.
	PriceRules *PriceRuleConnection `json:"priceRules,omitempty"`
	// Returns a private metafield by ID.
	// Private metafields are accessible only by the application that created them.
	//
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// Returns a list of private metafields associated to a resource.
	//
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Returns a Product resource by ID.
	Product *Product `json:"product,omitempty"`
	// Return a product by its handle.
	ProductByHandle *Product `json:"productByHandle,omitempty"`
	// The product resource feedback for the currently authenticated app.
	ProductResourceFeedback *ProductResourceFeedback `json:"productResourceFeedback,omitempty"`
	// List of the shop's product saved searches.
	ProductSavedSearches *SavedSearchConnection `json:"productSavedSearches,omitempty"`
	// Returns the nodes of the product taxonomy based on the arguments provided.
	// If a `search` argument is provided, then all nodes that match the search query globally are returned.
	// If a `children_of` argument is provided, then all children of the specified node are returned.
	// If a `siblings_of` argument is provided, then all siblings of the specified node are returned.
	// If no arguments are provided, then all the top-level nodes of the taxonomy are returned.
	//
	ProductTaxonomyNodes *ProductTaxonomyNodeConnection `json:"productTaxonomyNodes,omitempty"`
	// Returns a ProductVariant resource by ID.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// List of the product variants.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// List of products.
	Products *ProductConnection `json:"products,omitempty"`
	// The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
	PublicAPIVersions []APIVersion `json:"publicApiVersions,omitempty"`
	// Lookup a publication by ID.
	Publication *Publication `json:"publication,omitempty"`
	// List of the active publications.
	Publications *PublicationConnection `json:"publications,omitempty"`
	// Returns a Refund resource by ID.
	Refund *Refund `json:"refund,omitempty"`
	// Lookup a script tag resource by ID.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty"`
	// A list of script tags.
	ScriptTags *ScriptTagConnection `json:"scriptTags,omitempty"`
	// The Customer Segment.
	Segment *Segment `json:"segment,omitempty"`
	// The number of segments for a shop.
	SegmentCount int `json:"segmentCount"`
	// A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
	SegmentFilterSuggestions *SegmentFilterConnection `json:"segmentFilterSuggestions,omitempty"`
	// A list of filters.
	SegmentFilters *SegmentFilterConnection `json:"segmentFilters,omitempty"`
	// The list of members, such as customers, that's associated with an individual segment.
	SegmentMembers *SegmentMemberConnection `json:"segmentMembers,omitempty"`
	// Whether a member, which is a customer, belongs to a segment.
	SegmentMembership *SegmentMembershipResponse `json:"segmentMembership,omitempty"`
	// A list of a shop's segment migrations.
	SegmentMigrations *SegmentMigrationConnection `json:"segmentMigrations,omitempty"`
	// The list of suggested values that's associated with an individual segment.A segment is a group of members, such as customers, that meet specific criteria.
	SegmentValueSuggestions *SegmentValueConnection `json:"segmentValueSuggestions,omitempty"`
	// A list of a shop's segments.
	Segments *SegmentConnection `json:"segments,omitempty"`
	// Returns a Selling Plan Group resource by ID.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// List Selling Plan Groups.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
	// business and store management settings for the shop.
	//
	Shop *Shop `json:"shop,omitempty"`
	// List of locales available on a shop.
	ShopLocales []ShopLocale `json:"shopLocales,omitempty"`
	// Shopify Payments account information, including balances and payouts.
	ShopifyPaymentsAccount *ShopifyPaymentsAccount `json:"shopifyPaymentsAccount,omitempty"`
	// The StaffMember resource, by ID.
	StaffMember *StaffMember `json:"staffMember,omitempty"`
	// Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
	//
	// Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
	//
	StandardMetafieldDefinitionTemplates *StandardMetafieldDefinitionTemplateConnection `json:"standardMetafieldDefinitionTemplates,omitempty"`
	// Returns a SubscriptionBillingAttempt by ID.
	SubscriptionBillingAttempt *SubscriptionBillingAttempt `json:"subscriptionBillingAttempt,omitempty"`
	// Returns a Subscription Contract resource by ID.
	SubscriptionContract *SubscriptionContract `json:"subscriptionContract,omitempty"`
	// List Subscription Contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
	// Returns a Subscription Draft resource by ID.
	SubscriptionDraft *SubscriptionDraft `json:"subscriptionDraft,omitempty"`
	// Returns a list of TenderTransactions associated with the shop.
	TenderTransactions *TenderTransactionConnection `json:"tenderTransactions,omitempty"`
	// Translatable resource.
	TranslatableResource *TranslatableResource `json:"translatableResource,omitempty"`
	// List of translatable resources.
	TranslatableResources *TranslatableResourceConnection `json:"translatableResources,omitempty"`
	// A list of translatable resources by IDs.
	TranslatableResourcesByIds *TranslatableResourceConnection `json:"translatableResourcesByIds,omitempty"`
	// Returns a redirect resource by ID.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty"`
	// Returns a redirect import resource by ID.
	URLRedirectImport *URLRedirectImport `json:"urlRedirectImport,omitempty"`
	// A list of the shop's URL redirect saved searches.
	URLRedirectSavedSearches *SavedSearchConnection `json:"urlRedirectSavedSearches,omitempty"`
	// A list of redirects for a shop.
	URLRedirects *URLRedirectConnection `json:"urlRedirects,omitempty"`
	// Returns a webhook subscription by ID.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
	// Returns a list of webhook subscriptions.
	WebhookSubscriptions *WebhookSubscriptionConnection `json:"webhookSubscriptions,omitempty"`
}

// The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
type Refund struct {
	// A list of the refunded additional fees as part of this refund.
	AdditionalFees []RefundAdditionalFee `json:"additionalFees,omitempty"`
	// The date and time when the refund was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// A list of the refunded duties as part of this refund.
	Duties []RefundDuty `json:"duties,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The optional note associated with the refund.
	Note *string `json:"note,omitempty"`
	// The order associated with the refund.
	Order *Order `json:"order,omitempty"`
	// The order adjustments that are attached with the refund.
	OrderAdjustments *OrderAdjustmentConnection `json:"orderAdjustments,omitempty"`
	// The `RefundLineItem` resources attached to the refund.
	RefundLineItems *RefundLineItemConnection `json:"refundLineItems,omitempty"`
	// The staff member who created the refund.
	StaffMember *StaffMember `json:"staffMember,omitempty"`
	// The total amount across all transactions for the refund.
	TotalRefunded *MoneyV2 `json:"totalRefunded,omitempty"`
	// The total amount across all transactions for the refund, in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// The transactions associated with the refund.
	Transactions *OrderTransactionConnection `json:"transactions,omitempty"`
	// The date and time when the refund was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (Refund) IsLegacyInteroperability() {}
func (Refund) IsNode()                   {}

// Represents a refunded additional fee.
type RefundAdditionalFee struct {
	// The monetary amount refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The associated additional fee that was refunded.
	OriginalAdditionalFee *AdditionalFee `json:"originalAdditionalFee,omitempty"`
}

// The fields required to reimburse additional fees on a refund.
type RefundAdditionalFeeInput struct {
	// The ID of the additional fee in the refund.
	AdditionalFeeID string `json:"additionalFeeId"`
}

// An agreement between the merchant and customer to refund all or a portion of the order.
type RefundAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique identifier for the agreement.
	ID string `json:"id"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The refund associated with the agreement.
	Refund *Refund `json:"refund,omitempty"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty"`
}

func (RefundAgreement) IsSalesAgreement() {}

// Return type for `refundCreate` mutation.
type RefundCreatePayload struct {
	// The order associated with the created refund.
	Order *Order `json:"order,omitempty"`
	// The created refund.
	Refund *Refund `json:"refund,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a refunded duty.
type RefundDuty struct {
	// The amount of a refunded duty in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The duty associated with this refunded duty.
	OriginalDuty *Duty `json:"originalDuty,omitempty"`
}

// The fields required to reimburse duties on a refund.
type RefundDutyInput struct {
	// The ID of the duty in the refund.
	DutyID string `json:"dutyId"`
	// The type of refund for this duty.
	RefundType *RefundDutyRefundType `json:"refundType,omitempty"`
}

// The input fields to create a refund.
type RefundInput struct {
	// The currency that is used to refund the order. This must be the presentment currency, which is the currency used by the customer. This is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty"`
	// The ID of the order that is being refunded.
	OrderID string `json:"orderId"`
	// An optional note that is attached to the refund.
	Note *string `json:"note,omitempty"`
	// Whether to send a refund notification to the customer.
	Notify *bool `json:"notify,omitempty"`
	// The input fields that are required to reimburse shipping costs.
	Shipping *ShippingRefundInput `json:"shipping,omitempty"`
	// A list of line items to refund.
	RefundLineItems []RefundLineItemInput `json:"refundLineItems,omitempty"`
	// A list of duties to refund.
	RefundDuties []RefundDutyInput `json:"refundDuties,omitempty"`
	// A list of additional fees to refund.
	RefundAdditionalFees []RefundAdditionalFeeInput `json:"refundAdditionalFees,omitempty"`
	// A list of transactions involved in the refund.
	Transactions []OrderTransactionInput `json:"transactions,omitempty"`
}

// A line item that's included in a refund.
type RefundLineItem struct {
	// The `LineItem` resource associated to the refunded line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The inventory restock location.
	Location *Location `json:"location,omitempty"`
	// The price of a refunded line item.
	Price null.String `json:"price"`
	// The price of a refunded line item in shop and presentment currencies.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// The quantity of a refunded line item.
	Quantity int `json:"quantity"`
	// The type of restock for the refunded line item.
	RestockType RefundLineItemRestockType `json:"restockType"`
	// Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
	Restocked bool `json:"restocked"`
	// The subtotal price of a refunded line item.
	Subtotal null.String `json:"subtotal"`
	// The subtotal price of a refunded line item in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// The total tax charged on a refunded line item.
	TotalTax null.String `json:"totalTax"`
	// The total tax charged on a refunded line item in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
}

// An auto-generated type for paginating through multiple RefundLineItems.
type RefundLineItemConnection struct {
	// A list of edges.
	Edges []RefundLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one RefundLineItem and a cursor during pagination.
type RefundLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of RefundLineItemEdge.
	Node *RefundLineItem `json:"node,omitempty"`
}

// The fields required to reimburse line items on a refund.
type RefundLineItemInput struct {
	// The ID of the line item in the refund.
	LineItemID string `json:"lineItemId"`
	// The quantity of the associated line item to be refunded.
	Quantity int `json:"quantity"`
	// The type of restock for this line item.
	RestockType *RefundLineItemRestockType `json:"restockType,omitempty"`
	// The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
	LocationID *string `json:"locationId,omitempty"`
}

// Input for a remote Authorize.net customer payment profile.
type RemoteAuthorizeNetCustomerPaymentProfileInput struct {
	// The customerProfileId value from the Authorize.net API.
	//
	CustomerProfileID string `json:"customerProfileId"`
	// The customerPaymentProfileId value from the Authorize.net API.
	//
	CustomerPaymentProfileID *string `json:"customerPaymentProfileId,omitempty"`
}

// Input for a remote stripe payment method.
type RemoteStripePaymentMethodInput struct {
	// The customer_id value from the Stripe API.
	//
	CustomerID string `json:"customerId"`
	// The payment_method_id value from the Stripe API.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
}

// An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
// They can optionally have a specific icon and be dismissed by merchants.
type ResourceAlert struct {
	// Buttons in the alert that link to related information.
	// For example, _Edit variants_.
	//
	Actions []ResourceAlertAction `json:"actions,omitempty"`
	// The secondary text in the alert that includes further information or instructions about how to solve a problem.
	//
	Content string `json:"content"`
	// Unique identifier that appears when an alert is manually closed by the merchant.
	// Most alerts cannot be manually closed.
	//
	DismissibleHandle *string `json:"dismissibleHandle,omitempty"`
	// An icon that is optionally displayed with the alert.
	Icon *ResourceAlertIcon `json:"icon,omitempty"`
	// Indication of how important the alert is.
	Severity ResourceAlertSeverity `json:"severity"`
	// The primary text in the alert that includes information or describes the problem.
	Title string `json:"title"`
}

// An action associated to a resource alert, such as editing variants.
type ResourceAlertAction struct {
	// Whether the action appears as a button or as a link.
	Primary bool `json:"primary"`
	// Resource for the action to show.
	Show *string `json:"show,omitempty"`
	// The text for the button in the alert. For example, _Edit variants_.
	Title string `json:"title"`
	// The target URL that the button links to.
	URL string `json:"url"`
}

// Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
type ResourceFeedback struct {
	// Feedback from an app about the steps a merchant needs to take to set up the app on their store.
	AppFeedback []AppFeedback `json:"appFeedback,omitempty"`
	// List of AppFeedback detailing issues regarding a resource.
	Details []AppFeedback `json:"details,omitempty"`
	// Summary of resource feedback pertaining to the resource.
	Summary string `json:"summary"`
}

// A resource limit represents the limits that the resource has.
type ResourceLimit struct {
	// Whether or not the resource is available.
	Available bool `json:"available"`
	// Quantity available. If null the quantity available is unlimited.
	QuantityAvailable *int `json:"quantityAvailable,omitempty"`
	// Quantity limit of the resource. If null the quantity is unlimited.
	QuantityLimit *int `json:"quantityLimit,omitempty"`
	// Quantity used of the resource. If null the quantity used cannot be retrieved.
	QuantityUsed *int `json:"quantityUsed,omitempty"`
}

// A resource publication represents that a resource has been published to a publication.
type ResourcePublication struct {
	// The channel the resource publication is published to.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
	// If false, then the resource publication is neither published nor scheduled to be published.
	//
	IsPublished bool `json:"isPublished"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	PublishDate string `json:"publishDate"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable"`
}

// An auto-generated type for paginating through multiple ResourcePublications.
type ResourcePublicationConnection struct {
	// A list of edges.
	Edges []ResourcePublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublication and a cursor during pagination.
type ResourcePublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ResourcePublicationEdge.
	Node *ResourcePublication `json:"node,omitempty"`
}

// A resource publication represents that a resource either has been published or will be published to a publication.
type ResourcePublicationV2 struct {
	// Whether the resource publication is published. If true, then the resource publication is published to the publication.
	// If false, then the resource publication is staged to be published to the publication.
	//
	IsPublished bool `json:"isPublished"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	PublishDate *string `json:"publishDate,omitempty"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable"`
}

// An auto-generated type for paginating through multiple ResourcePublicationV2s.
type ResourcePublicationV2Connection struct {
	// A list of edges.
	Edges []ResourcePublicationV2Edge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
type ResourcePublicationV2Edge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ResourcePublicationV2Edge.
	Node *ResourcePublicationV2 `json:"node,omitempty"`
}

// SEO information.
type Seo struct {
	// SEO Description.
	Description *string `json:"description,omitempty"`
	// SEO Title.
	Title *string `json:"title,omitempty"`
}

// SEO information.
type SEOInput struct {
	// SEO title of the product.
	Title *string `json:"title,omitempty"`
	// SEO description of the product.
	Description *string `json:"description,omitempty"`
}

// An auto-generated type for paginating through multiple Sales.
type SaleConnection struct {
	// A list of edges.
	Edges []SaleEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Sale and a cursor during pagination.
type SaleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SaleEdge.
	Node Sale `json:"node"`
}

// The tax allocated to a sale from a single tax line.
type SaleTax struct {
	// The portion of the total tax amount on the related sale that comes from the associated tax line.
	Amount *MoneyBag `json:"amount,omitempty"`
	// The unique identifier for the sale tax.
	ID string `json:"id"`
	// The tax line associated with the sale.
	TaxLine *TaxLine `json:"taxLine,omitempty"`
}

// An auto-generated type for paginating through multiple SalesAgreements.
type SalesAgreementConnection struct {
	// A list of edges.
	Edges []SalesAgreementEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SalesAgreement and a cursor during pagination.
type SalesAgreementEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SalesAgreementEdge.
	Node SalesAgreement `json:"node"`
}

// A saved search is a representation of a search query saved in the admin.
type SavedSearch struct {
	// The filters of a saved search.
	Filters []SearchFilter `json:"filters,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The name of a saved search.
	Name string `json:"name"`
	// The query string of a saved search. This includes search terms and filters.
	Query string `json:"query"`
	// The type of resource this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType"`
	// The search terms of a saved search.
	SearchTerms string `json:"searchTerms"`
}

func (SavedSearch) IsLegacyInteroperability() {}
func (SavedSearch) IsNode()                   {}

// An auto-generated type for paginating through multiple SavedSearches.
type SavedSearchConnection struct {
	// A list of edges.
	Edges []SavedSearchEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the fields required to create a saved search.
type SavedSearchCreateInput struct {
	// The type of resource this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType"`
	// A descriptive name of the saved search.
	Name string `json:"name"`
	// The query string of a saved search. This includes search terms and filters.
	Query string `json:"query"`
}

// Return type for `savedSearchCreate` mutation.
type SavedSearchCreatePayload struct {
	// The saved search that was created.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the fields to delete a saved search.
type SavedSearchDeleteInput struct {
	// ID of the saved search to delete.
	ID string `json:"id"`
}

// Return type for `savedSearchDelete` mutation.
type SavedSearchDeletePayload struct {
	// The id of the saved search that was deleted.
	DeletedSavedSearchID *string `json:"deletedSavedSearchId,omitempty"`
	// The shop of the saved search that was deleted.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SavedSearch and a cursor during pagination.
type SavedSearchEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SavedSearchEdge.
	Node *SavedSearch `json:"node,omitempty"`
}

// Specifies the fields required to update a saved search.
type SavedSearchUpdateInput struct {
	// ID of the saved search to update.
	ID string `json:"id"`
	// A descriptive name of the saved search.
	Name *string `json:"name,omitempty"`
	// The query string of a saved search. This included search terms and filters.
	Query *string `json:"query,omitempty"`
}

// Return type for `savedSearchUpdate` mutation.
type SavedSearchUpdatePayload struct {
	// The saved search that was updated.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Script discount applications capture the intentions of a discount that
// was created by a Shopify Script for an order's line item or shipping line.
type ScriptDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The description of the application as defined by the Script.
	Description string `json:"description"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the application as defined by the Script.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (ScriptDiscountApplication) IsDiscountApplication() {}

// A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the order status page of checkout.
type ScriptTag struct {
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script will be served as is.
	//
	Cache bool `json:"cache"`
	// The date and time when the script tag was created.
	CreatedAt string `json:"createdAt"`
	// The page or pages on the online store that the script should be included.
	DisplayScope ScriptTagDisplayScope `json:"displayScope"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The URL to the remote script.
	Src string `json:"src"`
	// The date and time when the script tag was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ScriptTag) IsLegacyInteroperability() {}
func (ScriptTag) IsNode()                   {}

// An auto-generated type for paginating through multiple ScriptTags.
type ScriptTagConnection struct {
	// A list of edges.
	Edges []ScriptTagEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `scriptTagCreate` mutation.
type ScriptTagCreatePayload struct {
	// The script tag that was created.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `scriptTagDelete` mutation.
type ScriptTagDeletePayload struct {
	// The ID of the deleted script tag.
	DeletedScriptTagID *string `json:"deletedScriptTagId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ScriptTag and a cursor during pagination.
type ScriptTagEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ScriptTagEdge.
	Node *ScriptTag `json:"node,omitempty"`
}

// The input fields for a script tag. This input object is used when creating or updating
// a script tag to specify its URL, where it should be included, and how it will be cached.
type ScriptTagInput struct {
	// The URL of the remote script. For example: `https://example.com/path/to/script.js`.
	Src *string `json:"src,omitempty"`
	// The page or pages on the online store where the script should be included.
	DisplayScope *ScriptTagDisplayScope `json:"displayScope,omitempty"`
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script is served as is.
	// The default value is `false`.
	//
	Cache *bool `json:"cache,omitempty"`
}

// Return type for `scriptTagUpdate` mutation.
type ScriptTagUpdatePayload struct {
	// The script tag that was updated.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A filter in a search query represented by a key value pair.
type SearchFilter struct {
	// The key of the search filter.
	Key string `json:"key"`
	// The value of the search filter.
	Value string `json:"value"`
}

// A list of search filters along with their specific options in value and label pair for filtering.
type SearchFilterOptions struct {
	// A list of options that can be use to filter product availability.
	ProductAvailability []FilterOption `json:"productAvailability,omitempty"`
}

// Represents an individual result returned from a search.
type SearchResult struct {
	// Returns the search result description text.
	Description *string `json:"description,omitempty"`
	// Returns the Image resource presented to accompany a search result.
	Image *Image `json:"image,omitempty"`
	// Returns the ID of the resource returned in the search result.
	Reference Node `json:"reference"`
	// Returns the resource title.
	Title string `json:"title"`
	// Returns the absolute URL to the resource in the search result.
	URL string `json:"url"`
}

// The connection type for SearchResult.
type SearchResultConnection struct {
	// A list of edges.
	Edges []SearchResultEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// Information to aid in pagination.
	ResultsAfterCount int `json:"resultsAfterCount"`
}

// An auto-generated type which holds one SearchResult and a cursor during pagination.
type SearchResultEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SearchResultEdge.
	Node *SearchResult `json:"node,omitempty"`
}

// A dynamic collection of customers based on specific criteria.
type Segment struct {
	// The date and time when the segment was added to the store.
	CreationDate string `json:"creationDate"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The date and time when the segment was last updated.
	LastEditDate string `json:"lastEditDate"`
	// The name of the segment.
	Name string `json:"name"`
	// A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
	Query string `json:"query"`
}

func (Segment) IsNode() {}

// An auto-generated type for paginating through multiple Segments.
type SegmentConnection struct {
	// A list of edges.
	Edges []SegmentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `segmentCreate` mutation.
type SegmentCreatePayload struct {
	// The newly created segment.
	Segment *Segment `json:"segment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `segmentDelete` mutation.
type SegmentDeletePayload struct {
	// ID of the deleted segment.
	DeletedSegmentID *string `json:"deletedSegmentId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Segment and a cursor during pagination.
type SegmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentEdge.
	Node *Segment `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple SegmentFilters.
type SegmentFilterConnection struct {
	// A list of edges.
	Edges []SegmentFilterEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentFilter and a cursor during pagination.
type SegmentFilterEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentFilterEdge.
	Node SegmentFilter `json:"node"`
}

// The members of a segment.
type SegmentMember struct {
	// The total amount that the member has spent on orders at the store in their lifetime.
	AmountSpent *MoneyV2 `json:"amountSpent,omitempty"`
	// The member's default address.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty"`
	// The member's default email address.
	DefaultEmailAddress *CustomerEmailAddress `json:"defaultEmailAddress,omitempty"`
	// The member's default phone number.
	DefaultPhoneNumber *CustomerPhoneNumber `json:"defaultPhoneNumber,omitempty"`
	// The full name of the member, based on the values for `first_name` and `last_name`. If the member's first and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
	DisplayName string `json:"displayName"`
	// The member's first name.
	FirstName *string `json:"firstName,omitempty"`
	// The member’s ID.
	ID string `json:"id"`
	// The member's last name.
	LastName *string `json:"lastName,omitempty"`
	// The ID of the customer's most recent order.
	LastOrderID *string `json:"lastOrderId,omitempty"`
	// A note about the member.
	Note *string `json:"note,omitempty"`
	// The number of orders that the member has made at the store in their lifetime.
	NumberOfOrders *string `json:"numberOfOrders,omitempty"`
}

// The connection type for SegmentMembers.
type SegmentMemberConnection struct {
	// A list of edges.
	Edges []SegmentMemberEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// The statistics for a given segment.
	Statistics *Statistics `json:"statistics,omitempty"`
}

// An auto-generated type which holds one SegmentMember and a cursor during pagination.
type SegmentMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentMemberEdge.
	Node *SegmentMember `json:"node,omitempty"`
}

// The response type for the `segmentMembership` object.
type SegmentMembership struct {
	// A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
	IsMember bool `json:"isMember"`
	// A `segmentId` that is used for testing membership.
	SegmentID string `json:"segmentId"`
}

// A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
type SegmentMembershipResponse struct {
	// The membership status for the given list of segments.
	Memberships []SegmentMembership `json:"memberships,omitempty"`
}

// A segment and its corresponding saved search.
// For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
type SegmentMigration struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The ID of the saved search.
	SavedSearchID string `json:"savedSearchId"`
	// The ID of the segment.
	SegmentID *string `json:"segmentId,omitempty"`
}

// An auto-generated type for paginating through multiple SegmentMigrations.
type SegmentMigrationConnection struct {
	// A list of edges.
	Edges []SegmentMigrationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentMigration and a cursor during pagination.
type SegmentMigrationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentMigrationEdge.
	Node *SegmentMigration `json:"node,omitempty"`
}

// Return type for `segmentUpdate` mutation.
type SegmentUpdatePayload struct {
	// The updated segment.
	Segment *Segment `json:"segment,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A list of suggested values associated with an individual segment. A
// segment is a group of members, such as customers, that meet specific
// criteria.
type SegmentValue struct {
	// The localized version of the value's name. This name is displayed to the merchant.
	LocalizedValue string `json:"localizedValue"`
	// The name of the query associated with the suggestion.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple SegmentValues.
type SegmentValueConnection struct {
	// A list of edges.
	Edges []SegmentValueEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentValue and a cursor during pagination.
type SegmentValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentValueEdge.
	Node *SegmentValue `json:"node,omitempty"`
}

// Properties used by customers to select a product variant.
// Products can have multiple options, like different sizes or colors.
type SelectedOption struct {
	// The product option’s name.
	Name string `json:"name"`
	// The product option’s value.
	Value string `json:"value"`
}

// Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
// and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
// up these records if you need to restore them later.
//
// For more information on selling plans, refer to
// [*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
type SellingPlan struct {
	// A selling plan policy which describes the recurring billing details.
	BillingPolicy SellingPlanBillingPolicy `json:"billingPolicy"`
	// The date and time when the selling plan was created.
	CreatedAt string `json:"createdAt"`
	// A selling plan policy which describes the delivery details.
	DeliveryPolicy SellingPlanDeliveryPolicy `json:"deliveryPolicy"`
	// Buyer facing string which describes the selling plan commitment.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// A customer-facing description of the selling plan.
	//
	// If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
	//
	Name string `json:"name"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// Relative position of the selling plan for display. A lower position will be displayed before a higher position.
	Position *int `json:"position,omitempty"`
	// Selling plan pricing details.
	PricingPolicies []SellingPlanPricingPolicy `json:"pricingPolicies,omitempty"`
}

func (SellingPlan) IsNode() {}

// Represents a selling plan policy anchor.
type SellingPlanAnchor struct {
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	//
	Day int `json:"day"`
	// The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
	// between 1-12.
	//
	Month *int `json:"month,omitempty"`
	// Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
	//
	Type SellingPlanAnchorType `json:"type"`
}

// Specifies the input fields required to create or update a selling plan anchor.
type SellingPlanAnchorInput struct {
	// Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY.
	//
	Type *SellingPlanAnchorType `json:"type,omitempty"`
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	//
	Day *int `json:"day,omitempty"`
	// The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
	// between 1-12.
	//
	Month *int `json:"month,omitempty"`
}

// Specifies the input fields required to create or update a billing policy type.
type SellingPlanBillingPolicyInput struct {
	// The recurring billing policy details.
	Recurring *SellingPlanRecurringBillingPolicyInput `json:"recurring,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlans.
type SellingPlanConnection struct {
	// A list of edges.
	Edges []SellingPlanEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields to create or update a delivery policy.
type SellingPlanDeliveryPolicyInput struct {
	// The recurring delivery policy details.
	Recurring *SellingPlanRecurringDeliveryPolicyInput `json:"recurring,omitempty"`
}

// An auto-generated type which holds one SellingPlan and a cursor during pagination.
type SellingPlanEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SellingPlanEdge.
	Node *SellingPlan `json:"node,omitempty"`
}

// Represents a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// The date and time when the fixed selling plan pricing policy was created.
	CreatedAt string `json:"createdAt"`
}

func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicyBase() {}
func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicy()     {}

// Specifies the input fields required to create or update a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *string `json:"id,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
}

// Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
// and associated records (selling plans and policies) are deleted 48 hours after a merchant
// uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
type SellingPlanGroup struct {
	// The identifier for app, exposed in Liquid and product JSON.
	AppID *string `json:"appId,omitempty"`
	// Whether the given product is directly associated to the selling plan group.
	AppliesToProduct bool `json:"appliesToProduct"`
	// Whether the given product variant is directly associated to the selling plan group.
	AppliesToProductVariant bool `json:"appliesToProductVariant"`
	// Whether any of the product variants of the given product are associated to the selling plan group.
	//
	AppliesToProductVariants bool `json:"appliesToProductVariants"`
	// The date and time when the selling plan group was created.
	CreatedAt string `json:"createdAt"`
	// The merchant-facing description of the selling plan group.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The merchant-facing label of the selling plan group.
	MerchantCode string `json:"merchantCode"`
	// The buyer-facing label of the selling plan group.
	Name string `json:"name"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// The relative position of the selling plan group for display.
	Position *int `json:"position,omitempty"`
	// A count of products associated to the selling plan group.
	ProductCount int `json:"productCount"`
	// A count of product variants associated to the selling plan group.
	ProductVariantCount int `json:"productVariantCount"`
	// Product variants associated to the selling plan group.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// Products associated to the selling plan group.
	Products *ProductConnection `json:"products,omitempty"`
	// Selling plans associated to the selling plan group.
	SellingPlans *SellingPlanConnection `json:"sellingPlans,omitempty"`
	// A summary of the policies associated to the selling plan group.
	Summary *string `json:"summary,omitempty"`
}

func (SellingPlanGroup) IsNode() {}

// Return type for `sellingPlanGroupAddProductVariants` mutation.
type SellingPlanGroupAddProductVariantsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupAddProducts` mutation.
type SellingPlanGroupAddProductsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlanGroups.
type SellingPlanGroupConnection struct {
	// A list of edges.
	Edges []SellingPlanGroupEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `sellingPlanGroupCreate` mutation.
type SellingPlanGroupCreatePayload struct {
	// The created selling plan group object.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupDelete` mutation.
type SellingPlanGroupDeletePayload struct {
	// The id of the deleted selling plan group object.
	DeletedSellingPlanGroupID *string `json:"deletedSellingPlanGroupId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
type SellingPlanGroupEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SellingPlanGroupEdge.
	Node *SellingPlanGroup `json:"node,omitempty"`
}

// Specifies the input fields required to create or update a selling plan group.
type SellingPlanGroupInput struct {
	// Buyer facing label of the selling plan group.
	Name *string `json:"name,omitempty"`
	// Identifier for app, exposed in Liquid and product JSON.
	AppID *string `json:"appId,omitempty"`
	// Merchant facing label of the selling plan group.
	MerchantCode *string `json:"merchantCode,omitempty"`
	// Merchant facing description of the selling plan group.
	Description *string `json:"description,omitempty"`
	// List of selling plans to create.
	SellingPlansToCreate []SellingPlanInput `json:"sellingPlansToCreate,omitempty"`
	// List of selling plans to update.
	SellingPlansToUpdate []SellingPlanInput `json:"sellingPlansToUpdate,omitempty"`
	// List of selling plans ids to delete.
	SellingPlansToDelete []string `json:"sellingPlansToDelete,omitempty"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProductVariants` mutation.
type SellingPlanGroupRemoveProductVariantsPayload struct {
	// The removed product variant ids.
	RemovedProductVariantIds []string `json:"removedProductVariantIds,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProducts` mutation.
type SellingPlanGroupRemoveProductsPayload struct {
	// The removed product ids.
	RemovedProductIds []string `json:"removedProductIds,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Specifies resource association with a Selling Plan Group.
type SellingPlanGroupResourceInput struct {
	// The IDs of the Variants to add to the Selling Plan Group.
	ProductVariantIds []string `json:"productVariantIds,omitempty"`
	// The IDs of the Products to add to the Selling Plan Group.
	ProductIds []string `json:"productIds,omitempty"`
}

// Return type for `sellingPlanGroupUpdate` mutation.
type SellingPlanGroupUpdatePayload struct {
	// The IDs of the deleted Subscription Plans.
	DeletedSellingPlanIds []string `json:"deletedSellingPlanIds,omitempty"`
	// The updated Selling Plan Group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Represents a selling plan group custom error.
type SellingPlanGroupUserError struct {
	// The error code.
	Code *SellingPlanGroupUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SellingPlanGroupUserError) IsDisplayableError() {}

// Specifies the input fields to create or update a selling plan.
type SellingPlanInput struct {
	// ID of the selling plan.
	ID *string `json:"id,omitempty"`
	// Buyer facing string which describes the selling plan content.
	Name *string `json:"name,omitempty"`
	// Buyer facing string which describes the selling plan commitment.
	Description *string `json:"description,omitempty"`
	// Selling plan policy which describes the billing details.
	BillingPolicy *SellingPlanBillingPolicyInput `json:"billingPolicy,omitempty"`
	// A selling plan policy which describes the delivery details.
	DeliveryPolicy *SellingPlanDeliveryPolicyInput `json:"deliveryPolicy,omitempty"`
	// The pricing policies which describe the pricing details. Each selling plan
	// can only contain a maximum of 2 pricing policies.
	//
	PricingPolicies []SellingPlanPricingPolicyInput `json:"pricingPolicies,omitempty"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty"`
}

// Specifies the input fields required to create or update a selling plan pricing policy.
type SellingPlanPricingPolicyInput struct {
	// Recurring pricing policy details.
	Recurring *SellingPlanRecurringPricingPolicyInput `json:"recurring,omitempty"`
	// Fixed pricing policy details.
	Fixed *SellingPlanFixedPricingPolicyInput `json:"fixed,omitempty"`
}

// Represents the percentage value of a selling plan pricing policy percentage type.
type SellingPlanPricingPolicyPercentageValue struct {
	// The percentage value.
	Percentage float64 `json:"percentage"`
}

func (SellingPlanPricingPolicyPercentageValue) IsSellingPlanPricingPolicyAdjustmentValue() {}

// Specifies the input fields required to create or update a pricing policy adjustment value.
type SellingPlanPricingPolicyValueInput struct {
	// Defines percentage value.
	Percentage *float64 `json:"percentage,omitempty"`
	// Defines fixed value for an fixed amount off or a new policy price.
	FixedValue *null.String `json:"fixedValue,omitempty"`
}

// Represents a recurring selling plan billing policy.
type SellingPlanRecurringBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan billing policy was created.
	CreatedAt string `json:"createdAt"`
	// The billing frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval"`
	// The number of intervals between billings.
	IntervalCount int `json:"intervalCount"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty"`
}

func (SellingPlanRecurringBillingPolicy) IsSellingPlanBillingPolicy() {}

// Specifies the input fields required to create or update a recurring billing policy.
type SellingPlanRecurringBillingPolicyInput struct {
	// The billing frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between billings.
	IntervalCount *int `json:"intervalCount,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty"`
}

// Represents a recurring selling plan delivery policy.
type SellingPlanRecurringDeliveryPolicy struct {
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan delivery policy was created.
	CreatedAt string `json:"createdAt"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty"`
	// Specifies if the delivery policy is merchant or buyer-centric.
	// Buyer-centric delivery policies state the time when the buyer will receive the goods.
	// Merchant-centric delivery policies state the time when the fulfillment should be started.
	// Currently, only merchant-centric delivery policies are supported.
	//
	Intent SellingPlanRecurringDeliveryPolicyIntent `json:"intent"`
	// The delivery frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval"`
	// The number of intervals between deliveries.
	IntervalCount int `json:"intervalCount"`
	// Fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
	PreAnchorBehavior SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior"`
}

func (SellingPlanRecurringDeliveryPolicy) IsSellingPlanDeliveryPolicy() {}

// Specifies the input fields to create or update a recurring delivery policy.
type SellingPlanRecurringDeliveryPolicyInput struct {
	// The delivery frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between deliveries.
	IntervalCount *int `json:"intervalCount,omitempty"`
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty"`
	// Intention of this delivery policy, it can be either: delivery or fulfillment.
	Intent *SellingPlanRecurringDeliveryPolicyIntent `json:"intent,omitempty"`
	// The pre anchor behavior. It can be either: asap or next.
	PreAnchorBehavior *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior,omitempty"`
}

// Represents a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// Cycle after which this pricing policy applies.
	AfterCycle *int `json:"afterCycle,omitempty"`
	// The date and time when the recurring selling plan pricing policy was created.
	CreatedAt string `json:"createdAt"`
}

func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicy()     {}
func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicyBase() {}

// Specifies the input fields required to create or update a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *string `json:"id,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
	// Cycle after which the pricing policy applies.
	AfterCycle int `json:"afterCycle"`
}

// Represents the shipping details that the customer chose for their order.
type ShippingLine struct {
	// A reference to the carrier service that provided the rate.
	// Present when the rate was computed by a third-party carrier service.
	//
	CarrierIdentifier *string `json:"carrierIdentifier,omitempty"`
	// A reference to the shipping method.
	Code *string `json:"code,omitempty"`
	// Whether the shipping line is custom or not.
	Custom bool `json:"custom"`
	// The general classification of the delivery method.
	DeliveryCategory *string `json:"deliveryCategory,omitempty"`
	// The discounts that have been allocated to the shipping line.
	//
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPrice *MoneyV2 `json:"discountedPrice,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPriceSet *MoneyBag `json:"discountedPriceSet,omitempty"`
	// A globally-unique identifier.
	ID *string `json:"id,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPrice *MoneyV2 `json:"originalPrice,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPriceSet *MoneyBag `json:"originalPriceSet,omitempty"`
	// The phone number at the shipping address.
	Phone *string `json:"phone,omitempty"`
	// Returns the price of the shipping line.
	Price null.String `json:"price"`
	// The fulfillment service requested for the shipping method.
	// Present if the shipping method requires processing by a third party fulfillment service.
	//
	RequestedFulfillmentService *FulfillmentService `json:"requestedFulfillmentService,omitempty"`
	// A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
	ShippingRateHandle *string `json:"shippingRateHandle,omitempty"`
	// Returns the rate source for the shipping line.
	Source *string `json:"source,omitempty"`
	// The TaxLine objects connected to this shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Returns the title of the shipping line.
	Title string `json:"title"`
}

// An auto-generated type for paginating through multiple ShippingLines.
type ShippingLineConnection struct {
	// A list of edges.
	Edges []ShippingLineEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShippingLine and a cursor during pagination.
type ShippingLineEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShippingLineEdge.
	Node *ShippingLine `json:"node,omitempty"`
}

// Specifies the shipping details for the order.
type ShippingLineInput struct {
	// Price of the shipping rate.
	Price *null.String `json:"price,omitempty"`
	// A unique identifier for the shipping rate.
	ShippingRateHandle *string `json:"shippingRateHandle,omitempty"`
	// Title of the shipping rate.
	Title *string `json:"title,omitempty"`
}

// A sale associated with a shipping charge.
type ShippingLineSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (ShippingLineSale) IsSale() {}

// The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
type ShippingMethod struct {
	// A unique code associated with the rate. For example: `expedited_mail`
	Code string `json:"code"`
	// A description of the rate, which customers will see at checkout.
	// For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
	//
	Label string `json:"label"`
}

// Return type for `shippingPackageDelete` mutation.
type ShippingPackageDeletePayload struct {
	// The ID of the deleted shipping package.
	DeletedID *string `json:"deletedId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageMakeDefault` mutation.
type ShippingPackageMakeDefaultPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageUpdate` mutation.
type ShippingPackageUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A shipping rate is an additional cost added to the cost of the products that were ordered.
type ShippingRate struct {
	// Human-readable unique identifier for this shipping rate.
	Handle string `json:"handle"`
	// The cost associated with the shipping rate.
	Price *MoneyV2 `json:"price,omitempty"`
	// The name of the shipping rate.
	Title string `json:"title"`
}

// Represents the shipping costs refunded on the Refund.
type ShippingRefund struct {
	// The monetary value of the shipping fees to be refunded.
	Amount null.String `json:"amount"`
	// The monetary value of the shipping fees to be refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The maximum amount of shipping fees currently refundable.
	MaximumRefundable null.String `json:"maximumRefundable"`
	// The maximum amount of shipping fees currently refundable in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// The monetary value of the tax allocated to shipping fees to be refunded.
	Tax null.String `json:"tax"`
	// The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
	TaxSet *MoneyBag `json:"taxSet,omitempty"`
}

// The input fields that are required to reimburse shipping costs.
type ShippingRefundInput struct {
	// The monetary value of the shipping fees to be reimbursed.
	Amount *null.String `json:"amount,omitempty"`
	// Whether a full refund is provided.
	FullRefund *bool `json:"fullRefund,omitempty"`
}

// Represents the shop object.
type Shop struct {
	// A list of the shop's active alert messages that appear in the Shopify admin.
	Alerts []ShopAlert `json:"alerts,omitempty"`
	// The token required to query the shop's reports or dashboards.
	AnalyticsToken string `json:"analyticsToken"`
	// The paginated list of fulfillment orders assigned to fulfillment services.
	AssignedFulfillmentOrders *FulfillmentOrderConnection `json:"assignedFulfillmentOrders,omitempty"`
	// The list of sales channels not currently installed on the shop.
	AvailableChannelApps *AppConnection `json:"availableChannelApps,omitempty"`
	// The shop's billing address information.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Exposes the number of channels.
	ChannelCount int `json:"channelCount"`
	// List of the shop's active sales channels.
	Channels *ChannelConnection `json:"channels,omitempty"`
	// Specifies whether the shop supports checkouts via Checkout API.
	CheckoutAPISupported bool `json:"checkoutApiSupported"`
	// Return a collection by its handle.
	CollectionByHandle *Collection `json:"collectionByHandle,omitempty"`
	// List of the shop's collection saved searches.
	CollectionSavedSearches *SavedSearchConnection `json:"collectionSavedSearches,omitempty"`
	// List of the shop's collections.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The public-facing contact email address for the shop.
	// Customers will use this email to communicate with the shop owner.
	//
	ContactEmail string `json:"contactEmail"`
	// Countries that have been defined in shipping zones for the shop.
	CountriesInShippingZones *CountriesInShippingZones `json:"countriesInShippingZones,omitempty"`
	// The three letter code for the shop's currency.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// How currencies are displayed on your store.
	CurrencyFormats *CurrencyFormats `json:"currencyFormats,omitempty"`
	// The presentment currency settings for the shop excluding the shop's own currency.
	CurrencySettings *CurrencySettingConnection `json:"currencySettings,omitempty"`
	// Whether customer accounts are required, optional, or disabled for the shop.
	CustomerAccounts ShopCustomerAccountsSetting `json:"customerAccounts"`
	// List of the shop's customer saved searches.
	CustomerSavedSearches *SavedSearchConnection `json:"customerSavedSearches,omitempty"`
	// A list of tags that have been added to customer accounts.
	CustomerTags *StringConnection `json:"customerTags,omitempty"`
	// Customer accounts associated to the shop.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// The shop's meta description used in search engine results.
	Description *string `json:"description,omitempty"`
	// The domains configured for the shop.
	Domains []Domain `json:"domains,omitempty"`
	// List of the shop's draft order saved searches.
	DraftOrderSavedSearches *SavedSearchConnection `json:"draftOrderSavedSearches,omitempty"`
	// A list of tags that have been added to draft orders.
	DraftOrderTags *StringConnection `json:"draftOrderTags,omitempty"`
	// List of saved draft orders on the shop.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The shop owner's email address.
	// Shopify will use this email address to communicate with the shop owner.
	//
	Email string `json:"email"`
	// The configuration for the shop email sender.
	EmailSenderConfiguration *EmailSenderConfiguration `json:"emailSenderConfiguration,omitempty"`
	// The presentment currencies enabled for the shop.
	EnabledPresentmentCurrencies []CurrencyCode `json:"enabledPresentmentCurrencies,omitempty"`
	// The set of features enabled for the shop.
	Features *ShopFeatures `json:"features,omitempty"`
	// The paginated list of merchant-managed and third-party fulfillment orders.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of the shop's installed fulfillment services.
	FulfillmentServices []FulfillmentService `json:"fulfillmentServices,omitempty"`
	// The shop's time zone as defined by the IANA.
	IanaTimezone string `json:"ianaTimezone"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// List of the shop's inventory items.
	InventoryItems *InventoryItemConnection `json:"inventoryItems,omitempty"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	//
	LimitedPendingOrderCount *LimitedPendingOrderCount `json:"limitedPendingOrderCount,omitempty"`
	// List of active locations of the shop.
	Locations *LocationConnection `json:"locations,omitempty"`
	// List of a shop's marketing events.
	MarketingEvents *MarketingEventConnection `json:"marketingEvents,omitempty"`
	// The approval signals for a shop to support onboarding to channel apps.
	MerchantApprovalSignals *MerchantApprovalSignals `json:"merchantApprovalSignals,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The shop's .myshopify.com domain name.
	MyshopifyDomain string `json:"myshopifyDomain"`
	// The shop's name.
	Name string `json:"name"`
	// The shop's settings related to navigation.
	NavigationSettings []NavigationItem `json:"navigationSettings,omitempty"`
	// The prefix that appears before order numbers.
	OrderNumberFormatPrefix string `json:"orderNumberFormatPrefix"`
	// The suffix that appears after order numbers.
	OrderNumberFormatSuffix string `json:"orderNumberFormatSuffix"`
	// List of the shop's order saved searches.
	OrderSavedSearches *SavedSearchConnection `json:"orderSavedSearches,omitempty"`
	// A list of tags that have been added to orders.
	OrderTags *StringConnection `json:"orderTags,omitempty"`
	// A list of the shop's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The shop's settings related to payments.
	PaymentSettings *PaymentSettings `json:"paymentSettings,omitempty"`
	// Number of pending orders on the shop.
	PendingOrderCount int `json:"pendingOrderCount"`
	// The shop's billing plan.
	Plan *ShopPlan `json:"plan,omitempty"`
	// List of the shop's price rule saved searches.
	PriceRuleSavedSearches *SavedSearchConnection `json:"priceRuleSavedSearches,omitempty"`
	// List of the shop’s price rules.
	PriceRules *PriceRuleConnection `json:"priceRules,omitempty"`
	// The shop's primary domain name.
	PrimaryDomain *Domain `json:"primaryDomain,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Return a product by its handle.
	ProductByHandle *Product `json:"productByHandle,omitempty"`
	// The list of all images of all products for the shop.
	ProductImages *ImageConnection `json:"productImages,omitempty"`
	// List of the shop's product saved searches.
	ProductSavedSearches *SavedSearchConnection `json:"productSavedSearches,omitempty"`
	// A list of tags that have been added to products.
	ProductTags *StringConnection `json:"productTags,omitempty"`
	// The list of types added to products.
	ProductTypes *StringConnection `json:"productTypes,omitempty"`
	// List of the shop's product variants.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The list of vendors added to products.
	ProductVendors *StringConnection `json:"productVendors,omitempty"`
	// List of the shop's products.
	Products *ProductConnection `json:"products,omitempty"`
	// The number of publications for the shop.
	PublicationCount int `json:"publicationCount"`
	// The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
	ResourceLimits *ShopResourceLimits `json:"resourceLimits,omitempty"`
	// The URL of the rich text editor that can be used for mobile devices.
	RichTextEditorURL string `json:"richTextEditorUrl"`
	// Fetches a list of admin search results by a specified query.
	Search *SearchResultConnection `json:"search,omitempty"`
	// The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
	SearchFilters *SearchFilterOptions `json:"searchFilters,omitempty"`
	// Whether the shop has outstanding setup steps.
	SetupRequired bool `json:"setupRequired"`
	// The list of countries that the shop ships to.
	ShipsToCountries []CountryCode `json:"shipsToCountries,omitempty"`
	// The list of all legal policies associated with a shop.
	ShopPolicies []ShopPolicy `json:"shopPolicies,omitempty"`
	// Shopify Payments account information, including balances and payouts.
	ShopifyPaymentsAccount *ShopifyPaymentsAccount `json:"shopifyPaymentsAccount,omitempty"`
	// The paginated list of the shop's staff members.
	StaffMembers *StaffMemberConnection `json:"staffMembers,omitempty"`
	// The storefront access token of a private application. These are scoped per-application.
	StorefrontAccessTokens *StorefrontAccessTokenConnection `json:"storefrontAccessTokens,omitempty"`
	// The URL of the shop's storefront.
	StorefrontURL string `json:"storefrontUrl"`
	// Whether the shop charges taxes for shipping.
	TaxShipping bool `json:"taxShipping"`
	// Whether applicable taxes are included in the shop's product prices.
	TaxesIncluded bool `json:"taxesIncluded"`
	// The shop's time zone abbreviation.
	TimezoneAbbreviation string `json:"timezoneAbbreviation"`
	// The shop's time zone offset.
	TimezoneOffset string `json:"timezoneOffset"`
	// The shop's time zone offset expressed as a number of minutes.
	TimezoneOffsetMinutes int `json:"timezoneOffsetMinutes"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The shop's unit system for weights and measures.
	UnitSystem UnitSystem `json:"unitSystem"`
	// Fetches a list of images uploaded to the shop by their IDs.
	UploadedImagesByIds []Image `json:"uploadedImagesByIds,omitempty"`
	// The URL of the shop's online store.
	URL string `json:"url"`
	// The shop's primary unit of weight for products and shipping.
	WeightUnit WeightUnit `json:"weightUnit"`
}

func (Shop) IsHasMetafields()            {}
func (Shop) IsHasPublishedTranslations() {}
func (Shop) IsNode()                     {}

// An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
type ShopAlert struct {
	// The text for the button in the alert that links to related information. For example, _Add credit card_.
	//
	Action *ShopAlertAction `json:"action,omitempty"`
	// A description of the alert and further information, such as whether the merchant will be charged.
	Description string `json:"description"`
}

// An action associated to a shop alert, such as adding a credit card.
type ShopAlertAction struct {
	// The text for the button in the alert. For example, _Add credit card_.
	Title string `json:"title"`
	// The target URL that the button links to.
	URL string `json:"url"`
}

// Represents the feature set available to the shop.
// Most fields specify whether a feature is enabled for a shop, and some fields return information
// related to specific features.
type ShopFeatures struct {
	// Whether a shop has access to Avalara AvaTax.
	AvalaraAvatax bool `json:"avalaraAvatax"`
	// The branding of the shop, which influences its look and feel in the Shopify admin.
	Branding ShopBranding `json:"branding"`
	// Whether a shop's online store can have CAPTCHA protection.
	Captcha bool `json:"captcha"`
	// Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
	CaptchaExternalDomains bool `json:"captchaExternalDomains"`
	// Whether the delivery profiles functionality is enabled for this shop.
	DeliveryProfiles bool `json:"deliveryProfiles"`
	// Whether a shop has access to the Google Analytics dynamic remarketing feature.
	DynamicRemarketing bool `json:"dynamicRemarketing"`
	// Whether a shop can be migrated to use Shopify subscriptions.
	EligibleForSubscriptionMigration bool `json:"eligibleForSubscriptionMigration"`
	// Whether a shop is configured properly to sell subscriptions.
	EligibleForSubscriptions bool `json:"eligibleForSubscriptions"`
	// Whether a shop can create gift cards.
	GiftCards bool `json:"giftCards"`
	// Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
	// internationally.
	//
	HarmonizedSystemCode bool `json:"harmonizedSystemCode"`
	// Whether a shop can enable international domains.
	InternationalDomains bool `json:"internationalDomains"`
	// Whether a shop can enable international price overrides.
	InternationalPriceOverrides bool `json:"internationalPriceOverrides"`
	// Whether a shop can enable international price rules.
	InternationalPriceRules bool `json:"internationalPriceRules"`
	// Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
	LegacySubscriptionGatewayEnabled bool `json:"legacySubscriptionGatewayEnabled"`
	// Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
	// or don't have a storefront.
	//
	LiveView bool `json:"liveView"`
	// Whether a shop has multi-location functionality.
	MultiLocation bool `json:"multiLocation"`
	// Whether a shop has access to the onboarding visual.
	OnboardingVisual bool `json:"onboardingVisual"`
	// Whether a shop is configured to sell subscriptions with PayPal Express.
	PaypalExpressSubscriptionGatewayStatus PaypalExpressSubscriptionsGatewayStatus `json:"paypalExpressSubscriptionGatewayStatus"`
	// Whether a shop has access to all reporting features.
	Reports bool `json:"reports"`
	// Whether a shop has ever had subscription products.
	SellsSubscriptions bool `json:"sellsSubscriptions"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus"`
	// Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
	//
	ShowMetrics bool `json:"showMetrics"`
	// Whether a shop has an online store.
	Storefront bool `json:"storefront"`
	// Whether a shop is using Shopify Balance.
	UsingShopifyBalance bool `json:"usingShopifyBalance"`
}

// Locale that has been enabled on a shop.
type ShopLocale struct {
	// Locale ISO code.
	Locale string `json:"locale"`
	// Human-readable locale name.
	Name string `json:"name"`
	// Whether or not this is the default locale for the shop.
	Primary bool `json:"primary"`
	// Whether or not the locale is visible to buyers.
	Published bool `json:"published"`
}

// Return type for `shopLocaleDisable` mutation.
type ShopLocaleDisablePayload struct {
	// ISO code of the locale that was deleted.
	Locale *string `json:"locale,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shopLocaleEnable` mutation.
type ShopLocaleEnablePayload struct {
	// ISO code of the locale that was enabled.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields for a shop locale.
type ShopLocaleInput struct {
	// Specifies the published state of the locale. Only published locales are visible to the buyer.
	Published *bool `json:"published,omitempty"`
}

// Return type for `shopLocaleUpdate` mutation.
type ShopLocaleUpdatePayload struct {
	// The locale that was updated.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the billing plan of the shop.
type ShopPlan struct {
	// The name of the shop's billing plan.
	DisplayName string `json:"displayName"`
	// Whether the shop is a partner development shop for testing purposes.
	PartnerDevelopment bool `json:"partnerDevelopment"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus"`
}

// Policy that a merchant has configured for their store, such as their refund or privacy policy.
type ShopPolicy struct {
	// The text of the policy. The maximum size is 512kb.
	Body string `json:"body"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []PublishedTranslation `json:"translations,omitempty"`
	// The shop policy type.
	Type ShopPolicyType `json:"type"`
	// The public URL of the policy.
	URL string `json:"url"`
}

func (ShopPolicy) IsHasPublishedTranslations() {}
func (ShopPolicy) IsNode()                     {}

// Specifies the input fields required to update a policy.
type ShopPolicyInput struct {
	// The shop policy type.
	Type ShopPolicyType `json:"type"`
	// Policy text, maximum size of 512kb.
	Body string `json:"body"`
}

// Return type for `shopPolicyUpdate` mutation.
type ShopPolicyUpdatePayload struct {
	// The shop policy that has been updated.
	ShopPolicy *ShopPolicy `json:"shopPolicy,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ShopPolicyUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of a shop policy mutation.
type ShopPolicyUserError struct {
	// The error code.
	Code *ShopPolicyErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ShopPolicyUserError) IsDisplayableError() {}

// Resource limits of a shop.
type ShopResourceLimits struct {
	// Maximum number of locations allowed.
	LocationLimit int `json:"locationLimit"`
	// Maximum number of product options allowed.
	MaxProductOptions int `json:"maxProductOptions"`
	// The maximum number of variants allowed per product.
	MaxProductVariants int `json:"maxProductVariants"`
	// Whether the shop has reached the limit of the number of URL redirects it can make for resources.
	RedirectLimitReached bool `json:"redirectLimitReached"`
	// The maximum number of variants allowed per shop. If the shop has unlimited SKUs, then the quantity used cannot be retrieved.
	SkuResourceLimits *ResourceLimit `json:"skuResourceLimits,omitempty"`
}

// Balance and payout information for a
// [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
// account. Balance includes all balances for the currencies supported by the shop.
// You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
type ShopifyPaymentsAccount struct {
	// Whether the Shopify Payments setup is completed.
	Activated bool `json:"activated"`
	// Current balances in all currencies for the account.
	Balance []MoneyV2 `json:"balance,omitempty"`
	// All bank accounts configured for the Shopify Payments account.
	BankAccounts *ShopifyPaymentsBankAccountConnection `json:"bankAccounts,omitempty"`
	// Statement descriptor used for charges.
	//
	// This is what buyers will see on their credit card or bank statements when making a purchase.
	//
	ChargeStatementDescriptor *string `json:"chargeStatementDescriptor,omitempty"`
	// Statement descriptors used for charges.
	//
	// This is what buyers will see on their credit card or bank statements when making a purchase.
	//
	ChargeStatementDescriptors ShopifyPaymentsChargeStatementDescriptor `json:"chargeStatementDescriptors"`
	// The Shopify Payments account country.
	Country string `json:"country"`
	// The default payout currency for the Shopify Payments account.
	DefaultCurrency CurrencyCode `json:"defaultCurrency"`
	// All disputes related to the Shopify Payments account.
	Disputes *ShopifyPaymentsDisputeConnection `json:"disputes,omitempty"`
	// The fraud settings of the Shopify Payments account.
	FraudSettings *ShopifyPaymentsFraudSettings `json:"fraudSettings,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The notifications settings for the account.
	NotificationSettings *ShopifyPaymentsNotificationSettings `json:"notificationSettings,omitempty"`
	// Whether the Shopify Payments account can be onboarded.
	Onboardable bool `json:"onboardable"`
	// Payout schedule for the account.
	PayoutSchedule *ShopifyPaymentsPayoutSchedule `json:"payoutSchedule,omitempty"`
	// Descriptor used for payouts.
	//
	// This is what merchants will see on their bank statement when receiving a payout.
	//
	PayoutStatementDescriptor *string `json:"payoutStatementDescriptor,omitempty"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The permitted documents for identity verification.
	PermittedVerificationDocuments []ShopifyPaymentsVerificationDocument `json:"permittedVerificationDocuments,omitempty"`
	// The verifications necessary for this account.
	Verifications []ShopifyPaymentsVerification `json:"verifications,omitempty"`
}

func (ShopifyPaymentsAccount) IsNode() {}

// A bank account that can receive payouts.
type ShopifyPaymentsBankAccount struct {
	// The account number of the bank account.
	//
	AccountNumber string `json:"accountNumber"`
	// The last digits of the account number (the rest is redacted).
	//
	AccountNumberLastDigits string `json:"accountNumberLastDigits"`
	// The name of the bank.
	//
	BankName *string `json:"bankName,omitempty"`
	// The country of the bank.
	//
	Country CountryCode `json:"country"`
	// The date that the bank account was created.
	CreatedAt string `json:"createdAt"`
	// The currency of the bank account.
	//
	Currency CurrencyCode `json:"currency"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The routing number of the bank account.
	//
	RoutingNumber string `json:"routingNumber"`
	// The status of the bank account.
	//
	Status ShopifyPaymentsBankAccountStatus `json:"status"`
}

func (ShopifyPaymentsBankAccount) IsNode() {}

// An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
type ShopifyPaymentsBankAccountConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsBankAccountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
type ShopifyPaymentsBankAccountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsBankAccountEdge.
	Node *ShopifyPaymentsBankAccount `json:"node,omitempty"`
}

// The charge descriptors for a payments account.
type ShopifyPaymentsDefaultChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *string `json:"default,omitempty"`
	// The prefix of the statement descriptor.
	Prefix string `json:"prefix"`
}

func (ShopifyPaymentsDefaultChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
type ShopifyPaymentsDispute struct {
	// The total amount disputed by the cardholder.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The deadline for evidence submission.
	EvidenceDueBy *string `json:"evidenceDueBy,omitempty"`
	// The date when evidence was sent. Returns null if evidence has not yet been sent.
	EvidenceSentOn *string `json:"evidenceSentOn,omitempty"`
	// The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
	FinalizedOn *string `json:"finalizedOn,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The date when this dispute was initiated.
	InitiatedAt string `json:"initiatedAt"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The order that contains the charge that is under dispute.
	Order *Order `json:"order,omitempty"`
	// The reason of the dispute.
	ReasonDetails *ShopifyPaymentsDisputeReasonDetails `json:"reasonDetails,omitempty"`
	// The current state of the dispute.
	Status DisputeStatus `json:"status"`
	// Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
	Type DisputeType `json:"type"`
}

func (ShopifyPaymentsDispute) IsLegacyInteroperability() {}
func (ShopifyPaymentsDispute) IsNode()                   {}

// An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
type ShopifyPaymentsDisputeConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsDisputeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
type ShopifyPaymentsDisputeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsDisputeEdge.
	Node *ShopifyPaymentsDispute `json:"node,omitempty"`
}

// Details regarding a dispute reason.
type ShopifyPaymentsDisputeReasonDetails struct {
	// The raw code provided by the payment network.
	NetworkReasonCode *string `json:"networkReasonCode,omitempty"`
	// The reason for the dispute provided by the cardholder's banks.
	Reason ShopifyPaymentsDisputeReason `json:"reason"`
}

// Presents all Shopify Payments information related to an extended authorization.
type ShopifyPaymentsExtendedAuthorization struct {
	// The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
	//
	ExtendedAuthorizationExpiresAt string `json:"extendedAuthorizationExpiresAt"`
	// The time after which capture will incur an additional fee.
	//
	StandardAuthorizationExpiresAt string `json:"standardAuthorizationExpiresAt"`
}

// The fraud settings of a payments account.
type ShopifyPaymentsFraudSettings struct {
	// Decline a charge if there is an AVS failure.
	DeclineChargeOnAvsFailure bool `json:"declineChargeOnAvsFailure"`
	// Decline a charge if there is an CVC failure.
	DeclineChargeOnCvcFailure bool `json:"declineChargeOnCvcFailure"`
}

// The charge descriptors for a Japanese payments account.
type ShopifyPaymentsJpChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *string `json:"default,omitempty"`
	// The charge statement descriptor in kana.
	Kana *string `json:"kana,omitempty"`
	// The charge statement descriptor in kanji.
	Kanji *string `json:"kanji,omitempty"`
	// The prefix of the statement descriptor.
	Prefix string `json:"prefix"`
}

func (ShopifyPaymentsJpChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// The notification settings for the account.
type ShopifyPaymentsNotificationSettings struct {
	// Receive email notifications when new payouts are sent or payouts fail.
	Payouts bool `json:"payouts"`
}

// Payouts represent the movement of money between a merchant's Shopify
// Payments balance and their bank account.
type ShopifyPaymentsPayout struct {
	// The bank account for the payout.
	BankAccount *ShopifyPaymentsBankAccount `json:"bankAccount,omitempty"`
	// The total amount and currency of the payout.
	Gross *MoneyV2 `json:"gross,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The exact time when the payout was issued. The payout only contains
	// balance transactions that were available at this time.
	//
	IssuedAt string `json:"issuedAt"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The total amount and currency of the payout.
	Net *MoneyV2 `json:"net,omitempty"`
	// The transfer status of the payout.
	Status ShopifyPaymentsPayoutStatus `json:"status"`
	// The summary of the payout.
	Summary *ShopifyPaymentsPayoutSummary `json:"summary,omitempty"`
	// The direction of the payout.
	TransactionType ShopifyPaymentsPayoutTransactionType `json:"transactionType"`
}

func (ShopifyPaymentsPayout) IsLegacyInteroperability() {}
func (ShopifyPaymentsPayout) IsNode()                   {}

// An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
type ShopifyPaymentsPayoutConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsPayoutEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
type ShopifyPaymentsPayoutEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsPayoutEdge.
	Node *ShopifyPaymentsPayout `json:"node,omitempty"`
}

// The payment schedule for a payments account.
type ShopifyPaymentsPayoutSchedule struct {
	// The interval at which payouts are sent to the connected bank account.
	Interval ShopifyPaymentsPayoutInterval `json:"interval"`
	// The day of the month funds will be paid out.
	//
	// The value can be any day of the month from the 1st to the 31st.
	// If the payment interval is set to monthly, this value will be used.
	// Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
	//
	MonthlyAnchor *int `json:"monthlyAnchor,omitempty"`
	// The day of the week funds will be paid out.
	//
	// The value can be any weekday from Monday to Friday.
	// If the payment interval is set to weekly, this value will be used.
	//
	WeeklyAnchor *DayOfTheWeek `json:"weeklyAnchor,omitempty"`
}

// Breakdown of the total fees and gross of each of the different types of transactions associated
// with the payout.
type ShopifyPaymentsPayoutSummary struct {
	// Total fees for all adjustments including disputes.
	AdjustmentsFee *MoneyV2 `json:"adjustmentsFee,omitempty"`
	// Total gross amount for all adjustments including disputes.
	AdjustmentsGross *MoneyV2 `json:"adjustmentsGross,omitempty"`
	// Total fees for all charges.
	ChargesFee *MoneyV2 `json:"chargesFee,omitempty"`
	// Total gross amount for all charges.
	ChargesGross *MoneyV2 `json:"chargesGross,omitempty"`
	// Total fees for all refunds.
	RefundsFee *MoneyV2 `json:"refundsFee,omitempty"`
	// Total gross amount for all refunds.
	RefundsFeeGross *MoneyV2 `json:"refundsFeeGross,omitempty"`
	// Total fees for all reserved funds.
	ReservedFundsFee *MoneyV2 `json:"reservedFundsFee,omitempty"`
	// Total gross amount for all reserved funds.
	ReservedFundsGross *MoneyV2 `json:"reservedFundsGross,omitempty"`
	// Total fees for all retried payouts.
	RetriedPayoutsFee *MoneyV2 `json:"retriedPayoutsFee,omitempty"`
	// Total gross amount for all retried payouts.
	RetriedPayoutsGross *MoneyV2 `json:"retriedPayoutsGross,omitempty"`
}

// Presents all Shopify Payments specific information related to an order refund.
type ShopifyPaymentsRefundSet struct {
	// The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
	//
	AcquirerReferenceNumber *string `json:"acquirerReferenceNumber,omitempty"`
}

// Presents all Shopify Payments specific information related to an order transaction.
type ShopifyPaymentsTransactionSet struct {
	// Contains all fields related to an extended authorization.
	//
	ExtendedAuthorizationSet *ShopifyPaymentsExtendedAuthorization `json:"extendedAuthorizationSet,omitempty"`
	// Contains all fields related to a refund.
	//
	RefundSet *ShopifyPaymentsRefundSet `json:"refundSet,omitempty"`
}

// Each subject (individual) of an account has a verification object giving
//
//	information about the verification state.
type ShopifyPaymentsVerification struct {
	// A globally-unique identifier.
	ID string `json:"id"`
	// The status of the verification.
	Status ShopifyPaymentsVerificationStatus `json:"status"`
	// The subject/individual who has to be verified.
	Subject *ShopifyPaymentsVerificationSubject `json:"subject,omitempty"`
}

func (ShopifyPaymentsVerification) IsNode() {}

// A document which can be used to verify an individual.
type ShopifyPaymentsVerificationDocument struct {
	// True if the back side of the document is required.
	BackRequired bool `json:"backRequired"`
	// True if the front side of the document is required.
	FrontRequired bool `json:"frontRequired"`
	// The type of the document which can be used for verification.
	Type ShopifyPaymentsVerificationDocumentType `json:"type"`
}

// The verification subject represents an individual that has to be verified.
type ShopifyPaymentsVerificationSubject struct {
	// The family name of the individual to verify.
	FamilyName string `json:"familyName"`
	// The given name of the individual to verify.
	GivenName string `json:"givenName"`
}

// Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
type StaffMember struct {
	// Whether the staff member is active.
	Active bool `json:"active"`
	// The image used as the staff member's avatar in the Shopify admin.
	Avatar *Image `json:"avatar,omitempty"`
	// The staff member's email address.
	Email string `json:"email"`
	// Whether the staff member's account exists.
	Exists bool `json:"exists"`
	// The staff member's first name.
	FirstName *string `json:"firstName,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The staff member's initials, if available.
	Initials []string `json:"initials,omitempty"`
	// Whether the staff member is the shop owner.
	IsShopOwner bool `json:"isShopOwner"`
	// The staff member's last name.
	LastName *string `json:"lastName,omitempty"`
	// The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
	Locale string `json:"locale"`
	// The staff member's full name.
	Name string `json:"name"`
	// The staff member's phone number.
	Phone *string `json:"phone,omitempty"`
	// The data used to customize the Shopify admin experience for the staff member.
	PrivateData *StaffMemberPrivateData `json:"privateData,omitempty"`
}

func (StaffMember) IsNode() {}

// An auto-generated type for paginating through multiple StaffMembers.
type StaffMemberConnection struct {
	// A list of edges.
	Edges []StaffMemberEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one StaffMember and a cursor during pagination.
type StaffMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StaffMemberEdge.
	Node *StaffMember `json:"node,omitempty"`
}

// Represents the data used to customize the Shopify admin experience for a logged-in staff member.
type StaffMemberPrivateData struct {
	// The URL to the staff member's account settings page.
	AccountSettingsURL string `json:"accountSettingsUrl"`
	// The date and time when the staff member was created.
	CreatedAt string `json:"createdAt"`
	// Access permissions for the staff member.
	Permissions []StaffMemberPermission `json:"permissions,omitempty"`
}

// Image to be uploaded.
type StageImageInput struct {
	// Image resource.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// Image filename.
	Filename string `json:"filename"`
	// Image MIME type.
	MimeType string `json:"mimeType"`
	// HTTP method to be used by the Staged Upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
}

// Staged media target information.
type StagedMediaUploadTarget struct {
	// Parameters of the media to be uploaded.
	Parameters []StagedUploadParameter `json:"parameters,omitempty"`
	// The url to be passed as the original_source for the product create media mutation input.
	ResourceURL *string `json:"resourceUrl,omitempty"`
	// Media URL.
	URL *string `json:"url,omitempty"`
}

// Media to be uploaded.
type StagedUploadInput struct {
	// Media resource.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// Media filename.
	Filename string `json:"filename"`
	// Media MIME type.
	MimeType string `json:"mimeType"`
	// HTTP method to be used by the Staged Upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
	// Size of the file to upload, in bytes. This is required for VIDEO and MODEL_3D resources.
	FileSize *string `json:"fileSize,omitempty"`
}

// Upload parameter of a Media.
type StagedUploadParameter struct {
	// Parameter name.
	Name string `json:"name"`
	// Parameter value.
	Value string `json:"value"`
}

// Staged target information.
type StagedUploadTarget struct {
	// Parameters of an image to be uploaded.
	Parameters []ImageUploadParameter `json:"parameters,omitempty"`
	// Image URL.
	URL string `json:"url"`
}

// Specifies the fields required to generate the URL and parameters needed to upload an asset to Shopify.
type StagedUploadTargetGenerateInput struct {
	// The resource type being uploaded.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// The filename of the asset being uploaded.
	Filename string `json:"filename"`
	// The MIME type of the asset being uploaded.
	MimeType string `json:"mimeType"`
	// The HTTP method to be used by the staged upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
	// The size of the file to upload, in bytes.
	FileSize *string `json:"fileSize,omitempty"`
}

// Return type for `stagedUploadTargetGenerate` mutation.
type StagedUploadTargetGeneratePayload struct {
	// The signed parameters that can be used to upload the asset.
	Parameters []MutationsStagedUploadTargetGenerateUploadParameter `json:"parameters,omitempty"`
	// The signed URL where the asset can be uploaded.
	URL string `json:"url"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadTargetsGenerate` mutation.
type StagedUploadTargetsGeneratePayload struct {
	// The staged upload targets that were generated.
	Urls []StagedUploadTarget `json:"urls,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadsCreate` mutation.
type StagedUploadsCreatePayload struct {
	// The staged upload targets that were generated.
	StagedTargets []StagedMediaUploadTarget `json:"stagedTargets,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `standardMetafieldDefinitionEnable` mutation.
type StandardMetafieldDefinitionEnablePayload struct {
	// The metafield definition that was created.
	CreatedDefinition *MetafieldDefinition `json:"createdDefinition,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []StandardMetafieldDefinitionEnableUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
type StandardMetafieldDefinitionEnableUserError struct {
	// The error code.
	Code *StandardMetafieldDefinitionEnableUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (StandardMetafieldDefinitionEnableUserError) IsDisplayableError() {}

// Standard metafield definition templates provide preset configurations to create metafield definitions.
// Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
//
// Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
type StandardMetafieldDefinitionTemplate struct {
	// The description of the standard metafield definition.
	Description *string `json:"description,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The key owned by the definition after the definition has been activated.
	Key string `json:"key"`
	// The human-readable name for the standard metafield definition.
	Name string `json:"name"`
	// The namespace owned by the definition after the definition has been activated.
	Namespace string `json:"namespace"`
	// The list of resource types that the standard metafield definition can be applied to.
	OwnerTypes []MetafieldOwnerType `json:"ownerTypes,omitempty"`
	// The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
	Type *MetafieldDefinitionType `json:"type,omitempty"`
	// The configured validations for the standard metafield definition.
	Validations []MetafieldDefinitionValidation `json:"validations,omitempty"`
	// Whether metafields for the definition are by default visible using the Storefront API.
	//
	VisibleToStorefrontAPI bool `json:"visibleToStorefrontApi"`
}

func (StandardMetafieldDefinitionTemplate) IsNode() {}

// An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
type StandardMetafieldDefinitionTemplateConnection struct {
	// A list of edges.
	Edges []StandardMetafieldDefinitionTemplateEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
type StandardMetafieldDefinitionTemplateEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StandardMetafieldDefinitionTemplateEdge.
	Node *StandardMetafieldDefinitionTemplate `json:"node,omitempty"`
}

// Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
type StandardizedProductType struct {
	// The product taxonomy node associated with the standardized product type.
	ProductTaxonomyNode *ProductTaxonomyNode `json:"productTaxonomyNode,omitempty"`
}

// Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
type StandardizedProductTypeInput struct {
	// The id of the node in the Shopify taxonomy that represents the product type.
	ProductTaxonomyNodeID string `json:"productTaxonomyNodeId"`
}

// The statistics for a given segment.
type Statistics struct {
	// The statistics for a given attribute.
	AttributeStatistics *AttributeStatistics `json:"attributeStatistics,omitempty"`
	// The total count for the attribute.
	TotalCount int `json:"totalCount"`
}

// Token used to delegate unauthenticated access scopes to clients that need to access the unautheticated Storefront API.
type StorefrontAccessToken struct {
	// List of permissions associated with the token.
	AccessScopes []AccessScope `json:"accessScopes,omitempty"`
	// The issued public access token.
	AccessToken string `json:"accessToken"`
	// The date and time when the public access token was created.
	CreatedAt string `json:"createdAt"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// An arbitrary title for each token determined by the developer, used for reference         purposes.
	Title string `json:"title"`
	// The date and time when the storefront access token was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (StorefrontAccessToken) IsNode() {}

// An auto-generated type for paginating through multiple StorefrontAccessTokens.
type StorefrontAccessTokenConnection struct {
	// A list of edges.
	Edges []StorefrontAccessTokenEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `storefrontAccessTokenCreate` mutation.
type StorefrontAccessTokenCreatePayload struct {
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The storefront access token.
	StorefrontAccessToken *StorefrontAccessToken `json:"storefrontAccessToken,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields to delete a storefront access token.
type StorefrontAccessTokenDeleteInput struct {
	// The ID of the storefront access token to delete.
	ID string `json:"id"`
}

// Return type for `storefrontAccessTokenDelete` mutation.
type StorefrontAccessTokenDeletePayload struct {
	// The ID of the deleted storefront access token.
	DeletedStorefrontAccessTokenID *string `json:"deletedStorefrontAccessTokenId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
type StorefrontAccessTokenEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StorefrontAccessTokenEdge.
	Node *StorefrontAccessToken `json:"node,omitempty"`
}

// Specifies the input fields for a storefront access token.
type StorefrontAccessTokenInput struct {
	// A title for the storefront access token.
	Title string `json:"title"`
}

// An auto-generated type for paginating through a list of Strings.
type StringConnection struct {
	// A list of edges.
	Edges []StringEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one String and a cursor during pagination.
type StringEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StringEdge.
	Node string `json:"node"`
}

// The values for a string segment filter.
type StringFilterValue struct {
	// The localized name of the value.
	LocalizedName string `json:"localizedName"`
	// The query name of the value.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple StringFilterValues.
type StringFilterValueConnection struct {
	// A list of edges.
	Edges []StringFilterValueEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one StringFilterValue and a cursor during pagination.
type StringFilterValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StringFilterValueEdge.
	Node *StringFilterValue `json:"node,omitempty"`
}

// A filter with a string that's been added to a segment query.
type StringSegmentFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
	// A list of values for a string segment filter.
	Values *StringFilterValueConnection `json:"values,omitempty"`
}

func (StringSegmentFilter) IsSegmentFilter() {}

// Represents an applied code discount.
type SubscriptionAppliedCodeDiscount struct {
	// The unique identifier.
	ID string `json:"id"`
	// The redeem code of the discount that applies on the subscription.
	RedeemCode string `json:"redeemCode"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty"`
}

func (SubscriptionAppliedCodeDiscount) IsSubscriptionDiscount() {}

// A record of an execution of the subscription billing process. Billing attempts use
// idempotency keys to avoid duplicate order creation. A successful billing attempt
// will create an order.
type SubscriptionBillingAttempt struct {
	// The date and time when the billing attempt was completed.
	CompletedAt *string `json:"completedAt,omitempty"`
	// The date and time when the billing attempt was created.
	CreatedAt string `json:"createdAt"`
	// A code corresponding to a payment error during processing.
	ErrorCode *SubscriptionBillingAttemptErrorCode `json:"errorCode,omitempty"`
	// A message describing a payment error during processing.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// A unique key generated by the client to avoid duplicate payments.
	IdempotencyKey string `json:"idempotencyKey"`
	// The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
	//
	NextActionURL *string `json:"nextActionUrl,omitempty"`
	// The result of this billing attempt if completed successfully.
	Order *Order `json:"order,omitempty"`
	// The date and time used to calculate fulfillment intervals for a billing attempt that
	// successfully completed after the current anchor date. To prevent fulfillment from being
	// pushed to the next anchor date, this field can override the billing attempt date.
	//
	OriginTime *string `json:"originTime,omitempty"`
	// Whether or not the billing attempt is still processing.
	Ready bool `json:"ready"`
	// The subscription contract.
	SubscriptionContract *SubscriptionContract `json:"subscriptionContract,omitempty"`
}

func (SubscriptionBillingAttempt) IsNode() {}

// An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
type SubscriptionBillingAttemptConnection struct {
	// A list of edges.
	Edges []SubscriptionBillingAttemptEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `subscriptionBillingAttemptCreate` mutation.
type SubscriptionBillingAttemptCreatePayload struct {
	// The subscription billing attempt.
	SubscriptionBillingAttempt *SubscriptionBillingAttempt `json:"subscriptionBillingAttempt,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BillingAttemptUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
type SubscriptionBillingAttemptEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionBillingAttemptEdge.
	Node *SubscriptionBillingAttempt `json:"node,omitempty"`
}

// Specifies the fields required to complete a subscription billing attempt.
type SubscriptionBillingAttemptInput struct {
	// A unique key generated by the client to avoid duplicate payments. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	IdempotencyKey string `json:"idempotencyKey"`
	// The date and time used to calculate fulfillment intervals for a billing attempt that
	// successfully completed after the current anchor date. To prevent fulfillment from being
	// pushed to the next anchor date, this field can override the billing attempt date.
	//
	OriginTime *string `json:"originTime,omitempty"`
}

// Represents a Subscription Billing Policy.
type SubscriptionBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// Maximum amount of cycles after which the subscription ends.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty"`
}

// Specifies the input fields for a Subscription Billing Policy.
type SubscriptionBillingPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty"`
	// Maximum amount of cycles required in the subscription.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty"`
}

// Represents a Subscription Contract.
type SubscriptionContract struct {
	// The subscription app that this subscription contract is registered to.
	App *App `json:"app,omitempty"`
	// URL of the subscription contract page on the subscription app.
	AppAdminURL *string `json:"appAdminUrl,omitempty"`
	// The list of billing attempts associated with the subscription contract.
	BillingAttempts *SubscriptionBillingAttemptConnection `json:"billingAttempts,omitempty"`
	// The billing policy associated with the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The date and time when the subscription contract was created.
	CreatedAt string `json:"createdAt"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// A list of the custom attributes to be added to the generated orders.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The customer payment method used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod"`
	// The delivery policy associated with the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing of the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts associated with the subscription contract.
	Discounts *SubscriptionManualDiscountConnection `json:"discounts,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The current status of the last payment.
	LastPaymentStatus *SubscriptionContractLastPaymentStatus `json:"lastPaymentStatus,omitempty"`
	// The number of lines associated with the subscription contract.
	LineCount int `json:"lineCount"`
	// The list of subscription lines associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty"`
	// A list of the subscription contract's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The order from which this contract originated.
	OriginOrder *Order `json:"originOrder,omitempty"`
	// The current status of the subscription contract.
	Status SubscriptionContractSubscriptionStatus `json:"status"`
	// The date and time when the subscription contract was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SubscriptionContract) IsNode() {}

// An auto-generated type for paginating through multiple SubscriptionContracts.
type SubscriptionContractConnection struct {
	// A list of edges.
	Edges []SubscriptionContractEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields required to create a Subscription Contract.
type SubscriptionContractCreateInput struct {
	// The ID of the customer to associate with the subscription contract.
	CustomerID string `json:"customerId"`
	// The next billing date for the subscription contract.
	NextBillingDate string `json:"nextBillingDate"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The attributes used as input for the Subscription Draft.
	Contract *SubscriptionDraftInput `json:"contract,omitempty"`
}

// Return type for `subscriptionContractCreate` mutation.
type SubscriptionContractCreatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
type SubscriptionContractEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionContractEdge.
	Node *SubscriptionContract `json:"node,omitempty"`
}

// Return type for `subscriptionContractSetNextBillingDate` mutation.
type SubscriptionContractSetNextBillingDatePayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionContractUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionContractUpdate` mutation.
type SubscriptionContractUpdatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Contract error.
type SubscriptionContractUserError struct {
	// The error code.
	Code *SubscriptionContractErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SubscriptionContractUserError) IsDisplayableError() {}

// Represents a Subscription Line Pricing Cycle Adjustment.
type SubscriptionCyclePriceAdjustment struct {
	// Price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// Price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// The number of cycles required before this pricing policy applies.
	AfterCycle int `json:"afterCycle"`
	// The computed price after the adjustments applied.
	ComputedPrice *MoneyV2 `json:"computedPrice,omitempty"`
}

// Specifies delivery method fields for a subscription draft.
// This is an input union: one, and only one, field can be provided.
// The field provided will determine which delivery method is to be used.
//
// Note: Only `shipping` is supported for now, but other inputs will be
// added as they become supported in subscriptions.
type SubscriptionDeliveryMethodInput struct {
	// Shipping delivery method input.
	Shipping *SubscriptionDeliveryMethodShippingInput `json:"shipping,omitempty"`
}

// Represents a shipping delivery method: a mailing address and a shipping option.
type SubscriptionDeliveryMethodShipping struct {
	// The address to ship to.
	Address *SubscriptionMailingAddress `json:"address,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOption `json:"shippingOption,omitempty"`
}

func (SubscriptionDeliveryMethodShipping) IsSubscriptionDeliveryMethod() {}

// Specifies shipping delivery method fields.
//
// This input accepts partial input. When a field is not provided,
// its prior value is left unchanged.
type SubscriptionDeliveryMethodShippingInput struct {
	// The address to ship to.
	Address *MailingAddressInput `json:"address,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOptionInput `json:"shippingOption,omitempty"`
}

// Represents the selected shipping option on a subscription contract.
type SubscriptionDeliveryMethodShippingOption struct {
	// The carrier service of the shipping option.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The code of the shipping option.
	Code *string `json:"code,omitempty"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty"`
	// The title of the shipping option.
	Title *string `json:"title,omitempty"`
}

// Specifies shipping option fields.
type SubscriptionDeliveryMethodShippingOptionInput struct {
	// The title of the shipping option.
	Title *string `json:"title,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty"`
	// The code of the shipping option.
	Code *string `json:"code,omitempty"`
	// The carrier service ID of the shipping option.
	CarrierServiceID *string `json:"carrierServiceId,omitempty"`
}

// Represents a Subscription Delivery Policy.
type SubscriptionDeliveryPolicy struct {
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of delivery intervals between deliveries.
	IntervalCount int `json:"intervalCount"`
}

// Specifies the input fields for a Subscription Delivery Policy.
type SubscriptionDeliveryPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty"`
}

// Represents what a particular discount reduces from a line price.
type SubscriptionDiscountAllocation struct {
	// Allocation amount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Discount that created the allocation.
	Discount SubscriptionDiscount `json:"discount"`
}

// An auto-generated type for paginating through multiple SubscriptionDiscounts.
type SubscriptionDiscountConnection struct {
	// A list of edges.
	Edges []SubscriptionDiscountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
type SubscriptionDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionDiscountEdge.
	Node SubscriptionDiscount `json:"node"`
}

// Represents the subscription lines the discount applies on.
type SubscriptionDiscountEntitledLines struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All bool `json:"all"`
	// The list of subscription lines associated with the subscription discount.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountFixedAmountValue struct {
	// The fixed amount value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Whether the amount is applied per item.
	AppliesOnEachItem bool `json:"appliesOnEachItem"`
}

func (SubscriptionDiscountFixedAmountValue) IsSubscriptionDiscountValue() {}

// The percentage value of the discount.
type SubscriptionDiscountPercentageValue struct {
	// The percentage value of the discount.
	Percentage int `json:"percentage"`
}

func (SubscriptionDiscountPercentageValue) IsSubscriptionDiscountValue() {}

// Represents a Subscription Draft.
type SubscriptionDraft struct {
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// A list of the custom attributes to be added to the generated orders.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The customer payment method used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts which will be associated with the subscription contract.
	Discounts *SubscriptionDiscountConnection `json:"discounts,omitempty"`
	// The list of subscription discounts to be added to the subscription contract.
	DiscountsAdded *SubscriptionDiscountConnection `json:"discountsAdded,omitempty"`
	// The list of subscription discounts to be removed from the subscription contract.
	DiscountsRemoved *SubscriptionDiscountConnection `json:"discountsRemoved,omitempty"`
	// The list of subscription discounts to be updated on the subscription contract.
	DiscountsUpdated *SubscriptionDiscountConnection `json:"discountsUpdated,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The list of subscription lines which will be associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The list of subscription lines to be added to the subscription contract.
	LinesAdded *SubscriptionLineConnection `json:"linesAdded,omitempty"`
	// The list of subscription lines to be removed from the subscription contract.
	LinesRemoved *SubscriptionLineConnection `json:"linesRemoved,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty"`
	// The original subscription contract.
	OriginalContract *SubscriptionContract `json:"originalContract,omitempty"`
	// Available Shipping Options for a given delivery address. Returns NULL for pending requests.
	//
	ShippingOptions SubscriptionShippingOptionResult `json:"shippingOptions"`
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty"`
}

func (SubscriptionDraft) IsNode() {}

// Return type for `subscriptionDraftCommit` mutation.
type SubscriptionDraftCommitPayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountAdd` mutation.
type SubscriptionDraftDiscountAddPayload struct {
	// The added Subscription Discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountCodeApply` mutation.
type SubscriptionDraftDiscountCodeApplyPayload struct {
	// The added subscription discount.
	AppliedDiscount *SubscriptionAppliedCodeDiscount `json:"appliedDiscount,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountRemove` mutation.
type SubscriptionDraftDiscountRemovePayload struct {
	// The removed subscription draft discount.
	DiscountRemoved SubscriptionDiscount `json:"discountRemoved"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountUpdate` mutation.
type SubscriptionDraftDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
type SubscriptionDraftFreeShippingDiscountAddPayload struct {
	// The added subscription free shipping discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
type SubscriptionDraftFreeShippingDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to create a Subscription Draft.
type SubscriptionDraftInput struct {
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty"`
	// The ID of the payment method to be used for the subscription contract.
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty"`
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicyInput `json:"billingPolicy,omitempty"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicyInput `json:"deliveryPolicy,omitempty"`
	// The shipping price for each renewal the subscription contract.
	DeliveryPrice *null.String `json:"deliveryPrice,omitempty"`
	// The delivery method for the subscription contract.
	DeliveryMethod *SubscriptionDeliveryMethodInput `json:"deliveryMethod,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty"`
	// A list of the custom attributes added to the subscription contract.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
}

// Return type for `subscriptionDraftLineAdd` mutation.
type SubscriptionDraftLineAddPayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The added Subscription Line.
	LineAdded *SubscriptionLine `json:"lineAdded,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineRemove` mutation.
type SubscriptionDraftLineRemovePayload struct {
	// The list of updated subscription discounts impacted by the removed line.
	DiscountsUpdated []SubscriptionManualDiscount `json:"discountsUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The removed Subscription Line.
	LineRemoved *SubscriptionLine `json:"lineRemoved,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineUpdate` mutation.
type SubscriptionDraftLineUpdatePayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The updated Subscription Line.
	LineUpdated *SubscriptionLine `json:"lineUpdated,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftUpdate` mutation.
type SubscriptionDraftUpdatePayload struct {
	// The Subscription Draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Draft error.
type SubscriptionDraftUserError struct {
	// The error code.
	Code *SubscriptionDraftErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SubscriptionDraftUserError) IsDisplayableError() {}

// Specifies the input fields of a subscription free shipping discount on a contract.
type SubscriptionFreeShippingDiscountInput struct {
	// The title associated with the subscription free shipping discount.
	Title *string `json:"title,omitempty"`
	// The maximum number of times the subscription free shipping discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
}

// Represents a Subscription Line.
type SubscriptionLine struct {
	// The price per unit for the subscription line in the contract's currency.
	CurrentPrice *MoneyV2 `json:"currentPrice,omitempty"`
	// List of custom attributes associated to the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Discount allocations.
	DiscountAllocations []SubscriptionDiscountAllocation `json:"discountAllocations,omitempty"`
	// The unique identifier.
	ID string `json:"id"`
	// Total line price including all discounts.
	LineDiscountedPrice *MoneyV2 `json:"lineDiscountedPrice,omitempty"`
	// Describe the price changes of the line over time.
	PricingPolicy *SubscriptionPricingPolicy `json:"pricingPolicy,omitempty"`
	// The product id associated with the subscription line.
	ProductID *string `json:"productId,omitempty"`
	// The quantity of the unit selected for the subscription line.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The selling plan ID associated to the line.
	//
	// Indicates which selling plan was used to create this
	// contract line initially. The selling plan ID is also used to
	// find the associated delivery profile.
	//
	// The subscription contract, subscription line, or selling plan might have
	// changed. As a result, the selling plan's attributes might not
	// match the information on the contract.
	//
	SellingPlanID *string `json:"sellingPlanId,omitempty"`
	// The selling plan name associated to the line. This name describes
	// the order line items created from this subscription line
	// for both merchants and customers.
	//
	// The value can be different from the selling plan's name, because both
	// the selling plan's name and the subscription line's selling_plan_name
	// attribute can be updated independently.
	//
	SellingPlanName *string `json:"sellingPlanName,omitempty"`
	// Variant SKU number of the item associated with the subscription line.
	Sku *string `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// Product title of the item associated with the subscription line.
	Title string `json:"title"`
	// The product variant id associated with the subscription line.
	VariantID *string `json:"variantId,omitempty"`
	// The image associated with the line item's variant or product.
	VariantImage *Image `json:"variantImage,omitempty"`
	// Product variant title of the item associated with the subscription line.
	VariantTitle *string `json:"variantTitle,omitempty"`
}

// An auto-generated type for paginating through multiple SubscriptionLines.
type SubscriptionLineConnection struct {
	// A list of edges.
	Edges []SubscriptionLineEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
type SubscriptionLineEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionLineEdge.
	Node *SubscriptionLine `json:"node,omitempty"`
}

// Specifies the input fields required to add a new subscription line to a contract.
type SubscriptionLineInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID string `json:"productVariantId"`
	// The quantity of the product.
	Quantity int `json:"quantity"`
	// The price of the product.
	CurrentPrice null.String `json:"currentPrice"`
	// The custom attributes for this subscription line.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *string `json:"sellingPlanId,omitempty"`
	// The selling plan name for the subscription line.
	//
	// Defaults to using the selling plan's current name when not specified.
	//
	SellingPlanName *string `json:"sellingPlanName,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty"`
}

// Specifies the input fields required to update a subscription line on a contract.
type SubscriptionLineUpdateInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID *string `json:"productVariantId,omitempty"`
	// The quantity of the product.
	Quantity *int `json:"quantity,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *string `json:"sellingPlanId,omitempty"`
	// The selling plan name for the subscription line.
	SellingPlanName *string `json:"sellingPlanName,omitempty"`
	// The price of the product.
	CurrentPrice *null.String `json:"currentPrice,omitempty"`
	// The custom attributes for this subscription line.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty"`
}

// Represents a Mailing Address on a Subscription.
type SubscriptionMailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty"`
	// The name of the customer's company or organization.
	Company *string `json:"company,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	Name *string `json:"name,omitempty"`
	// A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
	Phone *string `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty"`
}

// Custom subscription discount.
type SubscriptionManualDiscount struct {
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionDiscountEntitledLines `json:"entitledLines,omitempty"`
	// The unique identifier.
	ID string `json:"id"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty"`
	// Type of line the discount applies on.
	TargetType DiscountTargetType `json:"targetType"`
	// The title associated with the subscription discount.
	Title *string `json:"title,omitempty"`
	// The type of the subscription discount.
	Type DiscountType `json:"type"`
	// The number of times the discount was applied.
	UsageCount int `json:"usageCount"`
	// The value of the subscription discount.
	Value SubscriptionDiscountValue `json:"value"`
}

func (SubscriptionManualDiscount) IsSubscriptionDiscount() {}

// An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
type SubscriptionManualDiscountConnection struct {
	// A list of edges.
	Edges []SubscriptionManualDiscountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
type SubscriptionManualDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionManualDiscountEdge.
	Node *SubscriptionManualDiscount `json:"node,omitempty"`
}

// Represents the subscription lines the discount applies on.
type SubscriptionManualDiscountEntitledLinesInput struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All *bool `json:"all,omitempty"`
	// The ID of the lines to add to or remove from the subscription discount.
	Lines *SubscriptionManualDiscountLinesInput `json:"lines,omitempty"`
}

// Specifies the fixed amount value of the discount and distribution on the lines.
type SubscriptionManualDiscountFixedAmountInput struct {
	// Fixed amount value.
	Amount *float64 `json:"amount,omitempty"`
	// Whether the amount is intended per line item or once per subscription.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty"`
}

// Specifies the input fields of a subscription discount on a contract.
type SubscriptionManualDiscountInput struct {
	// The title associated with the subscription discount.
	Title *string `json:"title,omitempty"`
	// Percentage or fixed amount value of the discount.
	Value *SubscriptionManualDiscountValueInput `json:"value,omitempty"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionManualDiscountEntitledLinesInput `json:"entitledLines,omitempty"`
}

// Line items that a the discount refers to.
type SubscriptionManualDiscountLinesInput struct {
	// The ID of the lines to add to the subscription discount.
	Add []string `json:"add,omitempty"`
	// The ID of the lines to remove from the subscription discount.
	Remove []string `json:"remove,omitempty"`
}

// Specifies the discount value and its distribution.
type SubscriptionManualDiscountValueInput struct {
	// The percentage value of the discount. Value must be between 0 - 100.
	Percentage *int `json:"percentage,omitempty"`
	// Fixed amount input in the currency defined by the subscription.
	FixedAmount *SubscriptionManualDiscountFixedAmountInput `json:"fixedAmount,omitempty"`
}

// Represents a Subscription Line Pricing Policy.
type SubscriptionPricingPolicy struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice *MoneyV2 `json:"basePrice,omitempty"`
	// The adjustments per cycle for the subscription line.
	CycleDiscounts []SubscriptionCyclePriceAdjustment `json:"cycleDiscounts,omitempty"`
}

// An array containing all pricing changes for each billing cycle.
type SubscriptionPricingPolicyCycleDiscountsInput struct {
	// The cycle after which the pricing policy applies.
	AfterCycle int `json:"afterCycle"`
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
	// The computed price after the adjustments are applied.
	ComputedPrice null.String `json:"computedPrice"`
}

// Describes expected price changes of the subscription line over time.
type SubscriptionPricingPolicyInput struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice null.String `json:"basePrice"`
	// An array containing all pricing changes for each billing cycle.
	CycleDiscounts []SubscriptionPricingPolicyCycleDiscountsInput `json:"cycleDiscounts,omitempty"`
}

// A shipping option to deliver a subscription contract.
type SubscriptionShippingOption struct {
	// The carrier service that is providing this shipping option.
	// This field isn't currently supported and returns null.
	//
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The code of the shipping option.
	Code string `json:"code"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty"`
	// If a phone number is required for the shipping option.
	PhoneRequired *bool `json:"phoneRequired,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty"`
	// The price of the shipping option.
	Price *MoneyV2 `json:"price,omitempty"`
	// The title of the shipping option.
	Title string `json:"title"`
}

// Failure determining available shipping options for delivery of a subscription contract.
type SubscriptionShippingOptionResultFailure struct {
	// Failure reason.
	Message *string `json:"message,omitempty"`
}

func (SubscriptionShippingOptionResultFailure) IsSubscriptionShippingOptionResult() {}

// A shipping option for delivery of a subscription contract.
type SubscriptionShippingOptionResultSuccess struct {
	// Available shipping options.
	ShippingOptions []SubscriptionShippingOption `json:"shippingOptions,omitempty"`
}

func (SubscriptionShippingOptionResultSuccess) IsSubscriptionShippingOptionResult() {}

// A suggested transaction. Suggested transaction are usually used in the context of refunds
// and exchanges.
type SuggestedOrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The amount of the transaction.
	Amount null.String `json:"amount"`
	// The amount and currency of the suggested order transaction in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The human-readable payment gateway name suggested to process the transaction.
	FormattedGateway *string `json:"formattedGateway,omitempty"`
	// The suggested payment gateway used to process the transaction.
	Gateway *string `json:"gateway,omitempty"`
	// Specifies the kind of the suggested order transaction.
	Kind SuggestedOrderTransactionKind `json:"kind"`
	// Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty"`
	// Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty"`
	// The types of refunds that the transaction supports. For example, if it's a CARD_PRESENT_REFUND type, then the transaction requires chip data from reading a physical card using a card reader to be refunded. Only available within SuggestedRefund.
	SupportedRefundType TransactionSupportedRefundType `json:"supportedRefundType"`
}

// Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
type SuggestedRefund struct {
	// The total monetary value to be refunded.
	Amount null.String `json:"amount"`
	// The total monetary value to be refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The sum of all the discounted prices of the line items being refunded.
	DiscountedSubtotalSet *MoneyBag `json:"discountedSubtotalSet,omitempty"`
	// The total monetary value available to refund.
	MaximumRefundable null.String `json:"maximumRefundable"`
	// The total monetary value available to refund in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// An array of additional fees that will be refunded to the customer.
	RefundAdditionalFees []RefundAdditionalFee `json:"refundAdditionalFees,omitempty"`
	// A list of duties to be refunded from the order.
	RefundDuties []RefundDuty `json:"refundDuties,omitempty"`
	// A list of line items to be refunded, along with restock instructions.
	RefundLineItems []RefundLineItem `json:"refundLineItems,omitempty"`
	// The shipping costs to be refunded from the order.
	Shipping *ShippingRefund `json:"shipping,omitempty"`
	// The sum of all the prices of the line items being refunded.
	Subtotal null.String `json:"subtotal"`
	// The sum of all the prices of the line items being refunded in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// A list of suggested order transactions.
	SuggestedTransactions []SuggestedOrderTransaction `json:"suggestedTransactions,omitempty"`
	// The sum of all the additional fees being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalAdditionalFeesSet *MoneyBag `json:"totalAdditionalFeesSet,omitempty"`
	// The total cart discount amount that was applied to all line items in this refund.
	TotalCartDiscountAmountSet *MoneyBag `json:"totalCartDiscountAmountSet,omitempty"`
	// The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalDutiesSet *MoneyBag `json:"totalDutiesSet,omitempty"`
	// The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// The sum of the taxes being refunded from the order. The value must be positive.
	TotalTaxes null.String `json:"totalTaxes"`
}

// Return type for `tagsAdd` mutation.
type TagsAddPayload struct {
	// The object that was updated.
	Node Node `json:"node"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `tagsRemove` mutation.
type TagsRemovePayload struct {
	// The object that was updated.
	Node Node `json:"node"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a single tax applied to the associated line item.
type TaxLine struct {
	// Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
	ChannelLiable *bool `json:"channelLiable,omitempty"`
	// The amount of tax, in shop currency, after discounts and before returns.
	Price null.String `json:"price"`
	// The amount of tax, in shop and presentment currencies, after discounts and before returns.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// The proportion of the line item price that the tax represents as a decimal.
	Rate *float64 `json:"rate,omitempty"`
	// The proportion of the line item price that the tax represents as a percentage.
	RatePercentage *float64 `json:"ratePercentage,omitempty"`
	// The name of the tax.
	Title string `json:"title"`
}

// A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
// represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
// for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
type TenderTransaction struct {
	// The amount and currency of the tender transaction.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The order that is related to the tender transaction. This value is null if the order has been deleted.
	Order *Order `json:"order,omitempty"`
	// Information about the payment method used for the transaction.
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *string `json:"processedAt,omitempty"`
	// The remote gateway reference associated with the tender transaction.
	RemoteReference *string `json:"remoteReference,omitempty"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test"`
	// Information about the payment instrument used for the transaction.
	TransactionDetails TenderTransactionDetails `json:"transactionDetails"`
	// The staff member who performed the transaction.
	User *StaffMember `json:"user,omitempty"`
}

func (TenderTransaction) IsNode() {}

// An auto-generated type for paginating through multiple TenderTransactions.
type TenderTransactionConnection struct {
	// A list of edges.
	Edges []TenderTransactionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Information about the credit card used for this transaction.
type TenderTransactionCreditCardDetails struct {
	// The name of the company that issued the customer's credit card. Example: `Visa`.
	CreditCardCompany *string `json:"creditCardCompany,omitempty"`
	// The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
	//
	CreditCardNumber *string `json:"creditCardNumber,omitempty"`
}

func (TenderTransactionCreditCardDetails) IsTenderTransactionDetails() {}

// An auto-generated type which holds one TenderTransaction and a cursor during pagination.
type TenderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of TenderTransactionEdge.
	Node *TenderTransaction `json:"node,omitempty"`
}

// A sale associated with a tip.
type TipSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique identifier for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (TipSale) IsSale() {}

// Specifies the fields for tracking information.
type TrackingInfoInput struct {
	// The tracking number of the fulfillment.
	Number *string `json:"number,omitempty"`
	// The URL to track the fulfillment.
	URL *string `json:"url,omitempty"`
}

// The input fields that specify all the possible fields for updating tracking information.
type TrackingInfoUpdateInput struct {
	// Tracking information consisting of one or more tracking URLs and numbers associated with the fulfillment.
	//
	TrackingDetails []TrackingInfoInput `json:"trackingDetails,omitempty"`
	// The name of the tracking company.
	TrackingCompany *string `json:"trackingCompany,omitempty"`
	// Whether the customer will be notified of this update and future updates for the fulfillment.
	// If the field is left blank, then notifications won't be sent to the customer when the fulfillment is updated.
	//
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
}

// Transaction fee related to an order transaction.
type TransactionFee struct {
	// Amount of the fee.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Flat rate charge for a transaction.
	FlatFee *MoneyV2 `json:"flatFee,omitempty"`
	// Name of the credit card flat fee.
	FlatFeeName *string `json:"flatFeeName,omitempty"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// Percentage charge.
	Rate null.String `json:"rate"`
	// Name of the credit card rate.
	RateName *string `json:"rateName,omitempty"`
	// Tax amount charged on the fee.
	TaxAmount *MoneyV2 `json:"taxAmount,omitempty"`
	// Name of the type of fee.
	Type string `json:"type"`
}

func (TransactionFee) IsNode() {}

// Translatable content of a resource's field.
type TranslatableContent struct {
	// Hash digest representation of the content value.
	Digest *string `json:"digest,omitempty"`
	// The resource field that is being translated.
	Key string `json:"key"`
	// Locale of the content.
	Locale string `json:"locale"`
	// Content value.
	Value *string `json:"value,omitempty"`
}

// A resource that has translatable fields.
type TranslatableResource struct {
	// GID of the resource.
	ResourceID string `json:"resourceId"`
	// Translatable content.
	TranslatableContent []TranslatableContent `json:"translatableContent,omitempty"`
	// Translatable content translations.
	Translations []Translation `json:"translations,omitempty"`
}

// An auto-generated type for paginating through multiple TranslatableResources.
type TranslatableResourceConnection struct {
	// A list of edges.
	Edges []TranslatableResourceEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one TranslatableResource and a cursor during pagination.
type TranslatableResourceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of TranslatableResourceEdge.
	Node *TranslatableResource `json:"node,omitempty"`
}

// Translation of a field of a resource.
type Translation struct {
	// On the resource that this translation belongs to, the reference to the value being translated.
	Key string `json:"key"`
	// ISO code of the translation locale.
	Locale string `json:"locale"`
	// Whether the original content has changed since this translation was updated.
	Outdated bool `json:"outdated"`
	// Translation value.
	Value *string `json:"value,omitempty"`
}

// Provides the fields and values to use when creating or updating a translation.
type TranslationInput struct {
	// ISO code of the locale being translated into.
	Locale string `json:"locale"`
	// On the resource that this translation belongs to,         the reference to the value being translated.
	Key string `json:"key"`
	// The value of the translation.
	Value string `json:"value"`
	// Hash digest representation         of the content being translated.
	TranslatableContentDigest string `json:"translatableContentDigest"`
}

// Represents an error that happens during the execution of a translation mutation.
type TranslationUserError struct {
	// The error code.
	Code *TranslationErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (TranslationUserError) IsDisplayableError() {}

// Return type for `translationsRegister` mutation.
type TranslationsRegisterPayload struct {
	// The translations that were created or updated.
	Translations []Translation `json:"translations,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// Return type for `translationsRemove` mutation.
type TranslationsRemovePayload struct {
	// The translations that were deleted.
	Translations []Translation `json:"translations,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// Specifies the
// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
// that are associated with a related marketing campaign.
type UTMInput struct {
	// The name of the UTM campaign.
	Campaign string `json:"campaign"`
	// The name of the website or application where the referral link exists.
	Source string `json:"source"`
	// The UTM campaign medium.
	Medium string `json:"medium"`
}

// Represents a set of UTM parameters.
type UTMParameters struct {
	// The name of a marketing campaign.
	Campaign *string `json:"campaign,omitempty"`
	// Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
	Content *string `json:"content,omitempty"`
	// The medium of a marketing campaign, such as a banner or email newsletter.
	Medium *string `json:"medium,omitempty"`
	// The source of traffic to the merchant's store, such as Google or an email newsletter.
	Source *string `json:"source,omitempty"`
	// Paid search terms used by a marketing campaign.
	Term *string `json:"term,omitempty"`
}

// Specifies the input fields required to update a media object.
type UpdateMediaInput struct {
	// Specifies the media to update.
	ID string `json:"id"`
	// The source from which to update the media preview image. May be an external URL or signed upload URL.
	PreviewImageSource *string `json:"previewImageSource,omitempty"`
	// The alt text associated to the media.
	Alt *string `json:"alt,omitempty"`
}

// The URL redirect for the online store.
type URLRedirect struct {
	// The ID of the URL redirect.
	ID string `json:"id"`
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path string `json:"path"`
	// The target location where the user will be redirected to.
	Target string `json:"target"`
}

func (URLRedirect) IsNode() {}

// Return type for `urlRedirectBulkDeleteAll` mutation.
type URLRedirectBulkDeleteAllPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `urlRedirectBulkDeleteByIds` mutation.
type URLRedirectBulkDeleteByIdsPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteByIdsUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
type URLRedirectBulkDeleteByIdsUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteByIdsUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteByIdsUserError) IsDisplayableError() {}

// Return type for `urlRedirectBulkDeleteBySavedSearch` mutation.
type URLRedirectBulkDeleteBySavedSearchPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteBySavedSearchUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
type URLRedirectBulkDeleteBySavedSearchUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteBySavedSearchUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteBySavedSearchUserError) IsDisplayableError() {}

// Return type for `urlRedirectBulkDeleteBySearch` mutation.
type URLRedirectBulkDeleteBySearchPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteBySearchUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
type URLRedirectBulkDeleteBySearchUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteBySearchUserErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteBySearchUserError) IsDisplayableError() {}

// An auto-generated type for paginating through multiple UrlRedirects.
type URLRedirectConnection struct {
	// A list of edges.
	Edges []URLRedirectEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `urlRedirectCreate` mutation.
type URLRedirectCreatePayload struct {
	// The created redirect.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// Return type for `urlRedirectDelete` mutation.
type URLRedirectDeletePayload struct {
	// The ID of the deleted redirect.
	DeletedURLRedirectID *string `json:"deletedUrlRedirectId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one UrlRedirect and a cursor during pagination.
type URLRedirectEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of UrlRedirectEdge.
	Node *URLRedirect `json:"node,omitempty"`
}

// A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
// into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
//
// For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
type URLRedirectImport struct {
	// The number of rows in the file.
	Count *int `json:"count,omitempty"`
	// The number of redirects created from the import.
	CreatedCount *int `json:"createdCount,omitempty"`
	// The number of redirects that failed to be imported.
	FailedCount *int `json:"failedCount,omitempty"`
	// Whether the import is finished.
	Finished bool `json:"finished"`
	// The date and time when the import finished.
	FinishedAt *string `json:"finishedAt,omitempty"`
	// The ID of the `UrlRedirectImport` object.
	ID string `json:"id"`
	// A list of up to three previews of the URL redirects to be imported.
	PreviewRedirects []URLRedirectImportPreview `json:"previewRedirects,omitempty"`
	// The number of redirects updated during the import.
	UpdatedCount *int `json:"updatedCount,omitempty"`
}

func (URLRedirectImport) IsNode() {}

// Return type for `urlRedirectImportCreate` mutation.
type URLRedirectImportCreatePayload struct {
	// The created `URLRedirectImport` object.
	URLRedirectImport *URLRedirectImport `json:"urlRedirectImport,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectImportUserError `json:"userErrors,omitempty"`
}

// A preview of a URL redirect import row.
type URLRedirectImportPreview struct {
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path string `json:"path"`
	// The target location where the user will be redirected to.
	Target string `json:"target"`
}

// Return type for `urlRedirectImportSubmit` mutation.
type URLRedirectImportSubmitPayload struct {
	// The asynchronous job importing the redirects.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectImportUserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a redirect import mutation.
type URLRedirectImportUserError struct {
	// The error code.
	Code *URLRedirectImportErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectImportUserError) IsDisplayableError() {}

// The input fields to create or update a URL redirect.
type URLRedirectInput struct {
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path *string `json:"path,omitempty"`
	// The target location where the user will be redirected to.
	Target *string `json:"target,omitempty"`
}

// Return type for `urlRedirectUpdate` mutation.
type URLRedirectUpdatePayload struct {
	// Returns the updated URL redirect.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a redirect mutation.
type URLRedirectUserError struct {
	// The error code.
	Code *URLRedirectErrorCode `json:"code,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectUserError) IsDisplayableError() {}

// Represents an error in the input of a mutation.
type UserError struct {
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (UserError) IsDisplayableError() {}

// Representation of 3d vectors and points. It can represent
// either the coordinates of a point in space, a direction, or
// size. Presented as an object with three floating-point values.
type Vector3 struct {
	// The x coordinate of Vector3.
	X float64 `json:"x"`
	// The y coordinate of Vector3.
	Y float64 `json:"y"`
	// The z coordinate of Vector3.
	Z float64 `json:"z"`
}

// Represents a Shopify hosted video.
type Video struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty"`
	// The filename of the video.
	Filename string `json:"filename"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The original source for a video. Value is `null` when `status` is PROCESSING.
	OriginalSource *VideoSource `json:"originalSource,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// The sources for a video. Sources are only available when `status` is READY.
	Sources []VideoSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (Video) IsMedia() {}
func (Video) IsNode()  {}

// Represents a source for a Shopify hosted video.
type VideoSource struct {
	// The format of the video source.
	Format string `json:"format"`
	// The height of the video.
	Height int `json:"height"`
	// The video MIME type.
	MimeType string `json:"mimeType"`
	// The URL of the video.
	URL string `json:"url"`
	// The width of the video.
	Width int `json:"width"`
}

// An Amazon EventBridge partner event source to which webhook subscriptions publish events.
type WebhookEventBridgeEndpoint struct {
	// The ARN of this EventBridge partner event source.
	Arn string `json:"arn"`
}

func (WebhookEventBridgeEndpoint) IsWebhookSubscriptionEndpoint() {}

// An HTTPS endpoint to which webhook subscriptions send POST requests.
type WebhookHTTPEndpoint struct {
	// The URL to which the webhooks events are sent.
	CallbackURL string `json:"callbackUrl"`
}

func (WebhookHTTPEndpoint) IsWebhookSubscriptionEndpoint() {}

// A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
type WebhookPubSubEndpoint struct {
	// The Google Cloud Pub/Sub project ID.
	PubSubProject string `json:"pubSubProject"`
	// The Google Cloud Pub/Sub topic ID.
	PubSubTopic string `json:"pubSubTopic"`
}

func (WebhookPubSubEndpoint) IsWebhookSubscriptionEndpoint() {}

// A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
// It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
// When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
// Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
type WebhookSubscription struct {
	// The destination URI to which the webhook subscription will send a message when an event occurs.
	CallbackURL string `json:"callbackUrl"`
	// The date and time when the webhook subscription was created.
	CreatedAt string `json:"createdAt"`
	// The endpoint to which the webhook subscription will send events.
	Endpoint WebhookSubscriptionEndpoint `json:"endpoint"`
	// The format in which the webhook subscription should send the data.
	Format WebhookSubscriptionFormat `json:"format"`
	// A globally-unique identifier.
	ID string `json:"id"`
	// An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
	IncludeFields []string `json:"includeFields,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty"`
	// The list of namespaces for private metafields that should be included in the webhook subscription.
	PrivateMetafieldNamespaces []string `json:"privateMetafieldNamespaces,omitempty"`
	// The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
	Topic WebhookSubscriptionTopic `json:"topic"`
	// The date and time when the webhook subscription was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (WebhookSubscription) IsLegacyInteroperability() {}
func (WebhookSubscription) IsNode()                   {}

// An auto-generated type for paginating through multiple WebhookSubscriptions.
type WebhookSubscriptionConnection struct {
	// A list of edges.
	Edges []WebhookSubscriptionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `webhookSubscriptionCreate` mutation.
type WebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// Return type for `webhookSubscriptionDelete` mutation.
type WebhookSubscriptionDeletePayload struct {
	// The ID of the deleted webhook subscription.
	DeletedWebhookSubscriptionID *string `json:"deletedWebhookSubscriptionId,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
type WebhookSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of WebhookSubscriptionEdge.
	Node *WebhookSubscription `json:"node,omitempty"`
}

// Specifies the input fields for a webhook subscription.
type WebhookSubscriptionInput struct {
	// URL where the webhook subscription should send the POST request when the event occurs.
	CallbackURL *string `json:"callbackUrl,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty"`
	// The list of namespaces for private metafields that should be included inthe webhook subscription.
	PrivateMetafieldNamespaces []string `json:"privateMetafieldNamespaces,omitempty"`
}

// Return type for `webhookSubscriptionUpdate` mutation.
type WebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// A weight, which includes a numeric value and a unit of measurement.
type Weight struct {
	// The unit of measurement for `value`.
	Unit WeightUnit `json:"unit"`
	// The weight value using the unit system specified with `unit`.
	Value float64 `json:"value"`
}

func (Weight) IsDeliveryConditionCriteria() {}

// Specifies the weight unit and value inputs.
type WeightInput struct {
	// The weight value using the unit system specified with `weight_unit`.
	Value float64 `json:"value"`
	// Unit of measurement for `value`.
	Unit WeightUnit `json:"unit"`
}

// Return type for `deliveryProfileCreate` mutation.
type DeliveryProfileCreatePayload struct {
	// The delivery profile that was created.
	Profile *DeliveryProfile `json:"profile,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileRemove` mutation.
type DeliveryProfileRemovePayload struct {
	// The delivery profile deletion job triggered by the mutation.
	Job *Job `json:"job,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileUpdate` mutation.
type DeliveryProfileUpdatePayload struct {
	// The delivery profile that was updated.
	Profile *DeliveryProfile `json:"profile,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Possible types of app developer.
type AppDeveloperType string

const (
	// Indicates the app developer is Shopify.
	AppDeveloperTypeShopify AppDeveloperType = "SHOPIFY"
	// Indicates the app developer is a Partner.
	AppDeveloperTypePartner AppDeveloperType = "PARTNER"
	// Indicates the app developer works directly for a Merchant.
	AppDeveloperTypeMerchant AppDeveloperType = "MERCHANT"
	// Indicates the app developer is unknown. It is not categorized as any of the other developer types.
	AppDeveloperTypeUnknown AppDeveloperType = "UNKNOWN"
)

var AllAppDeveloperType = []AppDeveloperType{
	AppDeveloperTypeShopify,
	AppDeveloperTypePartner,
	AppDeveloperTypeMerchant,
	AppDeveloperTypeUnknown,
}

func (e AppDeveloperType) IsValid() bool {
	switch e {
	case AppDeveloperTypeShopify, AppDeveloperTypePartner, AppDeveloperTypeMerchant, AppDeveloperTypeUnknown:
		return true
	}
	return false
}

func (e AppDeveloperType) String() string {
	return string(e)
}

func (e *AppDeveloperType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppDeveloperType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppDeveloperType", str)
	}
	return nil
}

func (e AppDeveloperType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible categories of an app installation, based on their purpose
// or the environment they can run in.
type AppInstallationCategory string

const (
	// Apps that serve as channels through which sales are made, such as the online store.
	AppInstallationCategoryChannel AppInstallationCategory = "CHANNEL"
	// Apps that can be used in the POS mobile client.
	AppInstallationCategoryPosEmbedded AppInstallationCategory = "POS_EMBEDDED"
)

var AllAppInstallationCategory = []AppInstallationCategory{
	AppInstallationCategoryChannel,
	AppInstallationCategoryPosEmbedded,
}

func (e AppInstallationCategory) IsValid() bool {
	switch e {
	case AppInstallationCategoryChannel, AppInstallationCategoryPosEmbedded:
		return true
	}
	return false
}

func (e AppInstallationCategory) String() string {
	return string(e)
}

func (e *AppInstallationCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationCategory", str)
	}
	return nil
}

func (e AppInstallationCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The levels of privacy of an app installation.
type AppInstallationPrivacy string

const (
	AppInstallationPrivacyPublic  AppInstallationPrivacy = "PUBLIC"
	AppInstallationPrivacyPrivate AppInstallationPrivacy = "PRIVATE"
)

var AllAppInstallationPrivacy = []AppInstallationPrivacy{
	AppInstallationPrivacyPublic,
	AppInstallationPrivacyPrivate,
}

func (e AppInstallationPrivacy) IsValid() bool {
	switch e {
	case AppInstallationPrivacyPublic, AppInstallationPrivacyPrivate:
		return true
	}
	return false
}

func (e AppInstallationPrivacy) String() string {
	return string(e)
}

func (e *AppInstallationPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationPrivacy", str)
	}
	return nil
}

func (e AppInstallationPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppInstallation query.
type AppInstallationSortKeys string

const (
	// Sort by the `installed_at` value.
	AppInstallationSortKeysInstalledAt AppInstallationSortKeys = "INSTALLED_AT"
	// Sort by the `app_title` value.
	AppInstallationSortKeysAppTitle AppInstallationSortKeys = "APP_TITLE"
	// Sort by the `id` value.
	AppInstallationSortKeysID AppInstallationSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AppInstallationSortKeysRelevance AppInstallationSortKeys = "RELEVANCE"
)

var AllAppInstallationSortKeys = []AppInstallationSortKeys{
	AppInstallationSortKeysInstalledAt,
	AppInstallationSortKeysAppTitle,
	AppInstallationSortKeysID,
	AppInstallationSortKeysRelevance,
}

func (e AppInstallationSortKeys) IsValid() bool {
	switch e {
	case AppInstallationSortKeysInstalledAt, AppInstallationSortKeysAppTitle, AppInstallationSortKeysID, AppInstallationSortKeysRelevance:
		return true
	}
	return false
}

func (e AppInstallationSortKeys) String() string {
	return string(e)
}

func (e *AppInstallationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationSortKeys", str)
	}
	return nil
}

func (e AppInstallationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The frequency at which the shop is billed for an app subscription.
type AppPricingInterval string

const (
	// The app subscription bills the shop annually.
	AppPricingIntervalAnnual AppPricingInterval = "ANNUAL"
	// The app subscription bills the shop every 30 days.
	AppPricingIntervalEvery30Days AppPricingInterval = "EVERY_30_DAYS"
)

var AllAppPricingInterval = []AppPricingInterval{
	AppPricingIntervalAnnual,
	AppPricingIntervalEvery30Days,
}

func (e AppPricingInterval) IsValid() bool {
	switch e {
	case AppPricingIntervalAnnual, AppPricingIntervalEvery30Days:
		return true
	}
	return false
}

func (e AppPricingInterval) String() string {
	return string(e)
}

func (e *AppPricingInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPricingInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPricingInterval", str)
	}
	return nil
}

func (e AppPricingInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The public-facing category for an app.
type AppPublicCategory string

const (
	// App's public category is [Private](https://shopify.dev/apps/getting-started/app-types).
	AppPublicCategoryPrivate AppPublicCategory = "PRIVATE"
	// App's public category is [Public](https://shopify.dev/apps/getting-started/app-types).
	AppPublicCategoryPublic AppPublicCategory = "PUBLIC"
	// App's public category is [Custom](https://shopify.dev/apps/getting-started/app-types).
	AppPublicCategoryCustom AppPublicCategory = "CUSTOM"
	// App's public category is Other. An app is in this category if it is not classified under any of the [other app types](https://shopify.dev/apps/getting-started/app-types).
	AppPublicCategoryOther AppPublicCategory = "OTHER"
)

var AllAppPublicCategory = []AppPublicCategory{
	AppPublicCategoryPrivate,
	AppPublicCategoryPublic,
	AppPublicCategoryCustom,
	AppPublicCategoryOther,
}

func (e AppPublicCategory) IsValid() bool {
	switch e {
	case AppPublicCategoryPrivate, AppPublicCategoryPublic, AppPublicCategoryCustom, AppPublicCategoryOther:
		return true
	}
	return false
}

func (e AppPublicCategory) String() string {
	return string(e)
}

func (e *AppPublicCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPublicCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPublicCategory", str)
	}
	return nil
}

func (e AppPublicCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The approval status of the app purchase.
//
// The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
// If the payment fails, then the app purchase remains `pending`.
//
// Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
// remains in that final state.
type AppPurchaseStatus string

const (
	// The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
	AppPurchaseStatusAccepted AppPurchaseStatus = "ACCEPTED"
	// The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner.
	AppPurchaseStatusActive AppPurchaseStatus = "ACTIVE"
	// The app purchase was declined by the merchant.
	AppPurchaseStatusDeclined AppPurchaseStatus = "DECLINED"
	// The app purchase was not accepted within two days of being created.
	AppPurchaseStatusExpired AppPurchaseStatus = "EXPIRED"
	// The app purchase is pending approval by the merchant.
	AppPurchaseStatusPending AppPurchaseStatus = "PENDING"
)

var AllAppPurchaseStatus = []AppPurchaseStatus{
	AppPurchaseStatusAccepted,
	AppPurchaseStatusActive,
	AppPurchaseStatusDeclined,
	AppPurchaseStatusExpired,
	AppPurchaseStatusPending,
}

func (e AppPurchaseStatus) IsValid() bool {
	switch e {
	case AppPurchaseStatusAccepted, AppPurchaseStatusActive, AppPurchaseStatusDeclined, AppPurchaseStatusExpired, AppPurchaseStatusPending:
		return true
	}
	return false
}

func (e AppPurchaseStatus) String() string {
	return string(e)
}

func (e *AppPurchaseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPurchaseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPurchaseStatus", str)
	}
	return nil
}

func (e AppPurchaseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AppRevenueAttributionRecordCreateUserError`.
type AppRevenueAttributionRecordCreateUserErrorCode string

const (
	// The input value is invalid.
	AppRevenueAttributionRecordCreateUserErrorCodeInvalid AppRevenueAttributionRecordCreateUserErrorCode = "INVALID"
	// The input value is already taken.
	AppRevenueAttributionRecordCreateUserErrorCodeTaken AppRevenueAttributionRecordCreateUserErrorCode = "TAKEN"
)

var AllAppRevenueAttributionRecordCreateUserErrorCode = []AppRevenueAttributionRecordCreateUserErrorCode{
	AppRevenueAttributionRecordCreateUserErrorCodeInvalid,
	AppRevenueAttributionRecordCreateUserErrorCodeTaken,
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordCreateUserErrorCodeInvalid, AppRevenueAttributionRecordCreateUserErrorCodeTaken:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordCreateUserErrorCode", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AppRevenueAttributionRecordDeleteUserError`.
type AppRevenueAttributionRecordDeleteUserErrorCode string

const (
	// The input value is invalid.
	AppRevenueAttributionRecordDeleteUserErrorCodeInvalid AppRevenueAttributionRecordDeleteUserErrorCode = "INVALID"
)

var AllAppRevenueAttributionRecordDeleteUserErrorCode = []AppRevenueAttributionRecordDeleteUserErrorCode{
	AppRevenueAttributionRecordDeleteUserErrorCodeInvalid,
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordDeleteUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordDeleteUserErrorCode", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppRevenueAttributionRecord query.
type AppRevenueAttributionRecordSortKeys string

const (
	// Sort by the `created_at` value.
	AppRevenueAttributionRecordSortKeysCreatedAt AppRevenueAttributionRecordSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppRevenueAttributionRecordSortKeysID AppRevenueAttributionRecordSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AppRevenueAttributionRecordSortKeysRelevance AppRevenueAttributionRecordSortKeys = "RELEVANCE"
)

var AllAppRevenueAttributionRecordSortKeys = []AppRevenueAttributionRecordSortKeys{
	AppRevenueAttributionRecordSortKeysCreatedAt,
	AppRevenueAttributionRecordSortKeysID,
	AppRevenueAttributionRecordSortKeysRelevance,
}

func (e AppRevenueAttributionRecordSortKeys) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordSortKeysCreatedAt, AppRevenueAttributionRecordSortKeysID, AppRevenueAttributionRecordSortKeysRelevance:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordSortKeys) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordSortKeys", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the billing types of revenue attribution.
type AppRevenueAttributionType string

const (
	// App purchase related revenue collection.
	AppRevenueAttributionTypeApplicationPurchase AppRevenueAttributionType = "APPLICATION_PURCHASE"
	// App subscription revenue collection.
	AppRevenueAttributionTypeApplicationSubscription AppRevenueAttributionType = "APPLICATION_SUBSCRIPTION"
	// App usage-based revenue collection.
	AppRevenueAttributionTypeApplicationUsage AppRevenueAttributionType = "APPLICATION_USAGE"
	// Other app revenue collection type.
	AppRevenueAttributionTypeOther AppRevenueAttributionType = "OTHER"
)

var AllAppRevenueAttributionType = []AppRevenueAttributionType{
	AppRevenueAttributionTypeApplicationPurchase,
	AppRevenueAttributionTypeApplicationSubscription,
	AppRevenueAttributionTypeApplicationUsage,
	AppRevenueAttributionTypeOther,
}

func (e AppRevenueAttributionType) IsValid() bool {
	switch e {
	case AppRevenueAttributionTypeApplicationPurchase, AppRevenueAttributionTypeApplicationSubscription, AppRevenueAttributionTypeApplicationUsage, AppRevenueAttributionTypeOther:
		return true
	}
	return false
}

func (e AppRevenueAttributionType) String() string {
	return string(e)
}

func (e *AppRevenueAttributionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionType", str)
	}
	return nil
}

func (e AppRevenueAttributionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppSubscription query.
type AppSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	AppSubscriptionSortKeysCreatedAt AppSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppSubscriptionSortKeysID AppSubscriptionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AppSubscriptionSortKeysRelevance AppSubscriptionSortKeys = "RELEVANCE"
)

var AllAppSubscriptionSortKeys = []AppSubscriptionSortKeys{
	AppSubscriptionSortKeysCreatedAt,
	AppSubscriptionSortKeysID,
	AppSubscriptionSortKeysRelevance,
}

func (e AppSubscriptionSortKeys) IsValid() bool {
	switch e {
	case AppSubscriptionSortKeysCreatedAt, AppSubscriptionSortKeysID, AppSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *AppSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionSortKeys", str)
	}
	return nil
}

func (e AppSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the app subscription.
type AppSubscriptionStatus string

const (
	// The app subscription is pending approval by the merchant.
	AppSubscriptionStatusPending AppSubscriptionStatus = "PENDING"
	// The app subscription has been approved by the merchant and is ready to be activated by the app.
	AppSubscriptionStatusAccepted AppSubscriptionStatus = "ACCEPTED"
	// The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts.
	AppSubscriptionStatusActive AppSubscriptionStatus = "ACTIVE"
	// The app subscription was declined by the merchant. This is a terminal state.
	AppSubscriptionStatusDeclined AppSubscriptionStatus = "DECLINED"
	// The app subscription wasn't accepted within two days of being created. This is a terminal state.
	AppSubscriptionStatusExpired AppSubscriptionStatus = "EXPIRED"
	// The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
	AppSubscriptionStatusFrozen AppSubscriptionStatus = "FROZEN"
	// The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state.
	AppSubscriptionStatusCancelled AppSubscriptionStatus = "CANCELLED"
)

var AllAppSubscriptionStatus = []AppSubscriptionStatus{
	AppSubscriptionStatusPending,
	AppSubscriptionStatusAccepted,
	AppSubscriptionStatusActive,
	AppSubscriptionStatusDeclined,
	AppSubscriptionStatusExpired,
	AppSubscriptionStatusFrozen,
	AppSubscriptionStatusCancelled,
}

func (e AppSubscriptionStatus) IsValid() bool {
	switch e {
	case AppSubscriptionStatusPending, AppSubscriptionStatusAccepted, AppSubscriptionStatusActive, AppSubscriptionStatusDeclined, AppSubscriptionStatusExpired, AppSubscriptionStatusFrozen, AppSubscriptionStatusCancelled:
		return true
	}
	return false
}

func (e AppSubscriptionStatus) String() string {
	return string(e)
}

func (e *AppSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionStatus", str)
	}
	return nil
}

func (e AppSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppTransaction query.
type AppTransactionSortKeys string

const (
	// Sort by the `created_at` value.
	AppTransactionSortKeysCreatedAt AppTransactionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppTransactionSortKeysID AppTransactionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AppTransactionSortKeysRelevance AppTransactionSortKeys = "RELEVANCE"
)

var AllAppTransactionSortKeys = []AppTransactionSortKeys{
	AppTransactionSortKeysCreatedAt,
	AppTransactionSortKeysID,
	AppTransactionSortKeysRelevance,
}

func (e AppTransactionSortKeys) IsValid() bool {
	switch e {
	case AppTransactionSortKeysCreatedAt, AppTransactionSortKeysID, AppTransactionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppTransactionSortKeys) String() string {
	return string(e)
}

func (e *AppTransactionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppTransactionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppTransactionSortKeys", str)
	}
	return nil
}

func (e AppTransactionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppUsageRecord query.
type AppUsageRecordSortKeys string

const (
	// Sort by the `created_at` value.
	AppUsageRecordSortKeysCreatedAt AppUsageRecordSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppUsageRecordSortKeysID AppUsageRecordSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AppUsageRecordSortKeysRelevance AppUsageRecordSortKeys = "RELEVANCE"
)

var AllAppUsageRecordSortKeys = []AppUsageRecordSortKeys{
	AppUsageRecordSortKeysCreatedAt,
	AppUsageRecordSortKeysID,
	AppUsageRecordSortKeysRelevance,
}

func (e AppUsageRecordSortKeys) IsValid() bool {
	switch e {
	case AppUsageRecordSortKeysCreatedAt, AppUsageRecordSortKeysID, AppUsageRecordSortKeysRelevance:
		return true
	}
	return false
}

func (e AppUsageRecordSortKeys) String() string {
	return string(e)
}

func (e *AppUsageRecordSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppUsageRecordSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppUsageRecordSortKeys", str)
	}
	return nil
}

func (e AppUsageRecordSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AutomaticDiscount query.
type AutomaticDiscountSortKeys string

const (
	// Sort by the `created_at` value.
	AutomaticDiscountSortKeysCreatedAt AutomaticDiscountSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AutomaticDiscountSortKeysID AutomaticDiscountSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	AutomaticDiscountSortKeysRelevance AutomaticDiscountSortKeys = "RELEVANCE"
)

var AllAutomaticDiscountSortKeys = []AutomaticDiscountSortKeys{
	AutomaticDiscountSortKeysCreatedAt,
	AutomaticDiscountSortKeysID,
	AutomaticDiscountSortKeysRelevance,
}

func (e AutomaticDiscountSortKeys) IsValid() bool {
	switch e {
	case AutomaticDiscountSortKeysCreatedAt, AutomaticDiscountSortKeysID, AutomaticDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e AutomaticDiscountSortKeys) String() string {
	return string(e)
}

func (e *AutomaticDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AutomaticDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AutomaticDiscountSortKeys", str)
	}
	return nil
}

func (e AutomaticDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types for a badge.
type BadgeType string

const (
	// This badge has type `default`.
	BadgeTypeDefault BadgeType = "DEFAULT"
	// This badge has type `success`.
	BadgeTypeSuccess BadgeType = "SUCCESS"
	// This badge has type `attention`.
	BadgeTypeAttention BadgeType = "ATTENTION"
	// This badge has type `warning`.
	BadgeTypeWarning BadgeType = "WARNING"
	// This badge has type `info`.
	BadgeTypeInfo BadgeType = "INFO"
)

var AllBadgeType = []BadgeType{
	BadgeTypeDefault,
	BadgeTypeSuccess,
	BadgeTypeAttention,
	BadgeTypeWarning,
	BadgeTypeInfo,
}

func (e BadgeType) IsValid() bool {
	switch e {
	case BadgeTypeDefault, BadgeTypeSuccess, BadgeTypeAttention, BadgeTypeWarning, BadgeTypeInfo:
		return true
	}
	return false
}

func (e BadgeType) String() string {
	return string(e)
}

func (e *BadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BadgeType", str)
	}
	return nil
}

func (e BadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BillingAttemptUserError`.
type BillingAttemptUserErrorCode string

const (
	// The input value is invalid.
	BillingAttemptUserErrorCodeInvalid BillingAttemptUserErrorCode = "INVALID"
	// The input value is blank.
	BillingAttemptUserErrorCodeBlank BillingAttemptUserErrorCode = "BLANK"
	// Subscription contract does not exist.
	BillingAttemptUserErrorCodeContractNotFound BillingAttemptUserErrorCode = "CONTRACT_NOT_FOUND"
)

var AllBillingAttemptUserErrorCode = []BillingAttemptUserErrorCode{
	BillingAttemptUserErrorCodeInvalid,
	BillingAttemptUserErrorCodeBlank,
	BillingAttemptUserErrorCodeContractNotFound,
}

func (e BillingAttemptUserErrorCode) IsValid() bool {
	switch e {
	case BillingAttemptUserErrorCodeInvalid, BillingAttemptUserErrorCodeBlank, BillingAttemptUserErrorCodeContractNotFound:
		return true
	}
	return false
}

func (e BillingAttemptUserErrorCode) String() string {
	return string(e)
}

func (e *BillingAttemptUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingAttemptUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingAttemptUserErrorCode", str)
	}
	return nil
}

func (e BillingAttemptUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BulkMutationUserError`.
type BulkMutationErrorCode string

const (
	// The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation.
	BulkMutationErrorCodeOperationInProgress BulkMutationErrorCode = "OPERATION_IN_PROGRESS"
	// The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
	BulkMutationErrorCodeInvalidMutation BulkMutationErrorCode = "INVALID_MUTATION"
	// The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
	BulkMutationErrorCodeInvalidStagedUploadFile BulkMutationErrorCode = "INVALID_STAGED_UPLOAD_FILE"
	// The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `bulkOperationRunMutationUploadPath` mutation argument.
	BulkMutationErrorCodeNoSuchFile BulkMutationErrorCode = "NO_SUCH_FILE"
	// There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again.
	BulkMutationErrorCodeInternalFileServerError BulkMutationErrorCode = "INTERNAL_FILE_SERVER_ERROR"
)

var AllBulkMutationErrorCode = []BulkMutationErrorCode{
	BulkMutationErrorCodeOperationInProgress,
	BulkMutationErrorCodeInvalidMutation,
	BulkMutationErrorCodeInvalidStagedUploadFile,
	BulkMutationErrorCodeNoSuchFile,
	BulkMutationErrorCodeInternalFileServerError,
}

func (e BulkMutationErrorCode) IsValid() bool {
	switch e {
	case BulkMutationErrorCodeOperationInProgress, BulkMutationErrorCodeInvalidMutation, BulkMutationErrorCodeInvalidStagedUploadFile, BulkMutationErrorCodeNoSuchFile, BulkMutationErrorCodeInternalFileServerError:
		return true
	}
	return false
}

func (e BulkMutationErrorCode) String() string {
	return string(e)
}

func (e *BulkMutationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkMutationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkMutationErrorCode", str)
	}
	return nil
}

func (e BulkMutationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error codes for failed bulk operations.
type BulkOperationErrorCode string

const (
	// The provided operation `query` returned access denied due to missing
	// [access scopes](https://shopify.dev/api/usage/access-scopes).
	// Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
	//
	BulkOperationErrorCodeAccessDenied BulkOperationErrorCode = "ACCESS_DENIED"
	// The operation resulted in partial or incomplete data due to internal server errors during execution.
	// These errors might be intermittent, so you can try performing the same query again.
	//
	BulkOperationErrorCodeInternalServerError BulkOperationErrorCode = "INTERNAL_SERVER_ERROR"
	// The operation resulted in partial or incomplete data due to query timeouts during execution.
	// In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
	//
	BulkOperationErrorCodeTimeout BulkOperationErrorCode = "TIMEOUT"
)

var AllBulkOperationErrorCode = []BulkOperationErrorCode{
	BulkOperationErrorCodeAccessDenied,
	BulkOperationErrorCodeInternalServerError,
	BulkOperationErrorCodeTimeout,
}

func (e BulkOperationErrorCode) IsValid() bool {
	switch e {
	case BulkOperationErrorCodeAccessDenied, BulkOperationErrorCodeInternalServerError, BulkOperationErrorCodeTimeout:
		return true
	}
	return false
}

func (e BulkOperationErrorCode) String() string {
	return string(e)
}

func (e *BulkOperationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationErrorCode", str)
	}
	return nil
}

func (e BulkOperationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the status of a bulk operation.
type BulkOperationStatus string

const (
	// The bulk operation has been canceled.
	BulkOperationStatusCanceled BulkOperationStatus = "CANCELED"
	// Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
	// starts until the operation is actually canceled.
	//
	BulkOperationStatusCanceling BulkOperationStatus = "CANCELING"
	// The bulk operation has successfully completed.
	BulkOperationStatusCompleted BulkOperationStatus = "COMPLETED"
	// The bulk operation has been created.
	BulkOperationStatusCreated BulkOperationStatus = "CREATED"
	// The bulk operation URL has expired.
	BulkOperationStatusExpired BulkOperationStatus = "EXPIRED"
	// The bulk operation has failed. For information on why the operation failed, use
	// [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
	//
	BulkOperationStatusFailed BulkOperationStatus = "FAILED"
	// The bulk operation is runnning.
	BulkOperationStatusRunning BulkOperationStatus = "RUNNING"
)

var AllBulkOperationStatus = []BulkOperationStatus{
	BulkOperationStatusCanceled,
	BulkOperationStatusCanceling,
	BulkOperationStatusCompleted,
	BulkOperationStatusCreated,
	BulkOperationStatusExpired,
	BulkOperationStatusFailed,
	BulkOperationStatusRunning,
}

func (e BulkOperationStatus) IsValid() bool {
	switch e {
	case BulkOperationStatusCanceled, BulkOperationStatusCanceling, BulkOperationStatusCompleted, BulkOperationStatusCreated, BulkOperationStatusExpired, BulkOperationStatusFailed, BulkOperationStatusRunning:
		return true
	}
	return false
}

func (e BulkOperationStatus) String() string {
	return string(e)
}

func (e *BulkOperationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationStatus", str)
	}
	return nil
}

func (e BulkOperationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the bulk operation's type.
type BulkOperationType string

const (
	// The bulk operation is a query.
	BulkOperationTypeQuery BulkOperationType = "QUERY"
	// The bulk operation is a mutation.
	BulkOperationTypeMutation BulkOperationType = "MUTATION"
)

var AllBulkOperationType = []BulkOperationType{
	BulkOperationTypeQuery,
	BulkOperationTypeMutation,
}

func (e BulkOperationType) IsValid() bool {
	switch e {
	case BulkOperationTypeQuery, BulkOperationTypeMutation:
		return true
	}
	return false
}

func (e BulkOperationType) String() string {
	return string(e)
}

func (e *BulkOperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationType", str)
	}
	return nil
}

func (e BulkOperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
type BulkProductResourceFeedbackCreateUserErrorCode string

const (
	// The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50.
	BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded BulkProductResourceFeedbackCreateUserErrorCode = "MAXIMUM_FEEDBACK_LIMIT_EXCEEDED"
	// The feedback for a later version of this resource was already accepted.
	BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback BulkProductResourceFeedbackCreateUserErrorCode = "OUTDATED_FEEDBACK"
	// The product wasn't found or isn't available to the channel.
	BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound BulkProductResourceFeedbackCreateUserErrorCode = "PRODUCT_NOT_FOUND"
	// The input value is invalid.
	BulkProductResourceFeedbackCreateUserErrorCodeInvalid BulkProductResourceFeedbackCreateUserErrorCode = "INVALID"
	// The input value is blank.
	BulkProductResourceFeedbackCreateUserErrorCodeBlank BulkProductResourceFeedbackCreateUserErrorCode = "BLANK"
	// The input value needs to be blank.
	BulkProductResourceFeedbackCreateUserErrorCodePresent BulkProductResourceFeedbackCreateUserErrorCode = "PRESENT"
	// The input value should be less than or equal to the maximum value allowed.
	BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo BulkProductResourceFeedbackCreateUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
)

var AllBulkProductResourceFeedbackCreateUserErrorCode = []BulkProductResourceFeedbackCreateUserErrorCode{
	BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded,
	BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback,
	BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound,
	BulkProductResourceFeedbackCreateUserErrorCodeInvalid,
	BulkProductResourceFeedbackCreateUserErrorCodeBlank,
	BulkProductResourceFeedbackCreateUserErrorCodePresent,
	BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo,
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) IsValid() bool {
	switch e {
	case BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded, BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback, BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound, BulkProductResourceFeedbackCreateUserErrorCodeInvalid, BulkProductResourceFeedbackCreateUserErrorCodeBlank, BulkProductResourceFeedbackCreateUserErrorCodePresent, BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo:
		return true
	}
	return false
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) String() string {
	return string(e)
}

func (e *BulkProductResourceFeedbackCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkProductResourceFeedbackCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkProductResourceFeedbackCreateUserErrorCode", str)
	}
	return nil
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CodeDiscount query.
type CodeDiscountSortKeys string

const (
	// Sort by the `starts_at` value.
	CodeDiscountSortKeysStartsAt CodeDiscountSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	CodeDiscountSortKeysEndsAt CodeDiscountSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	CodeDiscountSortKeysTitle CodeDiscountSortKeys = "TITLE"
	// Sort by the `created_at` value.
	CodeDiscountSortKeysCreatedAt CodeDiscountSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CodeDiscountSortKeysUpdatedAt CodeDiscountSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CodeDiscountSortKeysID CodeDiscountSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	CodeDiscountSortKeysRelevance CodeDiscountSortKeys = "RELEVANCE"
)

var AllCodeDiscountSortKeys = []CodeDiscountSortKeys{
	CodeDiscountSortKeysStartsAt,
	CodeDiscountSortKeysEndsAt,
	CodeDiscountSortKeysTitle,
	CodeDiscountSortKeysCreatedAt,
	CodeDiscountSortKeysUpdatedAt,
	CodeDiscountSortKeysID,
	CodeDiscountSortKeysRelevance,
}

func (e CodeDiscountSortKeys) IsValid() bool {
	switch e {
	case CodeDiscountSortKeysStartsAt, CodeDiscountSortKeysEndsAt, CodeDiscountSortKeysTitle, CodeDiscountSortKeysCreatedAt, CodeDiscountSortKeysUpdatedAt, CodeDiscountSortKeysID, CodeDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e CodeDiscountSortKeys) String() string {
	return string(e)
}

func (e *CodeDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodeDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodeDiscountSortKeys", str)
	}
	return nil
}

func (e CodeDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the property of a product being used to populate the smart collection.
type CollectionRuleColumn string

const (
	// The `tag` attribute.
	CollectionRuleColumnTag CollectionRuleColumn = "TAG"
	// The `title` attribute.
	CollectionRuleColumnTitle CollectionRuleColumn = "TITLE"
	// The `type` attribute.
	CollectionRuleColumnType CollectionRuleColumn = "TYPE"
	// The `vendor` attribute.
	CollectionRuleColumnVendor CollectionRuleColumn = "VENDOR"
	// The `variant_price` attribute.
	CollectionRuleColumnVariantPrice CollectionRuleColumn = "VARIANT_PRICE"
	// The `is_price_reduced` attribute, which is a Boolean type evaluated as `true` if a product has a `compare_at_price` set on any of its variants.
	CollectionRuleColumnIsPriceReduced CollectionRuleColumn = "IS_PRICE_REDUCED"
	// The `variant_compare_at_price` attribute.
	CollectionRuleColumnVariantCompareAtPrice CollectionRuleColumn = "VARIANT_COMPARE_AT_PRICE"
	// The `variant_weight` attribute.
	CollectionRuleColumnVariantWeight CollectionRuleColumn = "VARIANT_WEIGHT"
	// The `variant_inventory` attribute.
	CollectionRuleColumnVariantInventory CollectionRuleColumn = "VARIANT_INVENTORY"
	// The `variant_title` attribute.
	CollectionRuleColumnVariantTitle CollectionRuleColumn = "VARIANT_TITLE"
)

var AllCollectionRuleColumn = []CollectionRuleColumn{
	CollectionRuleColumnTag,
	CollectionRuleColumnTitle,
	CollectionRuleColumnType,
	CollectionRuleColumnVendor,
	CollectionRuleColumnVariantPrice,
	CollectionRuleColumnIsPriceReduced,
	CollectionRuleColumnVariantCompareAtPrice,
	CollectionRuleColumnVariantWeight,
	CollectionRuleColumnVariantInventory,
	CollectionRuleColumnVariantTitle,
}

func (e CollectionRuleColumn) IsValid() bool {
	switch e {
	case CollectionRuleColumnTag, CollectionRuleColumnTitle, CollectionRuleColumnType, CollectionRuleColumnVendor, CollectionRuleColumnVariantPrice, CollectionRuleColumnIsPriceReduced, CollectionRuleColumnVariantCompareAtPrice, CollectionRuleColumnVariantWeight, CollectionRuleColumnVariantInventory, CollectionRuleColumnVariantTitle:
		return true
	}
	return false
}

func (e CollectionRuleColumn) String() string {
	return string(e)
}

func (e *CollectionRuleColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleColumn", str)
	}
	return nil
}

func (e CollectionRuleColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the relationship between the `column` and the condition.
type CollectionRuleRelation string

const (
	// The attribute contains the condition.
	CollectionRuleRelationContains CollectionRuleRelation = "CONTAINS"
	// The attribute ends with the condition.
	CollectionRuleRelationEndsWith CollectionRuleRelation = "ENDS_WITH"
	// The attribute is equal to the condition.
	CollectionRuleRelationEquals CollectionRuleRelation = "EQUALS"
	// The attribute is greater than the condition.
	CollectionRuleRelationGreaterThan CollectionRuleRelation = "GREATER_THAN"
	// The attribute is not set.
	CollectionRuleRelationIsNotSet CollectionRuleRelation = "IS_NOT_SET"
	// The attribute is set.
	CollectionRuleRelationIsSet CollectionRuleRelation = "IS_SET"
	// The attribute is less than the condition.
	CollectionRuleRelationLessThan CollectionRuleRelation = "LESS_THAN"
	// The attribute does not contain the condition.
	CollectionRuleRelationNotContains CollectionRuleRelation = "NOT_CONTAINS"
	// The attribute does not equal the condition.
	CollectionRuleRelationNotEquals CollectionRuleRelation = "NOT_EQUALS"
	// The attribute starts with the condition.
	CollectionRuleRelationStartsWith CollectionRuleRelation = "STARTS_WITH"
)

var AllCollectionRuleRelation = []CollectionRuleRelation{
	CollectionRuleRelationContains,
	CollectionRuleRelationEndsWith,
	CollectionRuleRelationEquals,
	CollectionRuleRelationGreaterThan,
	CollectionRuleRelationIsNotSet,
	CollectionRuleRelationIsSet,
	CollectionRuleRelationLessThan,
	CollectionRuleRelationNotContains,
	CollectionRuleRelationNotEquals,
	CollectionRuleRelationStartsWith,
}

func (e CollectionRuleRelation) IsValid() bool {
	switch e {
	case CollectionRuleRelationContains, CollectionRuleRelationEndsWith, CollectionRuleRelationEquals, CollectionRuleRelationGreaterThan, CollectionRuleRelationIsNotSet, CollectionRuleRelationIsSet, CollectionRuleRelationLessThan, CollectionRuleRelationNotContains, CollectionRuleRelationNotEquals, CollectionRuleRelationStartsWith:
		return true
	}
	return false
}

func (e CollectionRuleRelation) String() string {
	return string(e)
}

func (e *CollectionRuleRelation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleRelation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleRelation", str)
	}
	return nil
}

func (e CollectionRuleRelation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Collection query.
type CollectionSortKeys string

const (
	// Sort by the `title` value.
	CollectionSortKeysTitle CollectionSortKeys = "TITLE"
	// Sort by the `updated_at` value.
	CollectionSortKeysUpdatedAt CollectionSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CollectionSortKeysID CollectionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	CollectionSortKeysRelevance CollectionSortKeys = "RELEVANCE"
)

var AllCollectionSortKeys = []CollectionSortKeys{
	CollectionSortKeysTitle,
	CollectionSortKeysUpdatedAt,
	CollectionSortKeysID,
	CollectionSortKeysRelevance,
}

func (e CollectionSortKeys) IsValid() bool {
	switch e {
	case CollectionSortKeysTitle, CollectionSortKeysUpdatedAt, CollectionSortKeysID, CollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e CollectionSortKeys) String() string {
	return string(e)
}

func (e *CollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortKeys", str)
	}
	return nil
}

func (e CollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the sort order for the products in the collection.
type CollectionSortOrder string

const (
	// Alphabetically, in ascending order (A - Z).
	CollectionSortOrderAlphaAsc CollectionSortOrder = "ALPHA_ASC"
	// Alphabetically, in descending order (Z - A).
	CollectionSortOrderAlphaDesc CollectionSortOrder = "ALPHA_DESC"
	// By best-selling products.
	CollectionSortOrderBestSelling CollectionSortOrder = "BEST_SELLING"
	// By date created, in ascending order (oldest - newest).
	CollectionSortOrderCreated CollectionSortOrder = "CREATED"
	// By date created, in descending order (newest - oldest).
	CollectionSortOrderCreatedDesc CollectionSortOrder = "CREATED_DESC"
	// In the order set manually by the merchant.
	CollectionSortOrderManual CollectionSortOrder = "MANUAL"
	// By price, in ascending order (lowest - highest).
	CollectionSortOrderPriceAsc CollectionSortOrder = "PRICE_ASC"
	// By price, in descending order (highest - lowest).
	CollectionSortOrderPriceDesc CollectionSortOrder = "PRICE_DESC"
)

var AllCollectionSortOrder = []CollectionSortOrder{
	CollectionSortOrderAlphaAsc,
	CollectionSortOrderAlphaDesc,
	CollectionSortOrderBestSelling,
	CollectionSortOrderCreated,
	CollectionSortOrderCreatedDesc,
	CollectionSortOrderManual,
	CollectionSortOrderPriceAsc,
	CollectionSortOrderPriceDesc,
}

func (e CollectionSortOrder) IsValid() bool {
	switch e {
	case CollectionSortOrderAlphaAsc, CollectionSortOrderAlphaDesc, CollectionSortOrderBestSelling, CollectionSortOrderCreated, CollectionSortOrderCreatedDesc, CollectionSortOrderManual, CollectionSortOrderPriceAsc, CollectionSortOrderPriceDesc:
		return true
	}
	return false
}

func (e CollectionSortOrder) String() string {
	return string(e)
}

func (e *CollectionSortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortOrder", str)
	}
	return nil
}

func (e CollectionSortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ISO 3166-1 alpha-2 country codes with some differences.
type CountryCode string

const (
	// Afghanistan.
	CountryCodeAf CountryCode = "AF"
	// Åland Islands.
	CountryCodeAx CountryCode = "AX"
	// Albania.
	CountryCodeAl CountryCode = "AL"
	// Algeria.
	CountryCodeDz CountryCode = "DZ"
	// Andorra.
	CountryCodeAd CountryCode = "AD"
	// Angola.
	CountryCodeAo CountryCode = "AO"
	// Anguilla.
	CountryCodeAi CountryCode = "AI"
	// Antigua & Barbuda.
	CountryCodeAg CountryCode = "AG"
	// Argentina.
	CountryCodeAr CountryCode = "AR"
	// Armenia.
	CountryCodeAm CountryCode = "AM"
	// Aruba.
	CountryCodeAw CountryCode = "AW"
	// Ascension Island.
	CountryCodeAc CountryCode = "AC"
	// Australia.
	CountryCodeAu CountryCode = "AU"
	// Austria.
	CountryCodeAt CountryCode = "AT"
	// Azerbaijan.
	CountryCodeAz CountryCode = "AZ"
	// Bahamas.
	CountryCodeBs CountryCode = "BS"
	// Bahrain.
	CountryCodeBh CountryCode = "BH"
	// Bangladesh.
	CountryCodeBd CountryCode = "BD"
	// Barbados.
	CountryCodeBb CountryCode = "BB"
	// Belarus.
	CountryCodeBy CountryCode = "BY"
	// Belgium.
	CountryCodeBe CountryCode = "BE"
	// Belize.
	CountryCodeBz CountryCode = "BZ"
	// Benin.
	CountryCodeBj CountryCode = "BJ"
	// Bermuda.
	CountryCodeBm CountryCode = "BM"
	// Bhutan.
	CountryCodeBt CountryCode = "BT"
	// Bolivia.
	CountryCodeBo CountryCode = "BO"
	// Bosnia & Herzegovina.
	CountryCodeBa CountryCode = "BA"
	// Botswana.
	CountryCodeBw CountryCode = "BW"
	// Bouvet Island.
	CountryCodeBv CountryCode = "BV"
	// Brazil.
	CountryCodeBr CountryCode = "BR"
	// British Indian Ocean Territory.
	CountryCodeIo CountryCode = "IO"
	// Brunei.
	CountryCodeBn CountryCode = "BN"
	// Bulgaria.
	CountryCodeBg CountryCode = "BG"
	// Burkina Faso.
	CountryCodeBf CountryCode = "BF"
	// Burundi.
	CountryCodeBi CountryCode = "BI"
	// Cambodia.
	CountryCodeKh CountryCode = "KH"
	// Canada.
	CountryCodeCa CountryCode = "CA"
	// Cape Verde.
	CountryCodeCv CountryCode = "CV"
	// Caribbean Netherlands.
	CountryCodeBq CountryCode = "BQ"
	// Cayman Islands.
	CountryCodeKy CountryCode = "KY"
	// Central African Republic.
	CountryCodeCf CountryCode = "CF"
	// Chad.
	CountryCodeTd CountryCode = "TD"
	// Chile.
	CountryCodeCl CountryCode = "CL"
	// China.
	CountryCodeCn CountryCode = "CN"
	// Christmas Island.
	CountryCodeCx CountryCode = "CX"
	// Cocos (Keeling) Islands.
	CountryCodeCc CountryCode = "CC"
	// Colombia.
	CountryCodeCo CountryCode = "CO"
	// Comoros.
	CountryCodeKm CountryCode = "KM"
	// Congo - Brazzaville.
	CountryCodeCg CountryCode = "CG"
	// Congo - Kinshasa.
	CountryCodeCd CountryCode = "CD"
	// Cook Islands.
	CountryCodeCk CountryCode = "CK"
	// Costa Rica.
	CountryCodeCr CountryCode = "CR"
	// Croatia.
	CountryCodeHr CountryCode = "HR"
	// Cuba.
	CountryCodeCu CountryCode = "CU"
	// Curaçao.
	CountryCodeCw CountryCode = "CW"
	// Cyprus.
	CountryCodeCy CountryCode = "CY"
	// Czechia.
	CountryCodeCz CountryCode = "CZ"
	// Côte d’Ivoire.
	CountryCodeCi CountryCode = "CI"
	// Denmark.
	CountryCodeDk CountryCode = "DK"
	// Djibouti.
	CountryCodeDj CountryCode = "DJ"
	// Dominica.
	CountryCodeDm CountryCode = "DM"
	// Dominican Republic.
	CountryCodeDo CountryCode = "DO"
	// Ecuador.
	CountryCodeEc CountryCode = "EC"
	// Egypt.
	CountryCodeEg CountryCode = "EG"
	// El Salvador.
	CountryCodeSv CountryCode = "SV"
	// Equatorial Guinea.
	CountryCodeGq CountryCode = "GQ"
	// Eritrea.
	CountryCodeEr CountryCode = "ER"
	// Estonia.
	CountryCodeEe CountryCode = "EE"
	// Eswatini.
	CountryCodeSz CountryCode = "SZ"
	// Ethiopia.
	CountryCodeEt CountryCode = "ET"
	// Falkland Islands.
	CountryCodeFk CountryCode = "FK"
	// Faroe Islands.
	CountryCodeFo CountryCode = "FO"
	// Fiji.
	CountryCodeFj CountryCode = "FJ"
	// Finland.
	CountryCodeFi CountryCode = "FI"
	// France.
	CountryCodeFr CountryCode = "FR"
	// French Guiana.
	CountryCodeGf CountryCode = "GF"
	// French Polynesia.
	CountryCodePf CountryCode = "PF"
	// French Southern Territories.
	CountryCodeTf CountryCode = "TF"
	// Gabon.
	CountryCodeGa CountryCode = "GA"
	// Gambia.
	CountryCodeGm CountryCode = "GM"
	// Georgia.
	CountryCodeGe CountryCode = "GE"
	// Germany.
	CountryCodeDe CountryCode = "DE"
	// Ghana.
	CountryCodeGh CountryCode = "GH"
	// Gibraltar.
	CountryCodeGi CountryCode = "GI"
	// Greece.
	CountryCodeGr CountryCode = "GR"
	// Greenland.
	CountryCodeGl CountryCode = "GL"
	// Grenada.
	CountryCodeGd CountryCode = "GD"
	// Guadeloupe.
	CountryCodeGp CountryCode = "GP"
	// Guatemala.
	CountryCodeGt CountryCode = "GT"
	// Guernsey.
	CountryCodeGg CountryCode = "GG"
	// Guinea.
	CountryCodeGn CountryCode = "GN"
	// Guinea-Bissau.
	CountryCodeGw CountryCode = "GW"
	// Guyana.
	CountryCodeGy CountryCode = "GY"
	// Haiti.
	CountryCodeHt CountryCode = "HT"
	// Heard & McDonald Islands.
	CountryCodeHm CountryCode = "HM"
	// Vatican City.
	CountryCodeVa CountryCode = "VA"
	// Honduras.
	CountryCodeHn CountryCode = "HN"
	// Hong Kong SAR.
	CountryCodeHk CountryCode = "HK"
	// Hungary.
	CountryCodeHu CountryCode = "HU"
	// Iceland.
	CountryCodeIs CountryCode = "IS"
	// India.
	CountryCodeIn CountryCode = "IN"
	// Indonesia.
	CountryCodeID CountryCode = "ID"
	// Iran.
	CountryCodeIr CountryCode = "IR"
	// Iraq.
	CountryCodeIq CountryCode = "IQ"
	// Ireland.
	CountryCodeIe CountryCode = "IE"
	// Isle of Man.
	CountryCodeIm CountryCode = "IM"
	// Israel.
	CountryCodeIl CountryCode = "IL"
	// Italy.
	CountryCodeIt CountryCode = "IT"
	// Jamaica.
	CountryCodeJm CountryCode = "JM"
	// Japan.
	CountryCodeJp CountryCode = "JP"
	// Jersey.
	CountryCodeJe CountryCode = "JE"
	// Jordan.
	CountryCodeJo CountryCode = "JO"
	// Kazakhstan.
	CountryCodeKz CountryCode = "KZ"
	// Kenya.
	CountryCodeKe CountryCode = "KE"
	// Kiribati.
	CountryCodeKi CountryCode = "KI"
	// North Korea.
	CountryCodeKp CountryCode = "KP"
	// Kosovo.
	CountryCodeXk CountryCode = "XK"
	// Kuwait.
	CountryCodeKw CountryCode = "KW"
	// Kyrgyzstan.
	CountryCodeKg CountryCode = "KG"
	// Laos.
	CountryCodeLa CountryCode = "LA"
	// Latvia.
	CountryCodeLv CountryCode = "LV"
	// Lebanon.
	CountryCodeLb CountryCode = "LB"
	// Lesotho.
	CountryCodeLs CountryCode = "LS"
	// Liberia.
	CountryCodeLr CountryCode = "LR"
	// Libya.
	CountryCodeLy CountryCode = "LY"
	// Liechtenstein.
	CountryCodeLi CountryCode = "LI"
	// Lithuania.
	CountryCodeLt CountryCode = "LT"
	// Luxembourg.
	CountryCodeLu CountryCode = "LU"
	// Macao SAR.
	CountryCodeMo CountryCode = "MO"
	// Madagascar.
	CountryCodeMg CountryCode = "MG"
	// Malawi.
	CountryCodeMw CountryCode = "MW"
	// Malaysia.
	CountryCodeMy CountryCode = "MY"
	// Maldives.
	CountryCodeMv CountryCode = "MV"
	// Mali.
	CountryCodeMl CountryCode = "ML"
	// Malta.
	CountryCodeMt CountryCode = "MT"
	// Martinique.
	CountryCodeMq CountryCode = "MQ"
	// Mauritania.
	CountryCodeMr CountryCode = "MR"
	// Mauritius.
	CountryCodeMu CountryCode = "MU"
	// Mayotte.
	CountryCodeYt CountryCode = "YT"
	// Mexico.
	CountryCodeMx CountryCode = "MX"
	// Moldova.
	CountryCodeMd CountryCode = "MD"
	// Monaco.
	CountryCodeMc CountryCode = "MC"
	// Mongolia.
	CountryCodeMn CountryCode = "MN"
	// Montenegro.
	CountryCodeMe CountryCode = "ME"
	// Montserrat.
	CountryCodeMs CountryCode = "MS"
	// Morocco.
	CountryCodeMa CountryCode = "MA"
	// Mozambique.
	CountryCodeMz CountryCode = "MZ"
	// Myanmar (Burma).
	CountryCodeMm CountryCode = "MM"
	// Namibia.
	CountryCodeNa CountryCode = "NA"
	// Nauru.
	CountryCodeNr CountryCode = "NR"
	// Nepal.
	CountryCodeNp CountryCode = "NP"
	// Netherlands.
	CountryCodeNl CountryCode = "NL"
	// Netherlands Antilles.
	CountryCodeAn CountryCode = "AN"
	// New Caledonia.
	CountryCodeNc CountryCode = "NC"
	// New Zealand.
	CountryCodeNz CountryCode = "NZ"
	// Nicaragua.
	CountryCodeNi CountryCode = "NI"
	// Niger.
	CountryCodeNe CountryCode = "NE"
	// Nigeria.
	CountryCodeNg CountryCode = "NG"
	// Niue.
	CountryCodeNu CountryCode = "NU"
	// Norfolk Island.
	CountryCodeNf CountryCode = "NF"
	// North Macedonia.
	CountryCodeMk CountryCode = "MK"
	// Norway.
	CountryCodeNo CountryCode = "NO"
	// Oman.
	CountryCodeOm CountryCode = "OM"
	// Pakistan.
	CountryCodePk CountryCode = "PK"
	// Palestinian Territories.
	CountryCodePs CountryCode = "PS"
	// Panama.
	CountryCodePa CountryCode = "PA"
	// Papua New Guinea.
	CountryCodePg CountryCode = "PG"
	// Paraguay.
	CountryCodePy CountryCode = "PY"
	// Peru.
	CountryCodePe CountryCode = "PE"
	// Philippines.
	CountryCodePh CountryCode = "PH"
	// Pitcairn Islands.
	CountryCodePn CountryCode = "PN"
	// Poland.
	CountryCodePl CountryCode = "PL"
	// Portugal.
	CountryCodePt CountryCode = "PT"
	// Qatar.
	CountryCodeQa CountryCode = "QA"
	// Cameroon.
	CountryCodeCm CountryCode = "CM"
	// Réunion.
	CountryCodeRe CountryCode = "RE"
	// Romania.
	CountryCodeRo CountryCode = "RO"
	// Russia.
	CountryCodeRu CountryCode = "RU"
	// Rwanda.
	CountryCodeRw CountryCode = "RW"
	// St. Barthélemy.
	CountryCodeBl CountryCode = "BL"
	// St. Helena.
	CountryCodeSh CountryCode = "SH"
	// St. Kitts & Nevis.
	CountryCodeKn CountryCode = "KN"
	// St. Lucia.
	CountryCodeLc CountryCode = "LC"
	// St. Martin.
	CountryCodeMf CountryCode = "MF"
	// St. Pierre & Miquelon.
	CountryCodePm CountryCode = "PM"
	// Samoa.
	CountryCodeWs CountryCode = "WS"
	// San Marino.
	CountryCodeSm CountryCode = "SM"
	// São Tomé & Príncipe.
	CountryCodeSt CountryCode = "ST"
	// Saudi Arabia.
	CountryCodeSa CountryCode = "SA"
	// Senegal.
	CountryCodeSn CountryCode = "SN"
	// Serbia.
	CountryCodeRs CountryCode = "RS"
	// Seychelles.
	CountryCodeSc CountryCode = "SC"
	// Sierra Leone.
	CountryCodeSl CountryCode = "SL"
	// Singapore.
	CountryCodeSg CountryCode = "SG"
	// Sint Maarten.
	CountryCodeSx CountryCode = "SX"
	// Slovakia.
	CountryCodeSk CountryCode = "SK"
	// Slovenia.
	CountryCodeSi CountryCode = "SI"
	// Solomon Islands.
	CountryCodeSb CountryCode = "SB"
	// Somalia.
	CountryCodeSo CountryCode = "SO"
	// South Africa.
	CountryCodeZa CountryCode = "ZA"
	// South Georgia & South Sandwich Islands.
	CountryCodeGs CountryCode = "GS"
	// South Korea.
	CountryCodeKr CountryCode = "KR"
	// South Sudan.
	CountryCodeSs CountryCode = "SS"
	// Spain.
	CountryCodeEs CountryCode = "ES"
	// Sri Lanka.
	CountryCodeLk CountryCode = "LK"
	// St. Vincent & Grenadines.
	CountryCodeVc CountryCode = "VC"
	// Sudan.
	CountryCodeSd CountryCode = "SD"
	// Suriname.
	CountryCodeSr CountryCode = "SR"
	// Svalbard & Jan Mayen.
	CountryCodeSj CountryCode = "SJ"
	// Sweden.
	CountryCodeSe CountryCode = "SE"
	// Switzerland.
	CountryCodeCh CountryCode = "CH"
	// Syria.
	CountryCodeSy CountryCode = "SY"
	// Taiwan.
	CountryCodeTw CountryCode = "TW"
	// Tajikistan.
	CountryCodeTj CountryCode = "TJ"
	// Tanzania.
	CountryCodeTz CountryCode = "TZ"
	// Thailand.
	CountryCodeTh CountryCode = "TH"
	// Timor-Leste.
	CountryCodeTl CountryCode = "TL"
	// Togo.
	CountryCodeTg CountryCode = "TG"
	// Tokelau.
	CountryCodeTk CountryCode = "TK"
	// Tonga.
	CountryCodeTo CountryCode = "TO"
	// Trinidad & Tobago.
	CountryCodeTt CountryCode = "TT"
	// Tristan da Cunha.
	CountryCodeTa CountryCode = "TA"
	// Tunisia.
	CountryCodeTn CountryCode = "TN"
	// Turkey.
	CountryCodeTr CountryCode = "TR"
	// Turkmenistan.
	CountryCodeTm CountryCode = "TM"
	// Turks & Caicos Islands.
	CountryCodeTc CountryCode = "TC"
	// Tuvalu.
	CountryCodeTv CountryCode = "TV"
	// Uganda.
	CountryCodeUg CountryCode = "UG"
	// Ukraine.
	CountryCodeUa CountryCode = "UA"
	// United Arab Emirates.
	CountryCodeAe CountryCode = "AE"
	// United Kingdom.
	CountryCodeGb CountryCode = "GB"
	// United States.
	CountryCodeUs CountryCode = "US"
	// U.S. Outlying Islands.
	CountryCodeUm CountryCode = "UM"
	// Uruguay.
	CountryCodeUy CountryCode = "UY"
	// Uzbekistan.
	CountryCodeUz CountryCode = "UZ"
	// Vanuatu.
	CountryCodeVu CountryCode = "VU"
	// Venezuela.
	CountryCodeVe CountryCode = "VE"
	// Vietnam.
	CountryCodeVn CountryCode = "VN"
	// British Virgin Islands.
	CountryCodeVg CountryCode = "VG"
	// Wallis & Futuna.
	CountryCodeWf CountryCode = "WF"
	// Western Sahara.
	CountryCodeEh CountryCode = "EH"
	// Yemen.
	CountryCodeYe CountryCode = "YE"
	// Zambia.
	CountryCodeZm CountryCode = "ZM"
	// Zimbabwe.
	CountryCodeZw CountryCode = "ZW"
	// Unknown Region.
	CountryCodeZz CountryCode = "ZZ"
)

var AllCountryCode = []CountryCode{
	CountryCodeAf,
	CountryCodeAx,
	CountryCodeAl,
	CountryCodeDz,
	CountryCodeAd,
	CountryCodeAo,
	CountryCodeAi,
	CountryCodeAg,
	CountryCodeAr,
	CountryCodeAm,
	CountryCodeAw,
	CountryCodeAc,
	CountryCodeAu,
	CountryCodeAt,
	CountryCodeAz,
	CountryCodeBs,
	CountryCodeBh,
	CountryCodeBd,
	CountryCodeBb,
	CountryCodeBy,
	CountryCodeBe,
	CountryCodeBz,
	CountryCodeBj,
	CountryCodeBm,
	CountryCodeBt,
	CountryCodeBo,
	CountryCodeBa,
	CountryCodeBw,
	CountryCodeBv,
	CountryCodeBr,
	CountryCodeIo,
	CountryCodeBn,
	CountryCodeBg,
	CountryCodeBf,
	CountryCodeBi,
	CountryCodeKh,
	CountryCodeCa,
	CountryCodeCv,
	CountryCodeBq,
	CountryCodeKy,
	CountryCodeCf,
	CountryCodeTd,
	CountryCodeCl,
	CountryCodeCn,
	CountryCodeCx,
	CountryCodeCc,
	CountryCodeCo,
	CountryCodeKm,
	CountryCodeCg,
	CountryCodeCd,
	CountryCodeCk,
	CountryCodeCr,
	CountryCodeHr,
	CountryCodeCu,
	CountryCodeCw,
	CountryCodeCy,
	CountryCodeCz,
	CountryCodeCi,
	CountryCodeDk,
	CountryCodeDj,
	CountryCodeDm,
	CountryCodeDo,
	CountryCodeEc,
	CountryCodeEg,
	CountryCodeSv,
	CountryCodeGq,
	CountryCodeEr,
	CountryCodeEe,
	CountryCodeSz,
	CountryCodeEt,
	CountryCodeFk,
	CountryCodeFo,
	CountryCodeFj,
	CountryCodeFi,
	CountryCodeFr,
	CountryCodeGf,
	CountryCodePf,
	CountryCodeTf,
	CountryCodeGa,
	CountryCodeGm,
	CountryCodeGe,
	CountryCodeDe,
	CountryCodeGh,
	CountryCodeGi,
	CountryCodeGr,
	CountryCodeGl,
	CountryCodeGd,
	CountryCodeGp,
	CountryCodeGt,
	CountryCodeGg,
	CountryCodeGn,
	CountryCodeGw,
	CountryCodeGy,
	CountryCodeHt,
	CountryCodeHm,
	CountryCodeVa,
	CountryCodeHn,
	CountryCodeHk,
	CountryCodeHu,
	CountryCodeIs,
	CountryCodeIn,
	CountryCodeID,
	CountryCodeIr,
	CountryCodeIq,
	CountryCodeIe,
	CountryCodeIm,
	CountryCodeIl,
	CountryCodeIt,
	CountryCodeJm,
	CountryCodeJp,
	CountryCodeJe,
	CountryCodeJo,
	CountryCodeKz,
	CountryCodeKe,
	CountryCodeKi,
	CountryCodeKp,
	CountryCodeXk,
	CountryCodeKw,
	CountryCodeKg,
	CountryCodeLa,
	CountryCodeLv,
	CountryCodeLb,
	CountryCodeLs,
	CountryCodeLr,
	CountryCodeLy,
	CountryCodeLi,
	CountryCodeLt,
	CountryCodeLu,
	CountryCodeMo,
	CountryCodeMg,
	CountryCodeMw,
	CountryCodeMy,
	CountryCodeMv,
	CountryCodeMl,
	CountryCodeMt,
	CountryCodeMq,
	CountryCodeMr,
	CountryCodeMu,
	CountryCodeYt,
	CountryCodeMx,
	CountryCodeMd,
	CountryCodeMc,
	CountryCodeMn,
	CountryCodeMe,
	CountryCodeMs,
	CountryCodeMa,
	CountryCodeMz,
	CountryCodeMm,
	CountryCodeNa,
	CountryCodeNr,
	CountryCodeNp,
	CountryCodeNl,
	CountryCodeAn,
	CountryCodeNc,
	CountryCodeNz,
	CountryCodeNi,
	CountryCodeNe,
	CountryCodeNg,
	CountryCodeNu,
	CountryCodeNf,
	CountryCodeMk,
	CountryCodeNo,
	CountryCodeOm,
	CountryCodePk,
	CountryCodePs,
	CountryCodePa,
	CountryCodePg,
	CountryCodePy,
	CountryCodePe,
	CountryCodePh,
	CountryCodePn,
	CountryCodePl,
	CountryCodePt,
	CountryCodeQa,
	CountryCodeCm,
	CountryCodeRe,
	CountryCodeRo,
	CountryCodeRu,
	CountryCodeRw,
	CountryCodeBl,
	CountryCodeSh,
	CountryCodeKn,
	CountryCodeLc,
	CountryCodeMf,
	CountryCodePm,
	CountryCodeWs,
	CountryCodeSm,
	CountryCodeSt,
	CountryCodeSa,
	CountryCodeSn,
	CountryCodeRs,
	CountryCodeSc,
	CountryCodeSl,
	CountryCodeSg,
	CountryCodeSx,
	CountryCodeSk,
	CountryCodeSi,
	CountryCodeSb,
	CountryCodeSo,
	CountryCodeZa,
	CountryCodeGs,
	CountryCodeKr,
	CountryCodeSs,
	CountryCodeEs,
	CountryCodeLk,
	CountryCodeVc,
	CountryCodeSd,
	CountryCodeSr,
	CountryCodeSj,
	CountryCodeSe,
	CountryCodeCh,
	CountryCodeSy,
	CountryCodeTw,
	CountryCodeTj,
	CountryCodeTz,
	CountryCodeTh,
	CountryCodeTl,
	CountryCodeTg,
	CountryCodeTk,
	CountryCodeTo,
	CountryCodeTt,
	CountryCodeTa,
	CountryCodeTn,
	CountryCodeTr,
	CountryCodeTm,
	CountryCodeTc,
	CountryCodeTv,
	CountryCodeUg,
	CountryCodeUa,
	CountryCodeAe,
	CountryCodeGb,
	CountryCodeUs,
	CountryCodeUm,
	CountryCodeUy,
	CountryCodeUz,
	CountryCodeVu,
	CountryCodeVe,
	CountryCodeVn,
	CountryCodeVg,
	CountryCodeWf,
	CountryCodeEh,
	CountryCodeYe,
	CountryCodeZm,
	CountryCodeZw,
	CountryCodeZz,
}

func (e CountryCode) IsValid() bool {
	switch e {
	case CountryCodeAf, CountryCodeAx, CountryCodeAl, CountryCodeDz, CountryCodeAd, CountryCodeAo, CountryCodeAi, CountryCodeAg, CountryCodeAr, CountryCodeAm, CountryCodeAw, CountryCodeAc, CountryCodeAu, CountryCodeAt, CountryCodeAz, CountryCodeBs, CountryCodeBh, CountryCodeBd, CountryCodeBb, CountryCodeBy, CountryCodeBe, CountryCodeBz, CountryCodeBj, CountryCodeBm, CountryCodeBt, CountryCodeBo, CountryCodeBa, CountryCodeBw, CountryCodeBv, CountryCodeBr, CountryCodeIo, CountryCodeBn, CountryCodeBg, CountryCodeBf, CountryCodeBi, CountryCodeKh, CountryCodeCa, CountryCodeCv, CountryCodeBq, CountryCodeKy, CountryCodeCf, CountryCodeTd, CountryCodeCl, CountryCodeCn, CountryCodeCx, CountryCodeCc, CountryCodeCo, CountryCodeKm, CountryCodeCg, CountryCodeCd, CountryCodeCk, CountryCodeCr, CountryCodeHr, CountryCodeCu, CountryCodeCw, CountryCodeCy, CountryCodeCz, CountryCodeCi, CountryCodeDk, CountryCodeDj, CountryCodeDm, CountryCodeDo, CountryCodeEc, CountryCodeEg, CountryCodeSv, CountryCodeGq, CountryCodeEr, CountryCodeEe, CountryCodeSz, CountryCodeEt, CountryCodeFk, CountryCodeFo, CountryCodeFj, CountryCodeFi, CountryCodeFr, CountryCodeGf, CountryCodePf, CountryCodeTf, CountryCodeGa, CountryCodeGm, CountryCodeGe, CountryCodeDe, CountryCodeGh, CountryCodeGi, CountryCodeGr, CountryCodeGl, CountryCodeGd, CountryCodeGp, CountryCodeGt, CountryCodeGg, CountryCodeGn, CountryCodeGw, CountryCodeGy, CountryCodeHt, CountryCodeHm, CountryCodeVa, CountryCodeHn, CountryCodeHk, CountryCodeHu, CountryCodeIs, CountryCodeIn, CountryCodeID, CountryCodeIr, CountryCodeIq, CountryCodeIe, CountryCodeIm, CountryCodeIl, CountryCodeIt, CountryCodeJm, CountryCodeJp, CountryCodeJe, CountryCodeJo, CountryCodeKz, CountryCodeKe, CountryCodeKi, CountryCodeKp, CountryCodeXk, CountryCodeKw, CountryCodeKg, CountryCodeLa, CountryCodeLv, CountryCodeLb, CountryCodeLs, CountryCodeLr, CountryCodeLy, CountryCodeLi, CountryCodeLt, CountryCodeLu, CountryCodeMo, CountryCodeMg, CountryCodeMw, CountryCodeMy, CountryCodeMv, CountryCodeMl, CountryCodeMt, CountryCodeMq, CountryCodeMr, CountryCodeMu, CountryCodeYt, CountryCodeMx, CountryCodeMd, CountryCodeMc, CountryCodeMn, CountryCodeMe, CountryCodeMs, CountryCodeMa, CountryCodeMz, CountryCodeMm, CountryCodeNa, CountryCodeNr, CountryCodeNp, CountryCodeNl, CountryCodeAn, CountryCodeNc, CountryCodeNz, CountryCodeNi, CountryCodeNe, CountryCodeNg, CountryCodeNu, CountryCodeNf, CountryCodeMk, CountryCodeNo, CountryCodeOm, CountryCodePk, CountryCodePs, CountryCodePa, CountryCodePg, CountryCodePy, CountryCodePe, CountryCodePh, CountryCodePn, CountryCodePl, CountryCodePt, CountryCodeQa, CountryCodeCm, CountryCodeRe, CountryCodeRo, CountryCodeRu, CountryCodeRw, CountryCodeBl, CountryCodeSh, CountryCodeKn, CountryCodeLc, CountryCodeMf, CountryCodePm, CountryCodeWs, CountryCodeSm, CountryCodeSt, CountryCodeSa, CountryCodeSn, CountryCodeRs, CountryCodeSc, CountryCodeSl, CountryCodeSg, CountryCodeSx, CountryCodeSk, CountryCodeSi, CountryCodeSb, CountryCodeSo, CountryCodeZa, CountryCodeGs, CountryCodeKr, CountryCodeSs, CountryCodeEs, CountryCodeLk, CountryCodeVc, CountryCodeSd, CountryCodeSr, CountryCodeSj, CountryCodeSe, CountryCodeCh, CountryCodeSy, CountryCodeTw, CountryCodeTj, CountryCodeTz, CountryCodeTh, CountryCodeTl, CountryCodeTg, CountryCodeTk, CountryCodeTo, CountryCodeTt, CountryCodeTa, CountryCodeTn, CountryCodeTr, CountryCodeTm, CountryCodeTc, CountryCodeTv, CountryCodeUg, CountryCodeUa, CountryCodeAe, CountryCodeGb, CountryCodeUs, CountryCodeUm, CountryCodeUy, CountryCodeUz, CountryCodeVu, CountryCodeVe, CountryCodeVn, CountryCodeVg, CountryCodeWf, CountryCodeEh, CountryCodeYe, CountryCodeZm, CountryCodeZw, CountryCodeZz:
		return true
	}
	return false
}

func (e CountryCode) String() string {
	return string(e)
}

func (e *CountryCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryCode", str)
	}
	return nil
}

func (e CountryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The part of the image that should remain after cropping.
type CropRegion string

const (
	// Keep the center of the image.
	CropRegionCenter CropRegion = "CENTER"
	// Keep the top of the image.
	CropRegionTop CropRegion = "TOP"
	// Keep the bottom of the image.
	CropRegionBottom CropRegion = "BOTTOM"
	// Keep the left of the image.
	CropRegionLeft CropRegion = "LEFT"
	// Keep the right of the image.
	CropRegionRight CropRegion = "RIGHT"
)

var AllCropRegion = []CropRegion{
	CropRegionCenter,
	CropRegionTop,
	CropRegionBottom,
	CropRegionLeft,
	CropRegionRight,
}

func (e CropRegion) IsValid() bool {
	switch e {
	case CropRegionCenter, CropRegionTop, CropRegionBottom, CropRegionLeft, CropRegionRight:
		return true
	}
	return false
}

func (e CropRegion) String() string {
	return string(e)
}

func (e *CropRegion) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CropRegion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CropRegion", str)
	}
	return nil
}

func (e CropRegion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
// and non-standard codes.
type CurrencyCode string

const (
	// United States Dollars (USD).
	CurrencyCodeUsd CurrencyCode = "USD"
	// Euro (EUR).
	CurrencyCodeEur CurrencyCode = "EUR"
	// United Kingdom Pounds (GBP).
	CurrencyCodeGbp CurrencyCode = "GBP"
	// Canadian Dollars (CAD).
	CurrencyCodeCad CurrencyCode = "CAD"
	// Afghan Afghani (AFN).
	CurrencyCodeAfn CurrencyCode = "AFN"
	// Albanian Lek (ALL).
	CurrencyCodeAll CurrencyCode = "ALL"
	// Algerian Dinar (DZD).
	CurrencyCodeDzd CurrencyCode = "DZD"
	// Angolan Kwanza (AOA).
	CurrencyCodeAoa CurrencyCode = "AOA"
	// Argentine Pesos (ARS).
	CurrencyCodeArs CurrencyCode = "ARS"
	// Armenian Dram (AMD).
	CurrencyCodeAmd CurrencyCode = "AMD"
	// Aruban Florin (AWG).
	CurrencyCodeAwg CurrencyCode = "AWG"
	// Australian Dollars (AUD).
	CurrencyCodeAud CurrencyCode = "AUD"
	// Barbadian Dollar (BBD).
	CurrencyCodeBbd CurrencyCode = "BBD"
	// Azerbaijani Manat (AZN).
	CurrencyCodeAzn CurrencyCode = "AZN"
	// Bangladesh Taka (BDT).
	CurrencyCodeBdt CurrencyCode = "BDT"
	// Bahamian Dollar (BSD).
	CurrencyCodeBsd CurrencyCode = "BSD"
	// Bahraini Dinar (BHD).
	CurrencyCodeBhd CurrencyCode = "BHD"
	// Burundian Franc (BIF).
	CurrencyCodeBif CurrencyCode = "BIF"
	// Belize Dollar (BZD).
	CurrencyCodeBzd CurrencyCode = "BZD"
	// Bermudian Dollar (BMD).
	CurrencyCodeBmd CurrencyCode = "BMD"
	// Bhutanese Ngultrum (BTN).
	CurrencyCodeBtn CurrencyCode = "BTN"
	// Bosnia and Herzegovina Convertible Mark (BAM).
	CurrencyCodeBam CurrencyCode = "BAM"
	// Brazilian Real (BRL).
	CurrencyCodeBrl CurrencyCode = "BRL"
	// Bolivian Boliviano (BOB).
	CurrencyCodeBob CurrencyCode = "BOB"
	// Botswana Pula (BWP).
	CurrencyCodeBwp CurrencyCode = "BWP"
	// Brunei Dollar (BND).
	CurrencyCodeBnd CurrencyCode = "BND"
	// Bulgarian Lev (BGN).
	CurrencyCodeBgn CurrencyCode = "BGN"
	// Burmese Kyat (MMK).
	CurrencyCodeMmk CurrencyCode = "MMK"
	// Cambodian Riel.
	CurrencyCodeKhr CurrencyCode = "KHR"
	// Cape Verdean escudo (CVE).
	CurrencyCodeCve CurrencyCode = "CVE"
	// Cayman Dollars (KYD).
	CurrencyCodeKyd CurrencyCode = "KYD"
	// Central African CFA Franc (XAF).
	CurrencyCodeXaf CurrencyCode = "XAF"
	// Chilean Peso (CLP).
	CurrencyCodeClp CurrencyCode = "CLP"
	// Chinese Yuan Renminbi (CNY).
	CurrencyCodeCny CurrencyCode = "CNY"
	// Colombian Peso (COP).
	CurrencyCodeCop CurrencyCode = "COP"
	// Comorian Franc (KMF).
	CurrencyCodeKmf CurrencyCode = "KMF"
	// Congolese franc (CDF).
	CurrencyCodeCdf CurrencyCode = "CDF"
	// Costa Rican Colones (CRC).
	CurrencyCodeCrc CurrencyCode = "CRC"
	// Croatian Kuna (HRK).
	CurrencyCodeHrk CurrencyCode = "HRK"
	// Czech Koruny (CZK).
	CurrencyCodeCzk CurrencyCode = "CZK"
	// Danish Kroner (DKK).
	CurrencyCodeDkk CurrencyCode = "DKK"
	// Dominican Peso (DOP).
	CurrencyCodeDop CurrencyCode = "DOP"
	// East Caribbean Dollar (XCD).
	CurrencyCodeXcd CurrencyCode = "XCD"
	// Egyptian Pound (EGP).
	CurrencyCodeEgp CurrencyCode = "EGP"
	// Ethiopian Birr (ETB).
	CurrencyCodeEtb CurrencyCode = "ETB"
	// CFP Franc (XPF).
	CurrencyCodeXpf CurrencyCode = "XPF"
	// Fijian Dollars (FJD).
	CurrencyCodeFjd CurrencyCode = "FJD"
	// Gambian Dalasi (GMD).
	CurrencyCodeGmd CurrencyCode = "GMD"
	// Ghanaian Cedi (GHS).
	CurrencyCodeGhs CurrencyCode = "GHS"
	// Guatemalan Quetzal (GTQ).
	CurrencyCodeGtq CurrencyCode = "GTQ"
	// Guyanese Dollar (GYD).
	CurrencyCodeGyd CurrencyCode = "GYD"
	// Georgian Lari (GEL).
	CurrencyCodeGel CurrencyCode = "GEL"
	// Haitian Gourde (HTG).
	CurrencyCodeHtg CurrencyCode = "HTG"
	// Honduran Lempira (HNL).
	CurrencyCodeHnl CurrencyCode = "HNL"
	// Hong Kong Dollars (HKD).
	CurrencyCodeHkd CurrencyCode = "HKD"
	// Hungarian Forint (HUF).
	CurrencyCodeHuf CurrencyCode = "HUF"
	// Icelandic Kronur (ISK).
	CurrencyCodeIsk CurrencyCode = "ISK"
	// Indian Rupees (INR).
	CurrencyCodeInr CurrencyCode = "INR"
	// Indonesian Rupiah (IDR).
	CurrencyCodeIDR CurrencyCode = "IDR"
	// Israeli New Shekel (NIS).
	CurrencyCodeIls CurrencyCode = "ILS"
	// Iraqi Dinar (IQD).
	CurrencyCodeIqd CurrencyCode = "IQD"
	// Jamaican Dollars (JMD).
	CurrencyCodeJmd CurrencyCode = "JMD"
	// Japanese Yen (JPY).
	CurrencyCodeJpy CurrencyCode = "JPY"
	// Jersey Pound.
	CurrencyCodeJep CurrencyCode = "JEP"
	// Jordanian Dinar (JOD).
	CurrencyCodeJod CurrencyCode = "JOD"
	// Kazakhstani Tenge (KZT).
	CurrencyCodeKzt CurrencyCode = "KZT"
	// Kenyan Shilling (KES).
	CurrencyCodeKes CurrencyCode = "KES"
	// Kuwaiti Dinar (KWD).
	CurrencyCodeKwd CurrencyCode = "KWD"
	// Kyrgyzstani Som (KGS).
	CurrencyCodeKgs CurrencyCode = "KGS"
	// Laotian Kip (LAK).
	CurrencyCodeLak CurrencyCode = "LAK"
	// Latvian Lati (LVL).
	CurrencyCodeLvl CurrencyCode = "LVL"
	// Lebanese Pounds (LBP).
	CurrencyCodeLbp CurrencyCode = "LBP"
	// Lesotho Loti (LSL).
	CurrencyCodeLsl CurrencyCode = "LSL"
	// Liberian Dollar (LRD).
	CurrencyCodeLrd CurrencyCode = "LRD"
	// Lithuanian Litai (LTL).
	CurrencyCodeLtl CurrencyCode = "LTL"
	// Malagasy Ariary (MGA).
	CurrencyCodeMga CurrencyCode = "MGA"
	// Macedonia Denar (MKD).
	CurrencyCodeMkd CurrencyCode = "MKD"
	// Macanese Pataca (MOP).
	CurrencyCodeMop CurrencyCode = "MOP"
	// Malawian Kwacha (MWK).
	CurrencyCodeMwk CurrencyCode = "MWK"
	// Maldivian Rufiyaa (MVR).
	CurrencyCodeMvr CurrencyCode = "MVR"
	// Mexican Pesos (MXN).
	CurrencyCodeMxn CurrencyCode = "MXN"
	// Malaysian Ringgits (MYR).
	CurrencyCodeMyr CurrencyCode = "MYR"
	// Mauritian Rupee (MUR).
	CurrencyCodeMur CurrencyCode = "MUR"
	// Moldovan Leu (MDL).
	CurrencyCodeMdl CurrencyCode = "MDL"
	// Moroccan Dirham.
	CurrencyCodeMad CurrencyCode = "MAD"
	// Mongolian Tugrik.
	CurrencyCodeMnt CurrencyCode = "MNT"
	// Mozambican Metical.
	CurrencyCodeMzn CurrencyCode = "MZN"
	// Namibian Dollar.
	CurrencyCodeNad CurrencyCode = "NAD"
	// Nepalese Rupee (NPR).
	CurrencyCodeNpr CurrencyCode = "NPR"
	// Netherlands Antillean Guilder.
	CurrencyCodeAng CurrencyCode = "ANG"
	// New Zealand Dollars (NZD).
	CurrencyCodeNzd CurrencyCode = "NZD"
	// Nicaraguan Córdoba (NIO).
	CurrencyCodeNio CurrencyCode = "NIO"
	// Nigerian Naira (NGN).
	CurrencyCodeNgn CurrencyCode = "NGN"
	// Norwegian Kroner (NOK).
	CurrencyCodeNok CurrencyCode = "NOK"
	// Omani Rial (OMR).
	CurrencyCodeOmr CurrencyCode = "OMR"
	// Panamian Balboa (PAB).
	CurrencyCodePab CurrencyCode = "PAB"
	// Pakistani Rupee (PKR).
	CurrencyCodePkr CurrencyCode = "PKR"
	// Papua New Guinean Kina (PGK).
	CurrencyCodePgk CurrencyCode = "PGK"
	// Paraguayan Guarani (PYG).
	CurrencyCodePyg CurrencyCode = "PYG"
	// Peruvian Nuevo Sol (PEN).
	CurrencyCodePen CurrencyCode = "PEN"
	// Philippine Peso (PHP).
	CurrencyCodePhp CurrencyCode = "PHP"
	// Polish Zlotych (PLN).
	CurrencyCodePln CurrencyCode = "PLN"
	// Qatari Rial (QAR).
	CurrencyCodeQar CurrencyCode = "QAR"
	// Romanian Lei (RON).
	CurrencyCodeRon CurrencyCode = "RON"
	// Russian Rubles (RUB).
	CurrencyCodeRub CurrencyCode = "RUB"
	// Rwandan Franc (RWF).
	CurrencyCodeRwf CurrencyCode = "RWF"
	// Samoan Tala (WST).
	CurrencyCodeWst CurrencyCode = "WST"
	// Saudi Riyal (SAR).
	CurrencyCodeSar CurrencyCode = "SAR"
	// Sao Tome And Principe Dobra (STD).
	CurrencyCodeStd CurrencyCode = "STD"
	// Serbian dinar (RSD).
	CurrencyCodeRsd CurrencyCode = "RSD"
	// Seychellois Rupee (SCR).
	CurrencyCodeScr CurrencyCode = "SCR"
	// Singapore Dollars (SGD).
	CurrencyCodeSgd CurrencyCode = "SGD"
	// Sudanese Pound (SDG).
	CurrencyCodeSdg CurrencyCode = "SDG"
	// Syrian Pound (SYP).
	CurrencyCodeSyp CurrencyCode = "SYP"
	// South African Rand (ZAR).
	CurrencyCodeZar CurrencyCode = "ZAR"
	// South Korean Won (KRW).
	CurrencyCodeKrw CurrencyCode = "KRW"
	// South Sudanese Pound (SSP).
	CurrencyCodeSsp CurrencyCode = "SSP"
	// Solomon Islands Dollar (SBD).
	CurrencyCodeSbd CurrencyCode = "SBD"
	// Sri Lankan Rupees (LKR).
	CurrencyCodeLkr CurrencyCode = "LKR"
	// Surinamese Dollar (SRD).
	CurrencyCodeSrd CurrencyCode = "SRD"
	// Swazi Lilangeni (SZL).
	CurrencyCodeSzl CurrencyCode = "SZL"
	// Swedish Kronor (SEK).
	CurrencyCodeSek CurrencyCode = "SEK"
	// Swiss Francs (CHF).
	CurrencyCodeChf CurrencyCode = "CHF"
	// Taiwan Dollars (TWD).
	CurrencyCodeTwd CurrencyCode = "TWD"
	// Thai baht (THB).
	CurrencyCodeThb CurrencyCode = "THB"
	// Tanzanian Shilling (TZS).
	CurrencyCodeTzs CurrencyCode = "TZS"
	// Trinidad and Tobago Dollars (TTD).
	CurrencyCodeTtd CurrencyCode = "TTD"
	// Tunisian Dinar (TND).
	CurrencyCodeTnd CurrencyCode = "TND"
	// Turkish Lira (TRY).
	CurrencyCodeTry CurrencyCode = "TRY"
	// Turkmenistani Manat (TMT).
	CurrencyCodeTmt CurrencyCode = "TMT"
	// Ugandan Shilling (UGX).
	CurrencyCodeUgx CurrencyCode = "UGX"
	// Ukrainian Hryvnia (UAH).
	CurrencyCodeUah CurrencyCode = "UAH"
	// United Arab Emirates Dirham (AED).
	CurrencyCodeAed CurrencyCode = "AED"
	// Uruguayan Pesos (UYU).
	CurrencyCodeUyu CurrencyCode = "UYU"
	// Uzbekistan som (UZS).
	CurrencyCodeUzs CurrencyCode = "UZS"
	// Vanuatu Vatu (VUV).
	CurrencyCodeVuv CurrencyCode = "VUV"
	// Vietnamese đồng (VND).
	CurrencyCodeVnd CurrencyCode = "VND"
	// West African CFA franc (XOF).
	CurrencyCodeXof CurrencyCode = "XOF"
	// Yemeni Rial (YER).
	CurrencyCodeYer CurrencyCode = "YER"
	// Zambian Kwacha (ZMW).
	CurrencyCodeZmw CurrencyCode = "ZMW"
	// Belarusian Ruble (BYN).
	CurrencyCodeByn CurrencyCode = "BYN"
	// Belarusian Ruble (BYR).
	CurrencyCodeByr CurrencyCode = "BYR"
	// Djiboutian Franc (DJF).
	CurrencyCodeDjf CurrencyCode = "DJF"
	// Eritrean Nakfa (ERN).
	CurrencyCodeErn CurrencyCode = "ERN"
	// Falkland Islands Pounds (FKP).
	CurrencyCodeFkp CurrencyCode = "FKP"
	// Gibraltar Pounds (GIP).
	CurrencyCodeGip CurrencyCode = "GIP"
	// Guinean Franc (GNF).
	CurrencyCodeGnf CurrencyCode = "GNF"
	// Iranian Rial (IRR).
	CurrencyCodeIrr CurrencyCode = "IRR"
	// Kiribati Dollar (KID).
	CurrencyCodeKid CurrencyCode = "KID"
	// Libyan Dinar (LYD).
	CurrencyCodeLyd CurrencyCode = "LYD"
	// Mauritanian Ouguiya (MRU).
	CurrencyCodeMru CurrencyCode = "MRU"
	// Sierra Leonean Leone (SLL).
	CurrencyCodeSll CurrencyCode = "SLL"
	// Saint Helena Pounds (SHP).
	CurrencyCodeShp CurrencyCode = "SHP"
	// Somali Shilling (SOS).
	CurrencyCodeSos CurrencyCode = "SOS"
	// Tajikistani Somoni (TJS).
	CurrencyCodeTjs CurrencyCode = "TJS"
	// Tongan Pa'anga (TOP).
	CurrencyCodeTop CurrencyCode = "TOP"
	// Venezuelan Bolivares (VEF).
	CurrencyCodeVef CurrencyCode = "VEF"
	// Venezuelan Bolivares (VES).
	CurrencyCodeVes CurrencyCode = "VES"
	// Unrecognized currency.
	CurrencyCodeXxx CurrencyCode = "XXX"
)

var AllCurrencyCode = []CurrencyCode{
	CurrencyCodeUsd,
	CurrencyCodeEur,
	CurrencyCodeGbp,
	CurrencyCodeCad,
	CurrencyCodeAfn,
	CurrencyCodeAll,
	CurrencyCodeDzd,
	CurrencyCodeAoa,
	CurrencyCodeArs,
	CurrencyCodeAmd,
	CurrencyCodeAwg,
	CurrencyCodeAud,
	CurrencyCodeBbd,
	CurrencyCodeAzn,
	CurrencyCodeBdt,
	CurrencyCodeBsd,
	CurrencyCodeBhd,
	CurrencyCodeBif,
	CurrencyCodeBzd,
	CurrencyCodeBmd,
	CurrencyCodeBtn,
	CurrencyCodeBam,
	CurrencyCodeBrl,
	CurrencyCodeBob,
	CurrencyCodeBwp,
	CurrencyCodeBnd,
	CurrencyCodeBgn,
	CurrencyCodeMmk,
	CurrencyCodeKhr,
	CurrencyCodeCve,
	CurrencyCodeKyd,
	CurrencyCodeXaf,
	CurrencyCodeClp,
	CurrencyCodeCny,
	CurrencyCodeCop,
	CurrencyCodeKmf,
	CurrencyCodeCdf,
	CurrencyCodeCrc,
	CurrencyCodeHrk,
	CurrencyCodeCzk,
	CurrencyCodeDkk,
	CurrencyCodeDop,
	CurrencyCodeXcd,
	CurrencyCodeEgp,
	CurrencyCodeEtb,
	CurrencyCodeXpf,
	CurrencyCodeFjd,
	CurrencyCodeGmd,
	CurrencyCodeGhs,
	CurrencyCodeGtq,
	CurrencyCodeGyd,
	CurrencyCodeGel,
	CurrencyCodeHtg,
	CurrencyCodeHnl,
	CurrencyCodeHkd,
	CurrencyCodeHuf,
	CurrencyCodeIsk,
	CurrencyCodeInr,
	CurrencyCodeIDR,
	CurrencyCodeIls,
	CurrencyCodeIqd,
	CurrencyCodeJmd,
	CurrencyCodeJpy,
	CurrencyCodeJep,
	CurrencyCodeJod,
	CurrencyCodeKzt,
	CurrencyCodeKes,
	CurrencyCodeKwd,
	CurrencyCodeKgs,
	CurrencyCodeLak,
	CurrencyCodeLvl,
	CurrencyCodeLbp,
	CurrencyCodeLsl,
	CurrencyCodeLrd,
	CurrencyCodeLtl,
	CurrencyCodeMga,
	CurrencyCodeMkd,
	CurrencyCodeMop,
	CurrencyCodeMwk,
	CurrencyCodeMvr,
	CurrencyCodeMxn,
	CurrencyCodeMyr,
	CurrencyCodeMur,
	CurrencyCodeMdl,
	CurrencyCodeMad,
	CurrencyCodeMnt,
	CurrencyCodeMzn,
	CurrencyCodeNad,
	CurrencyCodeNpr,
	CurrencyCodeAng,
	CurrencyCodeNzd,
	CurrencyCodeNio,
	CurrencyCodeNgn,
	CurrencyCodeNok,
	CurrencyCodeOmr,
	CurrencyCodePab,
	CurrencyCodePkr,
	CurrencyCodePgk,
	CurrencyCodePyg,
	CurrencyCodePen,
	CurrencyCodePhp,
	CurrencyCodePln,
	CurrencyCodeQar,
	CurrencyCodeRon,
	CurrencyCodeRub,
	CurrencyCodeRwf,
	CurrencyCodeWst,
	CurrencyCodeSar,
	CurrencyCodeStd,
	CurrencyCodeRsd,
	CurrencyCodeScr,
	CurrencyCodeSgd,
	CurrencyCodeSdg,
	CurrencyCodeSyp,
	CurrencyCodeZar,
	CurrencyCodeKrw,
	CurrencyCodeSsp,
	CurrencyCodeSbd,
	CurrencyCodeLkr,
	CurrencyCodeSrd,
	CurrencyCodeSzl,
	CurrencyCodeSek,
	CurrencyCodeChf,
	CurrencyCodeTwd,
	CurrencyCodeThb,
	CurrencyCodeTzs,
	CurrencyCodeTtd,
	CurrencyCodeTnd,
	CurrencyCodeTry,
	CurrencyCodeTmt,
	CurrencyCodeUgx,
	CurrencyCodeUah,
	CurrencyCodeAed,
	CurrencyCodeUyu,
	CurrencyCodeUzs,
	CurrencyCodeVuv,
	CurrencyCodeVnd,
	CurrencyCodeXof,
	CurrencyCodeYer,
	CurrencyCodeZmw,
	CurrencyCodeByn,
	CurrencyCodeByr,
	CurrencyCodeDjf,
	CurrencyCodeErn,
	CurrencyCodeFkp,
	CurrencyCodeGip,
	CurrencyCodeGnf,
	CurrencyCodeIrr,
	CurrencyCodeKid,
	CurrencyCodeLyd,
	CurrencyCodeMru,
	CurrencyCodeSll,
	CurrencyCodeShp,
	CurrencyCodeSos,
	CurrencyCodeTjs,
	CurrencyCodeTop,
	CurrencyCodeVef,
	CurrencyCodeVes,
	CurrencyCodeXxx,
}

func (e CurrencyCode) IsValid() bool {
	switch e {
	case CurrencyCodeUsd, CurrencyCodeEur, CurrencyCodeGbp, CurrencyCodeCad, CurrencyCodeAfn, CurrencyCodeAll, CurrencyCodeDzd, CurrencyCodeAoa, CurrencyCodeArs, CurrencyCodeAmd, CurrencyCodeAwg, CurrencyCodeAud, CurrencyCodeBbd, CurrencyCodeAzn, CurrencyCodeBdt, CurrencyCodeBsd, CurrencyCodeBhd, CurrencyCodeBif, CurrencyCodeBzd, CurrencyCodeBmd, CurrencyCodeBtn, CurrencyCodeBam, CurrencyCodeBrl, CurrencyCodeBob, CurrencyCodeBwp, CurrencyCodeBnd, CurrencyCodeBgn, CurrencyCodeMmk, CurrencyCodeKhr, CurrencyCodeCve, CurrencyCodeKyd, CurrencyCodeXaf, CurrencyCodeClp, CurrencyCodeCny, CurrencyCodeCop, CurrencyCodeKmf, CurrencyCodeCdf, CurrencyCodeCrc, CurrencyCodeHrk, CurrencyCodeCzk, CurrencyCodeDkk, CurrencyCodeDop, CurrencyCodeXcd, CurrencyCodeEgp, CurrencyCodeEtb, CurrencyCodeXpf, CurrencyCodeFjd, CurrencyCodeGmd, CurrencyCodeGhs, CurrencyCodeGtq, CurrencyCodeGyd, CurrencyCodeGel, CurrencyCodeHtg, CurrencyCodeHnl, CurrencyCodeHkd, CurrencyCodeHuf, CurrencyCodeIsk, CurrencyCodeInr, CurrencyCodeIDR, CurrencyCodeIls, CurrencyCodeIqd, CurrencyCodeJmd, CurrencyCodeJpy, CurrencyCodeJep, CurrencyCodeJod, CurrencyCodeKzt, CurrencyCodeKes, CurrencyCodeKwd, CurrencyCodeKgs, CurrencyCodeLak, CurrencyCodeLvl, CurrencyCodeLbp, CurrencyCodeLsl, CurrencyCodeLrd, CurrencyCodeLtl, CurrencyCodeMga, CurrencyCodeMkd, CurrencyCodeMop, CurrencyCodeMwk, CurrencyCodeMvr, CurrencyCodeMxn, CurrencyCodeMyr, CurrencyCodeMur, CurrencyCodeMdl, CurrencyCodeMad, CurrencyCodeMnt, CurrencyCodeMzn, CurrencyCodeNad, CurrencyCodeNpr, CurrencyCodeAng, CurrencyCodeNzd, CurrencyCodeNio, CurrencyCodeNgn, CurrencyCodeNok, CurrencyCodeOmr, CurrencyCodePab, CurrencyCodePkr, CurrencyCodePgk, CurrencyCodePyg, CurrencyCodePen, CurrencyCodePhp, CurrencyCodePln, CurrencyCodeQar, CurrencyCodeRon, CurrencyCodeRub, CurrencyCodeRwf, CurrencyCodeWst, CurrencyCodeSar, CurrencyCodeStd, CurrencyCodeRsd, CurrencyCodeScr, CurrencyCodeSgd, CurrencyCodeSdg, CurrencyCodeSyp, CurrencyCodeZar, CurrencyCodeKrw, CurrencyCodeSsp, CurrencyCodeSbd, CurrencyCodeLkr, CurrencyCodeSrd, CurrencyCodeSzl, CurrencyCodeSek, CurrencyCodeChf, CurrencyCodeTwd, CurrencyCodeThb, CurrencyCodeTzs, CurrencyCodeTtd, CurrencyCodeTnd, CurrencyCodeTry, CurrencyCodeTmt, CurrencyCodeUgx, CurrencyCodeUah, CurrencyCodeAed, CurrencyCodeUyu, CurrencyCodeUzs, CurrencyCodeVuv, CurrencyCodeVnd, CurrencyCodeXof, CurrencyCodeYer, CurrencyCodeZmw, CurrencyCodeByn, CurrencyCodeByr, CurrencyCodeDjf, CurrencyCodeErn, CurrencyCodeFkp, CurrencyCodeGip, CurrencyCodeGnf, CurrencyCodeIrr, CurrencyCodeKid, CurrencyCodeLyd, CurrencyCodeMru, CurrencyCodeSll, CurrencyCodeShp, CurrencyCodeSos, CurrencyCodeTjs, CurrencyCodeTop, CurrencyCodeVef, CurrencyCodeVes, CurrencyCodeXxx:
		return true
	}
	return false
}

func (e CurrencyCode) String() string {
	return string(e)
}

func (e *CurrencyCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyCode", str)
	}
	return nil
}

func (e CurrencyCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The source that collected the customer's consent to receive marketing materials.
type CustomerConsentCollectedFrom string

const (
	// The customer consent was collected by Shopify.
	//
	CustomerConsentCollectedFromShopify CustomerConsentCollectedFrom = "SHOPIFY"
	// The customer consent was collected outside of Shopify.
	//
	CustomerConsentCollectedFromOther CustomerConsentCollectedFrom = "OTHER"
)

var AllCustomerConsentCollectedFrom = []CustomerConsentCollectedFrom{
	CustomerConsentCollectedFromShopify,
	CustomerConsentCollectedFromOther,
}

func (e CustomerConsentCollectedFrom) IsValid() bool {
	switch e {
	case CustomerConsentCollectedFromShopify, CustomerConsentCollectedFromOther:
		return true
	}
	return false
}

func (e CustomerConsentCollectedFrom) String() string {
	return string(e)
}

func (e *CustomerConsentCollectedFrom) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerConsentCollectedFrom(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerConsentCollectedFrom", str)
	}
	return nil
}

func (e CustomerConsentCollectedFrom) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible marketing states for the customer’s email address.
type CustomerEmailAddressMarketingState string

const (
	// The customer’s email address marketing state is invalid.
	//
	CustomerEmailAddressMarketingStateInvalid CustomerEmailAddressMarketingState = "INVALID"
	// The customer is not subscribed to email marketing.
	//
	CustomerEmailAddressMarketingStateNotSubscribed CustomerEmailAddressMarketingState = "NOT_SUBSCRIBED"
	// The customer is in the process of subscribing to email marketing.
	//
	CustomerEmailAddressMarketingStatePending CustomerEmailAddressMarketingState = "PENDING"
	// The customer is subscribed to email marketing.
	//
	CustomerEmailAddressMarketingStateSubscribed CustomerEmailAddressMarketingState = "SUBSCRIBED"
	// The customer is not subscribed to email marketing but was previously subscribed.
	//
	CustomerEmailAddressMarketingStateUnsubscribed CustomerEmailAddressMarketingState = "UNSUBSCRIBED"
)

var AllCustomerEmailAddressMarketingState = []CustomerEmailAddressMarketingState{
	CustomerEmailAddressMarketingStateInvalid,
	CustomerEmailAddressMarketingStateNotSubscribed,
	CustomerEmailAddressMarketingStatePending,
	CustomerEmailAddressMarketingStateSubscribed,
	CustomerEmailAddressMarketingStateUnsubscribed,
}

func (e CustomerEmailAddressMarketingState) IsValid() bool {
	switch e {
	case CustomerEmailAddressMarketingStateInvalid, CustomerEmailAddressMarketingStateNotSubscribed, CustomerEmailAddressMarketingStatePending, CustomerEmailAddressMarketingStateSubscribed, CustomerEmailAddressMarketingStateUnsubscribed:
		return true
	}
	return false
}

func (e CustomerEmailAddressMarketingState) String() string {
	return string(e)
}

func (e *CustomerEmailAddressMarketingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailAddressMarketingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailAddressMarketingState", str)
	}
	return nil
}

func (e CustomerEmailAddressMarketingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different levels related to whether a customer has opted in to having their opened emails tracked.
type CustomerEmailAddressOpenTrackingLevel string

const (
	// The customer has not specified whether they want to opt in or out of having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelUnknown CustomerEmailAddressOpenTrackingLevel = "UNKNOWN"
	// The customer has opted in to having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelOptedIn CustomerEmailAddressOpenTrackingLevel = "OPTED_IN"
	// The customer has opted out of having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelOptedOut CustomerEmailAddressOpenTrackingLevel = "OPTED_OUT"
)

var AllCustomerEmailAddressOpenTrackingLevel = []CustomerEmailAddressOpenTrackingLevel{
	CustomerEmailAddressOpenTrackingLevelUnknown,
	CustomerEmailAddressOpenTrackingLevelOptedIn,
	CustomerEmailAddressOpenTrackingLevelOptedOut,
}

func (e CustomerEmailAddressOpenTrackingLevel) IsValid() bool {
	switch e {
	case CustomerEmailAddressOpenTrackingLevelUnknown, CustomerEmailAddressOpenTrackingLevelOptedIn, CustomerEmailAddressOpenTrackingLevelOptedOut:
		return true
	}
	return false
}

func (e CustomerEmailAddressOpenTrackingLevel) String() string {
	return string(e)
}

func (e *CustomerEmailAddressOpenTrackingLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailAddressOpenTrackingLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailAddressOpenTrackingLevel", str)
	}
	return nil
}

func (e CustomerEmailAddressOpenTrackingLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the marketing subscription opt in level enabled at the time the customer consented to receive marketing information.
//
// The levels are defined by [the M3AAWG best practices guideline
//
//	document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
type CustomerMarketingOptInLevel string

const (
	// After providing their information, the customer receives marketing information without any
	// intermediate steps.
	//
	CustomerMarketingOptInLevelSingleOptIn CustomerMarketingOptInLevel = "SINGLE_OPT_IN"
	// After providing their information, the customer receives a confirmation and is required to
	// perform a intermediate step before receiving marketing information.
	//
	CustomerMarketingOptInLevelConfirmedOptIn CustomerMarketingOptInLevel = "CONFIRMED_OPT_IN"
	// The customer receives marketing information but how they were opted in is unknown.
	//
	CustomerMarketingOptInLevelUnknown CustomerMarketingOptInLevel = "UNKNOWN"
)

var AllCustomerMarketingOptInLevel = []CustomerMarketingOptInLevel{
	CustomerMarketingOptInLevelSingleOptIn,
	CustomerMarketingOptInLevelConfirmedOptIn,
	CustomerMarketingOptInLevelUnknown,
}

func (e CustomerMarketingOptInLevel) IsValid() bool {
	switch e {
	case CustomerMarketingOptInLevelSingleOptIn, CustomerMarketingOptInLevelConfirmedOptIn, CustomerMarketingOptInLevelUnknown:
		return true
	}
	return false
}

func (e CustomerMarketingOptInLevel) String() string {
	return string(e)
}

func (e *CustomerMarketingOptInLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMarketingOptInLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMarketingOptInLevel", str)
	}
	return nil
}

func (e CustomerMarketingOptInLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
type CustomerPaymentMethodGetUpdateURLUserErrorCode string

const (
	// Payment method doesn't exist.
	CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist CustomerPaymentMethodGetUpdateURLUserErrorCode = "PAYMENT_METHOD_DOES_NOT_EXIST"
	// Invalid payment instrument.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument CustomerPaymentMethodGetUpdateURLUserErrorCode = "INVALID_INSTRUMENT"
	// Too many requests.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests CustomerPaymentMethodGetUpdateURLUserErrorCode = "TOO_MANY_REQUESTS"
	// Customer doesn't exist.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist CustomerPaymentMethodGetUpdateURLUserErrorCode = "CUSTOMER_DOES_NOT_EXIST"
)

var AllCustomerPaymentMethodGetUpdateURLUserErrorCode = []CustomerPaymentMethodGetUpdateURLUserErrorCode{
	CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist,
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist, CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument, CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests, CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist:
		return true
	}
	return false
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodGetUpdateURLUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodGetUpdateURLUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodGetUpdateUrlUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
type CustomerPaymentMethodRemoteUserErrorCode string

const (
	// The input value is invalid.
	CustomerPaymentMethodRemoteUserErrorCodeInvalid CustomerPaymentMethodRemoteUserErrorCode = "INVALID"
	// The input value needs to be blank.
	CustomerPaymentMethodRemoteUserErrorCodePresent CustomerPaymentMethodRemoteUserErrorCode = "PRESENT"
	// The input value is already taken.
	CustomerPaymentMethodRemoteUserErrorCodeTaken CustomerPaymentMethodRemoteUserErrorCode = "TAKEN"
	// Exactly one remote reference is required.
	CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired CustomerPaymentMethodRemoteUserErrorCode = "EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED"
	// Authorize.net is not enabled for subscriptions.
	CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions CustomerPaymentMethodRemoteUserErrorCode = "AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS"
)

var AllCustomerPaymentMethodRemoteUserErrorCode = []CustomerPaymentMethodRemoteUserErrorCode{
	CustomerPaymentMethodRemoteUserErrorCodeInvalid,
	CustomerPaymentMethodRemoteUserErrorCodePresent,
	CustomerPaymentMethodRemoteUserErrorCodeTaken,
	CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired,
	CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions,
}

func (e CustomerPaymentMethodRemoteUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodRemoteUserErrorCodeInvalid, CustomerPaymentMethodRemoteUserErrorCodePresent, CustomerPaymentMethodRemoteUserErrorCodeTaken, CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired, CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions:
		return true
	}
	return false
}

func (e CustomerPaymentMethodRemoteUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodRemoteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodRemoteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodRemoteUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodRemoteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The revocation reason types for a customer payment method.
type CustomerPaymentMethodRevocationReason string

const (
	// The Authorize.net payment gateway is not enabled.
	CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled CustomerPaymentMethodRevocationReason = "AUTHORIZE_NET_GATEWAY_NOT_ENABLED"
	// Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
	CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod CustomerPaymentMethodRevocationReason = "AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD"
	// The credit card failed to update.
	CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard CustomerPaymentMethodRevocationReason = "FAILED_TO_UPDATE_CREDIT_CARD"
	// The payment method was manually revoked.
	CustomerPaymentMethodRevocationReasonManuallyRevoked CustomerPaymentMethodRevocationReason = "MANUALLY_REVOKED"
	// The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method.
	CustomerPaymentMethodRevocationReasonMerged CustomerPaymentMethodRevocationReason = "MERGED"
	// Failed to contact the Stripe API.
	CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError CustomerPaymentMethodRevocationReason = "STRIPE_API_AUTHENTICATION_ERROR"
	// Invalid request. Failed to retrieve payment method from Stripe.
	CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError CustomerPaymentMethodRevocationReason = "STRIPE_API_INVALID_REQUEST_ERROR"
	// The Stripe payment gateway is not enabled.
	CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled CustomerPaymentMethodRevocationReason = "STRIPE_GATEWAY_NOT_ENABLED"
	// Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
	CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod CustomerPaymentMethodRevocationReason = "STRIPE_RETURNED_NO_PAYMENT_METHOD"
	// The Stripe payment method type should be card.
	CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard CustomerPaymentMethodRevocationReason = "STRIPE_PAYMENT_METHOD_NOT_CARD"
)

var AllCustomerPaymentMethodRevocationReason = []CustomerPaymentMethodRevocationReason{
	CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled,
	CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod,
	CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard,
	CustomerPaymentMethodRevocationReasonManuallyRevoked,
	CustomerPaymentMethodRevocationReasonMerged,
	CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError,
	CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError,
	CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled,
	CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod,
	CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard,
}

func (e CustomerPaymentMethodRevocationReason) IsValid() bool {
	switch e {
	case CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled, CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod, CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard, CustomerPaymentMethodRevocationReasonManuallyRevoked, CustomerPaymentMethodRevocationReasonMerged, CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError, CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError, CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled, CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod, CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard:
		return true
	}
	return false
}

func (e CustomerPaymentMethodRevocationReason) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodRevocationReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodRevocationReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodRevocationReason", str)
	}
	return nil
}

func (e CustomerPaymentMethodRevocationReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
type CustomerPaymentMethodUserErrorCode string

const (
	// The input value is invalid.
	CustomerPaymentMethodUserErrorCodeInvalid CustomerPaymentMethodUserErrorCode = "INVALID"
	// The input value needs to be blank.
	CustomerPaymentMethodUserErrorCodePresent CustomerPaymentMethodUserErrorCode = "PRESENT"
	// The input value is already taken.
	CustomerPaymentMethodUserErrorCodeTaken CustomerPaymentMethodUserErrorCode = "TAKEN"
)

var AllCustomerPaymentMethodUserErrorCode = []CustomerPaymentMethodUserErrorCode{
	CustomerPaymentMethodUserErrorCodeInvalid,
	CustomerPaymentMethodUserErrorCodePresent,
	CustomerPaymentMethodUserErrorCodeTaken,
}

func (e CustomerPaymentMethodUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodUserErrorCodeInvalid, CustomerPaymentMethodUserErrorCodePresent, CustomerPaymentMethodUserErrorCodeTaken:
		return true
	}
	return false
}

func (e CustomerPaymentMethodUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible product subscription states for a customer, as defined by the customer's subscription contracts.
type CustomerProductSubscriberStatus string

const (
	// The customer has at least one active subscription contract.
	//
	CustomerProductSubscriberStatusActive CustomerProductSubscriberStatus = "ACTIVE"
	// The customer's last subscription contract was cancelled and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusCancelled CustomerProductSubscriberStatus = "CANCELLED"
	// The customer's last subscription contract expired and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusExpired CustomerProductSubscriberStatus = "EXPIRED"
	// The customer's last subscription contract failed and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusFailed CustomerProductSubscriberStatus = "FAILED"
	// The customer has never had a subscription contract.
	//
	CustomerProductSubscriberStatusNeverSubscribed CustomerProductSubscriberStatus = "NEVER_SUBSCRIBED"
	// The customer has at least one paused subscription contract and there are no other active
	// subscription contracts.
	//
	CustomerProductSubscriberStatusPaused CustomerProductSubscriberStatus = "PAUSED"
)

var AllCustomerProductSubscriberStatus = []CustomerProductSubscriberStatus{
	CustomerProductSubscriberStatusActive,
	CustomerProductSubscriberStatusCancelled,
	CustomerProductSubscriberStatusExpired,
	CustomerProductSubscriberStatusFailed,
	CustomerProductSubscriberStatusNeverSubscribed,
	CustomerProductSubscriberStatusPaused,
}

func (e CustomerProductSubscriberStatus) IsValid() bool {
	switch e {
	case CustomerProductSubscriberStatusActive, CustomerProductSubscriberStatusCancelled, CustomerProductSubscriberStatusExpired, CustomerProductSubscriberStatusFailed, CustomerProductSubscriberStatusNeverSubscribed, CustomerProductSubscriberStatusPaused:
		return true
	}
	return false
}

func (e CustomerProductSubscriberStatus) String() string {
	return string(e)
}

func (e *CustomerProductSubscriberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerProductSubscriberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerProductSubscriberStatus", str)
	}
	return nil
}

func (e CustomerProductSubscriberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CustomerSavedSearch query.
type CustomerSavedSearchSortKeys string

const (
	// Sort by the `name` value.
	CustomerSavedSearchSortKeysName CustomerSavedSearchSortKeys = "NAME"
	// Sort by the `id` value.
	CustomerSavedSearchSortKeysID CustomerSavedSearchSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	CustomerSavedSearchSortKeysRelevance CustomerSavedSearchSortKeys = "RELEVANCE"
)

var AllCustomerSavedSearchSortKeys = []CustomerSavedSearchSortKeys{
	CustomerSavedSearchSortKeysName,
	CustomerSavedSearchSortKeysID,
	CustomerSavedSearchSortKeysRelevance,
}

func (e CustomerSavedSearchSortKeys) IsValid() bool {
	switch e {
	case CustomerSavedSearchSortKeysName, CustomerSavedSearchSortKeysID, CustomerSavedSearchSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSavedSearchSortKeys) String() string {
	return string(e)
}

func (e *CustomerSavedSearchSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSavedSearchSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSavedSearchSortKeys", str)
	}
	return nil
}

func (e CustomerSavedSearchSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
type CustomerSmsMarketingConsentErrorCode string

const (
	// The input value is invalid.
	CustomerSmsMarketingConsentErrorCodeInvalid CustomerSmsMarketingConsentErrorCode = "INVALID"
	// The input value isn't included in the list.
	CustomerSmsMarketingConsentErrorCodeInclusion CustomerSmsMarketingConsentErrorCode = "INCLUSION"
	// Unexpected internal error happened.
	CustomerSmsMarketingConsentErrorCodeInternalError CustomerSmsMarketingConsentErrorCode = "INTERNAL_ERROR"
	// Missing a required argument.
	CustomerSmsMarketingConsentErrorCodeMissingArgument CustomerSmsMarketingConsentErrorCode = "MISSING_ARGUMENT"
)

var AllCustomerSmsMarketingConsentErrorCode = []CustomerSmsMarketingConsentErrorCode{
	CustomerSmsMarketingConsentErrorCodeInvalid,
	CustomerSmsMarketingConsentErrorCodeInclusion,
	CustomerSmsMarketingConsentErrorCodeInternalError,
	CustomerSmsMarketingConsentErrorCodeMissingArgument,
}

func (e CustomerSmsMarketingConsentErrorCode) IsValid() bool {
	switch e {
	case CustomerSmsMarketingConsentErrorCodeInvalid, CustomerSmsMarketingConsentErrorCodeInclusion, CustomerSmsMarketingConsentErrorCodeInternalError, CustomerSmsMarketingConsentErrorCodeMissingArgument:
		return true
	}
	return false
}

func (e CustomerSmsMarketingConsentErrorCode) String() string {
	return string(e)
}

func (e *CustomerSmsMarketingConsentErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSmsMarketingConsentErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSmsMarketingConsentErrorCode", str)
	}
	return nil
}

func (e CustomerSmsMarketingConsentErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid SMS marketing states for a customer’s phone number.
type CustomerSmsMarketingState string

const (
	// The customer hasn't subscribed to SMS marketing.
	//
	CustomerSmsMarketingStateNotSubscribed CustomerSmsMarketingState = "NOT_SUBSCRIBED"
	// The customer is in the process of subscribing to SMS marketing.
	//
	CustomerSmsMarketingStatePending CustomerSmsMarketingState = "PENDING"
	// The customer is subscribed to SMS marketing.
	//
	CustomerSmsMarketingStateSubscribed CustomerSmsMarketingState = "SUBSCRIBED"
	// The customer isn't currently subscribed to SMS marketing but was previously subscribed.
	//
	CustomerSmsMarketingStateUnsubscribed CustomerSmsMarketingState = "UNSUBSCRIBED"
	// The customer's personal data is erased. This value is internally-set and read-only.
	//
	CustomerSmsMarketingStateRedacted CustomerSmsMarketingState = "REDACTED"
)

var AllCustomerSmsMarketingState = []CustomerSmsMarketingState{
	CustomerSmsMarketingStateNotSubscribed,
	CustomerSmsMarketingStatePending,
	CustomerSmsMarketingStateSubscribed,
	CustomerSmsMarketingStateUnsubscribed,
	CustomerSmsMarketingStateRedacted,
}

func (e CustomerSmsMarketingState) IsValid() bool {
	switch e {
	case CustomerSmsMarketingStateNotSubscribed, CustomerSmsMarketingStatePending, CustomerSmsMarketingStateSubscribed, CustomerSmsMarketingStateUnsubscribed, CustomerSmsMarketingStateRedacted:
		return true
	}
	return false
}

func (e CustomerSmsMarketingState) String() string {
	return string(e)
}

func (e *CustomerSmsMarketingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSmsMarketingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSmsMarketingState", str)
	}
	return nil
}

func (e CustomerSmsMarketingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Customer query.
type CustomerSortKeys string

const (
	// Sort by the `created_at` value.
	CustomerSortKeysCreatedAt CustomerSortKeys = "CREATED_AT"
	// Sort by the `name` value.
	CustomerSortKeysName CustomerSortKeys = "NAME"
	// Sort by the `location` value.
	CustomerSortKeysLocation CustomerSortKeys = "LOCATION"
	// Sort by the `orders_count` value.
	CustomerSortKeysOrdersCount CustomerSortKeys = "ORDERS_COUNT"
	// Sort by the `last_order_date` value.
	CustomerSortKeysLastOrderDate CustomerSortKeys = "LAST_ORDER_DATE"
	// Sort by the `total_spent` value.
	CustomerSortKeysTotalSpent CustomerSortKeys = "TOTAL_SPENT"
	// Sort by the `updated_at` value.
	CustomerSortKeysUpdatedAt CustomerSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CustomerSortKeysID CustomerSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	CustomerSortKeysRelevance CustomerSortKeys = "RELEVANCE"
)

var AllCustomerSortKeys = []CustomerSortKeys{
	CustomerSortKeysCreatedAt,
	CustomerSortKeysName,
	CustomerSortKeysLocation,
	CustomerSortKeysOrdersCount,
	CustomerSortKeysLastOrderDate,
	CustomerSortKeysTotalSpent,
	CustomerSortKeysUpdatedAt,
	CustomerSortKeysID,
	CustomerSortKeysRelevance,
}

func (e CustomerSortKeys) IsValid() bool {
	switch e {
	case CustomerSortKeysCreatedAt, CustomerSortKeysName, CustomerSortKeysLocation, CustomerSortKeysOrdersCount, CustomerSortKeysLastOrderDate, CustomerSortKeysTotalSpent, CustomerSortKeysUpdatedAt, CustomerSortKeysID, CustomerSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSortKeys) String() string {
	return string(e)
}

func (e *CustomerSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSortKeys", str)
	}
	return nil
}

func (e CustomerSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the state of a customer's account with a shop.
type CustomerState string

const (
	// The customer declined the email invite to create an account.
	CustomerStateDeclined CustomerState = "DECLINED"
	// The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
	CustomerStateDisabled CustomerState = "DISABLED"
	// The customer has created an account.
	CustomerStateEnabled CustomerState = "ENABLED"
	// The customer has received an email invite to create an account.
	CustomerStateInvited CustomerState = "INVITED"
)

var AllCustomerState = []CustomerState{
	CustomerStateDeclined,
	CustomerStateDisabled,
	CustomerStateEnabled,
	CustomerStateInvited,
}

func (e CustomerState) IsValid() bool {
	switch e {
	case CustomerStateDeclined, CustomerStateDisabled, CustomerStateEnabled, CustomerStateInvited:
		return true
	}
	return false
}

func (e CustomerState) String() string {
	return string(e)
}

func (e *CustomerState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerState", str)
	}
	return nil
}

func (e CustomerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Days of the week from Monday to Sunday.
type DayOfTheWeek string

const (
	// Monday.
	DayOfTheWeekMonday DayOfTheWeek = "MONDAY"
	// Tuesday.
	DayOfTheWeekTuesday DayOfTheWeek = "TUESDAY"
	// Wednesday.
	DayOfTheWeekWednesday DayOfTheWeek = "WEDNESDAY"
	// Thursday.
	DayOfTheWeekThursday DayOfTheWeek = "THURSDAY"
	// Friday.
	DayOfTheWeekFriday DayOfTheWeek = "FRIDAY"
	// Saturday.
	DayOfTheWeekSaturday DayOfTheWeek = "SATURDAY"
	// Sunday.
	DayOfTheWeekSunday DayOfTheWeek = "SUNDAY"
)

var AllDayOfTheWeek = []DayOfTheWeek{
	DayOfTheWeekMonday,
	DayOfTheWeekTuesday,
	DayOfTheWeekWednesday,
	DayOfTheWeekThursday,
	DayOfTheWeekFriday,
	DayOfTheWeekSaturday,
	DayOfTheWeekSunday,
}

func (e DayOfTheWeek) IsValid() bool {
	switch e {
	case DayOfTheWeekMonday, DayOfTheWeekTuesday, DayOfTheWeekWednesday, DayOfTheWeekThursday, DayOfTheWeekFriday, DayOfTheWeekSaturday, DayOfTheWeekSunday:
		return true
	}
	return false
}

func (e DayOfTheWeek) String() string {
	return string(e)
}

func (e *DayOfTheWeek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DayOfTheWeek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DayOfTheWeek", str)
	}
	return nil
}

func (e DayOfTheWeek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DeletionEvent query.
type DeletionEventSortKeys string

const (
	// Sort by the `created_at` value.
	DeletionEventSortKeysCreatedAt DeletionEventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DeletionEventSortKeysID DeletionEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	DeletionEventSortKeysRelevance DeletionEventSortKeys = "RELEVANCE"
)

var AllDeletionEventSortKeys = []DeletionEventSortKeys{
	DeletionEventSortKeysCreatedAt,
	DeletionEventSortKeysID,
	DeletionEventSortKeysRelevance,
}

func (e DeletionEventSortKeys) IsValid() bool {
	switch e {
	case DeletionEventSortKeysCreatedAt, DeletionEventSortKeysID, DeletionEventSortKeysRelevance:
		return true
	}
	return false
}

func (e DeletionEventSortKeys) String() string {
	return string(e)
}

func (e *DeletionEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSortKeys", str)
	}
	return nil
}

func (e DeletionEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported subject types of deletion events.
type DeletionEventSubjectType string

const (
	DeletionEventSubjectTypeCollection DeletionEventSubjectType = "COLLECTION"
	DeletionEventSubjectTypeProduct    DeletionEventSubjectType = "PRODUCT"
)

var AllDeletionEventSubjectType = []DeletionEventSubjectType{
	DeletionEventSubjectTypeCollection,
	DeletionEventSubjectTypeProduct,
}

func (e DeletionEventSubjectType) IsValid() bool {
	switch e {
	case DeletionEventSubjectTypeCollection, DeletionEventSubjectTypeProduct:
		return true
	}
	return false
}

func (e DeletionEventSubjectType) String() string {
	return string(e)
}

func (e *DeletionEventSubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSubjectType", str)
	}
	return nil
}

func (e DeletionEventSubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The field type that the condition will be applied to.
type DeliveryConditionField string

const (
	// The condition will check against the total weight of the order.
	DeliveryConditionFieldTotalWeight DeliveryConditionField = "TOTAL_WEIGHT"
	// The condition will check against the total price of the order.
	DeliveryConditionFieldTotalPrice DeliveryConditionField = "TOTAL_PRICE"
)

var AllDeliveryConditionField = []DeliveryConditionField{
	DeliveryConditionFieldTotalWeight,
	DeliveryConditionFieldTotalPrice,
}

func (e DeliveryConditionField) IsValid() bool {
	switch e {
	case DeliveryConditionFieldTotalWeight, DeliveryConditionFieldTotalPrice:
		return true
	}
	return false
}

func (e DeliveryConditionField) String() string {
	return string(e)
}

func (e *DeliveryConditionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionField", str)
	}
	return nil
}

func (e DeliveryConditionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The operator to use to determine if the condition passes.
type DeliveryConditionOperator string

const (
	// The condition will check whether the field is greater than or equal to the criterion.
	DeliveryConditionOperatorGreaterThanOrEqualTo DeliveryConditionOperator = "GREATER_THAN_OR_EQUAL_TO"
	// The condition will check if the field is less than or equal to the criterion.
	DeliveryConditionOperatorLessThanOrEqualTo DeliveryConditionOperator = "LESS_THAN_OR_EQUAL_TO"
)

var AllDeliveryConditionOperator = []DeliveryConditionOperator{
	DeliveryConditionOperatorGreaterThanOrEqualTo,
	DeliveryConditionOperatorLessThanOrEqualTo,
}

func (e DeliveryConditionOperator) IsValid() bool {
	switch e {
	case DeliveryConditionOperatorGreaterThanOrEqualTo, DeliveryConditionOperatorLessThanOrEqualTo:
		return true
	}
	return false
}

func (e DeliveryConditionOperator) String() string {
	return string(e)
}

func (e *DeliveryConditionOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionOperator", str)
	}
	return nil
}

func (e DeliveryConditionOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
type DeliveryLegacyModeBlockedReason string

const (
	// Multi-Location is disabled.
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled DeliveryLegacyModeBlockedReason = "MULTI_LOCATION_DISABLED"
	// No locations that can fulfill online orders.
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders DeliveryLegacyModeBlockedReason = "NO_LOCATIONS_FULFILLING_ONLINE_ORDERS"
)

var AllDeliveryLegacyModeBlockedReason = []DeliveryLegacyModeBlockedReason{
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled,
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders,
}

func (e DeliveryLegacyModeBlockedReason) IsValid() bool {
	switch e {
	case DeliveryLegacyModeBlockedReasonMultiLocationDisabled, DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders:
		return true
	}
	return false
}

func (e DeliveryLegacyModeBlockedReason) String() string {
	return string(e)
}

func (e *DeliveryLegacyModeBlockedReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryLegacyModeBlockedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryLegacyModeBlockedReason", str)
	}
	return nil
}

func (e DeliveryLegacyModeBlockedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different types of method definitions to filter by.
type DeliveryMethodDefinitionType string

const (
	// A static merchant-defined rate.
	DeliveryMethodDefinitionTypeMerchant DeliveryMethodDefinitionType = "MERCHANT"
	// A dynamic participant rate.
	DeliveryMethodDefinitionTypeParticipant DeliveryMethodDefinitionType = "PARTICIPANT"
)

var AllDeliveryMethodDefinitionType = []DeliveryMethodDefinitionType{
	DeliveryMethodDefinitionTypeMerchant,
	DeliveryMethodDefinitionTypeParticipant,
}

func (e DeliveryMethodDefinitionType) IsValid() bool {
	switch e {
	case DeliveryMethodDefinitionTypeMerchant, DeliveryMethodDefinitionTypeParticipant:
		return true
	}
	return false
}

func (e DeliveryMethodDefinitionType) String() string {
	return string(e)
}

func (e *DeliveryMethodDefinitionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodDefinitionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodDefinitionType", str)
	}
	return nil
}

func (e DeliveryMethodDefinitionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible method types that a delivery method can have.
type DeliveryMethodType string

const (
	// The order is shipped.
	DeliveryMethodTypeShipping DeliveryMethodType = "SHIPPING"
	// The order is picked up by the customer.
	DeliveryMethodTypePickUp DeliveryMethodType = "PICK_UP"
	// No delivery is needed.
	DeliveryMethodTypeNone DeliveryMethodType = "NONE"
	// The order is delivered to a retail store.
	DeliveryMethodTypeRetail DeliveryMethodType = "RETAIL"
	// The order is delivered using a local delivery service.
	DeliveryMethodTypeLocal DeliveryMethodType = "LOCAL"
)

var AllDeliveryMethodType = []DeliveryMethodType{
	DeliveryMethodTypeShipping,
	DeliveryMethodTypePickUp,
	DeliveryMethodTypeNone,
	DeliveryMethodTypeRetail,
	DeliveryMethodTypeLocal,
}

func (e DeliveryMethodType) IsValid() bool {
	switch e {
	case DeliveryMethodTypeShipping, DeliveryMethodTypePickUp, DeliveryMethodTypeNone, DeliveryMethodTypeRetail, DeliveryMethodTypeLocal:
		return true
	}
	return false
}

func (e DeliveryMethodType) String() string {
	return string(e)
}

func (e *DeliveryMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodType", str)
	}
	return nil
}

func (e DeliveryMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
type DigitalWallet string

const (
	// Apple Pay.
	DigitalWalletApplePay DigitalWallet = "APPLE_PAY"
	// Android Pay.
	DigitalWalletAndroidPay DigitalWallet = "ANDROID_PAY"
	// Google Pay.
	DigitalWalletGooglePay DigitalWallet = "GOOGLE_PAY"
	// Shopify Pay.
	DigitalWalletShopifyPay DigitalWallet = "SHOPIFY_PAY"
	// Facebook Pay.
	DigitalWalletFacebookPay DigitalWallet = "FACEBOOK_PAY"
)

var AllDigitalWallet = []DigitalWallet{
	DigitalWalletApplePay,
	DigitalWalletAndroidPay,
	DigitalWalletGooglePay,
	DigitalWalletShopifyPay,
	DigitalWalletFacebookPay,
}

func (e DigitalWallet) IsValid() bool {
	switch e {
	case DigitalWalletApplePay, DigitalWalletAndroidPay, DigitalWalletGooglePay, DigitalWalletShopifyPay, DigitalWalletFacebookPay:
		return true
	}
	return false
}

func (e DigitalWallet) String() string {
	return string(e)
}

func (e *DigitalWallet) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DigitalWallet(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DigitalWallet", str)
	}
	return nil
}

func (e DigitalWallet) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the discount's value is allocated onto its entitled lines.
type DiscountApplicationAllocationMethod string

const (
	// The value is spread across all entitled lines.
	DiscountApplicationAllocationMethodAcross DiscountApplicationAllocationMethod = "ACROSS"
	// The value is applied onto every entitled line.
	DiscountApplicationAllocationMethodEach DiscountApplicationAllocationMethod = "EACH"
	// The value is specifically applied onto a particular line.
	DiscountApplicationAllocationMethodOne DiscountApplicationAllocationMethod = "ONE"
)

var AllDiscountApplicationAllocationMethod = []DiscountApplicationAllocationMethod{
	DiscountApplicationAllocationMethodAcross,
	DiscountApplicationAllocationMethodEach,
	DiscountApplicationAllocationMethodOne,
}

func (e DiscountApplicationAllocationMethod) IsValid() bool {
	switch e {
	case DiscountApplicationAllocationMethodAcross, DiscountApplicationAllocationMethodEach, DiscountApplicationAllocationMethodOne:
		return true
	}
	return false
}

func (e DiscountApplicationAllocationMethod) String() string {
	return string(e)
}

func (e *DiscountApplicationAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationAllocationMethod", str)
	}
	return nil
}

func (e DiscountApplicationAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the discount's value is allocated onto its entitled lines.
type DiscountApplicationLevel string

const (
	// The discount was applied at the order level.
	// Order level discounts are not factored into the discountedUnitPriceSet on line items.
	//
	DiscountApplicationLevelOrder DiscountApplicationLevel = "ORDER"
	// The discount was applied at the line level.
	// Line level discounts are factored into the discountedUnitPriceSet on line items.
	//
	DiscountApplicationLevelLine DiscountApplicationLevel = "LINE"
)

var AllDiscountApplicationLevel = []DiscountApplicationLevel{
	DiscountApplicationLevelOrder,
	DiscountApplicationLevelLine,
}

func (e DiscountApplicationLevel) IsValid() bool {
	switch e {
	case DiscountApplicationLevelOrder, DiscountApplicationLevelLine:
		return true
	}
	return false
}

func (e DiscountApplicationLevel) String() string {
	return string(e)
}

func (e *DiscountApplicationLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationLevel", str)
	}
	return nil
}

func (e DiscountApplicationLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Which lines on the order that the discount is allocated over, of the type
// defined by the Discount Application's target_type.
type DiscountApplicationTargetSelection string

const (
	// The discount is allocated onto all the lines.
	DiscountApplicationTargetSelectionAll DiscountApplicationTargetSelection = "ALL"
	// The discount is allocated onto only the lines it is entitled for.
	DiscountApplicationTargetSelectionEntitled DiscountApplicationTargetSelection = "ENTITLED"
	// The discount is allocated onto explicitly chosen lines.
	DiscountApplicationTargetSelectionExplicit DiscountApplicationTargetSelection = "EXPLICIT"
)

var AllDiscountApplicationTargetSelection = []DiscountApplicationTargetSelection{
	DiscountApplicationTargetSelectionAll,
	DiscountApplicationTargetSelectionEntitled,
	DiscountApplicationTargetSelectionExplicit,
}

func (e DiscountApplicationTargetSelection) IsValid() bool {
	switch e {
	case DiscountApplicationTargetSelectionAll, DiscountApplicationTargetSelectionEntitled, DiscountApplicationTargetSelectionExplicit:
		return true
	}
	return false
}

func (e DiscountApplicationTargetSelection) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetSelection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetSelection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetSelection", str)
	}
	return nil
}

func (e DiscountApplicationTargetSelection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
type DiscountApplicationTargetType string

const (
	// The discount applies onto line items.
	DiscountApplicationTargetTypeLineItem DiscountApplicationTargetType = "LINE_ITEM"
	// The discount applies onto shipping lines.
	DiscountApplicationTargetTypeShippingLine DiscountApplicationTargetType = "SHIPPING_LINE"
)

var AllDiscountApplicationTargetType = []DiscountApplicationTargetType{
	DiscountApplicationTargetTypeLineItem,
	DiscountApplicationTargetTypeShippingLine,
}

func (e DiscountApplicationTargetType) IsValid() bool {
	switch e {
	case DiscountApplicationTargetTypeLineItem, DiscountApplicationTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountApplicationTargetType) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetType", str)
	}
	return nil
}

func (e DiscountApplicationTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DiscountCode query.
type DiscountCodeSortKeys string

const (
	// Sort by the `code` value.
	DiscountCodeSortKeysCode DiscountCodeSortKeys = "CODE"
	// Sort by the `created_at` value.
	DiscountCodeSortKeysCreatedAt DiscountCodeSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DiscountCodeSortKeysID DiscountCodeSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	DiscountCodeSortKeysRelevance DiscountCodeSortKeys = "RELEVANCE"
)

var AllDiscountCodeSortKeys = []DiscountCodeSortKeys{
	DiscountCodeSortKeysCode,
	DiscountCodeSortKeysCreatedAt,
	DiscountCodeSortKeysID,
	DiscountCodeSortKeysRelevance,
}

func (e DiscountCodeSortKeys) IsValid() bool {
	switch e {
	case DiscountCodeSortKeysCode, DiscountCodeSortKeysCreatedAt, DiscountCodeSortKeysID, DiscountCodeSortKeysRelevance:
		return true
	}
	return false
}

func (e DiscountCodeSortKeys) String() string {
	return string(e)
}

func (e *DiscountCodeSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountCodeSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountCodeSortKeys", str)
	}
	return nil
}

func (e DiscountCodeSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DiscountUserError`.
type DiscountErrorCode string

const (
	// The input value is blank.
	DiscountErrorCodeBlank DiscountErrorCode = "BLANK"
	// The input value needs to be blank.
	DiscountErrorCodePresent DiscountErrorCode = "PRESENT"
	// The input value should be equal to the value allowed.
	DiscountErrorCodeEqualTo DiscountErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	DiscountErrorCodeGreaterThan DiscountErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	DiscountErrorCodeGreaterThanOrEqualTo DiscountErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value is invalid.
	DiscountErrorCodeInvalid DiscountErrorCode = "INVALID"
	// The input value should be less than or equal to the maximum value allowed.
	DiscountErrorCodeLessThanOrEqualTo DiscountErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value should be less than the maximum value allowed.
	DiscountErrorCodeLessThan DiscountErrorCode = "LESS_THAN"
	// The input value is already taken.
	DiscountErrorCodeTaken DiscountErrorCode = "TAKEN"
	// The input value is too long.
	DiscountErrorCodeTooLong DiscountErrorCode = "TOO_LONG"
	// The input value is too short.
	DiscountErrorCodeTooShort DiscountErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	DiscountErrorCodeInternalError DiscountErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	DiscountErrorCodeTooManyArguments DiscountErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	DiscountErrorCodeMissingArgument DiscountErrorCode = "MISSING_ARGUMENT"
	// The value is outside the allowed range.
	DiscountErrorCodeValueOutsideRange DiscountErrorCode = "VALUE_OUTSIDE_RANGE"
	// The exceeded maximum allowed value.
	DiscountErrorCodeExceededMax DiscountErrorCode = "EXCEEDED_MAX"
	// Cannot have both the minimum subtotal and quantity.
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent DiscountErrorCode = "MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
	DiscountErrorCodeActivePeriodOverlap DiscountErrorCode = "ACTIVE_PERIOD_OVERLAP"
	// The attribute selection contains conflicting settings.
	DiscountErrorCodeConflict DiscountErrorCode = "CONFLICT"
	// The value is already present through another selection.
	DiscountErrorCodeImplicitDuplicate DiscountErrorCode = "IMPLICIT_DUPLICATE"
	// The input value is already present.
	DiscountErrorCodeDuplicate DiscountErrorCode = "DUPLICATE"
	// The input value isn't included in the list.
	DiscountErrorCodeInclusion DiscountErrorCode = "INCLUSION"
)

var AllDiscountErrorCode = []DiscountErrorCode{
	DiscountErrorCodeBlank,
	DiscountErrorCodePresent,
	DiscountErrorCodeEqualTo,
	DiscountErrorCodeGreaterThan,
	DiscountErrorCodeGreaterThanOrEqualTo,
	DiscountErrorCodeInvalid,
	DiscountErrorCodeLessThanOrEqualTo,
	DiscountErrorCodeLessThan,
	DiscountErrorCodeTaken,
	DiscountErrorCodeTooLong,
	DiscountErrorCodeTooShort,
	DiscountErrorCodeInternalError,
	DiscountErrorCodeTooManyArguments,
	DiscountErrorCodeMissingArgument,
	DiscountErrorCodeValueOutsideRange,
	DiscountErrorCodeExceededMax,
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent,
	DiscountErrorCodeActivePeriodOverlap,
	DiscountErrorCodeConflict,
	DiscountErrorCodeImplicitDuplicate,
	DiscountErrorCodeDuplicate,
	DiscountErrorCodeInclusion,
}

func (e DiscountErrorCode) IsValid() bool {
	switch e {
	case DiscountErrorCodeBlank, DiscountErrorCodePresent, DiscountErrorCodeEqualTo, DiscountErrorCodeGreaterThan, DiscountErrorCodeGreaterThanOrEqualTo, DiscountErrorCodeInvalid, DiscountErrorCodeLessThanOrEqualTo, DiscountErrorCodeLessThan, DiscountErrorCodeTaken, DiscountErrorCodeTooLong, DiscountErrorCodeTooShort, DiscountErrorCodeInternalError, DiscountErrorCodeTooManyArguments, DiscountErrorCodeMissingArgument, DiscountErrorCodeValueOutsideRange, DiscountErrorCodeExceededMax, DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent, DiscountErrorCodeActivePeriodOverlap, DiscountErrorCodeConflict, DiscountErrorCodeImplicitDuplicate, DiscountErrorCodeDuplicate, DiscountErrorCodeInclusion:
		return true
	}
	return false
}

func (e DiscountErrorCode) String() string {
	return string(e)
}

func (e *DiscountErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountErrorCode", str)
	}
	return nil
}

func (e DiscountErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The page type where shareable URL lands.
type DiscountShareableURLTargetType string

const (
	// The home page type.
	DiscountShareableURLTargetTypeHome DiscountShareableURLTargetType = "HOME"
	// The product page type.
	DiscountShareableURLTargetTypeProduct DiscountShareableURLTargetType = "PRODUCT"
	// The collection page type.
	DiscountShareableURLTargetTypeCollection DiscountShareableURLTargetType = "COLLECTION"
)

var AllDiscountShareableURLTargetType = []DiscountShareableURLTargetType{
	DiscountShareableURLTargetTypeHome,
	DiscountShareableURLTargetTypeProduct,
	DiscountShareableURLTargetTypeCollection,
}

func (e DiscountShareableURLTargetType) IsValid() bool {
	switch e {
	case DiscountShareableURLTargetTypeHome, DiscountShareableURLTargetTypeProduct, DiscountShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e DiscountShareableURLTargetType) String() string {
	return string(e)
}

func (e *DiscountShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountShareableUrlTargetType", str)
	}
	return nil
}

func (e DiscountShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the discount.
type DiscountStatus string

const (
	// The discount is active.
	DiscountStatusActive DiscountStatus = "ACTIVE"
	// The discount is expired.
	DiscountStatusExpired DiscountStatus = "EXPIRED"
	// The discount is scheduled.
	DiscountStatusScheduled DiscountStatus = "SCHEDULED"
)

var AllDiscountStatus = []DiscountStatus{
	DiscountStatusActive,
	DiscountStatusExpired,
	DiscountStatusScheduled,
}

func (e DiscountStatus) IsValid() bool {
	switch e {
	case DiscountStatusActive, DiscountStatusExpired, DiscountStatusScheduled:
		return true
	}
	return false
}

func (e DiscountStatus) String() string {
	return string(e)
}

func (e *DiscountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountStatus", str)
	}
	return nil
}

func (e DiscountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line a subscription discount is applied on.
type DiscountTargetType string

const (
	// Line item.
	DiscountTargetTypeLineItem DiscountTargetType = "LINE_ITEM"
	// Shipping line.
	DiscountTargetTypeShippingLine DiscountTargetType = "SHIPPING_LINE"
)

var AllDiscountTargetType = []DiscountTargetType{
	DiscountTargetTypeLineItem,
	DiscountTargetTypeShippingLine,
}

func (e DiscountTargetType) IsValid() bool {
	switch e {
	case DiscountTargetTypeLineItem, DiscountTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountTargetType) String() string {
	return string(e)
}

func (e *DiscountTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountTargetType", str)
	}
	return nil
}

func (e DiscountTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The original type of the discount.
type DiscountType string

const (
	// Manual discount type.
	DiscountTypeManual DiscountType = "MANUAL"
	// Code discount type.
	DiscountTypeCodeDiscount DiscountType = "CODE_DISCOUNT"
)

var AllDiscountType = []DiscountType{
	DiscountTypeManual,
	DiscountTypeCodeDiscount,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypeManual, DiscountTypeCodeDiscount:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses of a dispute.
type DisputeStatus string

const (
	DisputeStatusNeedsResponse  DisputeStatus = "NEEDS_RESPONSE"
	DisputeStatusUnderReview    DisputeStatus = "UNDER_REVIEW"
	DisputeStatusChargeRefunded DisputeStatus = "CHARGE_REFUNDED"
	DisputeStatusAccepted       DisputeStatus = "ACCEPTED"
	DisputeStatusWon            DisputeStatus = "WON"
	DisputeStatusLost           DisputeStatus = "LOST"
)

var AllDisputeStatus = []DisputeStatus{
	DisputeStatusNeedsResponse,
	DisputeStatusUnderReview,
	DisputeStatusChargeRefunded,
	DisputeStatusAccepted,
	DisputeStatusWon,
	DisputeStatusLost,
}

func (e DisputeStatus) IsValid() bool {
	switch e {
	case DisputeStatusNeedsResponse, DisputeStatusUnderReview, DisputeStatusChargeRefunded, DisputeStatusAccepted, DisputeStatusWon, DisputeStatusLost:
		return true
	}
	return false
}

func (e DisputeStatus) String() string {
	return string(e)
}

func (e *DisputeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeStatus", str)
	}
	return nil
}

func (e DisputeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types for a dispute.
type DisputeType string

const (
	// The dispute has turned into a chargeback.
	DisputeTypeChargeback DisputeType = "CHARGEBACK"
	// The dispute is in the inquiry phase.
	DisputeTypeInquiry DisputeType = "INQUIRY"
)

var AllDisputeType = []DisputeType{
	DisputeTypeChargeback,
	DisputeTypeInquiry,
}

func (e DisputeType) IsValid() bool {
	switch e {
	case DisputeTypeChargeback, DisputeTypeInquiry:
		return true
	}
	return false
}

func (e DisputeType) String() string {
	return string(e)
}

func (e *DisputeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeType", str)
	}
	return nil
}

func (e DisputeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid discount types that can be applied to a draft order.
type DraftOrderAppliedDiscountType string

const (
	// A fixed amount in the store's currency.
	DraftOrderAppliedDiscountTypeFixedAmount DraftOrderAppliedDiscountType = "FIXED_AMOUNT"
	// A percentage of the order subtotal.
	DraftOrderAppliedDiscountTypePercentage DraftOrderAppliedDiscountType = "PERCENTAGE"
)

var AllDraftOrderAppliedDiscountType = []DraftOrderAppliedDiscountType{
	DraftOrderAppliedDiscountTypeFixedAmount,
	DraftOrderAppliedDiscountTypePercentage,
}

func (e DraftOrderAppliedDiscountType) IsValid() bool {
	switch e {
	case DraftOrderAppliedDiscountTypeFixedAmount, DraftOrderAppliedDiscountTypePercentage:
		return true
	}
	return false
}

func (e DraftOrderAppliedDiscountType) String() string {
	return string(e)
}

func (e *DraftOrderAppliedDiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderAppliedDiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderAppliedDiscountType", str)
	}
	return nil
}

func (e DraftOrderAppliedDiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DraftOrder query.
type DraftOrderSortKeys string

const (
	// Sort by the `number` value.
	DraftOrderSortKeysNumber DraftOrderSortKeys = "NUMBER"
	// Sort by the `updated_at` value.
	DraftOrderSortKeysUpdatedAt DraftOrderSortKeys = "UPDATED_AT"
	// Sort by the `status` value.
	DraftOrderSortKeysStatus DraftOrderSortKeys = "STATUS"
	// Sort by the `total_price` value.
	DraftOrderSortKeysTotalPrice DraftOrderSortKeys = "TOTAL_PRICE"
	// Sort by the `customer_name` value.
	DraftOrderSortKeysCustomerName DraftOrderSortKeys = "CUSTOMER_NAME"
	// Sort by the `id` value.
	DraftOrderSortKeysID DraftOrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	DraftOrderSortKeysRelevance DraftOrderSortKeys = "RELEVANCE"
)

var AllDraftOrderSortKeys = []DraftOrderSortKeys{
	DraftOrderSortKeysNumber,
	DraftOrderSortKeysUpdatedAt,
	DraftOrderSortKeysStatus,
	DraftOrderSortKeysTotalPrice,
	DraftOrderSortKeysCustomerName,
	DraftOrderSortKeysID,
	DraftOrderSortKeysRelevance,
}

func (e DraftOrderSortKeys) IsValid() bool {
	switch e {
	case DraftOrderSortKeysNumber, DraftOrderSortKeysUpdatedAt, DraftOrderSortKeysStatus, DraftOrderSortKeysTotalPrice, DraftOrderSortKeysCustomerName, DraftOrderSortKeysID, DraftOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e DraftOrderSortKeys) String() string {
	return string(e)
}

func (e *DraftOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderSortKeys", str)
	}
	return nil
}

func (e DraftOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid statuses for a draft order.
type DraftOrderStatus string

const (
	// The draft order has been paid.
	DraftOrderStatusCompleted DraftOrderStatus = "COMPLETED"
	// An invoice for the draft order has been sent to the customer.
	DraftOrderStatusInvoiceSent DraftOrderStatus = "INVOICE_SENT"
	// The draft order is open. It has not been paid, and an invoice hasn't been sent.
	DraftOrderStatusOpen DraftOrderStatus = "OPEN"
)

var AllDraftOrderStatus = []DraftOrderStatus{
	DraftOrderStatusCompleted,
	DraftOrderStatusInvoiceSent,
	DraftOrderStatusOpen,
}

func (e DraftOrderStatus) IsValid() bool {
	switch e {
	case DraftOrderStatusCompleted, DraftOrderStatusInvoiceSent, DraftOrderStatusOpen:
		return true
	}
	return false
}

func (e DraftOrderStatus) String() string {
	return string(e)
}

func (e *DraftOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderStatus", str)
	}
	return nil
}

func (e DraftOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Event query.
type EventSortKeys string

const (
	// Sort by the `created_at` value.
	EventSortKeysCreatedAt EventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	EventSortKeysID EventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	EventSortKeysRelevance EventSortKeys = "RELEVANCE"
)

var AllEventSortKeys = []EventSortKeys{
	EventSortKeysCreatedAt,
	EventSortKeysID,
	EventSortKeysRelevance,
}

func (e EventSortKeys) IsValid() bool {
	switch e {
	case EventSortKeysCreatedAt, EventSortKeysID, EventSortKeysRelevance:
		return true
	}
	return false
}

func (e EventSortKeys) String() string {
	return string(e)
}

func (e *EventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSortKeys", str)
	}
	return nil
}

func (e EventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible content types for a file object.
type FileContentType string

const (
	// A Shopify hosted image.
	FileContentTypeImage FileContentType = "IMAGE"
	// A Shopify-hosted generic file.
	FileContentTypeFile FileContentType = "FILE"
)

var AllFileContentType = []FileContentType{
	FileContentTypeImage,
	FileContentTypeFile,
}

func (e FileContentType) IsValid() bool {
	switch e {
	case FileContentTypeImage, FileContentTypeFile:
		return true
	}
	return false
}

func (e FileContentType) String() string {
	return string(e)
}

func (e *FileContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileContentType", str)
	}
	return nil
}

func (e FileContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The error types for a file.
type FileErrorCode string

const (
	// File error has occurred for an unknown reason.
	FileErrorCodeUnknown FileErrorCode = "UNKNOWN"
	// File could not be processed because the signed URL was invalid.
	FileErrorCodeInvalidSignedURL FileErrorCode = "INVALID_SIGNED_URL"
	// File could not be processed because the image could not be downloaded.
	FileErrorCodeImageDownloadFailure FileErrorCode = "IMAGE_DOWNLOAD_FAILURE"
	// File could not be processed because the image could not be processed.
	FileErrorCodeImageProcessingFailure FileErrorCode = "IMAGE_PROCESSING_FAILURE"
	// File timed out because it is currently being modified by another operation.
	FileErrorCodeMediaTimeoutError FileErrorCode = "MEDIA_TIMEOUT_ERROR"
	// File could not be created because the external video could not be found.
	FileErrorCodeExternalVideoNotFound FileErrorCode = "EXTERNAL_VIDEO_NOT_FOUND"
	// File could not be created because the external video is not listed or is private.
	FileErrorCodeExternalVideoUnlisted FileErrorCode = "EXTERNAL_VIDEO_UNLISTED"
	// File could not be created because the external video has an invalid aspect ratio.
	FileErrorCodeExternalVideoInvalidAspectRatio FileErrorCode = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
	// File could not be created because embed permissions are disabled for this video.
	FileErrorCodeExternalVideoEmbedDisabled FileErrorCode = "EXTERNAL_VIDEO_EMBED_DISABLED"
	// File could not be created because video is either not found or still transcoding.
	FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding FileErrorCode = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
	// File could not be processed because the source could not be downloaded.
	FileErrorCodeGenericFileDownloadFailure FileErrorCode = "GENERIC_FILE_DOWNLOAD_FAILURE"
	// File could not be created because the size is too large.
	FileErrorCodeGenericFileInvalidSize FileErrorCode = "GENERIC_FILE_INVALID_SIZE"
	// File could not be created because the metadata could not be read.
	FileErrorCodeVideoMetadataReadError FileErrorCode = "VIDEO_METADATA_READ_ERROR"
	// File could not be created because it has an invalid file type.
	FileErrorCodeVideoInvalidFiletypeError FileErrorCode = "VIDEO_INVALID_FILETYPE_ERROR"
	// File could not be created because it does not meet the minimum width requirement.
	FileErrorCodeVideoMinWidthError FileErrorCode = "VIDEO_MIN_WIDTH_ERROR"
	// File could not be created because it does not meet the maximum width requirement.
	FileErrorCodeVideoMaxWidthError FileErrorCode = "VIDEO_MAX_WIDTH_ERROR"
	// File could not be created because it does not meet the minimum height requirement.
	FileErrorCodeVideoMinHeightError FileErrorCode = "VIDEO_MIN_HEIGHT_ERROR"
	// File could not be created because it does not meet the maximum height requirement.
	FileErrorCodeVideoMaxHeightError FileErrorCode = "VIDEO_MAX_HEIGHT_ERROR"
	// File could not be created because it does not meet the minimum duration requirement.
	FileErrorCodeVideoMinDurationError FileErrorCode = "VIDEO_MIN_DURATION_ERROR"
	// File could not be created because it does not meet the maximum duration requirement.
	FileErrorCodeVideoMaxDurationError FileErrorCode = "VIDEO_MAX_DURATION_ERROR"
	// Video failed validation.
	FileErrorCodeVideoValidationError FileErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model failed validation.
	FileErrorCodeModel3dValidationError FileErrorCode = "MODEL3D_VALIDATION_ERROR"
	// File could not be created because the model's thumbnail generation failed.
	FileErrorCodeModel3dThumbnailGenerationError FileErrorCode = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
	// File could not be created because the model can't be converted to USDZ format.
	FileErrorCodeModel3dGlbToUsdzConversionError FileErrorCode = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
	// File could not be created because the model file failed processing.
	FileErrorCodeModel3dGlbOutputCreationError FileErrorCode = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
	// File could not be created because the model file failed processing.
	FileErrorCodeModel3dProcessingFailure FileErrorCode = "MODEL3D_PROCESSING_FAILURE"
	// File could not be created because the image is an unsupported file type.
	FileErrorCodeUnsupportedImageFileType FileErrorCode = "UNSUPPORTED_IMAGE_FILE_TYPE"
	// File could not be created because the image size is too large.
	FileErrorCodeInvalidImageFileSize FileErrorCode = "INVALID_IMAGE_FILE_SIZE"
	// File could not be created because the image has an invalid aspect ratio.
	FileErrorCodeInvalidImageAspectRatio FileErrorCode = "INVALID_IMAGE_ASPECT_RATIO"
	// File could not be created because the image's resolution exceeds the max limit.
	FileErrorCodeInvalidImageResolution FileErrorCode = "INVALID_IMAGE_RESOLUTION"
	// File could not be created because the cumulative file storage limit would be exceeded.
	FileErrorCodeFileStorageLimitExceeded FileErrorCode = "FILE_STORAGE_LIMIT_EXCEEDED"
)

var AllFileErrorCode = []FileErrorCode{
	FileErrorCodeUnknown,
	FileErrorCodeInvalidSignedURL,
	FileErrorCodeImageDownloadFailure,
	FileErrorCodeImageProcessingFailure,
	FileErrorCodeMediaTimeoutError,
	FileErrorCodeExternalVideoNotFound,
	FileErrorCodeExternalVideoUnlisted,
	FileErrorCodeExternalVideoInvalidAspectRatio,
	FileErrorCodeExternalVideoEmbedDisabled,
	FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding,
	FileErrorCodeGenericFileDownloadFailure,
	FileErrorCodeGenericFileInvalidSize,
	FileErrorCodeVideoMetadataReadError,
	FileErrorCodeVideoInvalidFiletypeError,
	FileErrorCodeVideoMinWidthError,
	FileErrorCodeVideoMaxWidthError,
	FileErrorCodeVideoMinHeightError,
	FileErrorCodeVideoMaxHeightError,
	FileErrorCodeVideoMinDurationError,
	FileErrorCodeVideoMaxDurationError,
	FileErrorCodeVideoValidationError,
	FileErrorCodeModel3dValidationError,
	FileErrorCodeModel3dThumbnailGenerationError,
	FileErrorCodeModel3dGlbToUsdzConversionError,
	FileErrorCodeModel3dGlbOutputCreationError,
	FileErrorCodeModel3dProcessingFailure,
	FileErrorCodeUnsupportedImageFileType,
	FileErrorCodeInvalidImageFileSize,
	FileErrorCodeInvalidImageAspectRatio,
	FileErrorCodeInvalidImageResolution,
	FileErrorCodeFileStorageLimitExceeded,
}

func (e FileErrorCode) IsValid() bool {
	switch e {
	case FileErrorCodeUnknown, FileErrorCodeInvalidSignedURL, FileErrorCodeImageDownloadFailure, FileErrorCodeImageProcessingFailure, FileErrorCodeMediaTimeoutError, FileErrorCodeExternalVideoNotFound, FileErrorCodeExternalVideoUnlisted, FileErrorCodeExternalVideoInvalidAspectRatio, FileErrorCodeExternalVideoEmbedDisabled, FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding, FileErrorCodeGenericFileDownloadFailure, FileErrorCodeGenericFileInvalidSize, FileErrorCodeVideoMetadataReadError, FileErrorCodeVideoInvalidFiletypeError, FileErrorCodeVideoMinWidthError, FileErrorCodeVideoMaxWidthError, FileErrorCodeVideoMinHeightError, FileErrorCodeVideoMaxHeightError, FileErrorCodeVideoMinDurationError, FileErrorCodeVideoMaxDurationError, FileErrorCodeVideoValidationError, FileErrorCodeModel3dValidationError, FileErrorCodeModel3dThumbnailGenerationError, FileErrorCodeModel3dGlbToUsdzConversionError, FileErrorCodeModel3dGlbOutputCreationError, FileErrorCodeModel3dProcessingFailure, FileErrorCodeUnsupportedImageFileType, FileErrorCodeInvalidImageFileSize, FileErrorCodeInvalidImageAspectRatio, FileErrorCodeInvalidImageResolution, FileErrorCodeFileStorageLimitExceeded:
		return true
	}
	return false
}

func (e FileErrorCode) String() string {
	return string(e)
}

func (e *FileErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileErrorCode", str)
	}
	return nil
}

func (e FileErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the File query.
type FileSortKeys string

const (
	// Sort by the `filename` value.
	FileSortKeysFilename FileSortKeys = "FILENAME"
	// Sort by the `original_upload_size` value.
	FileSortKeysOriginalUploadSize FileSortKeys = "ORIGINAL_UPLOAD_SIZE"
	// Sort by the `created_at` value.
	FileSortKeysCreatedAt FileSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	FileSortKeysID FileSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	FileSortKeysRelevance FileSortKeys = "RELEVANCE"
)

var AllFileSortKeys = []FileSortKeys{
	FileSortKeysFilename,
	FileSortKeysOriginalUploadSize,
	FileSortKeysCreatedAt,
	FileSortKeysID,
	FileSortKeysRelevance,
}

func (e FileSortKeys) IsValid() bool {
	switch e {
	case FileSortKeysFilename, FileSortKeysOriginalUploadSize, FileSortKeysCreatedAt, FileSortKeysID, FileSortKeysRelevance:
		return true
	}
	return false
}

func (e FileSortKeys) String() string {
	return string(e)
}

func (e *FileSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileSortKeys", str)
	}
	return nil
}

func (e FileSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a file object.
type FileStatus string

const (
	// File has been uploaded but hasn't been processed.
	FileStatusUploaded FileStatus = "UPLOADED"
	// File is being processed.
	FileStatusProcessing FileStatus = "PROCESSING"
	// File is ready to be displayed.
	FileStatusReady FileStatus = "READY"
	// File processing has failed.
	FileStatusFailed FileStatus = "FAILED"
)

var AllFileStatus = []FileStatus{
	FileStatusUploaded,
	FileStatusProcessing,
	FileStatusReady,
	FileStatusFailed,
}

func (e FileStatus) IsValid() bool {
	switch e {
	case FileStatusUploaded, FileStatusProcessing, FileStatusReady, FileStatusFailed:
		return true
	}
	return false
}

func (e FileStatus) String() string {
	return string(e)
}

func (e *FileStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileStatus", str)
	}
	return nil
}

func (e FileStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FilesUserError`.
type FilesErrorCode string

const (
	// The input value is invalid.
	FilesErrorCodeInvalid FilesErrorCode = "INVALID"
	// File does not exist.
	FilesErrorCodeFileDoesNotExist FilesErrorCode = "FILE_DOES_NOT_EXIST"
	// File has a pending operation.
	FilesErrorCodeFileLocked FilesErrorCode = "FILE_LOCKED"
	// Specify one argument: search, IDs, or deleteAll.
	FilesErrorCodeTooManyArguments FilesErrorCode = "TOO_MANY_ARGUMENTS"
	// The search term must not be blank.
	FilesErrorCodeBlankSearch FilesErrorCode = "BLANK_SEARCH"
	// At least one argument is required.
	FilesErrorCodeMissingArguments FilesErrorCode = "MISSING_ARGUMENTS"
	// Search query isn't supported.
	FilesErrorCodeInvalidQuery FilesErrorCode = "INVALID_QUERY"
	// The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file.
	FilesErrorCodeUnacceptableUnverifiedTrialAsset FilesErrorCode = "UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET"
	// The file type is not supported.
	FilesErrorCodeUnacceptableAsset FilesErrorCode = "UNACCEPTABLE_ASSET"
	// The file is not supported on trial accounts. Select a plan to upload this file.
	FilesErrorCodeUnacceptableTrialAsset FilesErrorCode = "UNACCEPTABLE_TRIAL_ASSET"
	// The alt value exceeds the maximum limit of 512 characters.
	FilesErrorCodeAltValueLimitExceeded FilesErrorCode = "ALT_VALUE_LIMIT_EXCEEDED"
)

var AllFilesErrorCode = []FilesErrorCode{
	FilesErrorCodeInvalid,
	FilesErrorCodeFileDoesNotExist,
	FilesErrorCodeFileLocked,
	FilesErrorCodeTooManyArguments,
	FilesErrorCodeBlankSearch,
	FilesErrorCodeMissingArguments,
	FilesErrorCodeInvalidQuery,
	FilesErrorCodeUnacceptableUnverifiedTrialAsset,
	FilesErrorCodeUnacceptableAsset,
	FilesErrorCodeUnacceptableTrialAsset,
	FilesErrorCodeAltValueLimitExceeded,
}

func (e FilesErrorCode) IsValid() bool {
	switch e {
	case FilesErrorCodeInvalid, FilesErrorCodeFileDoesNotExist, FilesErrorCodeFileLocked, FilesErrorCodeTooManyArguments, FilesErrorCodeBlankSearch, FilesErrorCodeMissingArguments, FilesErrorCodeInvalidQuery, FilesErrorCodeUnacceptableUnverifiedTrialAsset, FilesErrorCodeUnacceptableAsset, FilesErrorCodeUnacceptableTrialAsset, FilesErrorCodeAltValueLimitExceeded:
		return true
	}
	return false
}

func (e FilesErrorCode) String() string {
	return string(e)
}

func (e *FilesErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilesErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilesErrorCode", str)
	}
	return nil
}

func (e FilesErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The display status of a fulfillment.
type FulfillmentDisplayStatus string

const (
	// Displayed as **Attempted delivery**.
	FulfillmentDisplayStatusAttemptedDelivery FulfillmentDisplayStatus = "ATTEMPTED_DELIVERY"
	// Displayed as **Canceled**.
	FulfillmentDisplayStatusCanceled FulfillmentDisplayStatus = "CANCELED"
	// Displayed as **Confirmed**.
	FulfillmentDisplayStatusConfirmed FulfillmentDisplayStatus = "CONFIRMED"
	// Displayed as **Delivered**.
	FulfillmentDisplayStatusDelivered FulfillmentDisplayStatus = "DELIVERED"
	// Displayed as **Failure**.
	FulfillmentDisplayStatusFailure FulfillmentDisplayStatus = "FAILURE"
	// Displayed as **Fulfilled**.
	FulfillmentDisplayStatusFulfilled FulfillmentDisplayStatus = "FULFILLED"
	// Displayed as **In transit**.
	FulfillmentDisplayStatusInTransit FulfillmentDisplayStatus = "IN_TRANSIT"
	// Displayed as **Label printed**.
	FulfillmentDisplayStatusLabelPrinted FulfillmentDisplayStatus = "LABEL_PRINTED"
	// Displayed as **Label purchased**.
	FulfillmentDisplayStatusLabelPurchased FulfillmentDisplayStatus = "LABEL_PURCHASED"
	// Displayed as **Label voided**.
	FulfillmentDisplayStatusLabelVoided FulfillmentDisplayStatus = "LABEL_VOIDED"
	// Displayed as **Marked as fulfilled**.
	FulfillmentDisplayStatusMarkedAsFulfilled FulfillmentDisplayStatus = "MARKED_AS_FULFILLED"
	// Displayed as **Not delivered**.
	FulfillmentDisplayStatusNotDelivered FulfillmentDisplayStatus = "NOT_DELIVERED"
	// Displayed as **Out for delivery**.
	FulfillmentDisplayStatusOutForDelivery FulfillmentDisplayStatus = "OUT_FOR_DELIVERY"
	// Displayed as **Ready for pickup**.
	FulfillmentDisplayStatusReadyForPickup FulfillmentDisplayStatus = "READY_FOR_PICKUP"
	// Displayed as **Picked up**.
	FulfillmentDisplayStatusPickedUp FulfillmentDisplayStatus = "PICKED_UP"
	// Displayed as **Submitted**.
	FulfillmentDisplayStatusSubmitted FulfillmentDisplayStatus = "SUBMITTED"
)

var AllFulfillmentDisplayStatus = []FulfillmentDisplayStatus{
	FulfillmentDisplayStatusAttemptedDelivery,
	FulfillmentDisplayStatusCanceled,
	FulfillmentDisplayStatusConfirmed,
	FulfillmentDisplayStatusDelivered,
	FulfillmentDisplayStatusFailure,
	FulfillmentDisplayStatusFulfilled,
	FulfillmentDisplayStatusInTransit,
	FulfillmentDisplayStatusLabelPrinted,
	FulfillmentDisplayStatusLabelPurchased,
	FulfillmentDisplayStatusLabelVoided,
	FulfillmentDisplayStatusMarkedAsFulfilled,
	FulfillmentDisplayStatusNotDelivered,
	FulfillmentDisplayStatusOutForDelivery,
	FulfillmentDisplayStatusReadyForPickup,
	FulfillmentDisplayStatusPickedUp,
	FulfillmentDisplayStatusSubmitted,
}

func (e FulfillmentDisplayStatus) IsValid() bool {
	switch e {
	case FulfillmentDisplayStatusAttemptedDelivery, FulfillmentDisplayStatusCanceled, FulfillmentDisplayStatusConfirmed, FulfillmentDisplayStatusDelivered, FulfillmentDisplayStatusFailure, FulfillmentDisplayStatusFulfilled, FulfillmentDisplayStatusInTransit, FulfillmentDisplayStatusLabelPrinted, FulfillmentDisplayStatusLabelPurchased, FulfillmentDisplayStatusLabelVoided, FulfillmentDisplayStatusMarkedAsFulfilled, FulfillmentDisplayStatusNotDelivered, FulfillmentDisplayStatusOutForDelivery, FulfillmentDisplayStatusReadyForPickup, FulfillmentDisplayStatusPickedUp, FulfillmentDisplayStatusSubmitted:
		return true
	}
	return false
}

func (e FulfillmentDisplayStatus) String() string {
	return string(e)
}

func (e *FulfillmentDisplayStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentDisplayStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentDisplayStatus", str)
	}
	return nil
}

func (e FulfillmentDisplayStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentEvent query.
type FulfillmentEventSortKeys string

const (
	// Sort by the `happened_at` value.
	FulfillmentEventSortKeysHappenedAt FulfillmentEventSortKeys = "HAPPENED_AT"
	// Sort by the `id` value.
	FulfillmentEventSortKeysID FulfillmentEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	FulfillmentEventSortKeysRelevance FulfillmentEventSortKeys = "RELEVANCE"
)

var AllFulfillmentEventSortKeys = []FulfillmentEventSortKeys{
	FulfillmentEventSortKeysHappenedAt,
	FulfillmentEventSortKeysID,
	FulfillmentEventSortKeysRelevance,
}

func (e FulfillmentEventSortKeys) IsValid() bool {
	switch e {
	case FulfillmentEventSortKeysHappenedAt, FulfillmentEventSortKeysID, FulfillmentEventSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentEventSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventSortKeys", str)
	}
	return nil
}

func (e FulfillmentEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status that describes a fulfillment or delivery event.
type FulfillmentEventStatus string

const (
	// A shipping label has been purchased.
	FulfillmentEventStatusLabelPurchased FulfillmentEventStatus = "LABEL_PURCHASED"
	// A purchased shipping label has been printed.
	FulfillmentEventStatusLabelPrinted FulfillmentEventStatus = "LABEL_PRINTED"
	// The fulfillment is ready to be picked up.
	FulfillmentEventStatusReadyForPickup FulfillmentEventStatus = "READY_FOR_PICKUP"
	// The fulfillment is confirmed. This is the default value when no other information is available.
	FulfillmentEventStatusConfirmed FulfillmentEventStatus = "CONFIRMED"
	// The fulfillment is in transit.
	FulfillmentEventStatusInTransit FulfillmentEventStatus = "IN_TRANSIT"
	// The fulfillment is out for delivery.
	FulfillmentEventStatusOutForDelivery FulfillmentEventStatus = "OUT_FOR_DELIVERY"
	// A delivery was attempted.
	FulfillmentEventStatusAttemptedDelivery FulfillmentEventStatus = "ATTEMPTED_DELIVERY"
	// The fulfillment was successfully delivered.
	FulfillmentEventStatusDelivered FulfillmentEventStatus = "DELIVERED"
	// The fulfillment was successfully picked up.
	FulfillmentEventStatusPickedUp FulfillmentEventStatus = "PICKED_UP"
	// The fulfillment request failed.
	FulfillmentEventStatusFailure FulfillmentEventStatus = "FAILURE"
)

var AllFulfillmentEventStatus = []FulfillmentEventStatus{
	FulfillmentEventStatusLabelPurchased,
	FulfillmentEventStatusLabelPrinted,
	FulfillmentEventStatusReadyForPickup,
	FulfillmentEventStatusConfirmed,
	FulfillmentEventStatusInTransit,
	FulfillmentEventStatusOutForDelivery,
	FulfillmentEventStatusAttemptedDelivery,
	FulfillmentEventStatusDelivered,
	FulfillmentEventStatusPickedUp,
	FulfillmentEventStatusFailure,
}

func (e FulfillmentEventStatus) IsValid() bool {
	switch e {
	case FulfillmentEventStatusLabelPurchased, FulfillmentEventStatusLabelPrinted, FulfillmentEventStatusReadyForPickup, FulfillmentEventStatusConfirmed, FulfillmentEventStatusInTransit, FulfillmentEventStatusOutForDelivery, FulfillmentEventStatusAttemptedDelivery, FulfillmentEventStatusDelivered, FulfillmentEventStatusPickedUp, FulfillmentEventStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentEventStatus) String() string {
	return string(e)
}

func (e *FulfillmentEventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventStatus", str)
	}
	return nil
}

func (e FulfillmentEventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for a fulfillment hold.
type FulfillmentHoldReason string

const (
	// The fulfillment hold is applied because payment is pending.
	FulfillmentHoldReasonAwaitingPayment FulfillmentHoldReason = "AWAITING_PAYMENT"
	// The fulfillment hold is applied because of a high risk of fraud.
	FulfillmentHoldReasonHighRiskOfFraud FulfillmentHoldReason = "HIGH_RISK_OF_FRAUD"
	// The fulfillment hold is applied because of an incorrect address.
	FulfillmentHoldReasonIncorrectAddress FulfillmentHoldReason = "INCORRECT_ADDRESS"
	// The fulfillment hold is applied because inventory is out of stock.
	FulfillmentHoldReasonInventoryOutOfStock FulfillmentHoldReason = "INVENTORY_OUT_OF_STOCK"
	// The fulfillment hold is applied for another reason.
	FulfillmentHoldReasonOther FulfillmentHoldReason = "OTHER"
)

var AllFulfillmentHoldReason = []FulfillmentHoldReason{
	FulfillmentHoldReasonAwaitingPayment,
	FulfillmentHoldReasonHighRiskOfFraud,
	FulfillmentHoldReasonIncorrectAddress,
	FulfillmentHoldReasonInventoryOutOfStock,
	FulfillmentHoldReasonOther,
}

func (e FulfillmentHoldReason) IsValid() bool {
	switch e {
	case FulfillmentHoldReasonAwaitingPayment, FulfillmentHoldReasonHighRiskOfFraud, FulfillmentHoldReasonIncorrectAddress, FulfillmentHoldReasonInventoryOutOfStock, FulfillmentHoldReasonOther:
		return true
	}
	return false
}

func (e FulfillmentHoldReason) String() string {
	return string(e)
}

func (e *FulfillmentHoldReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentHoldReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentHoldReason", str)
	}
	return nil
}

func (e FulfillmentHoldReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The actions that can be taken on a fulfillment order.
type FulfillmentOrderAction string

const (
	// Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`.
	FulfillmentOrderActionCreateFulfillment FulfillmentOrderAction = "CREATE_FULFILLMENT"
	// Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`.
	FulfillmentOrderActionRequestFulfillment FulfillmentOrderAction = "REQUEST_FULFILLMENT"
	// Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
	FulfillmentOrderActionCancelFulfillmentOrder FulfillmentOrderAction = "CANCEL_FULFILLMENT_ORDER"
	// Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
	FulfillmentOrderActionMove FulfillmentOrderAction = "MOVE"
	// Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`.
	FulfillmentOrderActionRequestCancellation FulfillmentOrderAction = "REQUEST_CANCELLATION"
	// Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
	FulfillmentOrderActionMarkAsOpen FulfillmentOrderAction = "MARK_AS_OPEN"
	// Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`.
	FulfillmentOrderActionReleaseHold FulfillmentOrderAction = "RELEASE_HOLD"
	// Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
	FulfillmentOrderActionHold FulfillmentOrderAction = "HOLD"
	// Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`.
	FulfillmentOrderActionExternal FulfillmentOrderAction = "EXTERNAL"
)

var AllFulfillmentOrderAction = []FulfillmentOrderAction{
	FulfillmentOrderActionCreateFulfillment,
	FulfillmentOrderActionRequestFulfillment,
	FulfillmentOrderActionCancelFulfillmentOrder,
	FulfillmentOrderActionMove,
	FulfillmentOrderActionRequestCancellation,
	FulfillmentOrderActionMarkAsOpen,
	FulfillmentOrderActionReleaseHold,
	FulfillmentOrderActionHold,
	FulfillmentOrderActionExternal,
}

func (e FulfillmentOrderAction) IsValid() bool {
	switch e {
	case FulfillmentOrderActionCreateFulfillment, FulfillmentOrderActionRequestFulfillment, FulfillmentOrderActionCancelFulfillmentOrder, FulfillmentOrderActionMove, FulfillmentOrderActionRequestCancellation, FulfillmentOrderActionMarkAsOpen, FulfillmentOrderActionReleaseHold, FulfillmentOrderActionHold, FulfillmentOrderActionExternal:
		return true
	}
	return false
}

func (e FulfillmentOrderAction) String() string {
	return string(e)
}

func (e *FulfillmentOrderAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAction", str)
	}
	return nil
}

func (e FulfillmentOrderAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The assigment status to be used to filter fulfillment orders.
type FulfillmentOrderAssignmentStatus string

const (
	// Fulfillment orders for which the merchant has requested cancellation of
	// the previously accepted fulfillment request.
	//
	FulfillmentOrderAssignmentStatusCancellationRequested FulfillmentOrderAssignmentStatus = "CANCELLATION_REQUESTED"
	// Fulfillment orders for which the merchant has requested fulfillment.
	//
	FulfillmentOrderAssignmentStatusFulfillmentRequested FulfillmentOrderAssignmentStatus = "FULFILLMENT_REQUESTED"
	// Fulfillment orders for which the merchant's fulfillment request has been accepted.
	// Any number of fulfillments can be created on these fulfillment orders
	// to completely fulfill the requested items.
	//
	FulfillmentOrderAssignmentStatusFulfillmentAccepted FulfillmentOrderAssignmentStatus = "FULFILLMENT_ACCEPTED"
)

var AllFulfillmentOrderAssignmentStatus = []FulfillmentOrderAssignmentStatus{
	FulfillmentOrderAssignmentStatusCancellationRequested,
	FulfillmentOrderAssignmentStatusFulfillmentRequested,
	FulfillmentOrderAssignmentStatusFulfillmentAccepted,
}

func (e FulfillmentOrderAssignmentStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderAssignmentStatusCancellationRequested, FulfillmentOrderAssignmentStatusFulfillmentRequested, FulfillmentOrderAssignmentStatusFulfillmentAccepted:
		return true
	}
	return false
}

func (e FulfillmentOrderAssignmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderAssignmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAssignmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAssignmentStatus", str)
	}
	return nil
}

func (e FulfillmentOrderAssignmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
type FulfillmentOrderHoldUserErrorCode string

const (
	// The fulfillment order could not be found.
	FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderHoldUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
)

var AllFulfillmentOrderHoldUserErrorCode = []FulfillmentOrderHoldUserErrorCode{
	FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound,
}

func (e FulfillmentOrderHoldUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrderHoldUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderHoldUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderHoldUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderHoldUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderHoldUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The kinds of request merchants can make to a fulfillment service.
type FulfillmentOrderMerchantRequestKind string

const (
	// The merchant requests fulfillment for an `OPEN` fulfillment order.
	//
	FulfillmentOrderMerchantRequestKindFulfillmentRequest FulfillmentOrderMerchantRequestKind = "FULFILLMENT_REQUEST"
	// The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
	//
	FulfillmentOrderMerchantRequestKindCancellationRequest FulfillmentOrderMerchantRequestKind = "CANCELLATION_REQUEST"
)

var AllFulfillmentOrderMerchantRequestKind = []FulfillmentOrderMerchantRequestKind{
	FulfillmentOrderMerchantRequestKindFulfillmentRequest,
	FulfillmentOrderMerchantRequestKindCancellationRequest,
}

func (e FulfillmentOrderMerchantRequestKind) IsValid() bool {
	switch e {
	case FulfillmentOrderMerchantRequestKindFulfillmentRequest, FulfillmentOrderMerchantRequestKindCancellationRequest:
		return true
	}
	return false
}

func (e FulfillmentOrderMerchantRequestKind) String() string {
	return string(e)
}

func (e *FulfillmentOrderMerchantRequestKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderMerchantRequestKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderMerchantRequestKind", str)
	}
	return nil
}

func (e FulfillmentOrderMerchantRequestKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
type FulfillmentOrderReleaseHoldUserErrorCode string

const (
	// The fulfillment order was not found.
	FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderReleaseHoldUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
)

var AllFulfillmentOrderReleaseHoldUserErrorCode = []FulfillmentOrderReleaseHoldUserErrorCode{
	FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound,
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderReleaseHoldUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderReleaseHoldUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderReleaseHoldUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The request status of a fulfillment order.
type FulfillmentOrderRequestStatus string

const (
	// The initial request status for the newly-created fulfillment orders. This is the only valid
	// request status for fulfillment orders that aren't assigned to a fulfillment service.
	//
	FulfillmentOrderRequestStatusUnsubmitted FulfillmentOrderRequestStatus = "UNSUBMITTED"
	// The merchant requested fulfillment for this fulfillment order.
	FulfillmentOrderRequestStatusSubmitted FulfillmentOrderRequestStatus = "SUBMITTED"
	// The fulfillment service accepted the merchant's fulfillment request.
	FulfillmentOrderRequestStatusAccepted FulfillmentOrderRequestStatus = "ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment request.
	FulfillmentOrderRequestStatusRejected FulfillmentOrderRequestStatus = "REJECTED"
	// The merchant requested a cancellation of the fulfillment request for this fulfillment order.
	//
	FulfillmentOrderRequestStatusCancellationRequested FulfillmentOrderRequestStatus = "CANCELLATION_REQUESTED"
	// The fulfillment service accepted the merchant's fulfillment cancellation request.
	//
	FulfillmentOrderRequestStatusCancellationAccepted FulfillmentOrderRequestStatus = "CANCELLATION_ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment cancellation request.
	//
	FulfillmentOrderRequestStatusCancellationRejected FulfillmentOrderRequestStatus = "CANCELLATION_REJECTED"
	// The fulfillment service closed the fulfillment order without completing it.
	FulfillmentOrderRequestStatusClosed FulfillmentOrderRequestStatus = "CLOSED"
)

var AllFulfillmentOrderRequestStatus = []FulfillmentOrderRequestStatus{
	FulfillmentOrderRequestStatusUnsubmitted,
	FulfillmentOrderRequestStatusSubmitted,
	FulfillmentOrderRequestStatusAccepted,
	FulfillmentOrderRequestStatusRejected,
	FulfillmentOrderRequestStatusCancellationRequested,
	FulfillmentOrderRequestStatusCancellationAccepted,
	FulfillmentOrderRequestStatusCancellationRejected,
	FulfillmentOrderRequestStatusClosed,
}

func (e FulfillmentOrderRequestStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderRequestStatusUnsubmitted, FulfillmentOrderRequestStatusSubmitted, FulfillmentOrderRequestStatusAccepted, FulfillmentOrderRequestStatusRejected, FulfillmentOrderRequestStatusCancellationRequested, FulfillmentOrderRequestStatusCancellationAccepted, FulfillmentOrderRequestStatusCancellationRejected, FulfillmentOrderRequestStatusClosed:
		return true
	}
	return false
}

func (e FulfillmentOrderRequestStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRequestStatus", str)
	}
	return nil
}

func (e FulfillmentOrderRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
type FulfillmentOrderRescheduleUserErrorCode string

const (
	// Fulfillment order could not be found.
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderRescheduleUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
)

var AllFulfillmentOrderRescheduleUserErrorCode = []FulfillmentOrderRescheduleUserErrorCode{
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound,
}

func (e FulfillmentOrderRescheduleUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrderRescheduleUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderRescheduleUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRescheduleUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRescheduleUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderRescheduleUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentOrder query.
type FulfillmentOrderSortKeys string

const (
	// Sort by the `id` value.
	FulfillmentOrderSortKeysID FulfillmentOrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	FulfillmentOrderSortKeysRelevance FulfillmentOrderSortKeys = "RELEVANCE"
)

var AllFulfillmentOrderSortKeys = []FulfillmentOrderSortKeys{
	FulfillmentOrderSortKeysID,
	FulfillmentOrderSortKeysRelevance,
}

func (e FulfillmentOrderSortKeys) IsValid() bool {
	switch e {
	case FulfillmentOrderSortKeysID, FulfillmentOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentOrderSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderSortKeys", str)
	}
	return nil
}

func (e FulfillmentOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment order.
type FulfillmentOrderStatus string

const (
	// The fulfillment order is ready for fulfillment.
	FulfillmentOrderStatusOpen FulfillmentOrderStatus = "OPEN"
	// The fulfillment order is being processed.
	FulfillmentOrderStatusInProgress FulfillmentOrderStatus = "IN_PROGRESS"
	// The fulfillment order has been cancelled by the merchant.
	FulfillmentOrderStatusCancelled FulfillmentOrderStatus = "CANCELLED"
	// The fulfillment order cannot be completed as requested.
	FulfillmentOrderStatusIncomplete FulfillmentOrderStatus = "INCOMPLETE"
	// The fulfillment order has been completed and closed.
	FulfillmentOrderStatusClosed FulfillmentOrderStatus = "CLOSED"
	// The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
	FulfillmentOrderStatusScheduled FulfillmentOrderStatus = "SCHEDULED"
	// The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released.
	FulfillmentOrderStatusOnHold FulfillmentOrderStatus = "ON_HOLD"
)

var AllFulfillmentOrderStatus = []FulfillmentOrderStatus{
	FulfillmentOrderStatusOpen,
	FulfillmentOrderStatusInProgress,
	FulfillmentOrderStatusCancelled,
	FulfillmentOrderStatusIncomplete,
	FulfillmentOrderStatusClosed,
	FulfillmentOrderStatusScheduled,
	FulfillmentOrderStatusOnHold,
}

func (e FulfillmentOrderStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderStatusOpen, FulfillmentOrderStatusInProgress, FulfillmentOrderStatusCancelled, FulfillmentOrderStatusIncomplete, FulfillmentOrderStatusClosed, FulfillmentOrderStatusScheduled, FulfillmentOrderStatusOnHold:
		return true
	}
	return false
}

func (e FulfillmentOrderStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderStatus", str)
	}
	return nil
}

func (e FulfillmentOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a fulfillment service.
type FulfillmentServiceType string

const (
	// Fulfillment by gift card.
	FulfillmentServiceTypeGiftCard FulfillmentServiceType = "GIFT_CARD"
	// Manual fulfillment by the merchant.
	FulfillmentServiceTypeManual FulfillmentServiceType = "MANUAL"
	// Fullfillment by a third-party fulfillment service.
	FulfillmentServiceTypeThirdParty FulfillmentServiceType = "THIRD_PARTY"
)

var AllFulfillmentServiceType = []FulfillmentServiceType{
	FulfillmentServiceTypeGiftCard,
	FulfillmentServiceTypeManual,
	FulfillmentServiceTypeThirdParty,
}

func (e FulfillmentServiceType) IsValid() bool {
	switch e {
	case FulfillmentServiceTypeGiftCard, FulfillmentServiceTypeManual, FulfillmentServiceTypeThirdParty:
		return true
	}
	return false
}

func (e FulfillmentServiceType) String() string {
	return string(e)
}

func (e *FulfillmentServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentServiceType", str)
	}
	return nil
}

func (e FulfillmentServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment.
type FulfillmentStatus string

const (
	// Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
	//
	FulfillmentStatusPending FulfillmentStatus = "PENDING"
	// The third-party fulfillment service has acknowledged the fulfillment and is processing it.
	//
	FulfillmentStatusOpen FulfillmentStatus = "OPEN"
	// The fulfillment was completed successfully.
	FulfillmentStatusSuccess FulfillmentStatus = "SUCCESS"
	// The fulfillment was canceled.
	FulfillmentStatusCancelled FulfillmentStatus = "CANCELLED"
	// There was an error with the fulfillment request.
	FulfillmentStatusError FulfillmentStatus = "ERROR"
	// The fulfillment request failed.
	FulfillmentStatusFailure FulfillmentStatus = "FAILURE"
)

var AllFulfillmentStatus = []FulfillmentStatus{
	FulfillmentStatusPending,
	FulfillmentStatusOpen,
	FulfillmentStatusSuccess,
	FulfillmentStatusCancelled,
	FulfillmentStatusError,
	FulfillmentStatusFailure,
}

func (e FulfillmentStatus) IsValid() bool {
	switch e {
	case FulfillmentStatusPending, FulfillmentStatusOpen, FulfillmentStatusSuccess, FulfillmentStatusCancelled, FulfillmentStatusError, FulfillmentStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentStatus", str)
	}
	return nil
}

func (e FulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `GiftCardUserError`.
type GiftCardErrorCode string

const (
	// The input value is too long.
	GiftCardErrorCodeTooLong GiftCardErrorCode = "TOO_LONG"
	// The input value is too short.
	GiftCardErrorCodeTooShort GiftCardErrorCode = "TOO_SHORT"
	// The input value is already taken.
	GiftCardErrorCodeTaken GiftCardErrorCode = "TAKEN"
	// The input value is invalid.
	GiftCardErrorCodeInvalid GiftCardErrorCode = "INVALID"
	// Unexpected internal error happened.
	GiftCardErrorCodeInternalError GiftCardErrorCode = "INTERNAL_ERROR"
	// Missing a required argument.
	GiftCardErrorCodeMissingArgument GiftCardErrorCode = "MISSING_ARGUMENT"
	// The input value should be greater than the minimum allowed value.
	GiftCardErrorCodeGreaterThan GiftCardErrorCode = "GREATER_THAN"
)

var AllGiftCardErrorCode = []GiftCardErrorCode{
	GiftCardErrorCodeTooLong,
	GiftCardErrorCodeTooShort,
	GiftCardErrorCodeTaken,
	GiftCardErrorCodeInvalid,
	GiftCardErrorCodeInternalError,
	GiftCardErrorCodeMissingArgument,
	GiftCardErrorCodeGreaterThan,
}

func (e GiftCardErrorCode) IsValid() bool {
	switch e {
	case GiftCardErrorCodeTooLong, GiftCardErrorCodeTooShort, GiftCardErrorCodeTaken, GiftCardErrorCodeInvalid, GiftCardErrorCodeInternalError, GiftCardErrorCodeMissingArgument, GiftCardErrorCodeGreaterThan:
		return true
	}
	return false
}

func (e GiftCardErrorCode) String() string {
	return string(e)
}

func (e *GiftCardErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GiftCardErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GiftCardErrorCode", str)
	}
	return nil
}

func (e GiftCardErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the GiftCard query.
type GiftCardSortKeys string

const (
	// Sort by the `created_at` value.
	GiftCardSortKeysCreatedAt GiftCardSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	GiftCardSortKeysUpdatedAt GiftCardSortKeys = "UPDATED_AT"
	// Sort by the `customer_name` value.
	GiftCardSortKeysCustomerName GiftCardSortKeys = "CUSTOMER_NAME"
	// Sort by the `code` value.
	GiftCardSortKeysCode GiftCardSortKeys = "CODE"
	// Sort by the `balance` value.
	GiftCardSortKeysBalance GiftCardSortKeys = "BALANCE"
	// Sort by the `amount_spent` value.
	GiftCardSortKeysAmountSpent GiftCardSortKeys = "AMOUNT_SPENT"
	// Sort by the `initial_value` value.
	GiftCardSortKeysInitialValue GiftCardSortKeys = "INITIAL_VALUE"
	// Sort by the `disabled_at` value.
	GiftCardSortKeysDisabledAt GiftCardSortKeys = "DISABLED_AT"
	// Sort by the `expires_on` value.
	GiftCardSortKeysExpiresOn GiftCardSortKeys = "EXPIRES_ON"
	// Sort by the `id` value.
	GiftCardSortKeysID GiftCardSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	GiftCardSortKeysRelevance GiftCardSortKeys = "RELEVANCE"
)

var AllGiftCardSortKeys = []GiftCardSortKeys{
	GiftCardSortKeysCreatedAt,
	GiftCardSortKeysUpdatedAt,
	GiftCardSortKeysCustomerName,
	GiftCardSortKeysCode,
	GiftCardSortKeysBalance,
	GiftCardSortKeysAmountSpent,
	GiftCardSortKeysInitialValue,
	GiftCardSortKeysDisabledAt,
	GiftCardSortKeysExpiresOn,
	GiftCardSortKeysID,
	GiftCardSortKeysRelevance,
}

func (e GiftCardSortKeys) IsValid() bool {
	switch e {
	case GiftCardSortKeysCreatedAt, GiftCardSortKeysUpdatedAt, GiftCardSortKeysCustomerName, GiftCardSortKeysCode, GiftCardSortKeysBalance, GiftCardSortKeysAmountSpent, GiftCardSortKeysInitialValue, GiftCardSortKeysDisabledAt, GiftCardSortKeysExpiresOn, GiftCardSortKeysID, GiftCardSortKeysRelevance:
		return true
	}
	return false
}

func (e GiftCardSortKeys) String() string {
	return string(e)
}

func (e *GiftCardSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GiftCardSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GiftCardSortKeys", str)
	}
	return nil
}

func (e GiftCardSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// List of supported image content types.
type ImageContentType string

const (
	// A PNG image.
	ImageContentTypePng ImageContentType = "PNG"
	// A JPG image.
	ImageContentTypeJpg ImageContentType = "JPG"
	// A WEBP image.
	ImageContentTypeWebp ImageContentType = "WEBP"
)

var AllImageContentType = []ImageContentType{
	ImageContentTypePng,
	ImageContentTypeJpg,
	ImageContentTypeWebp,
}

func (e ImageContentType) IsValid() bool {
	switch e {
	case ImageContentTypePng, ImageContentTypeJpg, ImageContentTypeWebp:
		return true
	}
	return false
}

func (e ImageContentType) String() string {
	return string(e)
}

func (e *ImageContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageContentType", str)
	}
	return nil
}

func (e ImageContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The key of a localization extension.
type LocalizationExtensionKey string

const (
	// Extension key 'tax_credential_br' for country BR.
	LocalizationExtensionKeyTaxCredentialBr LocalizationExtensionKey = "TAX_CREDENTIAL_BR"
	// Extension key 'shipping_credential_br' for country BR.
	LocalizationExtensionKeyShippingCredentialBr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_BR"
	// Extension key 'shipping_credential_cn' for country CN.
	LocalizationExtensionKeyShippingCredentialCn LocalizationExtensionKey = "SHIPPING_CREDENTIAL_CN"
	// Extension key 'tax_credential_it' for country IT.
	LocalizationExtensionKeyTaxCredentialIt LocalizationExtensionKey = "TAX_CREDENTIAL_IT"
	// Extension key 'tax_email_it' for country IT.
	LocalizationExtensionKeyTaxEmailIt LocalizationExtensionKey = "TAX_EMAIL_IT"
	// Extension key 'shipping_credential_kr' for country KR.
	LocalizationExtensionKeyShippingCredentialKr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_KR"
)

var AllLocalizationExtensionKey = []LocalizationExtensionKey{
	LocalizationExtensionKeyTaxCredentialBr,
	LocalizationExtensionKeyShippingCredentialBr,
	LocalizationExtensionKeyShippingCredentialCn,
	LocalizationExtensionKeyTaxCredentialIt,
	LocalizationExtensionKeyTaxEmailIt,
	LocalizationExtensionKeyShippingCredentialKr,
}

func (e LocalizationExtensionKey) IsValid() bool {
	switch e {
	case LocalizationExtensionKeyTaxCredentialBr, LocalizationExtensionKeyShippingCredentialBr, LocalizationExtensionKeyShippingCredentialCn, LocalizationExtensionKeyTaxCredentialIt, LocalizationExtensionKeyTaxEmailIt, LocalizationExtensionKeyShippingCredentialKr:
		return true
	}
	return false
}

func (e LocalizationExtensionKey) String() string {
	return string(e)
}

func (e *LocalizationExtensionKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionKey", str)
	}
	return nil
}

func (e LocalizationExtensionKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The purpose of a localization extension.
type LocalizationExtensionPurpose string

const (
	// Extensions that are used for shipping purposes, for example, customs clearance.
	LocalizationExtensionPurposeShipping LocalizationExtensionPurpose = "SHIPPING"
	// Extensions that are used for taxes purposes, for example, invoicing.
	LocalizationExtensionPurposeTax LocalizationExtensionPurpose = "TAX"
)

var AllLocalizationExtensionPurpose = []LocalizationExtensionPurpose{
	LocalizationExtensionPurposeShipping,
	LocalizationExtensionPurposeTax,
}

func (e LocalizationExtensionPurpose) IsValid() bool {
	switch e {
	case LocalizationExtensionPurposeShipping, LocalizationExtensionPurposeTax:
		return true
	}
	return false
}

func (e LocalizationExtensionPurpose) String() string {
	return string(e)
}

func (e *LocalizationExtensionPurpose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionPurpose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionPurpose", str)
	}
	return nil
}

func (e LocalizationExtensionPurpose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Location query.
type LocationSortKeys string

const (
	// Sort by the `name` value.
	LocationSortKeysName LocationSortKeys = "NAME"
	// Sort by the `id` value.
	LocationSortKeysID LocationSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	LocationSortKeysRelevance LocationSortKeys = "RELEVANCE"
)

var AllLocationSortKeys = []LocationSortKeys{
	LocationSortKeysName,
	LocationSortKeysID,
	LocationSortKeysRelevance,
}

func (e LocationSortKeys) IsValid() bool {
	switch e {
	case LocationSortKeysName, LocationSortKeysID, LocationSortKeysRelevance:
		return true
	}
	return false
}

func (e LocationSortKeys) String() string {
	return string(e)
}

func (e *LocationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationSortKeys", str)
	}
	return nil
}

func (e LocationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The error code resulted from the marketing activity extension integration.
type MarketingActivityExtensionAppErrorCode string

const (
	// The shop/user must be onboarded to use the app.
	MarketingActivityExtensionAppErrorCodeNotOnboardedError MarketingActivityExtensionAppErrorCode = "NOT_ONBOARDED_ERROR"
	// The app has returned validation errors.
	MarketingActivityExtensionAppErrorCodeValidationError MarketingActivityExtensionAppErrorCode = "VALIDATION_ERROR"
	// The app is either not responding or returning unexpected data.
	MarketingActivityExtensionAppErrorCodeAPIError MarketingActivityExtensionAppErrorCode = "API_ERROR"
	// The app has returned an error when invoking the platform.
	MarketingActivityExtensionAppErrorCodePlatformError MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR"
	// The app needs to be installed.
	MarketingActivityExtensionAppErrorCodeInstallRequiredError MarketingActivityExtensionAppErrorCode = "INSTALL_REQUIRED_ERROR"
	// The app has returned an error with an info severity level.
	MarketingActivityExtensionAppErrorCodePlatformErrorInfo MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR_INFO"
	// The app has returned an error with a warning severity level.
	MarketingActivityExtensionAppErrorCodePlatformErrorWarning MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR_WARNING"
	// The app has returned an error with a critical severity level.
	MarketingActivityExtensionAppErrorCodePlatformErrorCritical MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR_CRITICAL"
)

var AllMarketingActivityExtensionAppErrorCode = []MarketingActivityExtensionAppErrorCode{
	MarketingActivityExtensionAppErrorCodeNotOnboardedError,
	MarketingActivityExtensionAppErrorCodeValidationError,
	MarketingActivityExtensionAppErrorCodeAPIError,
	MarketingActivityExtensionAppErrorCodePlatformError,
	MarketingActivityExtensionAppErrorCodeInstallRequiredError,
	MarketingActivityExtensionAppErrorCodePlatformErrorInfo,
	MarketingActivityExtensionAppErrorCodePlatformErrorWarning,
	MarketingActivityExtensionAppErrorCodePlatformErrorCritical,
}

func (e MarketingActivityExtensionAppErrorCode) IsValid() bool {
	switch e {
	case MarketingActivityExtensionAppErrorCodeNotOnboardedError, MarketingActivityExtensionAppErrorCodeValidationError, MarketingActivityExtensionAppErrorCodeAPIError, MarketingActivityExtensionAppErrorCodePlatformError, MarketingActivityExtensionAppErrorCodeInstallRequiredError, MarketingActivityExtensionAppErrorCodePlatformErrorInfo, MarketingActivityExtensionAppErrorCodePlatformErrorWarning, MarketingActivityExtensionAppErrorCodePlatformErrorCritical:
		return true
	}
	return false
}

func (e MarketingActivityExtensionAppErrorCode) String() string {
	return string(e)
}

func (e *MarketingActivityExtensionAppErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityExtensionAppErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityExtensionAppErrorCode", str)
	}
	return nil
}

func (e MarketingActivityExtensionAppErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingActivity query.
type MarketingActivitySortKeys string

const (
	// Sort by the `title` value.
	MarketingActivitySortKeysTitle MarketingActivitySortKeys = "TITLE"
	// Sort by the `created_at` value.
	MarketingActivitySortKeysCreatedAt MarketingActivitySortKeys = "CREATED_AT"
	// Sort by the `id` value.
	MarketingActivitySortKeysID MarketingActivitySortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	MarketingActivitySortKeysRelevance MarketingActivitySortKeys = "RELEVANCE"
)

var AllMarketingActivitySortKeys = []MarketingActivitySortKeys{
	MarketingActivitySortKeysTitle,
	MarketingActivitySortKeysCreatedAt,
	MarketingActivitySortKeysID,
	MarketingActivitySortKeysRelevance,
}

func (e MarketingActivitySortKeys) IsValid() bool {
	switch e {
	case MarketingActivitySortKeysTitle, MarketingActivitySortKeysCreatedAt, MarketingActivitySortKeysID, MarketingActivitySortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingActivitySortKeys) String() string {
	return string(e)
}

func (e *MarketingActivitySortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivitySortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivitySortKeys", str)
	}
	return nil
}

func (e MarketingActivitySortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status helps to identify if this marketing activity has been completed, queued, failed etc.
type MarketingActivityStatus string

const (
	// This marketing activity is currently running.
	MarketingActivityStatusActive MarketingActivityStatus = "ACTIVE"
	// This marketing activity is permanently unavailable.
	MarketingActivityStatusDeleted MarketingActivityStatus = "DELETED"
	// This marketing activity was deleted and it was triggered from outside of Shopify.
	MarketingActivityStatusDeletedExternally MarketingActivityStatus = "DELETED_EXTERNALLY"
	// This marketing activity is disconnected and no longer editable.
	MarketingActivityStatusDisconnected MarketingActivityStatus = "DISCONNECTED"
	// This marketing activity has been edited, but it is not yet created.
	MarketingActivityStatusDraft MarketingActivityStatus = "DRAFT"
	// This marketing activity is unable to run.
	MarketingActivityStatusFailed MarketingActivityStatus = "FAILED"
	// This marketing activity has completed running.
	MarketingActivityStatusInactive MarketingActivityStatus = "INACTIVE"
	// This marketing activity is currently not running.
	MarketingActivityStatusPaused MarketingActivityStatus = "PAUSED"
	// This marketing activity is pending creation on the app's marketing platform.
	MarketingActivityStatusPending MarketingActivityStatus = "PENDING"
	// This marketing activity is scheduled to run.
	MarketingActivityStatusScheduled MarketingActivityStatus = "SCHEDULED"
	// The marketing activity's status is unknown.
	MarketingActivityStatusUndefined MarketingActivityStatus = "UNDEFINED"
)

var AllMarketingActivityStatus = []MarketingActivityStatus{
	MarketingActivityStatusActive,
	MarketingActivityStatusDeleted,
	MarketingActivityStatusDeletedExternally,
	MarketingActivityStatusDisconnected,
	MarketingActivityStatusDraft,
	MarketingActivityStatusFailed,
	MarketingActivityStatusInactive,
	MarketingActivityStatusPaused,
	MarketingActivityStatusPending,
	MarketingActivityStatusScheduled,
	MarketingActivityStatusUndefined,
}

func (e MarketingActivityStatus) IsValid() bool {
	switch e {
	case MarketingActivityStatusActive, MarketingActivityStatusDeleted, MarketingActivityStatusDeletedExternally, MarketingActivityStatusDisconnected, MarketingActivityStatusDraft, MarketingActivityStatusFailed, MarketingActivityStatusInactive, MarketingActivityStatusPaused, MarketingActivityStatusPending, MarketingActivityStatusScheduled, MarketingActivityStatusUndefined:
		return true
	}
	return false
}

func (e MarketingActivityStatus) String() string {
	return string(e)
}

func (e *MarketingActivityStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatus", str)
	}
	return nil
}

func (e MarketingActivityStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// StatusBadgeType helps to identify the color of the status badge.
type MarketingActivityStatusBadgeType string

const (
	// This status badge has type default.
	MarketingActivityStatusBadgeTypeDefault MarketingActivityStatusBadgeType = "DEFAULT"
	// This status badge has type success.
	MarketingActivityStatusBadgeTypeSuccess MarketingActivityStatusBadgeType = "SUCCESS"
	// This status badge has type attention.
	MarketingActivityStatusBadgeTypeAttention MarketingActivityStatusBadgeType = "ATTENTION"
	// This status badge has type warning.
	MarketingActivityStatusBadgeTypeWarning MarketingActivityStatusBadgeType = "WARNING"
	// This status badge has type info.
	MarketingActivityStatusBadgeTypeInfo MarketingActivityStatusBadgeType = "INFO"
)

var AllMarketingActivityStatusBadgeType = []MarketingActivityStatusBadgeType{
	MarketingActivityStatusBadgeTypeDefault,
	MarketingActivityStatusBadgeTypeSuccess,
	MarketingActivityStatusBadgeTypeAttention,
	MarketingActivityStatusBadgeTypeWarning,
	MarketingActivityStatusBadgeTypeInfo,
}

func (e MarketingActivityStatusBadgeType) IsValid() bool {
	switch e {
	case MarketingActivityStatusBadgeTypeDefault, MarketingActivityStatusBadgeTypeSuccess, MarketingActivityStatusBadgeTypeAttention, MarketingActivityStatusBadgeTypeWarning, MarketingActivityStatusBadgeTypeInfo:
		return true
	}
	return false
}

func (e MarketingActivityStatusBadgeType) String() string {
	return string(e)
}

func (e *MarketingActivityStatusBadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatusBadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatusBadgeType", str)
	}
	return nil
}

func (e MarketingActivityStatusBadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The budget type for a marketing activity.
type MarketingBudgetBudgetType string

const (
	// A daily budget.
	MarketingBudgetBudgetTypeDaily MarketingBudgetBudgetType = "DAILY"
	// A budget for the lifetime of a marketing activity.
	MarketingBudgetBudgetTypeLifetime MarketingBudgetBudgetType = "LIFETIME"
)

var AllMarketingBudgetBudgetType = []MarketingBudgetBudgetType{
	MarketingBudgetBudgetTypeDaily,
	MarketingBudgetBudgetTypeLifetime,
}

func (e MarketingBudgetBudgetType) IsValid() bool {
	switch e {
	case MarketingBudgetBudgetTypeDaily, MarketingBudgetBudgetTypeLifetime:
		return true
	}
	return false
}

func (e MarketingBudgetBudgetType) String() string {
	return string(e)
}

func (e *MarketingBudgetBudgetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingBudgetBudgetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingBudgetBudgetType", str)
	}
	return nil
}

func (e MarketingBudgetBudgetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available marketing channels for a marketing activity or event. A marketing channel is broad category of marketing, used for reporting aggregation.
type MarketingChannel string

const (
	// Paid search.
	MarketingChannelSearch MarketingChannel = "SEARCH"
	// Displayed ads.
	MarketingChannelDisplay MarketingChannel = "DISPLAY"
	// Social media.
	MarketingChannelSocial MarketingChannel = "SOCIAL"
	// Email.
	MarketingChannelEmail MarketingChannel = "EMAIL"
	// Referral links.
	MarketingChannelReferral MarketingChannel = "REFERRAL"
)

var AllMarketingChannel = []MarketingChannel{
	MarketingChannelSearch,
	MarketingChannelDisplay,
	MarketingChannelSocial,
	MarketingChannelEmail,
	MarketingChannelReferral,
}

func (e MarketingChannel) IsValid() bool {
	switch e {
	case MarketingChannelSearch, MarketingChannelDisplay, MarketingChannelSocial, MarketingChannelEmail, MarketingChannelReferral:
		return true
	}
	return false
}

func (e MarketingChannel) String() string {
	return string(e)
}

func (e *MarketingChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingChannel", str)
	}
	return nil
}

func (e MarketingChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingEvent query.
type MarketingEventSortKeys string

const (
	// Sort by the `started_at` value.
	MarketingEventSortKeysStartedAt MarketingEventSortKeys = "STARTED_AT"
	// Sort by the `id` value.
	MarketingEventSortKeysID MarketingEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	MarketingEventSortKeysRelevance MarketingEventSortKeys = "RELEVANCE"
)

var AllMarketingEventSortKeys = []MarketingEventSortKeys{
	MarketingEventSortKeysStartedAt,
	MarketingEventSortKeysID,
	MarketingEventSortKeysRelevance,
}

func (e MarketingEventSortKeys) IsValid() bool {
	switch e {
	case MarketingEventSortKeysStartedAt, MarketingEventSortKeysID, MarketingEventSortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingEventSortKeys) String() string {
	return string(e)
}

func (e *MarketingEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingEventSortKeys", str)
	}
	return nil
}

func (e MarketingEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available types of marketing event.
type MarketingTactic string

const (
	// An abandoned cart recovery email.
	MarketingTacticAbandonedCart MarketingTactic = "ABANDONED_CART"
	// An ad, such as a Facebook ad.
	MarketingTacticAd MarketingTactic = "AD"
	// An affiliate link.
	MarketingTacticAffiliate MarketingTactic = "AFFILIATE"
	// A link.
	MarketingTacticLink MarketingTactic = "LINK"
	// A loyalty program.
	MarketingTacticLoyalty MarketingTactic = "LOYALTY"
	// A messaging app, such as Facebook Messenger.
	MarketingTacticMessage MarketingTactic = "MESSAGE"
	// A newsletter.
	MarketingTacticNewsletter MarketingTactic = "NEWSLETTER"
	// A notification in the Shopify admin.
	MarketingTacticNotification MarketingTactic = "NOTIFICATION"
	// A blog post.
	MarketingTacticPost MarketingTactic = "POST"
	// A retargeting ad.
	MarketingTacticRetargeting MarketingTactic = "RETARGETING"
	// A transactional email.
	MarketingTacticTransactional MarketingTactic = "TRANSACTIONAL"
	// Search engine optimization.
	MarketingTacticSeo MarketingTactic = "SEO"
	// A direct visit to the online store.
	MarketingTacticDirect MarketingTactic = "DIRECT"
	// A popup on the online store.
	MarketingTacticStorefrontApp MarketingTactic = "STOREFRONT_APP"
	// A display ad.
	MarketingTacticDisplay MarketingTactic = "DISPLAY"
	// Paid search.
	MarketingTacticSearch MarketingTactic = "SEARCH"
	// A follow-up email.
	MarketingTacticFollowUp MarketingTactic = "FOLLOW_UP"
	// A promotional receipt.
	MarketingTacticReceipt MarketingTactic = "RECEIPT"
)

var AllMarketingTactic = []MarketingTactic{
	MarketingTacticAbandonedCart,
	MarketingTacticAd,
	MarketingTacticAffiliate,
	MarketingTacticLink,
	MarketingTacticLoyalty,
	MarketingTacticMessage,
	MarketingTacticNewsletter,
	MarketingTacticNotification,
	MarketingTacticPost,
	MarketingTacticRetargeting,
	MarketingTacticTransactional,
	MarketingTacticSeo,
	MarketingTacticDirect,
	MarketingTacticStorefrontApp,
	MarketingTacticDisplay,
	MarketingTacticSearch,
	MarketingTacticFollowUp,
	MarketingTacticReceipt,
}

func (e MarketingTactic) IsValid() bool {
	switch e {
	case MarketingTacticAbandonedCart, MarketingTacticAd, MarketingTacticAffiliate, MarketingTacticLink, MarketingTacticLoyalty, MarketingTacticMessage, MarketingTacticNewsletter, MarketingTacticNotification, MarketingTacticPost, MarketingTacticRetargeting, MarketingTacticTransactional, MarketingTacticSeo, MarketingTacticDirect, MarketingTacticStorefrontApp, MarketingTacticDisplay, MarketingTacticSearch, MarketingTacticFollowUp, MarketingTacticReceipt:
		return true
	}
	return false
}

func (e MarketingTactic) String() string {
	return string(e)
}

func (e *MarketingTactic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingTactic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingTactic", str)
	}
	return nil
}

func (e MarketingTactic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible content types for a media object.
type MediaContentType string

const (
	// A Shopify hosted video.
	MediaContentTypeVideo MediaContentType = "VIDEO"
	// An externally hosted video.
	MediaContentTypeExternalVideo MediaContentType = "EXTERNAL_VIDEO"
	// A 3d model.
	MediaContentTypeModel3d MediaContentType = "MODEL_3D"
	// A Shopify hosted image.
	MediaContentTypeImage MediaContentType = "IMAGE"
)

var AllMediaContentType = []MediaContentType{
	MediaContentTypeVideo,
	MediaContentTypeExternalVideo,
	MediaContentTypeModel3d,
	MediaContentTypeImage,
}

func (e MediaContentType) IsValid() bool {
	switch e {
	case MediaContentTypeVideo, MediaContentTypeExternalVideo, MediaContentTypeModel3d, MediaContentTypeImage:
		return true
	}
	return false
}

func (e MediaContentType) String() string {
	return string(e)
}

func (e *MediaContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaContentType", str)
	}
	return nil
}

func (e MediaContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error types for media.
type MediaErrorCode string

const (
	// Media error has occured for unknown reason.
	MediaErrorCodeUnknown MediaErrorCode = "UNKNOWN"
	// Media could not be processed because the signed URL was invalid.
	MediaErrorCodeInvalidSignedURL MediaErrorCode = "INVALID_SIGNED_URL"
	// Media could not be processed because the image could not be downloaded.
	MediaErrorCodeImageDownloadFailure MediaErrorCode = "IMAGE_DOWNLOAD_FAILURE"
	// Media could not be processed because the image could not be processed.
	MediaErrorCodeImageProcessingFailure MediaErrorCode = "IMAGE_PROCESSING_FAILURE"
	// Media timed out because it is currently being modified by another operation.
	MediaErrorCodeMediaTimeoutError MediaErrorCode = "MEDIA_TIMEOUT_ERROR"
	// Media could not be created because the external video could not be found.
	MediaErrorCodeExternalVideoNotFound MediaErrorCode = "EXTERNAL_VIDEO_NOT_FOUND"
	// Media could not be created because the external video is not listed or is private.
	MediaErrorCodeExternalVideoUnlisted MediaErrorCode = "EXTERNAL_VIDEO_UNLISTED"
	// Media could not be created because the external video has an invalid aspect ratio.
	MediaErrorCodeExternalVideoInvalidAspectRatio MediaErrorCode = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
	// Media could not be created because embed permissions are disabled for this video.
	MediaErrorCodeExternalVideoEmbedDisabled MediaErrorCode = "EXTERNAL_VIDEO_EMBED_DISABLED"
	// Media could not be created because video is either not found or still transcoding.
	MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding MediaErrorCode = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
	// File could not be processed because the source could not be downloaded.
	MediaErrorCodeGenericFileDownloadFailure MediaErrorCode = "GENERIC_FILE_DOWNLOAD_FAILURE"
	// File could not be created because the size is too large.
	MediaErrorCodeGenericFileInvalidSize MediaErrorCode = "GENERIC_FILE_INVALID_SIZE"
	// Media could not be created because the metadata could not be read.
	MediaErrorCodeVideoMetadataReadError MediaErrorCode = "VIDEO_METADATA_READ_ERROR"
	// Media could not be created because it has an invalid file type.
	MediaErrorCodeVideoInvalidFiletypeError MediaErrorCode = "VIDEO_INVALID_FILETYPE_ERROR"
	// Media could not be created because it does not meet the minimum width requirement.
	MediaErrorCodeVideoMinWidthError MediaErrorCode = "VIDEO_MIN_WIDTH_ERROR"
	// Media could not be created because it does not meet the maximum width requirement.
	MediaErrorCodeVideoMaxWidthError MediaErrorCode = "VIDEO_MAX_WIDTH_ERROR"
	// Media could not be created because it does not meet the minimum height requirement.
	MediaErrorCodeVideoMinHeightError MediaErrorCode = "VIDEO_MIN_HEIGHT_ERROR"
	// Media could not be created because it does not meet the maximum height requirement.
	MediaErrorCodeVideoMaxHeightError MediaErrorCode = "VIDEO_MAX_HEIGHT_ERROR"
	// Media could not be created because it does not meet the minimum duration requirement.
	MediaErrorCodeVideoMinDurationError MediaErrorCode = "VIDEO_MIN_DURATION_ERROR"
	// Media could not be created because it does not meet the maximum duration requirement.
	MediaErrorCodeVideoMaxDurationError MediaErrorCode = "VIDEO_MAX_DURATION_ERROR"
	// Video failed validation.
	MediaErrorCodeVideoValidationError MediaErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model failed validation.
	MediaErrorCodeModel3dValidationError MediaErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Media could not be created because the model's thumbnail generation failed.
	MediaErrorCodeModel3dThumbnailGenerationError MediaErrorCode = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
	// Media could not be created because the model can't be converted to USDZ format.
	MediaErrorCodeModel3dGlbToUsdzConversionError MediaErrorCode = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
	// Media could not be created because the model file failed processing.
	MediaErrorCodeModel3dGlbOutputCreationError MediaErrorCode = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
	// Media could not be created because the model file failed processing.
	MediaErrorCodeModel3dProcessingFailure MediaErrorCode = "MODEL3D_PROCESSING_FAILURE"
	// Media could not be created because the image is an unsupported file type.
	MediaErrorCodeUnsupportedImageFileType MediaErrorCode = "UNSUPPORTED_IMAGE_FILE_TYPE"
	// Media could not be created because the image size is too large.
	MediaErrorCodeInvalidImageFileSize MediaErrorCode = "INVALID_IMAGE_FILE_SIZE"
	// Media could not be created because the image has an invalid aspect ratio.
	MediaErrorCodeInvalidImageAspectRatio MediaErrorCode = "INVALID_IMAGE_ASPECT_RATIO"
	// Media could not be created because the image's resolution exceeds the max limit.
	MediaErrorCodeInvalidImageResolution MediaErrorCode = "INVALID_IMAGE_RESOLUTION"
	// Media could not be created because the cumulative file storage limit would be exceeded.
	MediaErrorCodeFileStorageLimitExceeded MediaErrorCode = "FILE_STORAGE_LIMIT_EXCEEDED"
)

var AllMediaErrorCode = []MediaErrorCode{
	MediaErrorCodeUnknown,
	MediaErrorCodeInvalidSignedURL,
	MediaErrorCodeImageDownloadFailure,
	MediaErrorCodeImageProcessingFailure,
	MediaErrorCodeMediaTimeoutError,
	MediaErrorCodeExternalVideoNotFound,
	MediaErrorCodeExternalVideoUnlisted,
	MediaErrorCodeExternalVideoInvalidAspectRatio,
	MediaErrorCodeExternalVideoEmbedDisabled,
	MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding,
	MediaErrorCodeGenericFileDownloadFailure,
	MediaErrorCodeGenericFileInvalidSize,
	MediaErrorCodeVideoMetadataReadError,
	MediaErrorCodeVideoInvalidFiletypeError,
	MediaErrorCodeVideoMinWidthError,
	MediaErrorCodeVideoMaxWidthError,
	MediaErrorCodeVideoMinHeightError,
	MediaErrorCodeVideoMaxHeightError,
	MediaErrorCodeVideoMinDurationError,
	MediaErrorCodeVideoMaxDurationError,
	MediaErrorCodeVideoValidationError,
	MediaErrorCodeModel3dValidationError,
	MediaErrorCodeModel3dThumbnailGenerationError,
	MediaErrorCodeModel3dGlbToUsdzConversionError,
	MediaErrorCodeModel3dGlbOutputCreationError,
	MediaErrorCodeModel3dProcessingFailure,
	MediaErrorCodeUnsupportedImageFileType,
	MediaErrorCodeInvalidImageFileSize,
	MediaErrorCodeInvalidImageAspectRatio,
	MediaErrorCodeInvalidImageResolution,
	MediaErrorCodeFileStorageLimitExceeded,
}

func (e MediaErrorCode) IsValid() bool {
	switch e {
	case MediaErrorCodeUnknown, MediaErrorCodeInvalidSignedURL, MediaErrorCodeImageDownloadFailure, MediaErrorCodeImageProcessingFailure, MediaErrorCodeMediaTimeoutError, MediaErrorCodeExternalVideoNotFound, MediaErrorCodeExternalVideoUnlisted, MediaErrorCodeExternalVideoInvalidAspectRatio, MediaErrorCodeExternalVideoEmbedDisabled, MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding, MediaErrorCodeGenericFileDownloadFailure, MediaErrorCodeGenericFileInvalidSize, MediaErrorCodeVideoMetadataReadError, MediaErrorCodeVideoInvalidFiletypeError, MediaErrorCodeVideoMinWidthError, MediaErrorCodeVideoMaxWidthError, MediaErrorCodeVideoMinHeightError, MediaErrorCodeVideoMaxHeightError, MediaErrorCodeVideoMinDurationError, MediaErrorCodeVideoMaxDurationError, MediaErrorCodeVideoValidationError, MediaErrorCodeModel3dValidationError, MediaErrorCodeModel3dThumbnailGenerationError, MediaErrorCodeModel3dGlbToUsdzConversionError, MediaErrorCodeModel3dGlbOutputCreationError, MediaErrorCodeModel3dProcessingFailure, MediaErrorCodeUnsupportedImageFileType, MediaErrorCodeInvalidImageFileSize, MediaErrorCodeInvalidImageAspectRatio, MediaErrorCodeInvalidImageResolution, MediaErrorCodeFileStorageLimitExceeded:
		return true
	}
	return false
}

func (e MediaErrorCode) String() string {
	return string(e)
}

func (e *MediaErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaErrorCode", str)
	}
	return nil
}

func (e MediaErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Host for a Media Resource.
type MediaHost string

const (
	// Host for YouTube embedded videos.
	MediaHostYoutube MediaHost = "YOUTUBE"
	// Host for Vimeo embedded videos.
	MediaHostVimeo MediaHost = "VIMEO"
)

var AllMediaHost = []MediaHost{
	MediaHostYoutube,
	MediaHostVimeo,
}

func (e MediaHost) IsValid() bool {
	switch e {
	case MediaHostYoutube, MediaHostVimeo:
		return true
	}
	return false
}

func (e MediaHost) String() string {
	return string(e)
}

func (e *MediaHost) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaHost(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaHost", str)
	}
	return nil
}

func (e MediaHost) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media preview image.
type MediaPreviewImageStatus string

const (
	// Preview image is uploaded but not yet processed.
	MediaPreviewImageStatusUploaded MediaPreviewImageStatus = "UPLOADED"
	// Preview image is being processed.
	MediaPreviewImageStatusProcessing MediaPreviewImageStatus = "PROCESSING"
	// Preview image is ready to be displayed.
	MediaPreviewImageStatusReady MediaPreviewImageStatus = "READY"
	// Preview image processing has failed.
	MediaPreviewImageStatusFailed MediaPreviewImageStatus = "FAILED"
)

var AllMediaPreviewImageStatus = []MediaPreviewImageStatus{
	MediaPreviewImageStatusUploaded,
	MediaPreviewImageStatusProcessing,
	MediaPreviewImageStatusReady,
	MediaPreviewImageStatusFailed,
}

func (e MediaPreviewImageStatus) IsValid() bool {
	switch e {
	case MediaPreviewImageStatusUploaded, MediaPreviewImageStatusProcessing, MediaPreviewImageStatusReady, MediaPreviewImageStatusFailed:
		return true
	}
	return false
}

func (e MediaPreviewImageStatus) String() string {
	return string(e)
}

func (e *MediaPreviewImageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaPreviewImageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaPreviewImageStatus", str)
	}
	return nil
}

func (e MediaPreviewImageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media object.
type MediaStatus string

const (
	// Media has been uploaded but not yet processed.
	MediaStatusUploaded MediaStatus = "UPLOADED"
	// Media is being processed.
	MediaStatusProcessing MediaStatus = "PROCESSING"
	// Media is ready to be displayed.
	MediaStatusReady MediaStatus = "READY"
	// Media processing has failed.
	MediaStatusFailed MediaStatus = "FAILED"
)

var AllMediaStatus = []MediaStatus{
	MediaStatusUploaded,
	MediaStatusProcessing,
	MediaStatusReady,
	MediaStatusFailed,
}

func (e MediaStatus) IsValid() bool {
	switch e {
	case MediaStatusUploaded, MediaStatusProcessing, MediaStatusReady, MediaStatusFailed:
		return true
	}
	return false
}

func (e MediaStatus) String() string {
	return string(e)
}

func (e *MediaStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaStatus", str)
	}
	return nil
}

func (e MediaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MediaUserError`.
type MediaUserErrorCode string

const (
	// The input value is invalid.
	MediaUserErrorCodeInvalid MediaUserErrorCode = "INVALID"
	// The input value is blank.
	MediaUserErrorCodeBlank MediaUserErrorCode = "BLANK"
	// Video validation failed.
	MediaUserErrorCodeVideoValidationError MediaUserErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model validation failed.
	MediaUserErrorCodeModel3dValidationError MediaUserErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Video creation throttle was exceeded.
	MediaUserErrorCodeVideoThrottleExceeded MediaUserErrorCode = "VIDEO_THROTTLE_EXCEEDED"
	// Model3d creation throttle was exceeded.
	MediaUserErrorCodeModel3dThrottleExceeded MediaUserErrorCode = "MODEL3D_THROTTLE_EXCEEDED"
	// Exceeded the limit of media per product.
	MediaUserErrorCodeProductMediaLimitExceeded MediaUserErrorCode = "PRODUCT_MEDIA_LIMIT_EXCEEDED"
	// Exceeded the limit of media per shop.
	MediaUserErrorCodeShopMediaLimitExceeded MediaUserErrorCode = "SHOP_MEDIA_LIMIT_EXCEEDED"
	// Product does not exist.
	MediaUserErrorCodeProductDoesNotExist MediaUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Media does not exist.
	MediaUserErrorCodeMediaDoesNotExist MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST"
	// Media does not exist on the given product.
	MediaUserErrorCodeMediaDoesNotExistOnProduct MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST_ON_PRODUCT"
	// Only one mediaId is allowed per variant-media input pair.
	MediaUserErrorCodeTooManyMediaPerInputPair MediaUserErrorCode = "TOO_MANY_MEDIA_PER_INPUT_PAIR"
	// Exceeded the maximum number of 100 variant-media pairs per mutation call.
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded MediaUserErrorCode = "MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED"
	// Invalid media type.
	MediaUserErrorCodeInvalidMediaType MediaUserErrorCode = "INVALID_MEDIA_TYPE"
	// Variant specified in more than one pair.
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes MediaUserErrorCode = "PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES"
	// Variant does not exist on the given product.
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct MediaUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT"
	// Non-ready media are not supported.
	MediaUserErrorCodeNonReadyMedia MediaUserErrorCode = "NON_READY_MEDIA"
	// Product variant already has attached media.
	MediaUserErrorCodeProductVariantAlreadyHasMedia MediaUserErrorCode = "PRODUCT_VARIANT_ALREADY_HAS_MEDIA"
	// The specified media is not attached to the specified variant.
	MediaUserErrorCodeMediaIsNotAttachedToVariant MediaUserErrorCode = "MEDIA_IS_NOT_ATTACHED_TO_VARIANT"
	// Media cannot be modified. It is currently being modified by another operation.
	MediaUserErrorCodeMediaCannotBeModified MediaUserErrorCode = "MEDIA_CANNOT_BE_MODIFIED"
)

var AllMediaUserErrorCode = []MediaUserErrorCode{
	MediaUserErrorCodeInvalid,
	MediaUserErrorCodeBlank,
	MediaUserErrorCodeVideoValidationError,
	MediaUserErrorCodeModel3dValidationError,
	MediaUserErrorCodeVideoThrottleExceeded,
	MediaUserErrorCodeModel3dThrottleExceeded,
	MediaUserErrorCodeProductMediaLimitExceeded,
	MediaUserErrorCodeShopMediaLimitExceeded,
	MediaUserErrorCodeProductDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExistOnProduct,
	MediaUserErrorCodeTooManyMediaPerInputPair,
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded,
	MediaUserErrorCodeInvalidMediaType,
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes,
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct,
	MediaUserErrorCodeNonReadyMedia,
	MediaUserErrorCodeProductVariantAlreadyHasMedia,
	MediaUserErrorCodeMediaIsNotAttachedToVariant,
	MediaUserErrorCodeMediaCannotBeModified,
}

func (e MediaUserErrorCode) IsValid() bool {
	switch e {
	case MediaUserErrorCodeInvalid, MediaUserErrorCodeBlank, MediaUserErrorCodeVideoValidationError, MediaUserErrorCodeModel3dValidationError, MediaUserErrorCodeVideoThrottleExceeded, MediaUserErrorCodeModel3dThrottleExceeded, MediaUserErrorCodeProductMediaLimitExceeded, MediaUserErrorCodeShopMediaLimitExceeded, MediaUserErrorCodeProductDoesNotExist, MediaUserErrorCodeMediaDoesNotExist, MediaUserErrorCodeMediaDoesNotExistOnProduct, MediaUserErrorCodeTooManyMediaPerInputPair, MediaUserErrorCodeMaximumVariantMediaPairsExceeded, MediaUserErrorCodeInvalidMediaType, MediaUserErrorCodeProductVariantSpecifiedMultipleTimes, MediaUserErrorCodeProductVariantDoesNotExistOnProduct, MediaUserErrorCodeNonReadyMedia, MediaUserErrorCodeProductVariantAlreadyHasMedia, MediaUserErrorCodeMediaIsNotAttachedToVariant, MediaUserErrorCodeMediaCannotBeModified:
		return true
	}
	return false
}

func (e MediaUserErrorCode) String() string {
	return string(e)
}

func (e *MediaUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaUserErrorCode", str)
	}
	return nil
}

func (e MediaUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Warning types for media.
type MediaWarningCode string

const (
	// 3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct.
	MediaWarningCodeModelSmallPhysicalSize MediaWarningCode = "MODEL_SMALL_PHYSICAL_SIZE"
	// 3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct.
	MediaWarningCodeModelLargePhysicalSize MediaWarningCode = "MODEL_LARGE_PHYSICAL_SIZE"
)

var AllMediaWarningCode = []MediaWarningCode{
	MediaWarningCodeModelSmallPhysicalSize,
	MediaWarningCodeModelLargePhysicalSize,
}

func (e MediaWarningCode) IsValid() bool {
	switch e {
	case MediaWarningCodeModelSmallPhysicalSize, MediaWarningCodeModelLargePhysicalSize:
		return true
	}
	return false
}

func (e MediaWarningCode) String() string {
	return string(e)
}

func (e *MediaWarningCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaWarningCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaWarningCode", str)
	}
	return nil
}

func (e MediaWarningCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
type MetafieldDefinitionCreateUserErrorCode string

const (
	// The input value is invalid.
	MetafieldDefinitionCreateUserErrorCodeInvalid MetafieldDefinitionCreateUserErrorCode = "INVALID"
	// The input value isn't included in the list.
	MetafieldDefinitionCreateUserErrorCodeInclusion MetafieldDefinitionCreateUserErrorCode = "INCLUSION"
	// The input value needs to be blank.
	MetafieldDefinitionCreateUserErrorCodePresent MetafieldDefinitionCreateUserErrorCode = "PRESENT"
	// The input value is already taken.
	MetafieldDefinitionCreateUserErrorCodeTaken MetafieldDefinitionCreateUserErrorCode = "TAKEN"
	// The input value is too long.
	MetafieldDefinitionCreateUserErrorCodeTooLong MetafieldDefinitionCreateUserErrorCode = "TOO_LONG"
	// The input value is too short.
	MetafieldDefinitionCreateUserErrorCodeTooShort MetafieldDefinitionCreateUserErrorCode = "TOO_SHORT"
	// The definition limit per owner type has exceeded.
	MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded MetafieldDefinitionCreateUserErrorCode = "RESOURCE_TYPE_LIMIT_EXCEEDED"
	// The maximum limit of definitions per owner type has exceeded.
	MetafieldDefinitionCreateUserErrorCodeLimitExceeded MetafieldDefinitionCreateUserErrorCode = "LIMIT_EXCEEDED"
	// An invalid option.
	MetafieldDefinitionCreateUserErrorCodeInvalidOption MetafieldDefinitionCreateUserErrorCode = "INVALID_OPTION"
	// A duplicate option.
	MetafieldDefinitionCreateUserErrorCodeDuplicateOption MetafieldDefinitionCreateUserErrorCode = "DUPLICATE_OPTION"
	// This namespace and key combination is reserved for standard definitions.
	MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey MetafieldDefinitionCreateUserErrorCode = "RESERVED_NAMESPACE_KEY"
	// The pinned limit has been reached for the owner type.
	MetafieldDefinitionCreateUserErrorCodePinnedLimitReached MetafieldDefinitionCreateUserErrorCode = "PINNED_LIMIT_REACHED"
	// This namespace and key combination is already in use for a set of your metafields.
	MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists MetafieldDefinitionCreateUserErrorCode = "UNSTRUCTURED_ALREADY_EXISTS"
)

var AllMetafieldDefinitionCreateUserErrorCode = []MetafieldDefinitionCreateUserErrorCode{
	MetafieldDefinitionCreateUserErrorCodeInvalid,
	MetafieldDefinitionCreateUserErrorCodeInclusion,
	MetafieldDefinitionCreateUserErrorCodePresent,
	MetafieldDefinitionCreateUserErrorCodeTaken,
	MetafieldDefinitionCreateUserErrorCodeTooLong,
	MetafieldDefinitionCreateUserErrorCodeTooShort,
	MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded,
	MetafieldDefinitionCreateUserErrorCodeLimitExceeded,
	MetafieldDefinitionCreateUserErrorCodeInvalidOption,
	MetafieldDefinitionCreateUserErrorCodeDuplicateOption,
	MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey,
	MetafieldDefinitionCreateUserErrorCodePinnedLimitReached,
	MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists,
}

func (e MetafieldDefinitionCreateUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionCreateUserErrorCodeInvalid, MetafieldDefinitionCreateUserErrorCodeInclusion, MetafieldDefinitionCreateUserErrorCodePresent, MetafieldDefinitionCreateUserErrorCodeTaken, MetafieldDefinitionCreateUserErrorCodeTooLong, MetafieldDefinitionCreateUserErrorCodeTooShort, MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded, MetafieldDefinitionCreateUserErrorCodeLimitExceeded, MetafieldDefinitionCreateUserErrorCodeInvalidOption, MetafieldDefinitionCreateUserErrorCodeDuplicateOption, MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey, MetafieldDefinitionCreateUserErrorCodePinnedLimitReached, MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists:
		return true
	}
	return false
}

func (e MetafieldDefinitionCreateUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionCreateUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
type MetafieldDefinitionDeleteUserErrorCode string

const (
	// The input value needs to be blank.
	MetafieldDefinitionDeleteUserErrorCodePresent MetafieldDefinitionDeleteUserErrorCode = "PRESENT"
	// Definition not found.
	MetafieldDefinitionDeleteUserErrorCodeNotFound MetafieldDefinitionDeleteUserErrorCode = "NOT_FOUND"
	// An internal error occurred.
	MetafieldDefinitionDeleteUserErrorCodeInternalError MetafieldDefinitionDeleteUserErrorCode = "INTERNAL_ERROR"
)

var AllMetafieldDefinitionDeleteUserErrorCode = []MetafieldDefinitionDeleteUserErrorCode{
	MetafieldDefinitionDeleteUserErrorCodePresent,
	MetafieldDefinitionDeleteUserErrorCodeNotFound,
	MetafieldDefinitionDeleteUserErrorCodeInternalError,
}

func (e MetafieldDefinitionDeleteUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionDeleteUserErrorCodePresent, MetafieldDefinitionDeleteUserErrorCodeNotFound, MetafieldDefinitionDeleteUserErrorCodeInternalError:
		return true
	}
	return false
}

func (e MetafieldDefinitionDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionDeleteUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
type MetafieldDefinitionPinUserErrorCode string

const (
	// The metafield definition was not found.
	MetafieldDefinitionPinUserErrorCodeNotFound MetafieldDefinitionPinUserErrorCode = "NOT_FOUND"
	// The pinned limit has been reached for owner type.
	MetafieldDefinitionPinUserErrorCodePinnedLimitReached MetafieldDefinitionPinUserErrorCode = "PINNED_LIMIT_REACHED"
	// The metafield definition is already pinned.
	MetafieldDefinitionPinUserErrorCodeAlreadyPinned MetafieldDefinitionPinUserErrorCode = "ALREADY_PINNED"
	// An internal error occurred.
	MetafieldDefinitionPinUserErrorCodeInternalError MetafieldDefinitionPinUserErrorCode = "INTERNAL_ERROR"
)

var AllMetafieldDefinitionPinUserErrorCode = []MetafieldDefinitionPinUserErrorCode{
	MetafieldDefinitionPinUserErrorCodeNotFound,
	MetafieldDefinitionPinUserErrorCodePinnedLimitReached,
	MetafieldDefinitionPinUserErrorCodeAlreadyPinned,
	MetafieldDefinitionPinUserErrorCodeInternalError,
}

func (e MetafieldDefinitionPinUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionPinUserErrorCodeNotFound, MetafieldDefinitionPinUserErrorCodePinnedLimitReached, MetafieldDefinitionPinUserErrorCodeAlreadyPinned, MetafieldDefinitionPinUserErrorCodeInternalError:
		return true
	}
	return false
}

func (e MetafieldDefinitionPinUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionPinUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionPinUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionPinUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionPinUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield definition pinned statuses.
type MetafieldDefinitionPinnedStatus string

const (
	// All metafield definitions.
	MetafieldDefinitionPinnedStatusAny MetafieldDefinitionPinnedStatus = "ANY"
	// Only metafield definitions that are pinned.
	MetafieldDefinitionPinnedStatusPinned MetafieldDefinitionPinnedStatus = "PINNED"
	// Only metafield definitions that are not pinned.
	MetafieldDefinitionPinnedStatusUnpinned MetafieldDefinitionPinnedStatus = "UNPINNED"
)

var AllMetafieldDefinitionPinnedStatus = []MetafieldDefinitionPinnedStatus{
	MetafieldDefinitionPinnedStatusAny,
	MetafieldDefinitionPinnedStatusPinned,
	MetafieldDefinitionPinnedStatusUnpinned,
}

func (e MetafieldDefinitionPinnedStatus) IsValid() bool {
	switch e {
	case MetafieldDefinitionPinnedStatusAny, MetafieldDefinitionPinnedStatusPinned, MetafieldDefinitionPinnedStatusUnpinned:
		return true
	}
	return false
}

func (e MetafieldDefinitionPinnedStatus) String() string {
	return string(e)
}

func (e *MetafieldDefinitionPinnedStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionPinnedStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionPinnedStatus", str)
	}
	return nil
}

func (e MetafieldDefinitionPinnedStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MetafieldDefinition query.
type MetafieldDefinitionSortKeys string

const (
	// Sort by the `id` value.
	MetafieldDefinitionSortKeysID MetafieldDefinitionSortKeys = "ID"
	// Sort by the `name` value.
	MetafieldDefinitionSortKeysName MetafieldDefinitionSortKeys = "NAME"
	// Sort by the `pinned_position` value.
	MetafieldDefinitionSortKeysPinnedPosition MetafieldDefinitionSortKeys = "PINNED_POSITION"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	MetafieldDefinitionSortKeysRelevance MetafieldDefinitionSortKeys = "RELEVANCE"
)

var AllMetafieldDefinitionSortKeys = []MetafieldDefinitionSortKeys{
	MetafieldDefinitionSortKeysID,
	MetafieldDefinitionSortKeysName,
	MetafieldDefinitionSortKeysPinnedPosition,
	MetafieldDefinitionSortKeysRelevance,
}

func (e MetafieldDefinitionSortKeys) IsValid() bool {
	switch e {
	case MetafieldDefinitionSortKeysID, MetafieldDefinitionSortKeysName, MetafieldDefinitionSortKeysPinnedPosition, MetafieldDefinitionSortKeysRelevance:
		return true
	}
	return false
}

func (e MetafieldDefinitionSortKeys) String() string {
	return string(e)
}

func (e *MetafieldDefinitionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionSortKeys", str)
	}
	return nil
}

func (e MetafieldDefinitionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
type MetafieldDefinitionUnpinUserErrorCode string

const (
	// The metafield definition was not found.
	MetafieldDefinitionUnpinUserErrorCodeNotFound MetafieldDefinitionUnpinUserErrorCode = "NOT_FOUND"
	// The metafield definition isn't pinned.
	MetafieldDefinitionUnpinUserErrorCodeNotPinned MetafieldDefinitionUnpinUserErrorCode = "NOT_PINNED"
	// An internal error occurred.
	MetafieldDefinitionUnpinUserErrorCodeInternalError MetafieldDefinitionUnpinUserErrorCode = "INTERNAL_ERROR"
)

var AllMetafieldDefinitionUnpinUserErrorCode = []MetafieldDefinitionUnpinUserErrorCode{
	MetafieldDefinitionUnpinUserErrorCodeNotFound,
	MetafieldDefinitionUnpinUserErrorCodeNotPinned,
	MetafieldDefinitionUnpinUserErrorCodeInternalError,
}

func (e MetafieldDefinitionUnpinUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionUnpinUserErrorCodeNotFound, MetafieldDefinitionUnpinUserErrorCodeNotPinned, MetafieldDefinitionUnpinUserErrorCodeInternalError:
		return true
	}
	return false
}

func (e MetafieldDefinitionUnpinUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionUnpinUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionUnpinUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionUnpinUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionUnpinUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
type MetafieldDefinitionUpdateUserErrorCode string

const (
	// The input value needs to be blank.
	MetafieldDefinitionUpdateUserErrorCodePresent MetafieldDefinitionUpdateUserErrorCode = "PRESENT"
	// The input value is too long.
	MetafieldDefinitionUpdateUserErrorCodeTooLong MetafieldDefinitionUpdateUserErrorCode = "TOO_LONG"
	// Definition not found.
	MetafieldDefinitionUpdateUserErrorCodeNotFound MetafieldDefinitionUpdateUserErrorCode = "NOT_FOUND"
	// An invalid input.
	MetafieldDefinitionUpdateUserErrorCodeInvalidInput MetafieldDefinitionUpdateUserErrorCode = "INVALID_INPUT"
	// The pinned limit has been reached for the owner type.
	MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached MetafieldDefinitionUpdateUserErrorCode = "PINNED_LIMIT_REACHED"
	// An internal error occurred.
	MetafieldDefinitionUpdateUserErrorCodeInternalError MetafieldDefinitionUpdateUserErrorCode = "INTERNAL_ERROR"
)

var AllMetafieldDefinitionUpdateUserErrorCode = []MetafieldDefinitionUpdateUserErrorCode{
	MetafieldDefinitionUpdateUserErrorCodePresent,
	MetafieldDefinitionUpdateUserErrorCodeTooLong,
	MetafieldDefinitionUpdateUserErrorCodeNotFound,
	MetafieldDefinitionUpdateUserErrorCodeInvalidInput,
	MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached,
	MetafieldDefinitionUpdateUserErrorCodeInternalError,
}

func (e MetafieldDefinitionUpdateUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionUpdateUserErrorCodePresent, MetafieldDefinitionUpdateUserErrorCodeTooLong, MetafieldDefinitionUpdateUserErrorCodeNotFound, MetafieldDefinitionUpdateUserErrorCodeInvalidInput, MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached, MetafieldDefinitionUpdateUserErrorCodeInternalError:
		return true
	}
	return false
}

func (e MetafieldDefinitionUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionUpdateUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield definition validation statuses.
type MetafieldDefinitionValidationStatus string

const (
	// All of this definition's metafields are valid.
	MetafieldDefinitionValidationStatusAllValid MetafieldDefinitionValidationStatus = "ALL_VALID"
	// Asynchronous validation of this definition's metafields is in progress.
	MetafieldDefinitionValidationStatusInProgress MetafieldDefinitionValidationStatus = "IN_PROGRESS"
	// Some of this definition's metafields are invalid.
	MetafieldDefinitionValidationStatusSomeInvalid MetafieldDefinitionValidationStatus = "SOME_INVALID"
)

var AllMetafieldDefinitionValidationStatus = []MetafieldDefinitionValidationStatus{
	MetafieldDefinitionValidationStatusAllValid,
	MetafieldDefinitionValidationStatusInProgress,
	MetafieldDefinitionValidationStatusSomeInvalid,
}

func (e MetafieldDefinitionValidationStatus) IsValid() bool {
	switch e {
	case MetafieldDefinitionValidationStatusAllValid, MetafieldDefinitionValidationStatusInProgress, MetafieldDefinitionValidationStatusSomeInvalid:
		return true
	}
	return false
}

func (e MetafieldDefinitionValidationStatus) String() string {
	return string(e)
}

func (e *MetafieldDefinitionValidationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionValidationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionValidationStatus", str)
	}
	return nil
}

func (e MetafieldDefinitionValidationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible types of a metafield's owner resource.
type MetafieldOwnerType string

const (
	// The Article metafield owner type.
	MetafieldOwnerTypeArticle MetafieldOwnerType = "ARTICLE"
	// The Blog metafield owner type.
	MetafieldOwnerTypeBlog MetafieldOwnerType = "BLOG"
	// The Collection metafield owner type.
	MetafieldOwnerTypeCollection MetafieldOwnerType = "COLLECTION"
	// The Customer metafield owner type.
	MetafieldOwnerTypeCustomer MetafieldOwnerType = "CUSTOMER"
	// The Draft Order metafield owner type.
	MetafieldOwnerTypeDraftorder MetafieldOwnerType = "DRAFTORDER"
	// The Order metafield owner type.
	MetafieldOwnerTypeOrder MetafieldOwnerType = "ORDER"
	// The Page metafield owner type.
	MetafieldOwnerTypePage MetafieldOwnerType = "PAGE"
	// The Product metafield owner type.
	MetafieldOwnerTypeProduct MetafieldOwnerType = "PRODUCT"
	// The Product Image metafield owner type.
	MetafieldOwnerTypeProductimage MetafieldOwnerType = "PRODUCTIMAGE"
	// The Product Variant metafield owner type.
	MetafieldOwnerTypeProductvariant MetafieldOwnerType = "PRODUCTVARIANT"
	// The Shop metafield owner type.
	MetafieldOwnerTypeShop MetafieldOwnerType = "SHOP"
)

var AllMetafieldOwnerType = []MetafieldOwnerType{
	MetafieldOwnerTypeArticle,
	MetafieldOwnerTypeBlog,
	MetafieldOwnerTypeCollection,
	MetafieldOwnerTypeCustomer,
	MetafieldOwnerTypeDraftorder,
	MetafieldOwnerTypeOrder,
	MetafieldOwnerTypePage,
	MetafieldOwnerTypeProduct,
	MetafieldOwnerTypeProductimage,
	MetafieldOwnerTypeProductvariant,
	MetafieldOwnerTypeShop,
}

func (e MetafieldOwnerType) IsValid() bool {
	switch e {
	case MetafieldOwnerTypeArticle, MetafieldOwnerTypeBlog, MetafieldOwnerTypeCollection, MetafieldOwnerTypeCustomer, MetafieldOwnerTypeDraftorder, MetafieldOwnerTypeOrder, MetafieldOwnerTypePage, MetafieldOwnerTypeProduct, MetafieldOwnerTypeProductimage, MetafieldOwnerTypeProductvariant, MetafieldOwnerTypeShop:
		return true
	}
	return false
}

func (e MetafieldOwnerType) String() string {
	return string(e)
}

func (e *MetafieldOwnerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldOwnerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldOwnerType", str)
	}
	return nil
}

func (e MetafieldOwnerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield validation statuses.
type MetafieldValidationStatus string

const (
	// Any validation status (valid or invalid).
	MetafieldValidationStatusAny MetafieldValidationStatus = "ANY"
	// Valid (according to definition).
	MetafieldValidationStatusValid MetafieldValidationStatus = "VALID"
	// Invalid (according to definition).
	MetafieldValidationStatusInvalid MetafieldValidationStatus = "INVALID"
)

var AllMetafieldValidationStatus = []MetafieldValidationStatus{
	MetafieldValidationStatusAny,
	MetafieldValidationStatusValid,
	MetafieldValidationStatusInvalid,
}

func (e MetafieldValidationStatus) IsValid() bool {
	switch e {
	case MetafieldValidationStatusAny, MetafieldValidationStatusValid, MetafieldValidationStatusInvalid:
		return true
	}
	return false
}

func (e MetafieldValidationStatus) String() string {
	return string(e)
}

func (e *MetafieldValidationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldValidationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldValidationStatus", str)
	}
	return nil
}

func (e MetafieldValidationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Legacy type information for the stored value.
// Replaced by `type`.
type MetafieldValueType string

const (
	// A text field.
	MetafieldValueTypeString MetafieldValueType = "STRING"
	// A whole number.
	MetafieldValueTypeInteger MetafieldValueType = "INTEGER"
	// A JSON string.
	MetafieldValueTypeJSONString MetafieldValueType = "JSON_STRING"
	// A number with decimal places.
	MetafieldValueTypeFloat MetafieldValueType = "FLOAT"
	// A `true` or `false` value.
	MetafieldValueTypeBoolean MetafieldValueType = "BOOLEAN"
)

var AllMetafieldValueType = []MetafieldValueType{
	MetafieldValueTypeString,
	MetafieldValueTypeInteger,
	MetafieldValueTypeJSONString,
	MetafieldValueTypeFloat,
	MetafieldValueTypeBoolean,
}

func (e MetafieldValueType) IsValid() bool {
	switch e {
	case MetafieldValueTypeString, MetafieldValueTypeInteger, MetafieldValueTypeJSONString, MetafieldValueTypeFloat, MetafieldValueTypeBoolean:
		return true
	}
	return false
}

func (e MetafieldValueType) String() string {
	return string(e)
}

func (e *MetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldValueType", str)
	}
	return nil
}

func (e MetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldsSetUserError`.
type MetafieldsSetUserErrorCode string

const (
	// The input value is blank.
	MetafieldsSetUserErrorCodeBlank MetafieldsSetUserErrorCode = "BLANK"
	// The input value isn't included in the list.
	MetafieldsSetUserErrorCodeInclusion MetafieldsSetUserErrorCode = "INCLUSION"
	// The input value should be less than or equal to the maximum value allowed.
	MetafieldsSetUserErrorCodeLessThanOrEqualTo MetafieldsSetUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value needs to be blank.
	MetafieldsSetUserErrorCodePresent MetafieldsSetUserErrorCode = "PRESENT"
	// The input value is too short.
	MetafieldsSetUserErrorCodeTooShort MetafieldsSetUserErrorCode = "TOO_SHORT"
	// The input value is too long.
	MetafieldsSetUserErrorCodeTooLong MetafieldsSetUserErrorCode = "TOO_LONG"
	// The value is invalid for metafield type or for definition options.
	MetafieldsSetUserErrorCodeInvalidValue MetafieldsSetUserErrorCode = "INVALID_VALUE"
	// The type is invalid.
	MetafieldsSetUserErrorCodeInvalidType MetafieldsSetUserErrorCode = "INVALID_TYPE"
)

var AllMetafieldsSetUserErrorCode = []MetafieldsSetUserErrorCode{
	MetafieldsSetUserErrorCodeBlank,
	MetafieldsSetUserErrorCodeInclusion,
	MetafieldsSetUserErrorCodeLessThanOrEqualTo,
	MetafieldsSetUserErrorCodePresent,
	MetafieldsSetUserErrorCodeTooShort,
	MetafieldsSetUserErrorCodeTooLong,
	MetafieldsSetUserErrorCodeInvalidValue,
	MetafieldsSetUserErrorCodeInvalidType,
}

func (e MetafieldsSetUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldsSetUserErrorCodeBlank, MetafieldsSetUserErrorCodeInclusion, MetafieldsSetUserErrorCodeLessThanOrEqualTo, MetafieldsSetUserErrorCodePresent, MetafieldsSetUserErrorCodeTooShort, MetafieldsSetUserErrorCodeTooLong, MetafieldsSetUserErrorCodeInvalidValue, MetafieldsSetUserErrorCodeInvalidType:
		return true
	}
	return false
}

func (e MetafieldsSetUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldsSetUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldsSetUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldsSetUserErrorCode", str)
	}
	return nil
}

func (e MetafieldsSetUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MethodDefinition query.
type MethodDefinitionSortKeys string

const (
	// Sort by the `rate_provider_type` value.
	MethodDefinitionSortKeysRateProviderType MethodDefinitionSortKeys = "RATE_PROVIDER_TYPE"
	// Sort by the `id` value.
	MethodDefinitionSortKeysID MethodDefinitionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	MethodDefinitionSortKeysRelevance MethodDefinitionSortKeys = "RELEVANCE"
)

var AllMethodDefinitionSortKeys = []MethodDefinitionSortKeys{
	MethodDefinitionSortKeysRateProviderType,
	MethodDefinitionSortKeysID,
	MethodDefinitionSortKeysRelevance,
}

func (e MethodDefinitionSortKeys) IsValid() bool {
	switch e {
	case MethodDefinitionSortKeysRateProviderType, MethodDefinitionSortKeysID, MethodDefinitionSortKeysRelevance:
		return true
	}
	return false
}

func (e MethodDefinitionSortKeys) String() string {
	return string(e)
}

func (e *MethodDefinitionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MethodDefinitionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MethodDefinitionSortKeys", str)
	}
	return nil
}

func (e MethodDefinitionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible order action types for a
// [sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
type OrderActionType string

const (
	// An order with a purchase or charge.
	OrderActionTypeOrder OrderActionType = "ORDER"
	// An edit to the order.
	OrderActionTypeOrderEdit OrderActionType = "ORDER_EDIT"
	// A refund on the order.
	OrderActionTypeRefund OrderActionType = "REFUND"
	// An unknown agreement action. Represents new actions that may be added in future versions.
	OrderActionTypeUnknown OrderActionType = "UNKNOWN"
)

var AllOrderActionType = []OrderActionType{
	OrderActionTypeOrder,
	OrderActionTypeOrderEdit,
	OrderActionTypeRefund,
	OrderActionTypeUnknown,
}

func (e OrderActionType) IsValid() bool {
	switch e {
	case OrderActionTypeOrder, OrderActionTypeOrderEdit, OrderActionTypeRefund, OrderActionTypeUnknown:
		return true
	}
	return false
}

func (e OrderActionType) String() string {
	return string(e)
}

func (e *OrderActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderActionType", str)
	}
	return nil
}

func (e OrderActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of order adjustments.
type OrderAdjustmentKind string

const (
	// An order adjustment that represents shipping charges refunded to the customer.
	//
	OrderAdjustmentKindShippingRefund OrderAdjustmentKind = "SHIPPING_REFUND"
	// An order adjustment that represents discrepancy between calculated and actual refund.
	//
	OrderAdjustmentKindRefundDiscrepancy OrderAdjustmentKind = "REFUND_DISCREPANCY"
)

var AllOrderAdjustmentKind = []OrderAdjustmentKind{
	OrderAdjustmentKindShippingRefund,
	OrderAdjustmentKindRefundDiscrepancy,
}

func (e OrderAdjustmentKind) IsValid() bool {
	switch e {
	case OrderAdjustmentKindShippingRefund, OrderAdjustmentKindRefundDiscrepancy:
		return true
	}
	return false
}

func (e OrderAdjustmentKind) String() string {
	return string(e)
}

func (e *OrderAdjustmentKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderAdjustmentKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderAdjustmentKind", str)
	}
	return nil
}

func (e OrderAdjustmentKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
type OrderCancelReason string

const (
	// The customer wanted to cancel the order.
	OrderCancelReasonCustomer OrderCancelReason = "CUSTOMER"
	// The order was fraudulent.
	OrderCancelReasonFraud OrderCancelReason = "FRAUD"
	// There was insufficient inventory.
	OrderCancelReasonInventory OrderCancelReason = "INVENTORY"
	// Payment was declined.
	OrderCancelReasonDeclined OrderCancelReason = "DECLINED"
	// Some other reason not listed.
	OrderCancelReasonOther OrderCancelReason = "OTHER"
)

var AllOrderCancelReason = []OrderCancelReason{
	OrderCancelReasonCustomer,
	OrderCancelReasonFraud,
	OrderCancelReasonInventory,
	OrderCancelReasonDeclined,
	OrderCancelReasonOther,
}

func (e OrderCancelReason) IsValid() bool {
	switch e {
	case OrderCancelReasonCustomer, OrderCancelReasonFraud, OrderCancelReasonInventory, OrderCancelReasonDeclined, OrderCancelReasonOther:
		return true
	}
	return false
}

func (e OrderCancelReason) String() string {
	return string(e)
}

func (e *OrderCancelReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderCancelReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderCancelReason", str)
	}
	return nil
}

func (e OrderCancelReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's current financial status.
type OrderDisplayFinancialStatus string

const (
	// Displayed as **Pending**.
	OrderDisplayFinancialStatusPending OrderDisplayFinancialStatus = "PENDING"
	// Displayed as **Authorized**.
	OrderDisplayFinancialStatusAuthorized OrderDisplayFinancialStatus = "AUTHORIZED"
	// Displayed as **Partially paid**.
	OrderDisplayFinancialStatusPartiallyPaid OrderDisplayFinancialStatus = "PARTIALLY_PAID"
	// Displayed as **Partially refunded**.
	OrderDisplayFinancialStatusPartiallyRefunded OrderDisplayFinancialStatus = "PARTIALLY_REFUNDED"
	// Displayed as **Voided**.
	OrderDisplayFinancialStatusVoided OrderDisplayFinancialStatus = "VOIDED"
	// Displayed as **Paid**.
	OrderDisplayFinancialStatusPaid OrderDisplayFinancialStatus = "PAID"
	// Displayed as **Refunded**.
	OrderDisplayFinancialStatusRefunded OrderDisplayFinancialStatus = "REFUNDED"
	// Displayed as **Expired**.
	OrderDisplayFinancialStatusExpired OrderDisplayFinancialStatus = "EXPIRED"
)

var AllOrderDisplayFinancialStatus = []OrderDisplayFinancialStatus{
	OrderDisplayFinancialStatusPending,
	OrderDisplayFinancialStatusAuthorized,
	OrderDisplayFinancialStatusPartiallyPaid,
	OrderDisplayFinancialStatusPartiallyRefunded,
	OrderDisplayFinancialStatusVoided,
	OrderDisplayFinancialStatusPaid,
	OrderDisplayFinancialStatusRefunded,
	OrderDisplayFinancialStatusExpired,
}

func (e OrderDisplayFinancialStatus) IsValid() bool {
	switch e {
	case OrderDisplayFinancialStatusPending, OrderDisplayFinancialStatusAuthorized, OrderDisplayFinancialStatusPartiallyPaid, OrderDisplayFinancialStatusPartiallyRefunded, OrderDisplayFinancialStatusVoided, OrderDisplayFinancialStatusPaid, OrderDisplayFinancialStatusRefunded, OrderDisplayFinancialStatusExpired:
		return true
	}
	return false
}

func (e OrderDisplayFinancialStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFinancialStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFinancialStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFinancialStatus", str)
	}
	return nil
}

func (e OrderDisplayFinancialStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's aggregated fulfillment status for display purposes.
type OrderDisplayFulfillmentStatus string

const (
	// Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusUnfulfilled OrderDisplayFulfillmentStatus = "UNFULFILLED"
	// Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusPartiallyFulfilled OrderDisplayFulfillmentStatus = "PARTIALLY_FULFILLED"
	// Displayed as **Fulfilled**. All the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusFulfilled OrderDisplayFulfillmentStatus = "FULFILLED"
	// Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
	OrderDisplayFulfillmentStatusRestocked OrderDisplayFulfillmentStatus = "RESTOCKED"
	// Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
	OrderDisplayFulfillmentStatusPendingFulfillment OrderDisplayFulfillmentStatus = "PENDING_FULFILLMENT"
	// Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
	OrderDisplayFulfillmentStatusOpen OrderDisplayFulfillmentStatus = "OPEN"
	// Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
	OrderDisplayFulfillmentStatusInProgress OrderDisplayFulfillmentStatus = "IN_PROGRESS"
	// Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
	OrderDisplayFulfillmentStatusOnHold OrderDisplayFulfillmentStatus = "ON_HOLD"
	// Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
	OrderDisplayFulfillmentStatusScheduled OrderDisplayFulfillmentStatus = "SCHEDULED"
)

var AllOrderDisplayFulfillmentStatus = []OrderDisplayFulfillmentStatus{
	OrderDisplayFulfillmentStatusUnfulfilled,
	OrderDisplayFulfillmentStatusPartiallyFulfilled,
	OrderDisplayFulfillmentStatusFulfilled,
	OrderDisplayFulfillmentStatusRestocked,
	OrderDisplayFulfillmentStatusPendingFulfillment,
	OrderDisplayFulfillmentStatusOpen,
	OrderDisplayFulfillmentStatusInProgress,
	OrderDisplayFulfillmentStatusOnHold,
	OrderDisplayFulfillmentStatusScheduled,
}

func (e OrderDisplayFulfillmentStatus) IsValid() bool {
	switch e {
	case OrderDisplayFulfillmentStatusUnfulfilled, OrderDisplayFulfillmentStatusPartiallyFulfilled, OrderDisplayFulfillmentStatusFulfilled, OrderDisplayFulfillmentStatusRestocked, OrderDisplayFulfillmentStatusPendingFulfillment, OrderDisplayFulfillmentStatusOpen, OrderDisplayFulfillmentStatusInProgress, OrderDisplayFulfillmentStatusOnHold, OrderDisplayFulfillmentStatusScheduled:
		return true
	}
	return false
}

func (e OrderDisplayFulfillmentStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFulfillmentStatus", str)
	}
	return nil
}

func (e OrderDisplayFulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `OrderInvoiceSendUserError`.
type OrderInvoiceSendUserErrorCode string

const (
	// An error occurred while sending the invoice.
	OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful OrderInvoiceSendUserErrorCode = "ORDER_INVOICE_SEND_UNSUCCESSFUL"
)

var AllOrderInvoiceSendUserErrorCode = []OrderInvoiceSendUserErrorCode{
	OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful,
}

func (e OrderInvoiceSendUserErrorCode) IsValid() bool {
	switch e {
	case OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful:
		return true
	}
	return false
}

func (e OrderInvoiceSendUserErrorCode) String() string {
	return string(e)
}

func (e *OrderInvoiceSendUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderInvoiceSendUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderInvoiceSendUserErrorCode", str)
	}
	return nil
}

func (e OrderInvoiceSendUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The likelihood that an order is fraudulent.
type OrderRiskLevel string

const (
	// There is a low level of risk that this order is fraudulent.
	OrderRiskLevelLow OrderRiskLevel = "LOW"
	// There is a medium level of risk that this order is fraudulent.
	OrderRiskLevelMedium OrderRiskLevel = "MEDIUM"
	// There is a high level of risk that this order is fraudulent.
	OrderRiskLevelHigh OrderRiskLevel = "HIGH"
)

var AllOrderRiskLevel = []OrderRiskLevel{
	OrderRiskLevelLow,
	OrderRiskLevelMedium,
	OrderRiskLevelHigh,
}

func (e OrderRiskLevel) IsValid() bool {
	switch e {
	case OrderRiskLevelLow, OrderRiskLevelMedium, OrderRiskLevelHigh:
		return true
	}
	return false
}

func (e OrderRiskLevel) String() string {
	return string(e)
}

func (e *OrderRiskLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderRiskLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderRiskLevel", str)
	}
	return nil
}

func (e OrderRiskLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Order query.
type OrderSortKeys string

const (
	// Sort by the `created_at` value.
	OrderSortKeysCreatedAt OrderSortKeys = "CREATED_AT"
	// Sort by the `customer_name` value.
	OrderSortKeysCustomerName OrderSortKeys = "CUSTOMER_NAME"
	// Sort by the `financial_status` value.
	OrderSortKeysFinancialStatus OrderSortKeys = "FINANCIAL_STATUS"
	// Sort by the `fulfillment_status` value.
	OrderSortKeysFulfillmentStatus OrderSortKeys = "FULFILLMENT_STATUS"
	// Sort by the `order_number` value.
	OrderSortKeysOrderNumber OrderSortKeys = "ORDER_NUMBER"
	// Sort by the `processed_at` value.
	OrderSortKeysProcessedAt OrderSortKeys = "PROCESSED_AT"
	// Sort by the `total_price` value.
	OrderSortKeysTotalPrice OrderSortKeys = "TOTAL_PRICE"
	// Sort by the `updated_at` value.
	OrderSortKeysUpdatedAt OrderSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	OrderSortKeysID OrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	OrderSortKeysRelevance OrderSortKeys = "RELEVANCE"
)

var AllOrderSortKeys = []OrderSortKeys{
	OrderSortKeysCreatedAt,
	OrderSortKeysCustomerName,
	OrderSortKeysFinancialStatus,
	OrderSortKeysFulfillmentStatus,
	OrderSortKeysOrderNumber,
	OrderSortKeysProcessedAt,
	OrderSortKeysTotalPrice,
	OrderSortKeysUpdatedAt,
	OrderSortKeysID,
	OrderSortKeysRelevance,
}

func (e OrderSortKeys) IsValid() bool {
	switch e {
	case OrderSortKeysCreatedAt, OrderSortKeysCustomerName, OrderSortKeysFinancialStatus, OrderSortKeysFulfillmentStatus, OrderSortKeysOrderNumber, OrderSortKeysProcessedAt, OrderSortKeysTotalPrice, OrderSortKeysUpdatedAt, OrderSortKeysID, OrderSortKeysRelevance:
		return true
	}
	return false
}

func (e OrderSortKeys) String() string {
	return string(e)
}

func (e *OrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderSortKeys", str)
	}
	return nil
}

func (e OrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A standardized error code, independent of the payment provider.
type OrderTransactionErrorCode string

const (
	// The card number is incorrect.
	OrderTransactionErrorCodeIncorrectNumber OrderTransactionErrorCode = "INCORRECT_NUMBER"
	// The format of the card number is incorrect.
	OrderTransactionErrorCodeInvalidNumber OrderTransactionErrorCode = "INVALID_NUMBER"
	// The format of the expiry date is incorrect.
	OrderTransactionErrorCodeInvalidExpiryDate OrderTransactionErrorCode = "INVALID_EXPIRY_DATE"
	// The format of the CVC is incorrect.
	OrderTransactionErrorCodeInvalidCvc OrderTransactionErrorCode = "INVALID_CVC"
	// The card is expired.
	OrderTransactionErrorCodeExpiredCard OrderTransactionErrorCode = "EXPIRED_CARD"
	// The CVC does not match the card number.
	OrderTransactionErrorCodeIncorrectCvc OrderTransactionErrorCode = "INCORRECT_CVC"
	// The ZIP or postal code does not match the card number.
	OrderTransactionErrorCodeIncorrectZip OrderTransactionErrorCode = "INCORRECT_ZIP"
	// The address does not match the card number.
	OrderTransactionErrorCodeIncorrectAddress OrderTransactionErrorCode = "INCORRECT_ADDRESS"
	// The entered PIN is incorrect.
	OrderTransactionErrorCodeIncorrectPin OrderTransactionErrorCode = "INCORRECT_PIN"
	// The card was declined.
	OrderTransactionErrorCodeCardDeclined OrderTransactionErrorCode = "CARD_DECLINED"
	// There was an error while processing the payment.
	OrderTransactionErrorCodeProcessingError OrderTransactionErrorCode = "PROCESSING_ERROR"
	// Call the card issuer.
	OrderTransactionErrorCodeCallIssuer OrderTransactionErrorCode = "CALL_ISSUER"
	// The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
	//
	OrderTransactionErrorCodePickUpCard OrderTransactionErrorCode = "PICK_UP_CARD"
	// There is an error in the gateway or merchant configuration.
	OrderTransactionErrorCodeConfigError OrderTransactionErrorCode = "CONFIG_ERROR"
	// A real card was used but the gateway was in test mode.
	OrderTransactionErrorCodeTestModeLiveCard OrderTransactionErrorCode = "TEST_MODE_LIVE_CARD"
	// The gateway or merchant configuration doesn't support a feature, such as network tokenization.
	OrderTransactionErrorCodeUnsupportedFeature OrderTransactionErrorCode = "UNSUPPORTED_FEATURE"
	// There was an unknown error with processing the payment.
	OrderTransactionErrorCodeGenericError OrderTransactionErrorCode = "GENERIC_ERROR"
	// The payment method is not available in the customer's country.
	OrderTransactionErrorCodeInvalidCountry OrderTransactionErrorCode = "INVALID_COUNTRY"
	// The amount is either too high or too low for the provider.
	OrderTransactionErrorCodeInvalidAmount OrderTransactionErrorCode = "INVALID_AMOUNT"
	// The payment method is momentarily unavailable.
	OrderTransactionErrorCodePaymentMethodUnavailable OrderTransactionErrorCode = "PAYMENT_METHOD_UNAVAILABLE"
	// The payment method was invalid.
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod OrderTransactionErrorCode = "AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD"
	// The maximum amount has been captured.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED"
	// The maximum amount has been refunded.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED"
	// The maximum of 10 authorizations has been captured for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED"
	// The maximum of 10 refunds has been processed for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED"
	// The order was canceled, which canceled all open authorizations.
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled OrderTransactionErrorCode = "AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED"
	// The order was not confirmed within three hours.
	OrderTransactionErrorCodeAmazonPaymentsStale OrderTransactionErrorCode = "AMAZON_PAYMENTS_STALE"
)

var AllOrderTransactionErrorCode = []OrderTransactionErrorCode{
	OrderTransactionErrorCodeIncorrectNumber,
	OrderTransactionErrorCodeInvalidNumber,
	OrderTransactionErrorCodeInvalidExpiryDate,
	OrderTransactionErrorCodeInvalidCvc,
	OrderTransactionErrorCodeExpiredCard,
	OrderTransactionErrorCodeIncorrectCvc,
	OrderTransactionErrorCodeIncorrectZip,
	OrderTransactionErrorCodeIncorrectAddress,
	OrderTransactionErrorCodeIncorrectPin,
	OrderTransactionErrorCodeCardDeclined,
	OrderTransactionErrorCodeProcessingError,
	OrderTransactionErrorCodeCallIssuer,
	OrderTransactionErrorCodePickUpCard,
	OrderTransactionErrorCodeConfigError,
	OrderTransactionErrorCodeTestModeLiveCard,
	OrderTransactionErrorCodeUnsupportedFeature,
	OrderTransactionErrorCodeGenericError,
	OrderTransactionErrorCodeInvalidCountry,
	OrderTransactionErrorCodeInvalidAmount,
	OrderTransactionErrorCodePaymentMethodUnavailable,
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded,
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured,
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed,
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled,
	OrderTransactionErrorCodeAmazonPaymentsStale,
}

func (e OrderTransactionErrorCode) IsValid() bool {
	switch e {
	case OrderTransactionErrorCodeIncorrectNumber, OrderTransactionErrorCodeInvalidNumber, OrderTransactionErrorCodeInvalidExpiryDate, OrderTransactionErrorCodeInvalidCvc, OrderTransactionErrorCodeExpiredCard, OrderTransactionErrorCodeIncorrectCvc, OrderTransactionErrorCodeIncorrectZip, OrderTransactionErrorCodeIncorrectAddress, OrderTransactionErrorCodeIncorrectPin, OrderTransactionErrorCodeCardDeclined, OrderTransactionErrorCodeProcessingError, OrderTransactionErrorCodeCallIssuer, OrderTransactionErrorCodePickUpCard, OrderTransactionErrorCodeConfigError, OrderTransactionErrorCodeTestModeLiveCard, OrderTransactionErrorCodeUnsupportedFeature, OrderTransactionErrorCodeGenericError, OrderTransactionErrorCodeInvalidCountry, OrderTransactionErrorCodeInvalidAmount, OrderTransactionErrorCodePaymentMethodUnavailable, OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod, OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged, OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded, OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured, OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed, OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled, OrderTransactionErrorCodeAmazonPaymentsStale:
		return true
	}
	return false
}

func (e OrderTransactionErrorCode) String() string {
	return string(e)
}

func (e *OrderTransactionErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionErrorCode", str)
	}
	return nil
}

func (e OrderTransactionErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of order transactions.
type OrderTransactionKind string

const (
	// An authorization and capture performed together in a single step.
	OrderTransactionKindSale OrderTransactionKind = "SALE"
	// A transfer of the money that was reserved by an authorization.
	OrderTransactionKindCapture OrderTransactionKind = "CAPTURE"
	// An amount reserved against the cardholder's funding source.
	// Money does not change hands until the authorization is captured.
	//
	OrderTransactionKindAuthorization OrderTransactionKind = "AUTHORIZATION"
	// A cancelation of an authorization transaction.
	OrderTransactionKindVoid OrderTransactionKind = "VOID"
	// A partial or full return of captured funds to the cardholder.
	// A refund can happen only after a capture is processed.
	//
	OrderTransactionKindRefund OrderTransactionKind = "REFUND"
	// The money returned to the customer when they've paid too much during a cash transaction.
	//
	OrderTransactionKindChange OrderTransactionKind = "CHANGE"
	// An authorization for a payment taken with an EMV credit card reader.
	OrderTransactionKindEmvAuthorization OrderTransactionKind = "EMV_AUTHORIZATION"
	// A suggested refund transaction that can be used to create a refund.
	OrderTransactionKindSuggestedRefund OrderTransactionKind = "SUGGESTED_REFUND"
)

var AllOrderTransactionKind = []OrderTransactionKind{
	OrderTransactionKindSale,
	OrderTransactionKindCapture,
	OrderTransactionKindAuthorization,
	OrderTransactionKindVoid,
	OrderTransactionKindRefund,
	OrderTransactionKindChange,
	OrderTransactionKindEmvAuthorization,
	OrderTransactionKindSuggestedRefund,
}

func (e OrderTransactionKind) IsValid() bool {
	switch e {
	case OrderTransactionKindSale, OrderTransactionKindCapture, OrderTransactionKindAuthorization, OrderTransactionKindVoid, OrderTransactionKindRefund, OrderTransactionKindChange, OrderTransactionKindEmvAuthorization, OrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e OrderTransactionKind) String() string {
	return string(e)
}

func (e *OrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionKind", str)
	}
	return nil
}

func (e OrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different states that an `OrderTransaction` can have.
type OrderTransactionStatus string

const (
	// The transaction succeeded.
	OrderTransactionStatusSuccess OrderTransactionStatus = "SUCCESS"
	// The transaction failed.
	OrderTransactionStatusFailure OrderTransactionStatus = "FAILURE"
	// The transaction is pending.
	OrderTransactionStatusPending OrderTransactionStatus = "PENDING"
	// There was an error while processing the transaction.
	OrderTransactionStatusError OrderTransactionStatus = "ERROR"
	// Awaiting a response.
	OrderTransactionStatusAwaitingResponse OrderTransactionStatus = "AWAITING_RESPONSE"
	// The transaction status is unknown.
	OrderTransactionStatusUnknown OrderTransactionStatus = "UNKNOWN"
)

var AllOrderTransactionStatus = []OrderTransactionStatus{
	OrderTransactionStatusSuccess,
	OrderTransactionStatusFailure,
	OrderTransactionStatusPending,
	OrderTransactionStatusError,
	OrderTransactionStatusAwaitingResponse,
	OrderTransactionStatusUnknown,
}

func (e OrderTransactionStatus) IsValid() bool {
	switch e {
	case OrderTransactionStatusSuccess, OrderTransactionStatusFailure, OrderTransactionStatusPending, OrderTransactionStatusError, OrderTransactionStatusAwaitingResponse, OrderTransactionStatusUnknown:
		return true
	}
	return false
}

func (e OrderTransactionStatus) String() string {
	return string(e)
}

func (e *OrderTransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionStatus", str)
	}
	return nil
}

func (e OrderTransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Some of the payment methods used in Shopify.
type PaymentMethods string

const (
	PaymentMethodsVisa            PaymentMethods = "VISA"
	PaymentMethodsMastercard      PaymentMethods = "MASTERCARD"
	PaymentMethodsDiscover        PaymentMethods = "DISCOVER"
	PaymentMethodsAmericanExpress PaymentMethods = "AMERICAN_EXPRESS"
	PaymentMethodsDinersClub      PaymentMethods = "DINERS_CLUB"
	PaymentMethodsJcb             PaymentMethods = "JCB"
	// The payment method for UnionPay payment.
	PaymentMethodsUnionpay PaymentMethods = "UNIONPAY"
	// The payment method for Elo payment.
	PaymentMethodsElo                PaymentMethods = "ELO"
	PaymentMethodsDankort            PaymentMethods = "DANKORT"
	PaymentMethodsMaestro            PaymentMethods = "MAESTRO"
	PaymentMethodsForbrugsforeningen PaymentMethods = "FORBRUGSFORENINGEN"
	PaymentMethodsPaypal             PaymentMethods = "PAYPAL"
	PaymentMethodsBogus              PaymentMethods = "BOGUS"
	PaymentMethodsBitcoin            PaymentMethods = "BITCOIN"
	PaymentMethodsLitecoin           PaymentMethods = "LITECOIN"
	PaymentMethodsDogecoin           PaymentMethods = "DOGECOIN"
	// The payment method for Interac payment.
	PaymentMethodsInterac PaymentMethods = "INTERAC"
)

var AllPaymentMethods = []PaymentMethods{
	PaymentMethodsVisa,
	PaymentMethodsMastercard,
	PaymentMethodsDiscover,
	PaymentMethodsAmericanExpress,
	PaymentMethodsDinersClub,
	PaymentMethodsJcb,
	PaymentMethodsUnionpay,
	PaymentMethodsElo,
	PaymentMethodsDankort,
	PaymentMethodsMaestro,
	PaymentMethodsForbrugsforeningen,
	PaymentMethodsPaypal,
	PaymentMethodsBogus,
	PaymentMethodsBitcoin,
	PaymentMethodsLitecoin,
	PaymentMethodsDogecoin,
	PaymentMethodsInterac,
}

func (e PaymentMethods) IsValid() bool {
	switch e {
	case PaymentMethodsVisa, PaymentMethodsMastercard, PaymentMethodsDiscover, PaymentMethodsAmericanExpress, PaymentMethodsDinersClub, PaymentMethodsJcb, PaymentMethodsUnionpay, PaymentMethodsElo, PaymentMethodsDankort, PaymentMethodsMaestro, PaymentMethodsForbrugsforeningen, PaymentMethodsPaypal, PaymentMethodsBogus, PaymentMethodsBitcoin, PaymentMethodsLitecoin, PaymentMethodsDogecoin, PaymentMethodsInterac:
		return true
	}
	return false
}

func (e PaymentMethods) String() string {
	return string(e)
}

func (e *PaymentMethods) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethods", str)
	}
	return nil
}

func (e PaymentMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsCreateUserError`.
type PaymentTermsCreateUserErrorCode string

const (
	// An error occurred while creating payment terms.
	PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful PaymentTermsCreateUserErrorCode = "PAYMENT_TERMS_CREATION_UNSUCCESSFUL"
)

var AllPaymentTermsCreateUserErrorCode = []PaymentTermsCreateUserErrorCode{
	PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful,
}

func (e PaymentTermsCreateUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsCreateUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsCreateUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
type PaymentTermsDeleteUserErrorCode string

const (
	// An error occurred while deleting payment terms.
	PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful PaymentTermsDeleteUserErrorCode = "PAYMENT_TERMS_DELETE_UNSUCCESSFUL"
)

var AllPaymentTermsDeleteUserErrorCode = []PaymentTermsDeleteUserErrorCode{
	PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful,
}

func (e PaymentTermsDeleteUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsDeleteUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a payment terms or a payment terms template.
type PaymentTermsType string

const (
	// The payment terms or payment terms template is due on receipt.
	PaymentTermsTypeReceipt PaymentTermsType = "RECEIPT"
	// The payment terms or payment terms template is net type.
	PaymentTermsTypeNet PaymentTermsType = "NET"
	// The payment terms or payment terms template is fixed type.
	PaymentTermsTypeFixed PaymentTermsType = "FIXED"
	// The type of the payment terms or payment terms template is unknown.
	PaymentTermsTypeUnknown PaymentTermsType = "UNKNOWN"
)

var AllPaymentTermsType = []PaymentTermsType{
	PaymentTermsTypeReceipt,
	PaymentTermsTypeNet,
	PaymentTermsTypeFixed,
	PaymentTermsTypeUnknown,
}

func (e PaymentTermsType) IsValid() bool {
	switch e {
	case PaymentTermsTypeReceipt, PaymentTermsTypeNet, PaymentTermsTypeFixed, PaymentTermsTypeUnknown:
		return true
	}
	return false
}

func (e PaymentTermsType) String() string {
	return string(e)
}

func (e *PaymentTermsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsType", str)
	}
	return nil
}

func (e PaymentTermsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
type PaymentTermsUpdateUserErrorCode string

const (
	// An error occurred while updating payment terms.
	PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful PaymentTermsUpdateUserErrorCode = "PAYMENT_TERMS_UPDATE_UNSUCCESSFUL"
)

var AllPaymentTermsUpdateUserErrorCode = []PaymentTermsUpdateUserErrorCode{
	PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful,
}

func (e PaymentTermsUpdateUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsUpdateUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a valid PayPal Express subscriptions gateway status.
type PaypalExpressSubscriptionsGatewayStatus string

const (
	// The status is enabled.
	PaypalExpressSubscriptionsGatewayStatusEnabled PaypalExpressSubscriptionsGatewayStatus = "ENABLED"
	// The status is disabled.
	PaypalExpressSubscriptionsGatewayStatusDisabled PaypalExpressSubscriptionsGatewayStatus = "DISABLED"
	// The status is pending.
	PaypalExpressSubscriptionsGatewayStatusPending PaypalExpressSubscriptionsGatewayStatus = "PENDING"
)

var AllPaypalExpressSubscriptionsGatewayStatus = []PaypalExpressSubscriptionsGatewayStatus{
	PaypalExpressSubscriptionsGatewayStatusEnabled,
	PaypalExpressSubscriptionsGatewayStatusDisabled,
	PaypalExpressSubscriptionsGatewayStatusPending,
}

func (e PaypalExpressSubscriptionsGatewayStatus) IsValid() bool {
	switch e {
	case PaypalExpressSubscriptionsGatewayStatusEnabled, PaypalExpressSubscriptionsGatewayStatusDisabled, PaypalExpressSubscriptionsGatewayStatusPending:
		return true
	}
	return false
}

func (e PaypalExpressSubscriptionsGatewayStatus) String() string {
	return string(e)
}

func (e *PaypalExpressSubscriptionsGatewayStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaypalExpressSubscriptionsGatewayStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaypalExpressSubscriptionsGatewayStatus", str)
	}
	return nil
}

func (e PaypalExpressSubscriptionsGatewayStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a percentage price adjustment type.
type PriceListAdjustmentType string

const (
	// Percentage decrease type. Prices will have a lower value.
	PriceListAdjustmentTypePercentageDecrease PriceListAdjustmentType = "PERCENTAGE_DECREASE"
	// Percentage increase type. Prices will have a higher value.
	PriceListAdjustmentTypePercentageIncrease PriceListAdjustmentType = "PERCENTAGE_INCREASE"
)

var AllPriceListAdjustmentType = []PriceListAdjustmentType{
	PriceListAdjustmentTypePercentageDecrease,
	PriceListAdjustmentTypePercentageIncrease,
}

func (e PriceListAdjustmentType) IsValid() bool {
	switch e {
	case PriceListAdjustmentTypePercentageDecrease, PriceListAdjustmentTypePercentageIncrease:
		return true
	}
	return false
}

func (e PriceListAdjustmentType) String() string {
	return string(e)
}

func (e *PriceListAdjustmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListAdjustmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListAdjustmentType", str)
	}
	return nil
}

func (e PriceListAdjustmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the origin of a price, either fixed (defined on the price list)
//
//	or relative (calculated using an adjustment via a price list parent configuration).
type PriceListPriceOriginType string

const (
	// The price is defined on the price list.
	PriceListPriceOriginTypeFixed PriceListPriceOriginType = "FIXED"
	// The price is relative to the parent price list.
	PriceListPriceOriginTypeRelative PriceListPriceOriginType = "RELATIVE"
)

var AllPriceListPriceOriginType = []PriceListPriceOriginType{
	PriceListPriceOriginTypeFixed,
	PriceListPriceOriginTypeRelative,
}

func (e PriceListPriceOriginType) IsValid() bool {
	switch e {
	case PriceListPriceOriginTypeFixed, PriceListPriceOriginTypeRelative:
		return true
	}
	return false
}

func (e PriceListPriceOriginType) String() string {
	return string(e)
}

func (e *PriceListPriceOriginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListPriceOriginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListPriceOriginType", str)
	}
	return nil
}

func (e PriceListPriceOriginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PriceListPriceUserError`.
type PriceListPriceUserErrorCode string

const (
	// The input value is blank.
	PriceListPriceUserErrorCodeBlank PriceListPriceUserErrorCode = "BLANK"
	// Price list does not exist.
	PriceListPriceUserErrorCodePriceListNotFound PriceListPriceUserErrorCode = "PRICE_LIST_NOT_FOUND"
	// The specified currency does not match the price list's currency.
	PriceListPriceUserErrorCodePriceListCurrencyMismatch PriceListPriceUserErrorCode = "PRICE_LIST_CURRENCY_MISMATCH"
	// The Price for specified Variant does not exist.
	PriceListPriceUserErrorCodeVariantNotFound PriceListPriceUserErrorCode = "VARIANT_NOT_FOUND"
	// Only fixed prices can be deleted.
	PriceListPriceUserErrorCodePriceNotFixed PriceListPriceUserErrorCode = "PRICE_NOT_FIXED"
)

var AllPriceListPriceUserErrorCode = []PriceListPriceUserErrorCode{
	PriceListPriceUserErrorCodeBlank,
	PriceListPriceUserErrorCodePriceListNotFound,
	PriceListPriceUserErrorCodePriceListCurrencyMismatch,
	PriceListPriceUserErrorCodeVariantNotFound,
	PriceListPriceUserErrorCodePriceNotFixed,
}

func (e PriceListPriceUserErrorCode) IsValid() bool {
	switch e {
	case PriceListPriceUserErrorCodeBlank, PriceListPriceUserErrorCodePriceListNotFound, PriceListPriceUserErrorCodePriceListCurrencyMismatch, PriceListPriceUserErrorCodeVariantNotFound, PriceListPriceUserErrorCodePriceNotFixed:
		return true
	}
	return false
}

func (e PriceListPriceUserErrorCode) String() string {
	return string(e)
}

func (e *PriceListPriceUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListPriceUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListPriceUserErrorCode", str)
	}
	return nil
}

func (e PriceListPriceUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the PriceList query.
type PriceListSortKeys string

const (
	// Sort by the `name` value.
	PriceListSortKeysName PriceListSortKeys = "NAME"
	// Sort by the `id` value.
	PriceListSortKeysID PriceListSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	PriceListSortKeysRelevance PriceListSortKeys = "RELEVANCE"
)

var AllPriceListSortKeys = []PriceListSortKeys{
	PriceListSortKeysName,
	PriceListSortKeysID,
	PriceListSortKeysRelevance,
}

func (e PriceListSortKeys) IsValid() bool {
	switch e {
	case PriceListSortKeysName, PriceListSortKeysID, PriceListSortKeysRelevance:
		return true
	}
	return false
}

func (e PriceListSortKeys) String() string {
	return string(e)
}

func (e *PriceListSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListSortKeys", str)
	}
	return nil
}

func (e PriceListSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PriceListUserError`.
type PriceListUserErrorCode string

const (
	// The input value is already taken.
	PriceListUserErrorCodeTaken PriceListUserErrorCode = "TAKEN"
	// The PriceList specified does not exist.
	PriceListUserErrorCodePriceListNotFound PriceListUserErrorCode = "PRICE_LIST_NOT_FOUND"
	// Cannot save the price list with context rule because the limit of context rules per shop was reached.
	PriceListUserErrorCodeContextRuleLimitReached PriceListUserErrorCode = "CONTEXT_RULE_LIMIT_REACHED"
	// A price list context rule cannot have more than one country.
	PriceListUserErrorCodeContextRuleCountriesLimit PriceListUserErrorCode = "CONTEXT_RULE_COUNTRIES_LIMIT"
	// A price list’s currency must be of the pricing rule’s country.
	PriceListUserErrorCodeCurrencyCountryMismatch PriceListUserErrorCode = "CURRENCY_COUNTRY_MISMATCH"
	// A country within a pricing rule must use a valid currency.
	PriceListUserErrorCodeCountryCurrencyMismatch PriceListUserErrorCode = "COUNTRY_CURRENCY_MISMATCH"
	// The adjustment value must be a positive value and not be greater than 100% for PERCENTAGE_DECREASE and not be greater than 1000% for PERCENTAGE_INCREASE.
	PriceListUserErrorCodeInvalidAdjustmentValue PriceListUserErrorCode = "INVALID_ADJUSTMENT_VALUE"
	// A price list for this country is already taken.
	PriceListUserErrorCodeContextRuleCountryTaken PriceListUserErrorCode = "CONTEXT_RULE_COUNTRY_TAKEN"
)

var AllPriceListUserErrorCode = []PriceListUserErrorCode{
	PriceListUserErrorCodeTaken,
	PriceListUserErrorCodePriceListNotFound,
	PriceListUserErrorCodeContextRuleLimitReached,
	PriceListUserErrorCodeContextRuleCountriesLimit,
	PriceListUserErrorCodeCurrencyCountryMismatch,
	PriceListUserErrorCodeCountryCurrencyMismatch,
	PriceListUserErrorCodeInvalidAdjustmentValue,
	PriceListUserErrorCodeContextRuleCountryTaken,
}

func (e PriceListUserErrorCode) IsValid() bool {
	switch e {
	case PriceListUserErrorCodeTaken, PriceListUserErrorCodePriceListNotFound, PriceListUserErrorCodeContextRuleLimitReached, PriceListUserErrorCodeContextRuleCountriesLimit, PriceListUserErrorCodeCurrencyCountryMismatch, PriceListUserErrorCodeCountryCurrencyMismatch, PriceListUserErrorCodeInvalidAdjustmentValue, PriceListUserErrorCodeContextRuleCountryTaken:
		return true
	}
	return false
}

func (e PriceListUserErrorCode) String() string {
	return string(e)
}

func (e *PriceListUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListUserErrorCode", str)
	}
	return nil
}

func (e PriceListUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the price rule's value is allocated to its entitled items.
type PriceRuleAllocationMethod string

const (
	// The value will be applied to each of the entitled items.
	PriceRuleAllocationMethodEach PriceRuleAllocationMethod = "EACH"
	// The value will be applied once across the entitled items.
	PriceRuleAllocationMethodAcross PriceRuleAllocationMethod = "ACROSS"
)

var AllPriceRuleAllocationMethod = []PriceRuleAllocationMethod{
	PriceRuleAllocationMethodEach,
	PriceRuleAllocationMethodAcross,
}

func (e PriceRuleAllocationMethod) IsValid() bool {
	switch e {
	case PriceRuleAllocationMethodEach, PriceRuleAllocationMethodAcross:
		return true
	}
	return false
}

func (e PriceRuleAllocationMethod) String() string {
	return string(e)
}

func (e *PriceRuleAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleAllocationMethod", str)
	}
	return nil
}

func (e PriceRuleAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by a price rule mutation.
type PriceRuleErrorCode string

const (
	// The input value is blank.
	PriceRuleErrorCodeBlank PriceRuleErrorCode = "BLANK"
	// The input value should be equal to the value allowed.
	PriceRuleErrorCodeEqualTo PriceRuleErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	PriceRuleErrorCodeGreaterThan PriceRuleErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	PriceRuleErrorCodeGreaterThanOrEqualTo PriceRuleErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value is invalid.
	PriceRuleErrorCodeInvalid PriceRuleErrorCode = "INVALID"
	// The input value should be less than the maximum value allowed.
	PriceRuleErrorCodeLessThan PriceRuleErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	PriceRuleErrorCodeLessThanOrEqualTo PriceRuleErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is already taken.
	PriceRuleErrorCodeTaken PriceRuleErrorCode = "TAKEN"
	// The input value is too long.
	PriceRuleErrorCodeTooLong PriceRuleErrorCode = "TOO_LONG"
	// The input value is too short.
	PriceRuleErrorCodeTooShort PriceRuleErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	PriceRuleErrorCodeInternalError PriceRuleErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	PriceRuleErrorCodeTooManyArguments PriceRuleErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	PriceRuleErrorCodeMissingArgument PriceRuleErrorCode = "MISSING_ARGUMENT"
	// Duplicate customer prerequisite id present.
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate                     PriceRuleErrorCode = "CUSTOMER_PREREQUISITE_DUPLICATE"
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants    PriceRuleErrorCode = "CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS"
	PriceRuleErrorCodeItemEntitlementInvalidType                        PriceRuleErrorCode = "ITEM_ENTITLEMENT_INVALID_TYPE"
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection               PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct                  PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant                  PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_VARIANT"
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection             PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct                PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant                PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT"
	PriceRuleErrorCodeItemEntitlementsInvalidCollection                 PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsInvalidProduct                    PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection      PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	PriceRuleErrorCodeItemEntitlementsInvalidVariant                    PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_VARIANT"
	PriceRuleErrorCodeItemEntitlementsMissing                           PriceRuleErrorCode = "ITEM_ENTITLEMENTS_MISSING"
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct              PriceRuleErrorCode = "VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT"
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants PriceRuleErrorCode = "CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS"
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection              PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_COLLECTION"
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct                 PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_PRODUCT"
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant                 PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_VARIANT"
	PriceRuleErrorCodeItemPrerequisitesExceededMax                      PriceRuleErrorCode = "ITEM_PREREQUISITES_EXCEEDED_MAX"
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection                PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_COLLECTION"
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct                   PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_PRODUCT"
	PriceRuleErrorCodeItemPrerequisitesInvalidType                      PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_TYPE"
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant                   PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_VARIANT"
	PriceRuleErrorCodeItemPrerequisitesMissing                          PriceRuleErrorCode = "ITEM_PREREQUISITES_MISSING"
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty                      PriceRuleErrorCode = "ITEM_PREREQUISITES_MUST_BE_EMPTY"
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange   PriceRuleErrorCode = "INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE"
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry              PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY"
	PriceRuleErrorCodeShippingEntitlementsExceededMax                   PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_EXCEEDED_MAX"
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry                PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_COUNTRY"
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection  PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	PriceRuleErrorCodeShippingEntitlementsMissing                       PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_MISSING"
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType    PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE"
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected   PriceRuleErrorCode = "BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED"
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax                  PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_EXCEEDED_MAX"
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection             PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_INVALID_SELECTION"
	PriceRuleErrorCodeCustomerPrerequisitesMissing                      PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_MISSING"
	PriceRuleErrorCodeCustomerSavedSearchDuplicate                      PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_DUPLICATE"
	PriceRuleErrorCodeCustomerSavedSearchExceededMax                    PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX"
	PriceRuleErrorCodeCustomerSavedSearchInvalid                        PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_INVALID"
	PriceRuleErrorCodeDiscountCodeDuplicate                             PriceRuleErrorCode = "DISCOUNT_CODE_DUPLICATE"
	PriceRuleErrorCodeBogoInvalidTargetSelection                        PriceRuleErrorCode = "BOGO_INVALID_TARGET_SELECTION"
	PriceRuleErrorCodeBogoInvalidTargetType                             PriceRuleErrorCode = "BOGO_INVALID_TARGET_TYPE"
	PriceRuleErrorCodeBogoInvalidValueType                              PriceRuleErrorCode = "BOGO_INVALID_VALUE_TYPE"
	// The allocation limit can only be set on buy-one-get-one type discounts.
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO"
	// The allocation limit must be a non-zero positive number.
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO"
	// The number of discount codes in the shop has reached its limit.
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode PriceRuleErrorCode = "PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE"
	// The number of discounts in the shop has reached its limit.
	PriceRuleErrorCodeShopExceededMaxPriceRules PriceRuleErrorCode = "SHOP_EXCEEDED_MAX_PRICE_RULES"
	// The discount end date must be after the start date.
	PriceRuleErrorCodeEndDateBeforeStartDate PriceRuleErrorCode = "END_DATE_BEFORE_START_DATE"
	// The percentage value must be between 0 and -100.
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange PriceRuleErrorCode = "PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE"
	// Only one of the minimum subtotal or minimum quantity condition can be defined.
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent PriceRuleErrorCode = "PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// The allocation method must be "across" for the provided target selection.
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection PriceRuleErrorCode = "ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION"
	// The discount must apply on either one-time purchase or subscription items, or both.
	PriceRuleErrorCodeAppliesOnNothing PriceRuleErrorCode = "APPLIES_ON_NOTHING"
	// The recurring cycle limit must be 1 when a discount does not apply on subscription items.
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems PriceRuleErrorCode = "MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS"
	// Exceeding the maximum number is allowed.
	PriceRuleErrorCodeExceededMax PriceRuleErrorCode = "EXCEEDED_MAX"
	// Cannot have both prerequisite customers and prerequisite segments.
	PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected PriceRuleErrorCode = "BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED"
	// Cannot have both saved searches and segments prerequisites.
	PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected PriceRuleErrorCode = "BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED"
	// Customer segment prerequisites exceeded max number.
	PriceRuleErrorCodeCustomerSegmentExceededMax PriceRuleErrorCode = "CUSTOMER_SEGMENT_EXCEEDED_MAX"
	// Customer segment prerequisite invalid id.
	PriceRuleErrorCodeCustomerSegmentInvalid PriceRuleErrorCode = "CUSTOMER_SEGMENT_INVALID"
	// Duplicate customer segment prerequisite id present.
	PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate PriceRuleErrorCode = "CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE"
)

var AllPriceRuleErrorCode = []PriceRuleErrorCode{
	PriceRuleErrorCodeBlank,
	PriceRuleErrorCodeEqualTo,
	PriceRuleErrorCodeGreaterThan,
	PriceRuleErrorCodeGreaterThanOrEqualTo,
	PriceRuleErrorCodeInvalid,
	PriceRuleErrorCodeLessThan,
	PriceRuleErrorCodeLessThanOrEqualTo,
	PriceRuleErrorCodeTaken,
	PriceRuleErrorCodeTooLong,
	PriceRuleErrorCodeTooShort,
	PriceRuleErrorCodeInternalError,
	PriceRuleErrorCodeTooManyArguments,
	PriceRuleErrorCodeMissingArgument,
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate,
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants,
	PriceRuleErrorCodeItemEntitlementInvalidType,
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection,
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct,
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant,
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection,
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct,
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant,
	PriceRuleErrorCodeItemEntitlementsInvalidCollection,
	PriceRuleErrorCodeItemEntitlementsInvalidProduct,
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeItemEntitlementsInvalidVariant,
	PriceRuleErrorCodeItemEntitlementsMissing,
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct,
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants,
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection,
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct,
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant,
	PriceRuleErrorCodeItemPrerequisitesExceededMax,
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection,
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct,
	PriceRuleErrorCodeItemPrerequisitesInvalidType,
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant,
	PriceRuleErrorCodeItemPrerequisitesMissing,
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty,
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange,
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry,
	PriceRuleErrorCodeShippingEntitlementsExceededMax,
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry,
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeShippingEntitlementsMissing,
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType,
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected,
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax,
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection,
	PriceRuleErrorCodeCustomerPrerequisitesMissing,
	PriceRuleErrorCodeCustomerSavedSearchDuplicate,
	PriceRuleErrorCodeCustomerSavedSearchExceededMax,
	PriceRuleErrorCodeCustomerSavedSearchInvalid,
	PriceRuleErrorCodeDiscountCodeDuplicate,
	PriceRuleErrorCodeBogoInvalidTargetSelection,
	PriceRuleErrorCodeBogoInvalidTargetType,
	PriceRuleErrorCodeBogoInvalidValueType,
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo,
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero,
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode,
	PriceRuleErrorCodeShopExceededMaxPriceRules,
	PriceRuleErrorCodeEndDateBeforeStartDate,
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange,
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent,
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection,
	PriceRuleErrorCodeAppliesOnNothing,
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems,
	PriceRuleErrorCodeExceededMax,
	PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected,
	PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected,
	PriceRuleErrorCodeCustomerSegmentExceededMax,
	PriceRuleErrorCodeCustomerSegmentInvalid,
	PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate,
}

func (e PriceRuleErrorCode) IsValid() bool {
	switch e {
	case PriceRuleErrorCodeBlank, PriceRuleErrorCodeEqualTo, PriceRuleErrorCodeGreaterThan, PriceRuleErrorCodeGreaterThanOrEqualTo, PriceRuleErrorCodeInvalid, PriceRuleErrorCodeLessThan, PriceRuleErrorCodeLessThanOrEqualTo, PriceRuleErrorCodeTaken, PriceRuleErrorCodeTooLong, PriceRuleErrorCodeTooShort, PriceRuleErrorCodeInternalError, PriceRuleErrorCodeTooManyArguments, PriceRuleErrorCodeMissingArgument, PriceRuleErrorCodeCustomerPrerequisiteDuplicate, PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants, PriceRuleErrorCodeItemEntitlementInvalidType, PriceRuleErrorCodeItemEntitlementsDuplicateCollection, PriceRuleErrorCodeItemEntitlementsDuplicateProduct, PriceRuleErrorCodeItemEntitlementsDuplicateVariant, PriceRuleErrorCodeItemEntitlementsExceededMaxCollection, PriceRuleErrorCodeItemEntitlementsExceededMaxProduct, PriceRuleErrorCodeItemEntitlementsExceededMaxVariant, PriceRuleErrorCodeItemEntitlementsInvalidCollection, PriceRuleErrorCodeItemEntitlementsInvalidProduct, PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeItemEntitlementsInvalidVariant, PriceRuleErrorCodeItemEntitlementsMissing, PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct, PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants, PriceRuleErrorCodeItemPrerequisitesDuplicateCollection, PriceRuleErrorCodeItemPrerequisitesDuplicateProduct, PriceRuleErrorCodeItemPrerequisitesDuplicateVariant, PriceRuleErrorCodeItemPrerequisitesExceededMax, PriceRuleErrorCodeItemPrerequisitesInvalidCollection, PriceRuleErrorCodeItemPrerequisitesInvalidProduct, PriceRuleErrorCodeItemPrerequisitesInvalidType, PriceRuleErrorCodeItemPrerequisitesInvalidVariant, PriceRuleErrorCodeItemPrerequisitesMissing, PriceRuleErrorCodeItemPrerequisitesMustBeEmpty, PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange, PriceRuleErrorCodeShippingEntitlementsDuplicateCountry, PriceRuleErrorCodeShippingEntitlementsExceededMax, PriceRuleErrorCodeShippingEntitlementsInvalidCountry, PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeShippingEntitlementsMissing, PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType, PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected, PriceRuleErrorCodeCustomerPrerequisitesExceededMax, PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection, PriceRuleErrorCodeCustomerPrerequisitesMissing, PriceRuleErrorCodeCustomerSavedSearchDuplicate, PriceRuleErrorCodeCustomerSavedSearchExceededMax, PriceRuleErrorCodeCustomerSavedSearchInvalid, PriceRuleErrorCodeDiscountCodeDuplicate, PriceRuleErrorCodeBogoInvalidTargetSelection, PriceRuleErrorCodeBogoInvalidTargetType, PriceRuleErrorCodeBogoInvalidValueType, PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo, PriceRuleErrorCodePriceRuleAllocationLimitIsZero, PriceRuleErrorCodePriceRuleExceededMaxDiscountCode, PriceRuleErrorCodeShopExceededMaxPriceRules, PriceRuleErrorCodeEndDateBeforeStartDate, PriceRuleErrorCodePriceRulePercentageValueOutsideRange, PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent, PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection, PriceRuleErrorCodeAppliesOnNothing, PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems, PriceRuleErrorCodeExceededMax, PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected, PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected, PriceRuleErrorCodeCustomerSegmentExceededMax, PriceRuleErrorCodeCustomerSegmentInvalid, PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate:
		return true
	}
	return false
}

func (e PriceRuleErrorCode) String() string {
	return string(e)
}

func (e *PriceRuleErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleErrorCode", str)
	}
	return nil
}

func (e PriceRuleErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A list of features used by the price rule.
type PriceRuleFeature string

const (
	// The price rule supports quantity BXGY discounts.
	PriceRuleFeatureBuyOneGetOne PriceRuleFeature = "BUY_ONE_GET_ONE"
	// The price rule supports BXGY discounts using custom allocation limit.
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit PriceRuleFeature = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleFeatureBulk PriceRuleFeature = "BULK"
	// The price rule supports specific customers.
	PriceRuleFeatureSpecificCustomers PriceRuleFeature = "SPECIFIC_CUSTOMERS"
	// The price rule supports quantity discounts.
	PriceRuleFeatureQuantityDiscounts PriceRuleFeature = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleFeature = []PriceRuleFeature{
	PriceRuleFeatureBuyOneGetOne,
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit,
	PriceRuleFeatureBulk,
	PriceRuleFeatureSpecificCustomers,
	PriceRuleFeatureQuantityDiscounts,
}

func (e PriceRuleFeature) IsValid() bool {
	switch e {
	case PriceRuleFeatureBuyOneGetOne, PriceRuleFeatureBuyOneGetOneWithAllocationLimit, PriceRuleFeatureBulk, PriceRuleFeatureSpecificCustomers, PriceRuleFeatureQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleFeature) String() string {
	return string(e)
}

func (e *PriceRuleFeature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleFeature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleFeature", str)
	}
	return nil
}

func (e PriceRuleFeature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Page type where shareable URL lands.
type PriceRuleShareableURLTargetType string

const (
	PriceRuleShareableURLTargetTypeHome       PriceRuleShareableURLTargetType = "HOME"
	PriceRuleShareableURLTargetTypeProduct    PriceRuleShareableURLTargetType = "PRODUCT"
	PriceRuleShareableURLTargetTypeCollection PriceRuleShareableURLTargetType = "COLLECTION"
)

var AllPriceRuleShareableURLTargetType = []PriceRuleShareableURLTargetType{
	PriceRuleShareableURLTargetTypeHome,
	PriceRuleShareableURLTargetTypeProduct,
	PriceRuleShareableURLTargetTypeCollection,
}

func (e PriceRuleShareableURLTargetType) IsValid() bool {
	switch e {
	case PriceRuleShareableURLTargetTypeHome, PriceRuleShareableURLTargetTypeProduct, PriceRuleShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e PriceRuleShareableURLTargetType) String() string {
	return string(e)
}

func (e *PriceRuleShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleShareableUrlTargetType", str)
	}
	return nil
}

func (e PriceRuleShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the PriceRule query.
type PriceRuleSortKeys string

const (
	// Sort by the `starts_at` value.
	PriceRuleSortKeysStartsAt PriceRuleSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	PriceRuleSortKeysEndsAt PriceRuleSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	PriceRuleSortKeysTitle PriceRuleSortKeys = "TITLE"
	// Sort by the `created_at` value.
	PriceRuleSortKeysCreatedAt PriceRuleSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	PriceRuleSortKeysUpdatedAt PriceRuleSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	PriceRuleSortKeysID PriceRuleSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	PriceRuleSortKeysRelevance PriceRuleSortKeys = "RELEVANCE"
)

var AllPriceRuleSortKeys = []PriceRuleSortKeys{
	PriceRuleSortKeysStartsAt,
	PriceRuleSortKeysEndsAt,
	PriceRuleSortKeysTitle,
	PriceRuleSortKeysCreatedAt,
	PriceRuleSortKeysUpdatedAt,
	PriceRuleSortKeysID,
	PriceRuleSortKeysRelevance,
}

func (e PriceRuleSortKeys) IsValid() bool {
	switch e {
	case PriceRuleSortKeysStartsAt, PriceRuleSortKeysEndsAt, PriceRuleSortKeysTitle, PriceRuleSortKeysCreatedAt, PriceRuleSortKeysUpdatedAt, PriceRuleSortKeysID, PriceRuleSortKeysRelevance:
		return true
	}
	return false
}

func (e PriceRuleSortKeys) String() string {
	return string(e)
}

func (e *PriceRuleSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleSortKeys", str)
	}
	return nil
}

func (e PriceRuleSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the price rule.
type PriceRuleStatus string

const (
	PriceRuleStatusActive    PriceRuleStatus = "ACTIVE"
	PriceRuleStatusExpired   PriceRuleStatus = "EXPIRED"
	PriceRuleStatusScheduled PriceRuleStatus = "SCHEDULED"
)

var AllPriceRuleStatus = []PriceRuleStatus{
	PriceRuleStatusActive,
	PriceRuleStatusExpired,
	PriceRuleStatusScheduled,
}

func (e PriceRuleStatus) IsValid() bool {
	switch e {
	case PriceRuleStatusActive, PriceRuleStatusExpired, PriceRuleStatusScheduled:
		return true
	}
	return false
}

func (e PriceRuleStatus) String() string {
	return string(e)
}

func (e *PriceRuleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleStatus", str)
	}
	return nil
}

func (e PriceRuleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of lines (line_item or shipping_line) to which the price rule applies.
type PriceRuleTarget string

const (
	// The price rule applies to line items.
	PriceRuleTargetLineItem PriceRuleTarget = "LINE_ITEM"
	// The price rule applies to shipping lines.
	PriceRuleTargetShippingLine PriceRuleTarget = "SHIPPING_LINE"
)

var AllPriceRuleTarget = []PriceRuleTarget{
	PriceRuleTargetLineItem,
	PriceRuleTargetShippingLine,
}

func (e PriceRuleTarget) IsValid() bool {
	switch e {
	case PriceRuleTargetLineItem, PriceRuleTargetShippingLine:
		return true
	}
	return false
}

func (e PriceRuleTarget) String() string {
	return string(e)
}

func (e *PriceRuleTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTarget", str)
	}
	return nil
}

func (e PriceRuleTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A list of features used by the price rule.
type PriceRuleTrait string

const (
	// The price rule supports quantity BXGY discounts.
	PriceRuleTraitBuyOneGetOne PriceRuleTrait = "BUY_ONE_GET_ONE"
	// The price rule supports BXGY discounts using custom allocation limit.
	PriceRuleTraitBuyOneGetOneWithAllocationLimit PriceRuleTrait = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleTraitBulk PriceRuleTrait = "BULK"
	// The price rule supports specific customers.
	PriceRuleTraitSpecificCustomers PriceRuleTrait = "SPECIFIC_CUSTOMERS"
	// The price rule supports quantity discounts.
	PriceRuleTraitQuantityDiscounts PriceRuleTrait = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleTrait = []PriceRuleTrait{
	PriceRuleTraitBuyOneGetOne,
	PriceRuleTraitBuyOneGetOneWithAllocationLimit,
	PriceRuleTraitBulk,
	PriceRuleTraitSpecificCustomers,
	PriceRuleTraitQuantityDiscounts,
}

func (e PriceRuleTrait) IsValid() bool {
	switch e {
	case PriceRuleTraitBuyOneGetOne, PriceRuleTraitBuyOneGetOneWithAllocationLimit, PriceRuleTraitBulk, PriceRuleTraitSpecificCustomers, PriceRuleTraitQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleTrait) String() string {
	return string(e)
}

func (e *PriceRuleTrait) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTrait(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTrait", str)
	}
	return nil
}

func (e PriceRuleTrait) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Supported private metafield value types.
type PrivateMetafieldValueType string

const (
	// A string metafield.
	PrivateMetafieldValueTypeString PrivateMetafieldValueType = "STRING"
	// An integer metafield.
	PrivateMetafieldValueTypeInteger PrivateMetafieldValueType = "INTEGER"
	// A JSON string metafield.
	PrivateMetafieldValueTypeJSONString PrivateMetafieldValueType = "JSON_STRING"
	// A float metafield.
	PrivateMetafieldValueTypeFloat PrivateMetafieldValueType = "FLOAT"
	// A boolean metafield.
	PrivateMetafieldValueTypeBoolean PrivateMetafieldValueType = "BOOLEAN"
)

var AllPrivateMetafieldValueType = []PrivateMetafieldValueType{
	PrivateMetafieldValueTypeString,
	PrivateMetafieldValueTypeInteger,
	PrivateMetafieldValueTypeJSONString,
	PrivateMetafieldValueTypeFloat,
	PrivateMetafieldValueTypeBoolean,
}

func (e PrivateMetafieldValueType) IsValid() bool {
	switch e {
	case PrivateMetafieldValueTypeString, PrivateMetafieldValueTypeInteger, PrivateMetafieldValueTypeJSONString, PrivateMetafieldValueTypeFloat, PrivateMetafieldValueTypeBoolean:
		return true
	}
	return false
}

func (e PrivateMetafieldValueType) String() string {
	return string(e)
}

func (e *PrivateMetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrivateMetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrivateMetafieldValueType", str)
	}
	return nil
}

func (e PrivateMetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductChangeStatusUserError`.
type ProductChangeStatusUserErrorCode string

const (
	// Product could not be found.
	ProductChangeStatusUserErrorCodeProductNotFound ProductChangeStatusUserErrorCode = "PRODUCT_NOT_FOUND"
)

var AllProductChangeStatusUserErrorCode = []ProductChangeStatusUserErrorCode{
	ProductChangeStatusUserErrorCodeProductNotFound,
}

func (e ProductChangeStatusUserErrorCode) IsValid() bool {
	switch e {
	case ProductChangeStatusUserErrorCodeProductNotFound:
		return true
	}
	return false
}

func (e ProductChangeStatusUserErrorCode) String() string {
	return string(e)
}

func (e *ProductChangeStatusUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductChangeStatusUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductChangeStatusUserErrorCode", str)
	}
	return nil
}

func (e ProductChangeStatusUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductCollection query.
type ProductCollectionSortKeys string

const (
	// Sort by the `title` value.
	ProductCollectionSortKeysTitle ProductCollectionSortKeys = "TITLE"
	// Sort by the `price` value.
	ProductCollectionSortKeysPrice ProductCollectionSortKeys = "PRICE"
	// Sort by the `best-selling` value.
	ProductCollectionSortKeysBestSelling ProductCollectionSortKeys = "BEST_SELLING"
	// Sort by the `created` value.
	ProductCollectionSortKeysCreated ProductCollectionSortKeys = "CREATED"
	// Sort by the `id` value.
	ProductCollectionSortKeysID ProductCollectionSortKeys = "ID"
	// Sort by the `manual` value.
	ProductCollectionSortKeysManual ProductCollectionSortKeys = "MANUAL"
	// Sort by the `collection-default` value.
	ProductCollectionSortKeysCollectionDefault ProductCollectionSortKeys = "COLLECTION_DEFAULT"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	ProductCollectionSortKeysRelevance ProductCollectionSortKeys = "RELEVANCE"
)

var AllProductCollectionSortKeys = []ProductCollectionSortKeys{
	ProductCollectionSortKeysTitle,
	ProductCollectionSortKeysPrice,
	ProductCollectionSortKeysBestSelling,
	ProductCollectionSortKeysCreated,
	ProductCollectionSortKeysID,
	ProductCollectionSortKeysManual,
	ProductCollectionSortKeysCollectionDefault,
	ProductCollectionSortKeysRelevance,
}

func (e ProductCollectionSortKeys) IsValid() bool {
	switch e {
	case ProductCollectionSortKeysTitle, ProductCollectionSortKeysPrice, ProductCollectionSortKeysBestSelling, ProductCollectionSortKeysCreated, ProductCollectionSortKeysID, ProductCollectionSortKeysManual, ProductCollectionSortKeysCollectionDefault, ProductCollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductCollectionSortKeys) String() string {
	return string(e)
}

func (e *ProductCollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductCollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductCollectionSortKeys", str)
	}
	return nil
}

func (e ProductCollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductImage query.
type ProductImageSortKeys string

const (
	// Sort by the `created_at` value.
	ProductImageSortKeysCreatedAt ProductImageSortKeys = "CREATED_AT"
	// Sort by the `position` value.
	ProductImageSortKeysPosition ProductImageSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductImageSortKeysID ProductImageSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	ProductImageSortKeysRelevance ProductImageSortKeys = "RELEVANCE"
)

var AllProductImageSortKeys = []ProductImageSortKeys{
	ProductImageSortKeysCreatedAt,
	ProductImageSortKeysPosition,
	ProductImageSortKeysID,
	ProductImageSortKeysRelevance,
}

func (e ProductImageSortKeys) IsValid() bool {
	switch e {
	case ProductImageSortKeysCreatedAt, ProductImageSortKeysPosition, ProductImageSortKeysID, ProductImageSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductImageSortKeys) String() string {
	return string(e)
}

func (e *ProductImageSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductImageSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductImageSortKeys", str)
	}
	return nil
}

func (e ProductImageSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductMedia query.
type ProductMediaSortKeys string

const (
	// Sort by the `position` value.
	ProductMediaSortKeysPosition ProductMediaSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductMediaSortKeysID ProductMediaSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	ProductMediaSortKeysRelevance ProductMediaSortKeys = "RELEVANCE"
)

var AllProductMediaSortKeys = []ProductMediaSortKeys{
	ProductMediaSortKeysPosition,
	ProductMediaSortKeysID,
	ProductMediaSortKeysRelevance,
}

func (e ProductMediaSortKeys) IsValid() bool {
	switch e {
	case ProductMediaSortKeysPosition, ProductMediaSortKeysID, ProductMediaSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductMediaSortKeys) String() string {
	return string(e)
}

func (e *ProductMediaSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductMediaSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductMediaSortKeys", str)
	}
	return nil
}

func (e ProductMediaSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Product query.
type ProductSortKeys string

const (
	// Sort by the `title` value.
	ProductSortKeysTitle ProductSortKeys = "TITLE"
	// Sort by the `product_type` value.
	ProductSortKeysProductType ProductSortKeys = "PRODUCT_TYPE"
	// Sort by the `vendor` value.
	ProductSortKeysVendor ProductSortKeys = "VENDOR"
	// Sort by the `inventory_total` value.
	ProductSortKeysInventoryTotal ProductSortKeys = "INVENTORY_TOTAL"
	// Sort by the `updated_at` value.
	ProductSortKeysUpdatedAt ProductSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	ProductSortKeysCreatedAt ProductSortKeys = "CREATED_AT"
	// Sort by the `published_at` value.
	ProductSortKeysPublishedAt ProductSortKeys = "PUBLISHED_AT"
	// Sort by the `id` value.
	ProductSortKeysID ProductSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	ProductSortKeysRelevance ProductSortKeys = "RELEVANCE"
)

var AllProductSortKeys = []ProductSortKeys{
	ProductSortKeysTitle,
	ProductSortKeysProductType,
	ProductSortKeysVendor,
	ProductSortKeysInventoryTotal,
	ProductSortKeysUpdatedAt,
	ProductSortKeysCreatedAt,
	ProductSortKeysPublishedAt,
	ProductSortKeysID,
	ProductSortKeysRelevance,
}

func (e ProductSortKeys) IsValid() bool {
	switch e {
	case ProductSortKeysTitle, ProductSortKeysProductType, ProductSortKeysVendor, ProductSortKeysInventoryTotal, ProductSortKeysUpdatedAt, ProductSortKeysCreatedAt, ProductSortKeysPublishedAt, ProductSortKeysID, ProductSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductSortKeys) String() string {
	return string(e)
}

func (e *ProductSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSortKeys", str)
	}
	return nil
}

func (e ProductSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible product statuses.
type ProductStatus string

const (
	// The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active.
	ProductStatusActive ProductStatus = "ACTIVE"
	// The product is no longer being sold and isn't available to customers on sales channels and apps.
	ProductStatusArchived ProductStatus = "ARCHIVED"
	// The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
	ProductStatusDraft ProductStatus = "DRAFT"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusArchived,
	ProductStatusDraft,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusArchived, ProductStatusDraft:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the method of inventory tracking for a product variant.
type ProductVariantInventoryManagement string

const (
	// This product variant's inventory is tracked by Shopify. In the unstable API version, this product variant's inventory could also be tracked by both Shopify and a third-party fulfillment service.
	ProductVariantInventoryManagementShopify ProductVariantInventoryManagement = "SHOPIFY"
	// This product variant's inventory is not tracked.
	ProductVariantInventoryManagementNotManaged ProductVariantInventoryManagement = "NOT_MANAGED"
	// This product variant's inventory is tracked by a third-party fulfillment service.
	ProductVariantInventoryManagementFulfillmentService ProductVariantInventoryManagement = "FULFILLMENT_SERVICE"
)

var AllProductVariantInventoryManagement = []ProductVariantInventoryManagement{
	ProductVariantInventoryManagementShopify,
	ProductVariantInventoryManagementNotManaged,
	ProductVariantInventoryManagementFulfillmentService,
}

func (e ProductVariantInventoryManagement) IsValid() bool {
	switch e {
	case ProductVariantInventoryManagementShopify, ProductVariantInventoryManagementNotManaged, ProductVariantInventoryManagementFulfillmentService:
		return true
	}
	return false
}

func (e ProductVariantInventoryManagement) String() string {
	return string(e)
}

func (e *ProductVariantInventoryManagement) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryManagement(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryManagement", str)
	}
	return nil
}

func (e ProductVariantInventoryManagement) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the inventory policy of a product variant once it is out of stock.
type ProductVariantInventoryPolicy string

const (
	// Customers can't buy this product variant after it's out of stock.
	ProductVariantInventoryPolicyDeny ProductVariantInventoryPolicy = "DENY"
	// Customers can buy this product variant after it's out of stock.
	ProductVariantInventoryPolicyContinue ProductVariantInventoryPolicy = "CONTINUE"
)

var AllProductVariantInventoryPolicy = []ProductVariantInventoryPolicy{
	ProductVariantInventoryPolicyDeny,
	ProductVariantInventoryPolicyContinue,
}

func (e ProductVariantInventoryPolicy) IsValid() bool {
	switch e {
	case ProductVariantInventoryPolicyDeny, ProductVariantInventoryPolicyContinue:
		return true
	}
	return false
}

func (e ProductVariantInventoryPolicy) String() string {
	return string(e)
}

func (e *ProductVariantInventoryPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryPolicy", str)
	}
	return nil
}

func (e ProductVariantInventoryPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductVariant query.
type ProductVariantSortKeys string

const (
	// Sort by the `title` value.
	ProductVariantSortKeysTitle ProductVariantSortKeys = "TITLE"
	// Sort by the `name` value.
	ProductVariantSortKeysName ProductVariantSortKeys = "NAME"
	// Sort by the `sku` value.
	ProductVariantSortKeysSku ProductVariantSortKeys = "SKU"
	// Sort by the `inventory_quantity` value.
	ProductVariantSortKeysInventoryQuantity ProductVariantSortKeys = "INVENTORY_QUANTITY"
	// Sort by the `inventory_management` value.
	ProductVariantSortKeysInventoryManagement ProductVariantSortKeys = "INVENTORY_MANAGEMENT"
	// Sort by the `inventory_levels.available` value.
	ProductVariantSortKeysInventoryLevelsAvailable ProductVariantSortKeys = "INVENTORY_LEVELS_AVAILABLE"
	// Sort by the `inventory_policy` value.
	ProductVariantSortKeysInventoryPolicy ProductVariantSortKeys = "INVENTORY_POLICY"
	// Sort by the `full_title` value.
	ProductVariantSortKeysFullTitle ProductVariantSortKeys = "FULL_TITLE"
	// Sort by the `popular` value.
	ProductVariantSortKeysPopular ProductVariantSortKeys = "POPULAR"
	// Sort by the `position` value.
	ProductVariantSortKeysPosition ProductVariantSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductVariantSortKeysID ProductVariantSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	ProductVariantSortKeysRelevance ProductVariantSortKeys = "RELEVANCE"
)

var AllProductVariantSortKeys = []ProductVariantSortKeys{
	ProductVariantSortKeysTitle,
	ProductVariantSortKeysName,
	ProductVariantSortKeysSku,
	ProductVariantSortKeysInventoryQuantity,
	ProductVariantSortKeysInventoryManagement,
	ProductVariantSortKeysInventoryLevelsAvailable,
	ProductVariantSortKeysInventoryPolicy,
	ProductVariantSortKeysFullTitle,
	ProductVariantSortKeysPopular,
	ProductVariantSortKeysPosition,
	ProductVariantSortKeysID,
	ProductVariantSortKeysRelevance,
}

func (e ProductVariantSortKeys) IsValid() bool {
	switch e {
	case ProductVariantSortKeysTitle, ProductVariantSortKeysName, ProductVariantSortKeysSku, ProductVariantSortKeysInventoryQuantity, ProductVariantSortKeysInventoryManagement, ProductVariantSortKeysInventoryLevelsAvailable, ProductVariantSortKeysInventoryPolicy, ProductVariantSortKeysFullTitle, ProductVariantSortKeysPopular, ProductVariantSortKeysPosition, ProductVariantSortKeysID, ProductVariantSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductVariantSortKeys) String() string {
	return string(e)
}

func (e *ProductVariantSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantSortKeys", str)
	}
	return nil
}

func (e ProductVariantSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
type ProductVariantsBulkCreateUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist ProductVariantsBulkCreateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// On create, this key cannot be used.
	ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate ProductVariantsBulkCreateUserErrorCode = "NO_KEY_ON_CREATE"
	// Variant already exists.
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists ProductVariantsBulkCreateUserErrorCode = "VARIANT_ALREADY_EXISTS"
	// Variant price must be greater than or equal to zero.
	ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo ProductVariantsBulkCreateUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Variant options are not enough.
	ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues ProductVariantsBulkCreateUserErrorCode = "NEED_TO_ADD_OPTION_VALUES"
	// Variant options are more than the product options.
	ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions ProductVariantsBulkCreateUserErrorCode = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
	// Inventory locations cannot exceed the allowed resource limit or 10.
	ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations ProductVariantsBulkCreateUserErrorCode = "TOO_MANY_INVENTORY_LOCATIONS"
	// You reached the limit of available SKUs in your current plan.
	ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation ProductVariantsBulkCreateUserErrorCode = "SUBSCRIPTION_VIOLATION"
	// Variant options already exist. Please change the variant option(s).
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue ProductVariantsBulkCreateUserErrorCode = "VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE"
	// Quantity could not be set. The location was not found.
	ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound ProductVariantsBulkCreateUserErrorCode = "TRACKED_VARIANT_LOCATION_NOT_FOUND"
	// Input must be for this product.
	ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct ProductVariantsBulkCreateUserErrorCode = "MUST_BE_FOR_THIS_PRODUCT"
	// Input is not defined for this shop.
	ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop ProductVariantsBulkCreateUserErrorCode = "NOT_DEFINED_FOR_SHOP"
	// Invalid input detected.
	ProductVariantsBulkCreateUserErrorCodeInvalid ProductVariantsBulkCreateUserErrorCode = "INVALID"
	// Price cannot take a negative value.
	ProductVariantsBulkCreateUserErrorCodeNegativePriceValue ProductVariantsBulkCreateUserErrorCode = "NEGATIVE_PRICE_VALUE"
)

var AllProductVariantsBulkCreateUserErrorCode = []ProductVariantsBulkCreateUserErrorCode{
	ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate,
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists,
	ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo,
	ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues,
	ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions,
	ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations,
	ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation,
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue,
	ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound,
	ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct,
	ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop,
	ProductVariantsBulkCreateUserErrorCodeInvalid,
	ProductVariantsBulkCreateUserErrorCodeNegativePriceValue,
}

func (e ProductVariantsBulkCreateUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist, ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate, ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists, ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo, ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues, ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions, ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations, ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation, ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue, ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound, ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct, ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop, ProductVariantsBulkCreateUserErrorCodeInvalid, ProductVariantsBulkCreateUserErrorCodeNegativePriceValue:
		return true
	}
	return false
}

func (e ProductVariantsBulkCreateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkCreateUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
type ProductVariantsBulkDeleteUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist ProductVariantsBulkDeleteUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Cannot delete default variant.
	ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant ProductVariantsBulkDeleteUserErrorCode = "CANNOT_DELETE_LAST_VARIANT"
	// The variant does not exist.
	ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct ProductVariantsBulkDeleteUserErrorCode = "AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT"
)

var AllProductVariantsBulkDeleteUserErrorCode = []ProductVariantsBulkDeleteUserErrorCode{
	ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant,
	ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct,
}

func (e ProductVariantsBulkDeleteUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist, ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant, ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct:
		return true
	}
	return false
}

func (e ProductVariantsBulkDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkDeleteUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
type ProductVariantsBulkReorderUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist ProductVariantsBulkReorderUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Product Variant does not exist.
	ProductVariantsBulkReorderUserErrorCodeMissingVariant ProductVariantsBulkReorderUserErrorCode = "MISSING_VARIANT"
	// Product Variant position can not be zero or negative number.
	ProductVariantsBulkReorderUserErrorCodeInvalidPosition ProductVariantsBulkReorderUserErrorCode = "INVALID_POSITION"
	// Product Variant ids must be uniqe.
	ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID ProductVariantsBulkReorderUserErrorCode = "DUPLICATED_VARIANT_ID"
)

var AllProductVariantsBulkReorderUserErrorCode = []ProductVariantsBulkReorderUserErrorCode{
	ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkReorderUserErrorCodeMissingVariant,
	ProductVariantsBulkReorderUserErrorCodeInvalidPosition,
	ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID,
}

func (e ProductVariantsBulkReorderUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist, ProductVariantsBulkReorderUserErrorCodeMissingVariant, ProductVariantsBulkReorderUserErrorCodeInvalidPosition, ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID:
		return true
	}
	return false
}

func (e ProductVariantsBulkReorderUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkReorderUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkReorderUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkReorderUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkReorderUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
type ProductVariantsBulkUpdateUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Product variant is missing ID attribute.
	ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_VARIANT_ID_MISSING"
	// Product variant does not exist.
	ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Inventory quantities cannot be updated with variants API.
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate ProductVariantsBulkUpdateUserErrorCode = "NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE"
	// The variant already exists.
	ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists ProductVariantsBulkUpdateUserErrorCode = "VARIANT_ALREADY_EXISTS"
	// The price of the variant must be greater than or equal to zero.
	ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo ProductVariantsBulkUpdateUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Variant options are not enough.
	ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues ProductVariantsBulkUpdateUserErrorCode = "NEED_TO_ADD_OPTION_VALUES"
	// Variant options are more than the product options.
	ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions ProductVariantsBulkUpdateUserErrorCode = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
	// You reached the limit of available SKUs in your current plan.
	ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation ProductVariantsBulkUpdateUserErrorCode = "SUBSCRIPTION_VIOLATION"
	// Inventory_quanties cannot be provided during update.
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate ProductVariantsBulkUpdateUserErrorCode = "NO_INVENTORY_QUANTITES_DURING_UPDATE"
	// Price cannot take a negative value.
	ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue ProductVariantsBulkUpdateUserErrorCode = "NEGATIVE_PRICE_VALUE"
)

var AllProductVariantsBulkUpdateUserErrorCode = []ProductVariantsBulkUpdateUserErrorCode{
	ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing,
	ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist,
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate,
	ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists,
	ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo,
	ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues,
	ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions,
	ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation,
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate,
	ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue,
}

func (e ProductVariantsBulkUpdateUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist, ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing, ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist, ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate, ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists, ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo, ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues, ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions, ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation, ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate, ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue:
		return true
	}
	return false
}

func (e ProductVariantsBulkUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkUpdateUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
type PubSubWebhookSubscriptionCreateUserErrorCode string

const (
	// Invalid parameters provided.
	PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters PubSubWebhookSubscriptionCreateUserErrorCode = "INVALID_PARAMETERS"
)

var AllPubSubWebhookSubscriptionCreateUserErrorCode = []PubSubWebhookSubscriptionCreateUserErrorCode{
	PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters,
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) IsValid() bool {
	switch e {
	case PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters:
		return true
	}
	return false
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) String() string {
	return string(e)
}

func (e *PubSubWebhookSubscriptionCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PubSubWebhookSubscriptionCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PubSubWebhookSubscriptionCreateUserErrorCode", str)
	}
	return nil
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
type PubSubWebhookSubscriptionUpdateUserErrorCode string

const (
	// Invalid parameters provided.
	PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters PubSubWebhookSubscriptionUpdateUserErrorCode = "INVALID_PARAMETERS"
)

var AllPubSubWebhookSubscriptionUpdateUserErrorCode = []PubSubWebhookSubscriptionUpdateUserErrorCode{
	PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters,
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) IsValid() bool {
	switch e {
	case PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters:
		return true
	}
	return false
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *PubSubWebhookSubscriptionUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PubSubWebhookSubscriptionUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PubSubWebhookSubscriptionUpdateUserErrorCode", str)
	}
	return nil
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of refund to perform for a particular refund duty.
type RefundDutyRefundType string

const (
	// The duty is proportionally refunded based on the quantity of the refunded line item.
	RefundDutyRefundTypeProportional RefundDutyRefundType = "PROPORTIONAL"
	// The duty is fully refunded.
	RefundDutyRefundTypeFull RefundDutyRefundType = "FULL"
)

var AllRefundDutyRefundType = []RefundDutyRefundType{
	RefundDutyRefundTypeProportional,
	RefundDutyRefundTypeFull,
}

func (e RefundDutyRefundType) IsValid() bool {
	switch e {
	case RefundDutyRefundTypeProportional, RefundDutyRefundTypeFull:
		return true
	}
	return false
}

func (e RefundDutyRefundType) String() string {
	return string(e)
}

func (e *RefundDutyRefundType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundDutyRefundType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundDutyRefundType", str)
	}
	return nil
}

func (e RefundDutyRefundType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of restock performed for a particular refund line item.
type RefundLineItemRestockType string

const (
	// The refund line item was returned. Use this when restocking line items that were fulfilled.
	RefundLineItemRestockTypeReturn RefundLineItemRestockType = "RETURN"
	// The refund line item was canceled. Use this when restocking unfulfilled line items.
	RefundLineItemRestockTypeCancel RefundLineItemRestockType = "CANCEL"
	// Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds.
	RefundLineItemRestockTypeLegacyRestock RefundLineItemRestockType = "LEGACY_RESTOCK"
	// Refund line item was not restocked.
	RefundLineItemRestockTypeNoRestock RefundLineItemRestockType = "NO_RESTOCK"
)

var AllRefundLineItemRestockType = []RefundLineItemRestockType{
	RefundLineItemRestockTypeReturn,
	RefundLineItemRestockTypeCancel,
	RefundLineItemRestockTypeLegacyRestock,
	RefundLineItemRestockTypeNoRestock,
}

func (e RefundLineItemRestockType) IsValid() bool {
	switch e {
	case RefundLineItemRestockTypeReturn, RefundLineItemRestockTypeCancel, RefundLineItemRestockTypeLegacyRestock, RefundLineItemRestockTypeNoRestock:
		return true
	}
	return false
}

func (e RefundLineItemRestockType) String() string {
	return string(e)
}

func (e *RefundLineItemRestockType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundLineItemRestockType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundLineItemRestockType", str)
	}
	return nil
}

func (e RefundLineItemRestockType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available icons for resource alerts.
type ResourceAlertIcon string

const (
	// A checkmark inside a circle.
	ResourceAlertIconCheckmarkCircle ResourceAlertIcon = "CHECKMARK_CIRCLE"
	// A lowercase `i` inside a circle.
	ResourceAlertIconInformationCircle ResourceAlertIcon = "INFORMATION_CIRCLE"
)

var AllResourceAlertIcon = []ResourceAlertIcon{
	ResourceAlertIconCheckmarkCircle,
	ResourceAlertIconInformationCircle,
}

func (e ResourceAlertIcon) IsValid() bool {
	switch e {
	case ResourceAlertIconCheckmarkCircle, ResourceAlertIconInformationCircle:
		return true
	}
	return false
}

func (e ResourceAlertIcon) String() string {
	return string(e)
}

func (e *ResourceAlertIcon) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertIcon(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertIcon", str)
	}
	return nil
}

func (e ResourceAlertIcon) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible severity levels for a resource alert.
type ResourceAlertSeverity string

const (
	// Indicates a neutral alert. For example, an accepted dispute.
	ResourceAlertSeverityDefault ResourceAlertSeverity = "DEFAULT"
	// Indicates an informative alert. For example, an escalated dispute.
	ResourceAlertSeverityInfo ResourceAlertSeverity = "INFO"
	// Indicates an informative alert. For example, a new dispute.
	ResourceAlertSeverityWarning ResourceAlertSeverity = "WARNING"
	// Indicates a success alert. For example, a winning a dispute.
	ResourceAlertSeveritySuccess ResourceAlertSeverity = "SUCCESS"
	// Indicates a critical alert. For example, a blocked app.
	ResourceAlertSeverityCritical ResourceAlertSeverity = "CRITICAL"
	ResourceAlertSeverityError    ResourceAlertSeverity = "ERROR"
)

var AllResourceAlertSeverity = []ResourceAlertSeverity{
	ResourceAlertSeverityDefault,
	ResourceAlertSeverityInfo,
	ResourceAlertSeverityWarning,
	ResourceAlertSeveritySuccess,
	ResourceAlertSeverityCritical,
	ResourceAlertSeverityError,
}

func (e ResourceAlertSeverity) IsValid() bool {
	switch e {
	case ResourceAlertSeverityDefault, ResourceAlertSeverityInfo, ResourceAlertSeverityWarning, ResourceAlertSeveritySuccess, ResourceAlertSeverityCritical, ResourceAlertSeverityError:
		return true
	}
	return false
}

func (e ResourceAlertSeverity) String() string {
	return string(e)
}

func (e *ResourceAlertSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertSeverity", str)
	}
	return nil
}

func (e ResourceAlertSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The state of the resource feedback.
type ResourceFeedbackState string

const (
	// No action required from merchant.
	ResourceFeedbackStateAccepted ResourceFeedbackState = "ACCEPTED"
	// The merchant needs to resolve an issue with the resource.
	ResourceFeedbackStateRequiresAction ResourceFeedbackState = "REQUIRES_ACTION"
)

var AllResourceFeedbackState = []ResourceFeedbackState{
	ResourceFeedbackStateAccepted,
	ResourceFeedbackStateRequiresAction,
}

func (e ResourceFeedbackState) IsValid() bool {
	switch e {
	case ResourceFeedbackStateAccepted, ResourceFeedbackStateRequiresAction:
		return true
	}
	return false
}

func (e ResourceFeedbackState) String() string {
	return string(e)
}

func (e *ResourceFeedbackState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceFeedbackState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceFeedbackState", str)
	}
	return nil
}

func (e ResourceFeedbackState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible order action types for a sale.
type SaleActionType string

const (
	// A purchase or charge.
	SaleActionTypeOrder SaleActionType = "ORDER"
	// A removal or return.
	SaleActionTypeReturn SaleActionType = "RETURN"
	// A change to the price, taxes, or discounts for a prior purchase.
	SaleActionTypeUpdate SaleActionType = "UPDATE"
	// An unknown order action. Represents new actions that may be added in future versions.
	SaleActionTypeUnknown SaleActionType = "UNKNOWN"
)

var AllSaleActionType = []SaleActionType{
	SaleActionTypeOrder,
	SaleActionTypeReturn,
	SaleActionTypeUpdate,
	SaleActionTypeUnknown,
}

func (e SaleActionType) IsValid() bool {
	switch e {
	case SaleActionTypeOrder, SaleActionTypeReturn, SaleActionTypeUpdate, SaleActionTypeUnknown:
		return true
	}
	return false
}

func (e SaleActionType) String() string {
	return string(e)
}

func (e *SaleActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SaleActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SaleActionType", str)
	}
	return nil
}

func (e SaleActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible line types for a sale record.
type SaleLineType string

const (
	// A product purchased, returned or exchanged.
	SaleLineTypeProduct SaleLineType = "PRODUCT"
	// A tip added by the customer.
	SaleLineTypeTip SaleLineType = "TIP"
	// A gift card.
	SaleLineTypeGiftCard SaleLineType = "GIFT_CARD"
	// A shipping cost.
	SaleLineTypeShipping SaleLineType = "SHIPPING"
	// A duty charge.
	SaleLineTypeDuty SaleLineType = "DUTY"
	// An unknown sale line. Represents new types that may be added in future versions.
	SaleLineTypeUnknown SaleLineType = "UNKNOWN"
	// A sale adjustment.
	SaleLineTypeAdjustment SaleLineType = "ADJUSTMENT"
)

var AllSaleLineType = []SaleLineType{
	SaleLineTypeProduct,
	SaleLineTypeTip,
	SaleLineTypeGiftCard,
	SaleLineTypeShipping,
	SaleLineTypeDuty,
	SaleLineTypeUnknown,
	SaleLineTypeAdjustment,
}

func (e SaleLineType) IsValid() bool {
	switch e {
	case SaleLineTypeProduct, SaleLineTypeTip, SaleLineTypeGiftCard, SaleLineTypeShipping, SaleLineTypeDuty, SaleLineTypeUnknown, SaleLineTypeAdjustment:
		return true
	}
	return false
}

func (e SaleLineType) String() string {
	return string(e)
}

func (e *SaleLineType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SaleLineType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SaleLineType", str)
	}
	return nil
}

func (e SaleLineType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The page or pages on the online store where the script should be included.
type ScriptTagDisplayScope string

const (
	// Include the script on both the web storefront and the order status page.
	ScriptTagDisplayScopeAll ScriptTagDisplayScope = "ALL"
	// Include the script only on the order status page.
	ScriptTagDisplayScopeOrderStatus ScriptTagDisplayScope = "ORDER_STATUS"
	// Include the script only on the web storefront.
	ScriptTagDisplayScopeOnlineStore ScriptTagDisplayScope = "ONLINE_STORE"
)

var AllScriptTagDisplayScope = []ScriptTagDisplayScope{
	ScriptTagDisplayScopeAll,
	ScriptTagDisplayScopeOrderStatus,
	ScriptTagDisplayScopeOnlineStore,
}

func (e ScriptTagDisplayScope) IsValid() bool {
	switch e {
	case ScriptTagDisplayScopeAll, ScriptTagDisplayScopeOrderStatus, ScriptTagDisplayScopeOnlineStore:
		return true
	}
	return false
}

func (e ScriptTagDisplayScope) String() string {
	return string(e)
}

func (e *ScriptTagDisplayScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptTagDisplayScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptTagDisplayScope", str)
	}
	return nil
}

func (e ScriptTagDisplayScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources to be returned from a search.
type SearchResultType string

const (
	SearchResultTypeOrder              SearchResultType = "ORDER"
	SearchResultTypeCustomer           SearchResultType = "CUSTOMER"
	SearchResultTypeProduct            SearchResultType = "PRODUCT"
	SearchResultTypeOnlineStorePage    SearchResultType = "ONLINE_STORE_PAGE"
	SearchResultTypeOnlineStoreBlog    SearchResultType = "ONLINE_STORE_BLOG"
	SearchResultTypeOnlineStoreArticle SearchResultType = "ONLINE_STORE_ARTICLE"
	SearchResultTypeCollection         SearchResultType = "COLLECTION"
	SearchResultTypeDraftOrder         SearchResultType = "DRAFT_ORDER"
	SearchResultTypePriceRule          SearchResultType = "PRICE_RULE"
	// A code discount redeem code.
	SearchResultTypeDiscountRedeemCode SearchResultType = "DISCOUNT_REDEEM_CODE"
	// A file.
	SearchResultTypeFile SearchResultType = "FILE"
	// A URL redirect.
	SearchResultTypeURLRedirect SearchResultType = "URL_REDIRECT"
)

var AllSearchResultType = []SearchResultType{
	SearchResultTypeOrder,
	SearchResultTypeCustomer,
	SearchResultTypeProduct,
	SearchResultTypeOnlineStorePage,
	SearchResultTypeOnlineStoreBlog,
	SearchResultTypeOnlineStoreArticle,
	SearchResultTypeCollection,
	SearchResultTypeDraftOrder,
	SearchResultTypePriceRule,
	SearchResultTypeDiscountRedeemCode,
	SearchResultTypeFile,
	SearchResultTypeURLRedirect,
}

func (e SearchResultType) IsValid() bool {
	switch e {
	case SearchResultTypeOrder, SearchResultTypeCustomer, SearchResultTypeProduct, SearchResultTypeOnlineStorePage, SearchResultTypeOnlineStoreBlog, SearchResultTypeOnlineStoreArticle, SearchResultTypeCollection, SearchResultTypeDraftOrder, SearchResultTypePriceRule, SearchResultTypeDiscountRedeemCode, SearchResultTypeFile, SearchResultTypeURLRedirect:
		return true
	}
	return false
}

func (e SearchResultType) String() string {
	return string(e)
}

func (e *SearchResultType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchResultType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchResultType", str)
	}
	return nil
}

func (e SearchResultType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Segment query.
type SegmentSortKeys string

const (
	// Sort by the `creation_date` value.
	SegmentSortKeysCreationDate SegmentSortKeys = "CREATION_DATE"
	// Sort by the `id` value.
	SegmentSortKeysID SegmentSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	SegmentSortKeysRelevance SegmentSortKeys = "RELEVANCE"
)

var AllSegmentSortKeys = []SegmentSortKeys{
	SegmentSortKeysCreationDate,
	SegmentSortKeysID,
	SegmentSortKeysRelevance,
}

func (e SegmentSortKeys) IsValid() bool {
	switch e {
	case SegmentSortKeysCreationDate, SegmentSortKeysID, SegmentSortKeysRelevance:
		return true
	}
	return false
}

func (e SegmentSortKeys) String() string {
	return string(e)
}

func (e *SegmentSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SegmentSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SegmentSortKeys", str)
	}
	return nil
}

func (e SegmentSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the anchor type.
type SellingPlanAnchorType string

const (
	// Which day of the week, between 1-7.
	SellingPlanAnchorTypeWeekday SellingPlanAnchorType = "WEEKDAY"
	// Which day of the month, between 1-31.
	SellingPlanAnchorTypeMonthday SellingPlanAnchorType = "MONTHDAY"
	// Which days of the month and year, month between 1-12, and day between 1-31.
	SellingPlanAnchorTypeYearday SellingPlanAnchorType = "YEARDAY"
)

var AllSellingPlanAnchorType = []SellingPlanAnchorType{
	SellingPlanAnchorTypeWeekday,
	SellingPlanAnchorTypeMonthday,
	SellingPlanAnchorTypeYearday,
}

func (e SellingPlanAnchorType) IsValid() bool {
	switch e {
	case SellingPlanAnchorTypeWeekday, SellingPlanAnchorTypeMonthday, SellingPlanAnchorTypeYearday:
		return true
	}
	return false
}

func (e SellingPlanAnchorType) String() string {
	return string(e)
}

func (e *SellingPlanAnchorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanAnchorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanAnchorType", str)
	}
	return nil
}

func (e SellingPlanAnchorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the SellingPlanGroup query.
type SellingPlanGroupSortKeys string

const (
	// Sort by the `name` value.
	SellingPlanGroupSortKeysName SellingPlanGroupSortKeys = "NAME"
	// Sort by the `updated_at` value.
	SellingPlanGroupSortKeysUpdatedAt SellingPlanGroupSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	SellingPlanGroupSortKeysCreatedAt SellingPlanGroupSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	SellingPlanGroupSortKeysID SellingPlanGroupSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	SellingPlanGroupSortKeysRelevance SellingPlanGroupSortKeys = "RELEVANCE"
)

var AllSellingPlanGroupSortKeys = []SellingPlanGroupSortKeys{
	SellingPlanGroupSortKeysName,
	SellingPlanGroupSortKeysUpdatedAt,
	SellingPlanGroupSortKeysCreatedAt,
	SellingPlanGroupSortKeysID,
	SellingPlanGroupSortKeysRelevance,
}

func (e SellingPlanGroupSortKeys) IsValid() bool {
	switch e {
	case SellingPlanGroupSortKeysName, SellingPlanGroupSortKeysUpdatedAt, SellingPlanGroupSortKeysCreatedAt, SellingPlanGroupSortKeysID, SellingPlanGroupSortKeysRelevance:
		return true
	}
	return false
}

func (e SellingPlanGroupSortKeys) String() string {
	return string(e)
}

func (e *SellingPlanGroupSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupSortKeys", str)
	}
	return nil
}

func (e SellingPlanGroupSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SellingPlanGroupUserError`.
type SellingPlanGroupUserErrorCode string

const (
	// The input value needs to be blank.
	SellingPlanGroupUserErrorCodePresent SellingPlanGroupUserErrorCode = "PRESENT"
	// The input value is blank.
	SellingPlanGroupUserErrorCodeBlank SellingPlanGroupUserErrorCode = "BLANK"
	// The input value is invalid.
	SellingPlanGroupUserErrorCodeInvalid SellingPlanGroupUserErrorCode = "INVALID"
	// The input value should be greater than the minimum allowed value.
	SellingPlanGroupUserErrorCodeGreaterThan SellingPlanGroupUserErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo SellingPlanGroupUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value should be less than the maximum value allowed.
	SellingPlanGroupUserErrorCodeLessThan SellingPlanGroupUserErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo SellingPlanGroupUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is not a number.
	SellingPlanGroupUserErrorCodeNotANumber SellingPlanGroupUserErrorCode = "NOT_A_NUMBER"
	// The input value is too long.
	SellingPlanGroupUserErrorCodeTooLong SellingPlanGroupUserErrorCode = "TOO_LONG"
	// The input value is too short.
	SellingPlanGroupUserErrorCodeTooShort SellingPlanGroupUserErrorCode = "TOO_SHORT"
	// The input value is already taken.
	SellingPlanGroupUserErrorCodeTaken SellingPlanGroupUserErrorCode = "TAKEN"
	// Exceeded the selling plan limit (20).
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_UPPER_BOUND"
	// Must include at least one selling plan.
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_LOWER_BOUND"
	// Selling plan's billing policy max cycles must be greater than min cycles.
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SellingPlanGroupUserErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// Selling plan's billing and delivery policies anchors must be equal.
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL"
	// Selling plan's billing cycle must be a multiple of delivery cycle.
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE"
	// Selling plan's pricing policies must contain one fixed pricing policy.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY"
	// Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP"
	// Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP"
	// Selling plan's option2 is required because option2 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plan's option3 is required because option3 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plans can't have more than 2 pricing policies.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_LIMIT"
	// The selling plan list provided contains 1 or more invalid IDs.
	SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS SellingPlanGroupUserErrorCode = "RESOURCE_LIST_CONTAINS_INVALID_IDS"
	// Product variant does not exist.
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Product does not exist.
	SellingPlanGroupUserErrorCodeProductDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Selling plan group does not exist.
	SellingPlanGroupUserErrorCodeGroupDoesNotExist SellingPlanGroupUserErrorCode = "GROUP_DOES_NOT_EXIST"
	// Selling plan group could not be deleted.
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted SellingPlanGroupUserErrorCode = "GROUP_COULD_NOT_BE_DELETED"
	// Could not add the resource to the selling plan group.
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup SellingPlanGroupUserErrorCode = "ERROR_ADDING_RESOURCE_TO_GROUP"
	// Missing delivery policy.
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_DELIVERY_POLICY_MISSING"
	// Missing billing policy.
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_POLICY_MISSING"
	// Selling plan does not exist.
	SellingPlanGroupUserErrorCodePlanDoesNotExist SellingPlanGroupUserErrorCode = "PLAN_DOES_NOT_EXIST"
	// Selling plan ID must be specified to update.
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate SellingPlanGroupUserErrorCode = "PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE"
	// Only one pricing policy type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_TYPE"
	// Only one pricing policy adjustment value type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_VALUE"
	// Pricing policy's adjustment value and adjustment type must match.
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch SellingPlanGroupUserErrorCode = "PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH"
	// Cannot have multiple selling plans with the same name.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_NAME"
	// Cannot have multiple selling plans with the same options.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_OPTIONS"
)

var AllSellingPlanGroupUserErrorCode = []SellingPlanGroupUserErrorCode{
	SellingPlanGroupUserErrorCodePresent,
	SellingPlanGroupUserErrorCodeBlank,
	SellingPlanGroupUserErrorCodeInvalid,
	SellingPlanGroupUserErrorCodeGreaterThan,
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo,
	SellingPlanGroupUserErrorCodeLessThan,
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo,
	SellingPlanGroupUserErrorCodeNotANumber,
	SellingPlanGroupUserErrorCodeTooLong,
	SellingPlanGroupUserErrorCodeTooShort,
	SellingPlanGroupUserErrorCodeTaken,
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound,
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound,
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual,
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit,
	SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS,
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist,
	SellingPlanGroupUserErrorCodeProductDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted,
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup,
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing,
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing,
	SellingPlanGroupUserErrorCodePlanDoesNotExist,
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue,
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions,
}

func (e SellingPlanGroupUserErrorCode) IsValid() bool {
	switch e {
	case SellingPlanGroupUserErrorCodePresent, SellingPlanGroupUserErrorCodeBlank, SellingPlanGroupUserErrorCodeInvalid, SellingPlanGroupUserErrorCodeGreaterThan, SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo, SellingPlanGroupUserErrorCodeLessThan, SellingPlanGroupUserErrorCodeLessThanOrEqualTo, SellingPlanGroupUserErrorCodeNotANumber, SellingPlanGroupUserErrorCodeTooLong, SellingPlanGroupUserErrorCodeTooShort, SellingPlanGroupUserErrorCodeTaken, SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound, SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound, SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual, SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy, SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit, SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS, SellingPlanGroupUserErrorCodeProductVariantDoesNotExist, SellingPlanGroupUserErrorCodeProductDoesNotExist, SellingPlanGroupUserErrorCodeGroupDoesNotExist, SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted, SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup, SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing, SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing, SellingPlanGroupUserErrorCodePlanDoesNotExist, SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue, SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch, SellingPlanGroupUserErrorCodeSellingPlanDuplicateName, SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions:
		return true
	}
	return false
}

func (e SellingPlanGroupUserErrorCode) String() string {
	return string(e)
}

func (e *SellingPlanGroupUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupUserErrorCode", str)
	}
	return nil
}

func (e SellingPlanGroupUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents valid selling plan interval.
type SellingPlanInterval string

const (
	// Day interval.
	SellingPlanIntervalDay SellingPlanInterval = "DAY"
	// Week interval.
	SellingPlanIntervalWeek SellingPlanInterval = "WEEK"
	// Month interval.
	SellingPlanIntervalMonth SellingPlanInterval = "MONTH"
	// Year interval.
	SellingPlanIntervalYear SellingPlanInterval = "YEAR"
)

var AllSellingPlanInterval = []SellingPlanInterval{
	SellingPlanIntervalDay,
	SellingPlanIntervalWeek,
	SellingPlanIntervalMonth,
	SellingPlanIntervalYear,
}

func (e SellingPlanInterval) IsValid() bool {
	switch e {
	case SellingPlanIntervalDay, SellingPlanIntervalWeek, SellingPlanIntervalMonth, SellingPlanIntervalYear:
		return true
	}
	return false
}

func (e SellingPlanInterval) String() string {
	return string(e)
}

func (e *SellingPlanInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanInterval", str)
	}
	return nil
}

func (e SellingPlanInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a selling plan pricing policy adjustment type.
type SellingPlanPricingPolicyAdjustmentType string

const (
	// Percentage off adjustment.
	SellingPlanPricingPolicyAdjustmentTypePercentage SellingPlanPricingPolicyAdjustmentType = "PERCENTAGE"
	// Fixed amount off adjustment.
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount SellingPlanPricingPolicyAdjustmentType = "FIXED_AMOUNT"
	// Price of the policy.
	SellingPlanPricingPolicyAdjustmentTypePrice SellingPlanPricingPolicyAdjustmentType = "PRICE"
)

var AllSellingPlanPricingPolicyAdjustmentType = []SellingPlanPricingPolicyAdjustmentType{
	SellingPlanPricingPolicyAdjustmentTypePercentage,
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount,
	SellingPlanPricingPolicyAdjustmentTypePrice,
}

func (e SellingPlanPricingPolicyAdjustmentType) IsValid() bool {
	switch e {
	case SellingPlanPricingPolicyAdjustmentTypePercentage, SellingPlanPricingPolicyAdjustmentTypeFixedAmount, SellingPlanPricingPolicyAdjustmentTypePrice:
		return true
	}
	return false
}

func (e SellingPlanPricingPolicyAdjustmentType) String() string {
	return string(e)
}

func (e *SellingPlanPricingPolicyAdjustmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanPricingPolicyAdjustmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanPricingPolicyAdjustmentType", str)
	}
	return nil
}

func (e SellingPlanPricingPolicyAdjustmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible intentions of a Delivery Policy.
type SellingPlanRecurringDeliveryPolicyIntent string

const (
	// A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
	//
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin SellingPlanRecurringDeliveryPolicyIntent = "FULFILLMENT_BEGIN"
)

var AllSellingPlanRecurringDeliveryPolicyIntent = []SellingPlanRecurringDeliveryPolicyIntent{
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin,
}

func (e SellingPlanRecurringDeliveryPolicyIntent) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyIntent) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyIntent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyIntent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyIntent", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyIntent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
type SellingPlanRecurringDeliveryPolicyPreAnchorBehavior string

const (
	// Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.
	//
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "ASAP"
	// Orders placed can be fulfilled / delivered at the next anchor date.
	// Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
	// delivered at the following anchor.
	//
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "NEXT"
)

var AllSellingPlanRecurringDeliveryPolicyPreAnchorBehavior = []SellingPlanRecurringDeliveryPolicyPreAnchorBehavior{
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap,
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext,
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap, SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyPreAnchorBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyPreAnchorBehavior", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible branding of a shop.
// Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
type ShopBranding string

const (
	// Shop has Shopify Gold branding.
	ShopBrandingShopifyGold ShopBranding = "SHOPIFY_GOLD"
	// Shop has Shopify Plus branding.
	ShopBrandingShopifyPlus ShopBranding = "SHOPIFY_PLUS"
	// Shop has Rogers branding.
	ShopBrandingRogers ShopBranding = "ROGERS"
	// Shop has Shopify branding.
	ShopBrandingShopify ShopBranding = "SHOPIFY"
)

var AllShopBranding = []ShopBranding{
	ShopBrandingShopifyGold,
	ShopBrandingShopifyPlus,
	ShopBrandingRogers,
	ShopBrandingShopify,
}

func (e ShopBranding) IsValid() bool {
	switch e {
	case ShopBrandingShopifyGold, ShopBrandingShopifyPlus, ShopBrandingRogers, ShopBrandingShopify:
		return true
	}
	return false
}

func (e ShopBranding) String() string {
	return string(e)
}

func (e *ShopBranding) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopBranding(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopBranding", str)
	}
	return nil
}

func (e ShopBranding) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the shop's customer account requirement preference.
type ShopCustomerAccountsSetting string

const (
	ShopCustomerAccountsSettingRequired ShopCustomerAccountsSetting = "REQUIRED"
	ShopCustomerAccountsSettingOptional ShopCustomerAccountsSetting = "OPTIONAL"
	ShopCustomerAccountsSettingDisabled ShopCustomerAccountsSetting = "DISABLED"
)

var AllShopCustomerAccountsSetting = []ShopCustomerAccountsSetting{
	ShopCustomerAccountsSettingRequired,
	ShopCustomerAccountsSettingOptional,
	ShopCustomerAccountsSettingDisabled,
}

func (e ShopCustomerAccountsSetting) IsValid() bool {
	switch e {
	case ShopCustomerAccountsSettingRequired, ShopCustomerAccountsSettingOptional, ShopCustomerAccountsSettingDisabled:
		return true
	}
	return false
}

func (e ShopCustomerAccountsSetting) String() string {
	return string(e)
}

func (e *ShopCustomerAccountsSetting) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopCustomerAccountsSetting(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopCustomerAccountsSetting", str)
	}
	return nil
}

func (e ShopCustomerAccountsSetting) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ShopPolicyUserError`.
type ShopPolicyErrorCode string

const (
	// The input value is too big.
	ShopPolicyErrorCodeTooBig ShopPolicyErrorCode = "TOO_BIG"
)

var AllShopPolicyErrorCode = []ShopPolicyErrorCode{
	ShopPolicyErrorCodeTooBig,
}

func (e ShopPolicyErrorCode) IsValid() bool {
	switch e {
	case ShopPolicyErrorCodeTooBig:
		return true
	}
	return false
}

func (e ShopPolicyErrorCode) String() string {
	return string(e)
}

func (e *ShopPolicyErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyErrorCode", str)
	}
	return nil
}

func (e ShopPolicyErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available shop policy types.
type ShopPolicyType string

const (
	// The refund policy.
	ShopPolicyTypeRefundPolicy ShopPolicyType = "REFUND_POLICY"
	// The shipping policy.
	ShopPolicyTypeShippingPolicy ShopPolicyType = "SHIPPING_POLICY"
	// The privacy policy.
	ShopPolicyTypePrivacyPolicy ShopPolicyType = "PRIVACY_POLICY"
	// The terms of service.
	ShopPolicyTypeTermsOfService ShopPolicyType = "TERMS_OF_SERVICE"
	// The terms of sale.
	ShopPolicyTypeTermsOfSale ShopPolicyType = "TERMS_OF_SALE"
	// The legal notice.
	ShopPolicyTypeLegalNotice ShopPolicyType = "LEGAL_NOTICE"
	// The subscription policy.
	ShopPolicyTypeSubscriptionPolicy ShopPolicyType = "SUBSCRIPTION_POLICY"
)

var AllShopPolicyType = []ShopPolicyType{
	ShopPolicyTypeRefundPolicy,
	ShopPolicyTypeShippingPolicy,
	ShopPolicyTypePrivacyPolicy,
	ShopPolicyTypeTermsOfService,
	ShopPolicyTypeTermsOfSale,
	ShopPolicyTypeLegalNotice,
	ShopPolicyTypeSubscriptionPolicy,
}

func (e ShopPolicyType) IsValid() bool {
	switch e {
	case ShopPolicyTypeRefundPolicy, ShopPolicyTypeShippingPolicy, ShopPolicyTypePrivacyPolicy, ShopPolicyTypeTermsOfService, ShopPolicyTypeTermsOfSale, ShopPolicyTypeLegalNotice, ShopPolicyTypeSubscriptionPolicy:
		return true
	}
	return false
}

func (e ShopPolicyType) String() string {
	return string(e)
}

func (e *ShopPolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyType", str)
	}
	return nil
}

func (e ShopPolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible sort of tags.
type ShopTagSort string

const (
	// Alphabetical sort.
	ShopTagSortAlphabetical ShopTagSort = "ALPHABETICAL"
	// Popularity sort.
	ShopTagSortPopular ShopTagSort = "POPULAR"
)

var AllShopTagSort = []ShopTagSort{
	ShopTagSortAlphabetical,
	ShopTagSortPopular,
}

func (e ShopTagSort) IsValid() bool {
	switch e {
	case ShopTagSortAlphabetical, ShopTagSortPopular:
		return true
	}
	return false
}

func (e ShopTagSort) String() string {
	return string(e)
}

func (e *ShopTagSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopTagSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopTagSort", str)
	}
	return nil
}

func (e ShopTagSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The bank account status.
type ShopifyPaymentsBankAccountStatus string

const (
	// A bank account that hasn't had any activity and that's not validated.
	ShopifyPaymentsBankAccountStatusNew ShopifyPaymentsBankAccountStatus = "NEW"
	// It was determined that the bank account exists.
	ShopifyPaymentsBankAccountStatusValidated ShopifyPaymentsBankAccountStatus = "VALIDATED"
	// Bank account validation was successful.
	ShopifyPaymentsBankAccountStatusVerified ShopifyPaymentsBankAccountStatus = "VERIFIED"
	// A payout to the bank account failed.
	ShopifyPaymentsBankAccountStatusErrored ShopifyPaymentsBankAccountStatus = "ERRORED"
)

var AllShopifyPaymentsBankAccountStatus = []ShopifyPaymentsBankAccountStatus{
	ShopifyPaymentsBankAccountStatusNew,
	ShopifyPaymentsBankAccountStatusValidated,
	ShopifyPaymentsBankAccountStatusVerified,
	ShopifyPaymentsBankAccountStatusErrored,
}

func (e ShopifyPaymentsBankAccountStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsBankAccountStatusNew, ShopifyPaymentsBankAccountStatusValidated, ShopifyPaymentsBankAccountStatusVerified, ShopifyPaymentsBankAccountStatusErrored:
		return true
	}
	return false
}

func (e ShopifyPaymentsBankAccountStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsBankAccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsBankAccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsBankAccountStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsBankAccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for the dispute provided by the cardholder's bank.
type ShopifyPaymentsDisputeReason string

const (
	// The cardholder claims that they didn’t authorize the payment.
	ShopifyPaymentsDisputeReasonFraudulent ShopifyPaymentsDisputeReason = "FRAUDULENT"
	// The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
	ShopifyPaymentsDisputeReasonGeneral ShopifyPaymentsDisputeReason = "GENERAL"
	// The customer doesn’t recognize the payment appearing on their card statement.
	ShopifyPaymentsDisputeReasonUnrecognized ShopifyPaymentsDisputeReason = "UNRECOGNIZED"
	// The customer claims they were charged multiple times for the same product or service.
	ShopifyPaymentsDisputeReasonDuplicate ShopifyPaymentsDisputeReason = "DUPLICATE"
	// The customer claims that you continued to charge them after a subscription was canceled.
	ShopifyPaymentsDisputeReasonSubscriptionCancelled ShopifyPaymentsDisputeReason = "SUBSCRIPTION_CANCELLED"
	// The product or service was received but was defective, damaged, or not as described.
	ShopifyPaymentsDisputeReasonProductUnacceptable ShopifyPaymentsDisputeReason = "PRODUCT_UNACCEPTABLE"
	// The customer claims they did not receive the products or services purchased.
	ShopifyPaymentsDisputeReasonProductNotReceived ShopifyPaymentsDisputeReason = "PRODUCT_NOT_RECEIVED"
	// The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit.
	ShopifyPaymentsDisputeReasonCreditNotProcessed ShopifyPaymentsDisputeReason = "CREDIT_NOT_PROCESSED"
	// The customer account associated with the purchase is incorrect.
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails ShopifyPaymentsDisputeReason = "INCORRECT_ACCOUNT_DETAILS"
	// The customer's bank account has insufficient funds.
	ShopifyPaymentsDisputeReasonInsufficientFunds ShopifyPaymentsDisputeReason = "INSUFFICIENT_FUNDS"
	// The customer's bank can't process the charge.
	ShopifyPaymentsDisputeReasonBankCannotProcess ShopifyPaymentsDisputeReason = "BANK_CANNOT_PROCESS"
	// The customer's bank can't proceed with the debit since it hasn't been authorized.
	ShopifyPaymentsDisputeReasonDebitNotAuthorized ShopifyPaymentsDisputeReason = "DEBIT_NOT_AUTHORIZED"
	// The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
	ShopifyPaymentsDisputeReasonCustomerInitiated ShopifyPaymentsDisputeReason = "CUSTOMER_INITIATED"
)

var AllShopifyPaymentsDisputeReason = []ShopifyPaymentsDisputeReason{
	ShopifyPaymentsDisputeReasonFraudulent,
	ShopifyPaymentsDisputeReasonGeneral,
	ShopifyPaymentsDisputeReasonUnrecognized,
	ShopifyPaymentsDisputeReasonDuplicate,
	ShopifyPaymentsDisputeReasonSubscriptionCancelled,
	ShopifyPaymentsDisputeReasonProductUnacceptable,
	ShopifyPaymentsDisputeReasonProductNotReceived,
	ShopifyPaymentsDisputeReasonCreditNotProcessed,
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails,
	ShopifyPaymentsDisputeReasonInsufficientFunds,
	ShopifyPaymentsDisputeReasonBankCannotProcess,
	ShopifyPaymentsDisputeReasonDebitNotAuthorized,
	ShopifyPaymentsDisputeReasonCustomerInitiated,
}

func (e ShopifyPaymentsDisputeReason) IsValid() bool {
	switch e {
	case ShopifyPaymentsDisputeReasonFraudulent, ShopifyPaymentsDisputeReasonGeneral, ShopifyPaymentsDisputeReasonUnrecognized, ShopifyPaymentsDisputeReasonDuplicate, ShopifyPaymentsDisputeReasonSubscriptionCancelled, ShopifyPaymentsDisputeReasonProductUnacceptable, ShopifyPaymentsDisputeReasonProductNotReceived, ShopifyPaymentsDisputeReasonCreditNotProcessed, ShopifyPaymentsDisputeReasonIncorrectAccountDetails, ShopifyPaymentsDisputeReasonInsufficientFunds, ShopifyPaymentsDisputeReasonBankCannotProcess, ShopifyPaymentsDisputeReasonDebitNotAuthorized, ShopifyPaymentsDisputeReasonCustomerInitiated:
		return true
	}
	return false
}

func (e ShopifyPaymentsDisputeReason) String() string {
	return string(e)
}

func (e *ShopifyPaymentsDisputeReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsDisputeReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsDisputeReason", str)
	}
	return nil
}

func (e ShopifyPaymentsDisputeReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The interval at which payouts are sent to the connected bank account.
type ShopifyPaymentsPayoutInterval string

const (
	// Each business day.
	ShopifyPaymentsPayoutIntervalDaily ShopifyPaymentsPayoutInterval = "DAILY"
	// Each week, on the day of week specified by weeklyAnchor.
	ShopifyPaymentsPayoutIntervalWeekly ShopifyPaymentsPayoutInterval = "WEEKLY"
	// Each month, on the day of month specified by monthlyAnchor.
	ShopifyPaymentsPayoutIntervalMonthly ShopifyPaymentsPayoutInterval = "MONTHLY"
	// Payouts will not be automatically made.
	ShopifyPaymentsPayoutIntervalManual ShopifyPaymentsPayoutInterval = "MANUAL"
)

var AllShopifyPaymentsPayoutInterval = []ShopifyPaymentsPayoutInterval{
	ShopifyPaymentsPayoutIntervalDaily,
	ShopifyPaymentsPayoutIntervalWeekly,
	ShopifyPaymentsPayoutIntervalMonthly,
	ShopifyPaymentsPayoutIntervalManual,
}

func (e ShopifyPaymentsPayoutInterval) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutIntervalDaily, ShopifyPaymentsPayoutIntervalWeekly, ShopifyPaymentsPayoutIntervalMonthly, ShopifyPaymentsPayoutIntervalManual:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutInterval) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutInterval", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The transfer status of the payout.
type ShopifyPaymentsPayoutStatus string

const (
	// The payout has been created and had transactions assigned to it, but
	// it has not yet been submitted to the bank.
	//
	ShopifyPaymentsPayoutStatusScheduled ShopifyPaymentsPayoutStatus = "SCHEDULED"
	// The payout has been submitted to the bank.
	ShopifyPaymentsPayoutStatusInTransit ShopifyPaymentsPayoutStatus = "IN_TRANSIT"
	// The payout has been successfully deposited into the bank.
	ShopifyPaymentsPayoutStatusPaid ShopifyPaymentsPayoutStatus = "PAID"
	// The payout has been declined by the bank.
	ShopifyPaymentsPayoutStatusFailed ShopifyPaymentsPayoutStatus = "FAILED"
	// The payout has been canceled by Shopify.
	ShopifyPaymentsPayoutStatusCanceled ShopifyPaymentsPayoutStatus = "CANCELED"
)

var AllShopifyPaymentsPayoutStatus = []ShopifyPaymentsPayoutStatus{
	ShopifyPaymentsPayoutStatusScheduled,
	ShopifyPaymentsPayoutStatusInTransit,
	ShopifyPaymentsPayoutStatusPaid,
	ShopifyPaymentsPayoutStatusFailed,
	ShopifyPaymentsPayoutStatusCanceled,
}

func (e ShopifyPaymentsPayoutStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutStatusScheduled, ShopifyPaymentsPayoutStatusInTransit, ShopifyPaymentsPayoutStatusPaid, ShopifyPaymentsPayoutStatusFailed, ShopifyPaymentsPayoutStatusCanceled:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible transaction types for a payout.
type ShopifyPaymentsPayoutTransactionType string

const (
	// The payout is a deposit.
	ShopifyPaymentsPayoutTransactionTypeDeposit ShopifyPaymentsPayoutTransactionType = "DEPOSIT"
	// The payout is a withdrawal.
	ShopifyPaymentsPayoutTransactionTypeWithdrawal ShopifyPaymentsPayoutTransactionType = "WITHDRAWAL"
)

var AllShopifyPaymentsPayoutTransactionType = []ShopifyPaymentsPayoutTransactionType{
	ShopifyPaymentsPayoutTransactionTypeDeposit,
	ShopifyPaymentsPayoutTransactionTypeWithdrawal,
}

func (e ShopifyPaymentsPayoutTransactionType) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutTransactionTypeDeposit, ShopifyPaymentsPayoutTransactionTypeWithdrawal:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutTransactionType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutTransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutTransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutTransactionType", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutTransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The types of possible verification documents.
type ShopifyPaymentsVerificationDocumentType string

const (
	// The subject's driver's license.
	ShopifyPaymentsVerificationDocumentTypeDriversLicense ShopifyPaymentsVerificationDocumentType = "DRIVERS_LICENSE"
	// A government's identification document of the subject.
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification ShopifyPaymentsVerificationDocumentType = "GOVERNMENT_IDENTIFICATION"
	// The subject's passport.
	ShopifyPaymentsVerificationDocumentTypePassport ShopifyPaymentsVerificationDocumentType = "PASSPORT"
	// A utility bill that shows the individual's address.
	ShopifyPaymentsVerificationDocumentTypeUtilityBill ShopifyPaymentsVerificationDocumentType = "UTILITY_BILL"
)

var AllShopifyPaymentsVerificationDocumentType = []ShopifyPaymentsVerificationDocumentType{
	ShopifyPaymentsVerificationDocumentTypeDriversLicense,
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification,
	ShopifyPaymentsVerificationDocumentTypePassport,
	ShopifyPaymentsVerificationDocumentTypeUtilityBill,
}

func (e ShopifyPaymentsVerificationDocumentType) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationDocumentTypeDriversLicense, ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification, ShopifyPaymentsVerificationDocumentTypePassport, ShopifyPaymentsVerificationDocumentTypeUtilityBill:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationDocumentType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationDocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationDocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationDocumentType", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationDocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a verification.
type ShopifyPaymentsVerificationStatus string

const (
	// The verification has been verified.
	ShopifyPaymentsVerificationStatusVerified ShopifyPaymentsVerificationStatus = "VERIFIED"
	// The verification has not yet been verified.
	ShopifyPaymentsVerificationStatusUnverified ShopifyPaymentsVerificationStatus = "UNVERIFIED"
	// The verification request has been submitted but a response has not yet been given.
	ShopifyPaymentsVerificationStatusPending ShopifyPaymentsVerificationStatus = "PENDING"
)

var AllShopifyPaymentsVerificationStatus = []ShopifyPaymentsVerificationStatus{
	ShopifyPaymentsVerificationStatusVerified,
	ShopifyPaymentsVerificationStatusUnverified,
	ShopifyPaymentsVerificationStatusPending,
}

func (e ShopifyPaymentsVerificationStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationStatusVerified, ShopifyPaymentsVerificationStatusUnverified, ShopifyPaymentsVerificationStatusPending:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
type StaffMemberDefaultImage string

const (
	// Returns a default avatar image for the staff member.
	StaffMemberDefaultImageDefault StaffMemberDefaultImage = "DEFAULT"
	// Returns a transparent avatar image for the staff member.
	StaffMemberDefaultImageTransparent StaffMemberDefaultImage = "TRANSPARENT"
	// Returns a URL that returns a 404 error if the image is not present.
	StaffMemberDefaultImageNotFound StaffMemberDefaultImage = "NOT_FOUND"
)

var AllStaffMemberDefaultImage = []StaffMemberDefaultImage{
	StaffMemberDefaultImageDefault,
	StaffMemberDefaultImageTransparent,
	StaffMemberDefaultImageNotFound,
}

func (e StaffMemberDefaultImage) IsValid() bool {
	switch e {
	case StaffMemberDefaultImageDefault, StaffMemberDefaultImageTransparent, StaffMemberDefaultImageNotFound:
		return true
	}
	return false
}

func (e StaffMemberDefaultImage) String() string {
	return string(e)
}

func (e *StaffMemberDefaultImage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffMemberDefaultImage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffMemberDefaultImage", str)
	}
	return nil
}

func (e StaffMemberDefaultImage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents access permissions for a staff member.
type StaffMemberPermission string

const (
	// The staff member can manage and install apps and channels.
	StaffMemberPermissionApplications StaffMemberPermission = "APPLICATIONS"
	// The staff member can manage and install sales channels.
	StaffMemberPermissionChannels StaffMemberPermission = "CHANNELS"
	// The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API.
	StaffMemberPermissionCustomers StaffMemberPermission = "CUSTOMERS"
	// The staff member can view the Shopify Home page, which includes sales information and other shop data.
	StaffMemberPermissionDashboard StaffMemberPermission = "DASHBOARD"
	// The staff member can view, buy, and manage domains.
	StaffMemberPermissionDomains StaffMemberPermission = "DOMAINS"
	// The staff member can create, update, and delete draft orders.
	StaffMemberPermissionDraftOrders StaffMemberPermission = "DRAFT_ORDERS"
	// The staff member can update orders.
	StaffMemberPermissionEditOrders StaffMemberPermission = "EDIT_ORDERS"
	// The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
	StaffMemberPermissionFull StaffMemberPermission = "FULL"
	// The staff member can view, create, issue, and export gift cards to a CSV file.
	StaffMemberPermissionGiftCards StaffMemberPermission = "GIFT_CARDS"
	// The staff member can view and modify links and navigation menus.
	StaffMemberPermissionLinks StaffMemberPermission = "LINKS"
	// The staff member can create, update, and delete locations where inventory is stocked or managed.
	StaffMemberPermissionLocations StaffMemberPermission = "LOCATIONS"
	// The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
	StaffMemberPermissionMarketing StaffMemberPermission = "MARKETING"
	// The staff member can view, create, and automate marketing campaigns.
	StaffMemberPermissionMarketingSection StaffMemberPermission = "MARKETING_SECTION"
	// The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission.
	StaffMemberPermissionOrders StaffMemberPermission = "ORDERS"
	// The staff member can view the Overview and Live view pages,
	//             which include sales information, and other shop and sales channels data.
	StaffMemberPermissionOverviews StaffMemberPermission = "OVERVIEWS"
	// The staff member can view, create, update, publish, and delete blog posts and pages.
	StaffMemberPermissionPages StaffMemberPermission = "PAGES"
	// The staff member can pay for a draft order by manually entering a credit card number.
	StaffMemberPermissionPayDraftOrdersByCreditCard StaffMemberPermission = "PAY_DRAFT_ORDERS_BY_CREDIT_CARD"
	// The staff member can pay for an order by manually entering a credit card number.
	StaffMemberPermissionPayOrdersByCreditCard StaffMemberPermission = "PAY_ORDERS_BY_CREDIT_CARD"
	// The staff member can pay for an order by using a vaulted card.
	StaffMemberPermissionPayOrdersByVaultedCard StaffMemberPermission = "PAY_ORDERS_BY_VAULTED_CARD"
	// The staff member can view the preferences and configuration of a shop.
	StaffMemberPermissionPreferences StaffMemberPermission = "PREFERENCES"
	// The staff member can view, create, import, and update products, collections, and inventory.
	StaffMemberPermissionProducts StaffMemberPermission = "PRODUCTS"
	// The staff member can view and create all reports, which includes sales information and other shop data.
	StaffMemberPermissionReports StaffMemberPermission = "REPORTS"
	// The staff member can view, update, and publish themes.
	StaffMemberPermissionThemes StaffMemberPermission = "THEMES"
	// The staff member can view and create translations.
	StaffMemberPermissionTranslations StaffMemberPermission = "TRANSLATIONS"
)

var AllStaffMemberPermission = []StaffMemberPermission{
	StaffMemberPermissionApplications,
	StaffMemberPermissionChannels,
	StaffMemberPermissionCustomers,
	StaffMemberPermissionDashboard,
	StaffMemberPermissionDomains,
	StaffMemberPermissionDraftOrders,
	StaffMemberPermissionEditOrders,
	StaffMemberPermissionFull,
	StaffMemberPermissionGiftCards,
	StaffMemberPermissionLinks,
	StaffMemberPermissionLocations,
	StaffMemberPermissionMarketing,
	StaffMemberPermissionMarketingSection,
	StaffMemberPermissionOrders,
	StaffMemberPermissionOverviews,
	StaffMemberPermissionPages,
	StaffMemberPermissionPayDraftOrdersByCreditCard,
	StaffMemberPermissionPayOrdersByCreditCard,
	StaffMemberPermissionPayOrdersByVaultedCard,
	StaffMemberPermissionPreferences,
	StaffMemberPermissionProducts,
	StaffMemberPermissionReports,
	StaffMemberPermissionThemes,
	StaffMemberPermissionTranslations,
}

func (e StaffMemberPermission) IsValid() bool {
	switch e {
	case StaffMemberPermissionApplications, StaffMemberPermissionChannels, StaffMemberPermissionCustomers, StaffMemberPermissionDashboard, StaffMemberPermissionDomains, StaffMemberPermissionDraftOrders, StaffMemberPermissionEditOrders, StaffMemberPermissionFull, StaffMemberPermissionGiftCards, StaffMemberPermissionLinks, StaffMemberPermissionLocations, StaffMemberPermissionMarketing, StaffMemberPermissionMarketingSection, StaffMemberPermissionOrders, StaffMemberPermissionOverviews, StaffMemberPermissionPages, StaffMemberPermissionPayDraftOrdersByCreditCard, StaffMemberPermissionPayOrdersByCreditCard, StaffMemberPermissionPayOrdersByVaultedCard, StaffMemberPermissionPreferences, StaffMemberPermissionProducts, StaffMemberPermissionReports, StaffMemberPermissionThemes, StaffMemberPermissionTranslations:
		return true
	}
	return false
}

func (e StaffMemberPermission) String() string {
	return string(e)
}

func (e *StaffMemberPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffMemberPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffMemberPermission", str)
	}
	return nil
}

func (e StaffMemberPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible HTTP method of a staged upload target.
type StagedUploadHTTPMethodType string

const (
	// The POST HTTP method.
	StagedUploadHTTPMethodTypePost StagedUploadHTTPMethodType = "POST"
	// The PUT HTTP method.
	StagedUploadHTTPMethodTypePut StagedUploadHTTPMethodType = "PUT"
)

var AllStagedUploadHTTPMethodType = []StagedUploadHTTPMethodType{
	StagedUploadHTTPMethodTypePost,
	StagedUploadHTTPMethodTypePut,
}

func (e StagedUploadHTTPMethodType) IsValid() bool {
	switch e {
	case StagedUploadHTTPMethodTypePost, StagedUploadHTTPMethodTypePut:
		return true
	}
	return false
}

func (e StagedUploadHTTPMethodType) String() string {
	return string(e)
}

func (e *StagedUploadHTTPMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadHTTPMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadHttpMethodType", str)
	}
	return nil
}

func (e StagedUploadHTTPMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The resource type to receive.
type StagedUploadTargetGenerateUploadResource string

const (
	// A timeline event.
	StagedUploadTargetGenerateUploadResourceTimeline StagedUploadTargetGenerateUploadResource = "TIMELINE"
	// A product image.
	StagedUploadTargetGenerateUploadResourceProductImage StagedUploadTargetGenerateUploadResource = "PRODUCT_IMAGE"
	// A collection image.
	StagedUploadTargetGenerateUploadResourceCollectionImage StagedUploadTargetGenerateUploadResource = "COLLECTION_IMAGE"
	// A shop image.
	StagedUploadTargetGenerateUploadResourceShopImage StagedUploadTargetGenerateUploadResource = "SHOP_IMAGE"
	// BulkOperation resource representation.
	StagedUploadTargetGenerateUploadResourceBulkMutationVariables StagedUploadTargetGenerateUploadResource = "BULK_MUTATION_VARIABLES"
	// RedirectImport resource representation.
	StagedUploadTargetGenerateUploadResourceURLRedirectImport StagedUploadTargetGenerateUploadResource = "URL_REDIRECT_IMPORT"
	// Merchandising::GenericFile resource representation.
	StagedUploadTargetGenerateUploadResourceFile StagedUploadTargetGenerateUploadResource = "FILE"
	// Merchandising::Image resource representation.
	StagedUploadTargetGenerateUploadResourceImage StagedUploadTargetGenerateUploadResource = "IMAGE"
	// Merchandising::Model3d resource representation.
	StagedUploadTargetGenerateUploadResourceModel3d StagedUploadTargetGenerateUploadResource = "MODEL_3D"
	// Merchandising::Video resource representation.
	StagedUploadTargetGenerateUploadResourceVideo StagedUploadTargetGenerateUploadResource = "VIDEO"
)

var AllStagedUploadTargetGenerateUploadResource = []StagedUploadTargetGenerateUploadResource{
	StagedUploadTargetGenerateUploadResourceTimeline,
	StagedUploadTargetGenerateUploadResourceProductImage,
	StagedUploadTargetGenerateUploadResourceCollectionImage,
	StagedUploadTargetGenerateUploadResourceShopImage,
	StagedUploadTargetGenerateUploadResourceBulkMutationVariables,
	StagedUploadTargetGenerateUploadResourceURLRedirectImport,
	StagedUploadTargetGenerateUploadResourceFile,
	StagedUploadTargetGenerateUploadResourceImage,
	StagedUploadTargetGenerateUploadResourceModel3d,
	StagedUploadTargetGenerateUploadResourceVideo,
}

func (e StagedUploadTargetGenerateUploadResource) IsValid() bool {
	switch e {
	case StagedUploadTargetGenerateUploadResourceTimeline, StagedUploadTargetGenerateUploadResourceProductImage, StagedUploadTargetGenerateUploadResourceCollectionImage, StagedUploadTargetGenerateUploadResourceShopImage, StagedUploadTargetGenerateUploadResourceBulkMutationVariables, StagedUploadTargetGenerateUploadResourceURLRedirectImport, StagedUploadTargetGenerateUploadResourceFile, StagedUploadTargetGenerateUploadResourceImage, StagedUploadTargetGenerateUploadResourceModel3d, StagedUploadTargetGenerateUploadResourceVideo:
		return true
	}
	return false
}

func (e StagedUploadTargetGenerateUploadResource) String() string {
	return string(e)
}

func (e *StagedUploadTargetGenerateUploadResource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadTargetGenerateUploadResource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadTargetGenerateUploadResource", str)
	}
	return nil
}

func (e StagedUploadTargetGenerateUploadResource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
type StandardMetafieldDefinitionEnableUserErrorCode string

const (
	// The input value is invalid.
	StandardMetafieldDefinitionEnableUserErrorCodeInvalid StandardMetafieldDefinitionEnableUserErrorCode = "INVALID"
	// The input value is already taken.
	StandardMetafieldDefinitionEnableUserErrorCodeTaken StandardMetafieldDefinitionEnableUserErrorCode = "TAKEN"
	// The standard metafield definition template was not found.
	StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound StandardMetafieldDefinitionEnableUserErrorCode = "TEMPLATE_NOT_FOUND"
	// The maximum number of definitions per owner type has been exceeded.
	StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded StandardMetafieldDefinitionEnableUserErrorCode = "LIMIT_EXCEEDED"
	// The namespace and key is already in use for a set of your metafields.
	StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists StandardMetafieldDefinitionEnableUserErrorCode = "UNSTRUCTURED_ALREADY_EXISTS"
)

var AllStandardMetafieldDefinitionEnableUserErrorCode = []StandardMetafieldDefinitionEnableUserErrorCode{
	StandardMetafieldDefinitionEnableUserErrorCodeInvalid,
	StandardMetafieldDefinitionEnableUserErrorCodeTaken,
	StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound,
	StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded,
	StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists,
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) IsValid() bool {
	switch e {
	case StandardMetafieldDefinitionEnableUserErrorCodeInvalid, StandardMetafieldDefinitionEnableUserErrorCodeTaken, StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound, StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded, StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists:
		return true
	}
	return false
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) String() string {
	return string(e)
}

func (e *StandardMetafieldDefinitionEnableUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StandardMetafieldDefinitionEnableUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StandardMetafieldDefinitionEnableUserErrorCode", str)
	}
	return nil
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible error codes associated with making billing attempts. The error codes supplement the
// `error_message` to provide consistent results and help with dunning management.
type SubscriptionBillingAttemptErrorCode string

const (
	// Payment method was not found.
	//
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_NOT_FOUND"
	// Payment provider is not enabled.
	//
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled SubscriptionBillingAttemptErrorCode = "PAYMENT_PROVIDER_IS_NOT_ENABLED"
	// Payment method is invalid. Please update or create a new payment method.
	//
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod SubscriptionBillingAttemptErrorCode = "INVALID_PAYMENT_METHOD"
	// There was an unexpected error during the billing attempt.
	//
	SubscriptionBillingAttemptErrorCodeUnexpectedError SubscriptionBillingAttemptErrorCode = "UNEXPECTED_ERROR"
	// Payment method is expired.
	//
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod SubscriptionBillingAttemptErrorCode = "EXPIRED_PAYMENT_METHOD"
	// Payment method was declined by processor.
	//
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_DECLINED"
	// There was an error during the authentication.
	//
	SubscriptionBillingAttemptErrorCodeAuthenticationError SubscriptionBillingAttemptErrorCode = "AUTHENTICATION_ERROR"
	// Gateway is in test mode and attempted to bill a live payment method.
	//
	SubscriptionBillingAttemptErrorCodeTestMode SubscriptionBillingAttemptErrorCode = "TEST_MODE"
	// Payment method was canceled by buyer.
	SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod SubscriptionBillingAttemptErrorCode = "BUYER_CANCELED_PAYMENT_METHOD"
	// Customer was not found.
	SubscriptionBillingAttemptErrorCodeCustomerNotFound SubscriptionBillingAttemptErrorCode = "CUSTOMER_NOT_FOUND"
	// Customer is invalid.
	SubscriptionBillingAttemptErrorCodeCustomerInvalid SubscriptionBillingAttemptErrorCode = "CUSTOMER_INVALID"
	// The shipping address is either missing or invalid.
	SubscriptionBillingAttemptErrorCodeInvalidShippingAddress SubscriptionBillingAttemptErrorCode = "INVALID_SHIPPING_ADDRESS"
	// The billing agreement ID or the transaction ID for the customer's PayPal is invalid.
	SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement SubscriptionBillingAttemptErrorCode = "INVALID_CUSTOMER_BILLING_AGREEMENT"
	// A payment has already been made for this invoice.
	SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid SubscriptionBillingAttemptErrorCode = "INVOICE_ALREADY_PAID"
)

var AllSubscriptionBillingAttemptErrorCode = []SubscriptionBillingAttemptErrorCode{
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound,
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled,
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod,
	SubscriptionBillingAttemptErrorCodeUnexpectedError,
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod,
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined,
	SubscriptionBillingAttemptErrorCodeAuthenticationError,
	SubscriptionBillingAttemptErrorCodeTestMode,
	SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod,
	SubscriptionBillingAttemptErrorCodeCustomerNotFound,
	SubscriptionBillingAttemptErrorCodeCustomerInvalid,
	SubscriptionBillingAttemptErrorCodeInvalidShippingAddress,
	SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement,
	SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid,
}

func (e SubscriptionBillingAttemptErrorCode) IsValid() bool {
	switch e {
	case SubscriptionBillingAttemptErrorCodePaymentMethodNotFound, SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled, SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod, SubscriptionBillingAttemptErrorCodeUnexpectedError, SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod, SubscriptionBillingAttemptErrorCodePaymentMethodDeclined, SubscriptionBillingAttemptErrorCodeAuthenticationError, SubscriptionBillingAttemptErrorCodeTestMode, SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod, SubscriptionBillingAttemptErrorCodeCustomerNotFound, SubscriptionBillingAttemptErrorCodeCustomerInvalid, SubscriptionBillingAttemptErrorCodeInvalidShippingAddress, SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement, SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid:
		return true
	}
	return false
}

func (e SubscriptionBillingAttemptErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionBillingAttemptErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingAttemptErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingAttemptErrorCode", str)
	}
	return nil
}

func (e SubscriptionBillingAttemptErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SubscriptionContractUserError`.
type SubscriptionContractErrorCode string

const (
	// The input value is invalid.
	SubscriptionContractErrorCodeInvalid SubscriptionContractErrorCode = "INVALID"
)

var AllSubscriptionContractErrorCode = []SubscriptionContractErrorCode{
	SubscriptionContractErrorCodeInvalid,
}

func (e SubscriptionContractErrorCode) IsValid() bool {
	switch e {
	case SubscriptionContractErrorCodeInvalid:
		return true
	}
	return false
}

func (e SubscriptionContractErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionContractErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractErrorCode", str)
	}
	return nil
}

func (e SubscriptionContractErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible status values of the last payment on a subscription contract.
type SubscriptionContractLastPaymentStatus string

const (
	// Successful subscription billing attempt.
	SubscriptionContractLastPaymentStatusSucceeded SubscriptionContractLastPaymentStatus = "SUCCEEDED"
	// Failed subscription billing attempt.
	SubscriptionContractLastPaymentStatusFailed SubscriptionContractLastPaymentStatus = "FAILED"
)

var AllSubscriptionContractLastPaymentStatus = []SubscriptionContractLastPaymentStatus{
	SubscriptionContractLastPaymentStatusSucceeded,
	SubscriptionContractLastPaymentStatusFailed,
}

func (e SubscriptionContractLastPaymentStatus) IsValid() bool {
	switch e {
	case SubscriptionContractLastPaymentStatusSucceeded, SubscriptionContractLastPaymentStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionContractLastPaymentStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractLastPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractLastPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractLastPaymentStatus", str)
	}
	return nil
}

func (e SubscriptionContractLastPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible status values of a subscription.
type SubscriptionContractSubscriptionStatus string

const (
	// Active subscription contract.
	SubscriptionContractSubscriptionStatusActive SubscriptionContractSubscriptionStatus = "ACTIVE"
	// Paused subscription contract.
	SubscriptionContractSubscriptionStatusPaused SubscriptionContractSubscriptionStatus = "PAUSED"
	// Cancelled subscription contract.
	SubscriptionContractSubscriptionStatusCancelled SubscriptionContractSubscriptionStatus = "CANCELLED"
	// Expired subscription contract.
	SubscriptionContractSubscriptionStatusExpired SubscriptionContractSubscriptionStatus = "EXPIRED"
	// Failed subscription contract.
	SubscriptionContractSubscriptionStatusFailed SubscriptionContractSubscriptionStatus = "FAILED"
)

var AllSubscriptionContractSubscriptionStatus = []SubscriptionContractSubscriptionStatus{
	SubscriptionContractSubscriptionStatusActive,
	SubscriptionContractSubscriptionStatusPaused,
	SubscriptionContractSubscriptionStatusCancelled,
	SubscriptionContractSubscriptionStatusExpired,
	SubscriptionContractSubscriptionStatusFailed,
}

func (e SubscriptionContractSubscriptionStatus) IsValid() bool {
	switch e {
	case SubscriptionContractSubscriptionStatusActive, SubscriptionContractSubscriptionStatusPaused, SubscriptionContractSubscriptionStatusCancelled, SubscriptionContractSubscriptionStatusExpired, SubscriptionContractSubscriptionStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionContractSubscriptionStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractSubscriptionStatus", str)
	}
	return nil
}

func (e SubscriptionContractSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a discount on a subscription draft was rejected.
type SubscriptionDiscountRejectionReason string

const (
	// Discount code is not found.
	SubscriptionDiscountRejectionReasonNotFound SubscriptionDiscountRejectionReason = "NOT_FOUND"
	// Discount does not apply to any of the given line items.
	SubscriptionDiscountRejectionReasonNoEntitledLineItems SubscriptionDiscountRejectionReason = "NO_ENTITLED_LINE_ITEMS"
	// Quantity of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonQuantityNotInRange SubscriptionDiscountRejectionReason = "QUANTITY_NOT_IN_RANGE"
	// Purchase amount of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonPurchaseNotInRange SubscriptionDiscountRejectionReason = "PURCHASE_NOT_IN_RANGE"
	// Given customer does not qualify for the discount.
	SubscriptionDiscountRejectionReasonCustomerNotEligible SubscriptionDiscountRejectionReason = "CUSTOMER_NOT_ELIGIBLE"
	// Discount usage limit has been reached.
	SubscriptionDiscountRejectionReasonUsageLimitReached SubscriptionDiscountRejectionReason = "USAGE_LIMIT_REACHED"
	// Customer usage limit has been reached.
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached SubscriptionDiscountRejectionReason = "CUSTOMER_USAGE_LIMIT_REACHED"
	// Discount is inactive.
	SubscriptionDiscountRejectionReasonCurrentlyInactive SubscriptionDiscountRejectionReason = "CURRENTLY_INACTIVE"
	// No applicable shipping lines.
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines SubscriptionDiscountRejectionReason = "NO_ENTITLED_SHIPPING_LINES"
	// Purchase type does not qualify for the discount.
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType SubscriptionDiscountRejectionReason = "INCOMPATIBLE_PURCHASE_TYPE"
	// Internal error during discount code validation.
	SubscriptionDiscountRejectionReasonInternalError SubscriptionDiscountRejectionReason = "INTERNAL_ERROR"
)

var AllSubscriptionDiscountRejectionReason = []SubscriptionDiscountRejectionReason{
	SubscriptionDiscountRejectionReasonNotFound,
	SubscriptionDiscountRejectionReasonNoEntitledLineItems,
	SubscriptionDiscountRejectionReasonQuantityNotInRange,
	SubscriptionDiscountRejectionReasonPurchaseNotInRange,
	SubscriptionDiscountRejectionReasonCustomerNotEligible,
	SubscriptionDiscountRejectionReasonUsageLimitReached,
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached,
	SubscriptionDiscountRejectionReasonCurrentlyInactive,
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines,
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType,
	SubscriptionDiscountRejectionReasonInternalError,
}

func (e SubscriptionDiscountRejectionReason) IsValid() bool {
	switch e {
	case SubscriptionDiscountRejectionReasonNotFound, SubscriptionDiscountRejectionReasonNoEntitledLineItems, SubscriptionDiscountRejectionReasonQuantityNotInRange, SubscriptionDiscountRejectionReasonPurchaseNotInRange, SubscriptionDiscountRejectionReasonCustomerNotEligible, SubscriptionDiscountRejectionReasonUsageLimitReached, SubscriptionDiscountRejectionReasonCustomerUsageLimitReached, SubscriptionDiscountRejectionReasonCurrentlyInactive, SubscriptionDiscountRejectionReasonNoEntitledShippingLines, SubscriptionDiscountRejectionReasonIncompatiblePurchaseType, SubscriptionDiscountRejectionReasonInternalError:
		return true
	}
	return false
}

func (e SubscriptionDiscountRejectionReason) String() string {
	return string(e)
}

func (e *SubscriptionDiscountRejectionReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDiscountRejectionReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDiscountRejectionReason", str)
	}
	return nil
}

func (e SubscriptionDiscountRejectionReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SubscriptionDraftUserError`.
type SubscriptionDraftErrorCode string

const (
	// This line has already been removed.
	SubscriptionDraftErrorCodeAlreadyRemoved SubscriptionDraftErrorCode = "ALREADY_REMOVED"
	// Input value is not present.
	SubscriptionDraftErrorCodePresence SubscriptionDraftErrorCode = "PRESENCE"
	// Subscription draft has been already committed.
	SubscriptionDraftErrorCodeCommitted SubscriptionDraftErrorCode = "COMMITTED"
	// Value is not in range.
	SubscriptionDraftErrorCodeNotInRange SubscriptionDraftErrorCode = "NOT_IN_RANGE"
	// The value is not an integer.
	SubscriptionDraftErrorCodeNotAnInteger SubscriptionDraftErrorCode = "NOT_AN_INTEGER"
	// The maximum number of cycles must be greater than the minimum.
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SubscriptionDraftErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// The delivery policy interval must be a multiple of the billing policy interval.
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling SubscriptionDraftErrorCode = "DELIVERY_MUST_BE_MULTIPLE_OF_BILLING"
	// Next billing date is invalid.
	SubscriptionDraftErrorCodeInvalidBillingDate SubscriptionDraftErrorCode = "INVALID_BILLING_DATE"
	// Note length is too long.
	SubscriptionDraftErrorCodeInvalidNoteLength SubscriptionDraftErrorCode = "INVALID_NOTE_LENGTH"
	// Must have at least one line.
	SubscriptionDraftErrorCodeInvalidLines SubscriptionDraftErrorCode = "INVALID_LINES"
	// Discount must have at least one entitled line.
	SubscriptionDraftErrorCodeNoEntitledLines SubscriptionDraftErrorCode = "NO_ENTITLED_LINES"
	// The customer doesn't exist.
	SubscriptionDraftErrorCodeCustomerDoesNotExist SubscriptionDraftErrorCode = "CUSTOMER_DOES_NOT_EXIST"
	// The payment method customer must be the same as the contract customer.
	SubscriptionDraftErrorCodeCustomerMismatch SubscriptionDraftErrorCode = "CUSTOMER_MISMATCH"
	// The delivery method can't be blank if any lines require shipping.
	SubscriptionDraftErrorCodeDeliveryMethodRequired SubscriptionDraftErrorCode = "DELIVERY_METHOD_REQUIRED"
	// The after cycle attribute must be unique between cycle discounts.
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle SubscriptionDraftErrorCode = "CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE"
	// The adjustment value must the same type as the adjustment type.
	SubscriptionDraftErrorCodeInvalidAdjustmentType SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_TYPE"
	// The adjustment value must be either fixed_value or percentage.
	SubscriptionDraftErrorCodeInvalidAdjustmentValue SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_VALUE"
	// Another operation updated the contract concurrently as the commit was in progress.
	SubscriptionDraftErrorCodeStaleContract SubscriptionDraftErrorCode = "STALE_CONTRACT"
	// Currency is not enabled.
	SubscriptionDraftErrorCodeCurrencyNotEnabled SubscriptionDraftErrorCode = "CURRENCY_NOT_ENABLED"
	// The input value is invalid.
	SubscriptionDraftErrorCodeInvalid SubscriptionDraftErrorCode = "INVALID"
	// The input value is blank.
	SubscriptionDraftErrorCodeBlank SubscriptionDraftErrorCode = "BLANK"
	// The input value should be greater than the minimum allowed value.
	SubscriptionDraftErrorCodeGreaterThan SubscriptionDraftErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo SubscriptionDraftErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value should be less than the maximum value allowed.
	SubscriptionDraftErrorCodeLessThan SubscriptionDraftErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	SubscriptionDraftErrorCodeLessThanOrEqualTo SubscriptionDraftErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is too long.
	SubscriptionDraftErrorCodeTooLong SubscriptionDraftErrorCode = "TOO_LONG"
	// The input value is too short.
	SubscriptionDraftErrorCodeTooShort SubscriptionDraftErrorCode = "TOO_SHORT"
)

var AllSubscriptionDraftErrorCode = []SubscriptionDraftErrorCode{
	SubscriptionDraftErrorCodeAlreadyRemoved,
	SubscriptionDraftErrorCodePresence,
	SubscriptionDraftErrorCodeCommitted,
	SubscriptionDraftErrorCodeNotInRange,
	SubscriptionDraftErrorCodeNotAnInteger,
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling,
	SubscriptionDraftErrorCodeInvalidBillingDate,
	SubscriptionDraftErrorCodeInvalidNoteLength,
	SubscriptionDraftErrorCodeInvalidLines,
	SubscriptionDraftErrorCodeNoEntitledLines,
	SubscriptionDraftErrorCodeCustomerDoesNotExist,
	SubscriptionDraftErrorCodeCustomerMismatch,
	SubscriptionDraftErrorCodeDeliveryMethodRequired,
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle,
	SubscriptionDraftErrorCodeInvalidAdjustmentType,
	SubscriptionDraftErrorCodeInvalidAdjustmentValue,
	SubscriptionDraftErrorCodeStaleContract,
	SubscriptionDraftErrorCodeCurrencyNotEnabled,
	SubscriptionDraftErrorCodeInvalid,
	SubscriptionDraftErrorCodeBlank,
	SubscriptionDraftErrorCodeGreaterThan,
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo,
	SubscriptionDraftErrorCodeLessThan,
	SubscriptionDraftErrorCodeLessThanOrEqualTo,
	SubscriptionDraftErrorCodeTooLong,
	SubscriptionDraftErrorCodeTooShort,
}

func (e SubscriptionDraftErrorCode) IsValid() bool {
	switch e {
	case SubscriptionDraftErrorCodeAlreadyRemoved, SubscriptionDraftErrorCodePresence, SubscriptionDraftErrorCodeCommitted, SubscriptionDraftErrorCodeNotInRange, SubscriptionDraftErrorCodeNotAnInteger, SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling, SubscriptionDraftErrorCodeInvalidBillingDate, SubscriptionDraftErrorCodeInvalidNoteLength, SubscriptionDraftErrorCodeInvalidLines, SubscriptionDraftErrorCodeNoEntitledLines, SubscriptionDraftErrorCodeCustomerDoesNotExist, SubscriptionDraftErrorCodeCustomerMismatch, SubscriptionDraftErrorCodeDeliveryMethodRequired, SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle, SubscriptionDraftErrorCodeInvalidAdjustmentType, SubscriptionDraftErrorCodeInvalidAdjustmentValue, SubscriptionDraftErrorCodeStaleContract, SubscriptionDraftErrorCodeCurrencyNotEnabled, SubscriptionDraftErrorCodeInvalid, SubscriptionDraftErrorCodeBlank, SubscriptionDraftErrorCodeGreaterThan, SubscriptionDraftErrorCodeGreaterThanOrEqualTo, SubscriptionDraftErrorCodeLessThan, SubscriptionDraftErrorCodeLessThanOrEqualTo, SubscriptionDraftErrorCodeTooLong, SubscriptionDraftErrorCodeTooShort:
		return true
	}
	return false
}

func (e SubscriptionDraftErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionDraftErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDraftErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDraftErrorCode", str)
	}
	return nil
}

func (e SubscriptionDraftErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the kind of the suggested order transaction.
type SuggestedOrderTransactionKind string

const (
	// A suggested refund transaction for an order.
	SuggestedOrderTransactionKindSuggestedRefund SuggestedOrderTransactionKind = "SUGGESTED_REFUND"
)

var AllSuggestedOrderTransactionKind = []SuggestedOrderTransactionKind{
	SuggestedOrderTransactionKindSuggestedRefund,
}

func (e SuggestedOrderTransactionKind) IsValid() bool {
	switch e {
	case SuggestedOrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e SuggestedOrderTransactionKind) String() string {
	return string(e)
}

func (e *SuggestedOrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SuggestedOrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SuggestedOrderTransactionKind", str)
	}
	return nil
}

func (e SuggestedOrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available customer tax exemptions.
type TaxExemption string

const (
	// This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
	TaxExemptionCaStatusCardExemption TaxExemption = "CA_STATUS_CARD_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
	TaxExemptionCaBcResellerExemption TaxExemption = "CA_BC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
	TaxExemptionCaMbResellerExemption TaxExemption = "CA_MB_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkResellerExemption TaxExemption = "CA_SK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
	TaxExemptionCaDiplomatExemption TaxExemption = "CA_DIPLOMAT_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcCommercialFisheryExemption TaxExemption = "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
	TaxExemptionCaMbCommercialFisheryExemption TaxExemption = "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsCommercialFisheryExemption TaxExemption = "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
	TaxExemptionCaPeCommercialFisheryExemption TaxExemption = "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkCommercialFisheryExemption TaxExemption = "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcProductionAndMachineryExemption TaxExemption = "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkProductionAndMachineryExemption TaxExemption = "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcSubContractorExemption TaxExemption = "CA_BC_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkSubContractorExemption TaxExemption = "CA_SK_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcContractorExemption TaxExemption = "CA_BC_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkContractorExemption TaxExemption = "CA_SK_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
	TaxExemptionCaOnPurchaseExemption TaxExemption = "CA_ON_PURCHASE_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
	TaxExemptionCaMbFarmerExemption TaxExemption = "CA_MB_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsFarmerExemption TaxExemption = "CA_NS_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkFarmerExemption TaxExemption = "CA_SK_FARMER_EXEMPTION"
	// This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
	TaxExemptionEuReverseChargeExemptionRule TaxExemption = "EU_REVERSE_CHARGE_EXEMPTION_RULE"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
	TaxExemptionUsAlResellerExemption TaxExemption = "US_AL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
	TaxExemptionUsAkResellerExemption TaxExemption = "US_AK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
	TaxExemptionUsAzResellerExemption TaxExemption = "US_AZ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
	TaxExemptionUsArResellerExemption TaxExemption = "US_AR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
	TaxExemptionUsCaResellerExemption TaxExemption = "US_CA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
	TaxExemptionUsCoResellerExemption TaxExemption = "US_CO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
	TaxExemptionUsCtResellerExemption TaxExemption = "US_CT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
	TaxExemptionUsDeResellerExemption TaxExemption = "US_DE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
	TaxExemptionUsFlResellerExemption TaxExemption = "US_FL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
	TaxExemptionUsGaResellerExemption TaxExemption = "US_GA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
	TaxExemptionUsHiResellerExemption TaxExemption = "US_HI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
	TaxExemptionUsIDResellerExemption TaxExemption = "US_ID_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
	TaxExemptionUsIlResellerExemption TaxExemption = "US_IL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
	TaxExemptionUsInResellerExemption TaxExemption = "US_IN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
	TaxExemptionUsIaResellerExemption TaxExemption = "US_IA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
	TaxExemptionUsKsResellerExemption TaxExemption = "US_KS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
	TaxExemptionUsKyResellerExemption TaxExemption = "US_KY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
	TaxExemptionUsLaResellerExemption TaxExemption = "US_LA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
	TaxExemptionUsMeResellerExemption TaxExemption = "US_ME_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
	TaxExemptionUsMdResellerExemption TaxExemption = "US_MD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
	TaxExemptionUsMaResellerExemption TaxExemption = "US_MA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
	TaxExemptionUsMiResellerExemption TaxExemption = "US_MI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
	TaxExemptionUsMnResellerExemption TaxExemption = "US_MN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
	TaxExemptionUsMsResellerExemption TaxExemption = "US_MS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
	TaxExemptionUsMoResellerExemption TaxExemption = "US_MO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
	TaxExemptionUsMtResellerExemption TaxExemption = "US_MT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
	TaxExemptionUsNeResellerExemption TaxExemption = "US_NE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
	TaxExemptionUsNvResellerExemption TaxExemption = "US_NV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
	TaxExemptionUsNhResellerExemption TaxExemption = "US_NH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
	TaxExemptionUsNjResellerExemption TaxExemption = "US_NJ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
	TaxExemptionUsNmResellerExemption TaxExemption = "US_NM_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
	TaxExemptionUsNyResellerExemption TaxExemption = "US_NY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
	TaxExemptionUsNcResellerExemption TaxExemption = "US_NC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
	TaxExemptionUsNdResellerExemption TaxExemption = "US_ND_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
	TaxExemptionUsOhResellerExemption TaxExemption = "US_OH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
	TaxExemptionUsOkResellerExemption TaxExemption = "US_OK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
	TaxExemptionUsOrResellerExemption TaxExemption = "US_OR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
	TaxExemptionUsPaResellerExemption TaxExemption = "US_PA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
	TaxExemptionUsRiResellerExemption TaxExemption = "US_RI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
	TaxExemptionUsScResellerExemption TaxExemption = "US_SC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
	TaxExemptionUsSdResellerExemption TaxExemption = "US_SD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
	TaxExemptionUsTnResellerExemption TaxExemption = "US_TN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
	TaxExemptionUsTxResellerExemption TaxExemption = "US_TX_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
	TaxExemptionUsUtResellerExemption TaxExemption = "US_UT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
	TaxExemptionUsVtResellerExemption TaxExemption = "US_VT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
	TaxExemptionUsVaResellerExemption TaxExemption = "US_VA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
	TaxExemptionUsWaResellerExemption TaxExemption = "US_WA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
	TaxExemptionUsWvResellerExemption TaxExemption = "US_WV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
	TaxExemptionUsWiResellerExemption TaxExemption = "US_WI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
	TaxExemptionUsWyResellerExemption TaxExemption = "US_WY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
	TaxExemptionUsDcResellerExemption TaxExemption = "US_DC_RESELLER_EXEMPTION"
)

var AllTaxExemption = []TaxExemption{
	TaxExemptionCaStatusCardExemption,
	TaxExemptionCaBcResellerExemption,
	TaxExemptionCaMbResellerExemption,
	TaxExemptionCaSkResellerExemption,
	TaxExemptionCaDiplomatExemption,
	TaxExemptionCaBcCommercialFisheryExemption,
	TaxExemptionCaMbCommercialFisheryExemption,
	TaxExemptionCaNsCommercialFisheryExemption,
	TaxExemptionCaPeCommercialFisheryExemption,
	TaxExemptionCaSkCommercialFisheryExemption,
	TaxExemptionCaBcProductionAndMachineryExemption,
	TaxExemptionCaSkProductionAndMachineryExemption,
	TaxExemptionCaBcSubContractorExemption,
	TaxExemptionCaSkSubContractorExemption,
	TaxExemptionCaBcContractorExemption,
	TaxExemptionCaSkContractorExemption,
	TaxExemptionCaOnPurchaseExemption,
	TaxExemptionCaMbFarmerExemption,
	TaxExemptionCaNsFarmerExemption,
	TaxExemptionCaSkFarmerExemption,
	TaxExemptionEuReverseChargeExemptionRule,
	TaxExemptionUsAlResellerExemption,
	TaxExemptionUsAkResellerExemption,
	TaxExemptionUsAzResellerExemption,
	TaxExemptionUsArResellerExemption,
	TaxExemptionUsCaResellerExemption,
	TaxExemptionUsCoResellerExemption,
	TaxExemptionUsCtResellerExemption,
	TaxExemptionUsDeResellerExemption,
	TaxExemptionUsFlResellerExemption,
	TaxExemptionUsGaResellerExemption,
	TaxExemptionUsHiResellerExemption,
	TaxExemptionUsIDResellerExemption,
	TaxExemptionUsIlResellerExemption,
	TaxExemptionUsInResellerExemption,
	TaxExemptionUsIaResellerExemption,
	TaxExemptionUsKsResellerExemption,
	TaxExemptionUsKyResellerExemption,
	TaxExemptionUsLaResellerExemption,
	TaxExemptionUsMeResellerExemption,
	TaxExemptionUsMdResellerExemption,
	TaxExemptionUsMaResellerExemption,
	TaxExemptionUsMiResellerExemption,
	TaxExemptionUsMnResellerExemption,
	TaxExemptionUsMsResellerExemption,
	TaxExemptionUsMoResellerExemption,
	TaxExemptionUsMtResellerExemption,
	TaxExemptionUsNeResellerExemption,
	TaxExemptionUsNvResellerExemption,
	TaxExemptionUsNhResellerExemption,
	TaxExemptionUsNjResellerExemption,
	TaxExemptionUsNmResellerExemption,
	TaxExemptionUsNyResellerExemption,
	TaxExemptionUsNcResellerExemption,
	TaxExemptionUsNdResellerExemption,
	TaxExemptionUsOhResellerExemption,
	TaxExemptionUsOkResellerExemption,
	TaxExemptionUsOrResellerExemption,
	TaxExemptionUsPaResellerExemption,
	TaxExemptionUsRiResellerExemption,
	TaxExemptionUsScResellerExemption,
	TaxExemptionUsSdResellerExemption,
	TaxExemptionUsTnResellerExemption,
	TaxExemptionUsTxResellerExemption,
	TaxExemptionUsUtResellerExemption,
	TaxExemptionUsVtResellerExemption,
	TaxExemptionUsVaResellerExemption,
	TaxExemptionUsWaResellerExemption,
	TaxExemptionUsWvResellerExemption,
	TaxExemptionUsWiResellerExemption,
	TaxExemptionUsWyResellerExemption,
	TaxExemptionUsDcResellerExemption,
}

func (e TaxExemption) IsValid() bool {
	switch e {
	case TaxExemptionCaStatusCardExemption, TaxExemptionCaBcResellerExemption, TaxExemptionCaMbResellerExemption, TaxExemptionCaSkResellerExemption, TaxExemptionCaDiplomatExemption, TaxExemptionCaBcCommercialFisheryExemption, TaxExemptionCaMbCommercialFisheryExemption, TaxExemptionCaNsCommercialFisheryExemption, TaxExemptionCaPeCommercialFisheryExemption, TaxExemptionCaSkCommercialFisheryExemption, TaxExemptionCaBcProductionAndMachineryExemption, TaxExemptionCaSkProductionAndMachineryExemption, TaxExemptionCaBcSubContractorExemption, TaxExemptionCaSkSubContractorExemption, TaxExemptionCaBcContractorExemption, TaxExemptionCaSkContractorExemption, TaxExemptionCaOnPurchaseExemption, TaxExemptionCaMbFarmerExemption, TaxExemptionCaNsFarmerExemption, TaxExemptionCaSkFarmerExemption, TaxExemptionEuReverseChargeExemptionRule, TaxExemptionUsAlResellerExemption, TaxExemptionUsAkResellerExemption, TaxExemptionUsAzResellerExemption, TaxExemptionUsArResellerExemption, TaxExemptionUsCaResellerExemption, TaxExemptionUsCoResellerExemption, TaxExemptionUsCtResellerExemption, TaxExemptionUsDeResellerExemption, TaxExemptionUsFlResellerExemption, TaxExemptionUsGaResellerExemption, TaxExemptionUsHiResellerExemption, TaxExemptionUsIDResellerExemption, TaxExemptionUsIlResellerExemption, TaxExemptionUsInResellerExemption, TaxExemptionUsIaResellerExemption, TaxExemptionUsKsResellerExemption, TaxExemptionUsKyResellerExemption, TaxExemptionUsLaResellerExemption, TaxExemptionUsMeResellerExemption, TaxExemptionUsMdResellerExemption, TaxExemptionUsMaResellerExemption, TaxExemptionUsMiResellerExemption, TaxExemptionUsMnResellerExemption, TaxExemptionUsMsResellerExemption, TaxExemptionUsMoResellerExemption, TaxExemptionUsMtResellerExemption, TaxExemptionUsNeResellerExemption, TaxExemptionUsNvResellerExemption, TaxExemptionUsNhResellerExemption, TaxExemptionUsNjResellerExemption, TaxExemptionUsNmResellerExemption, TaxExemptionUsNyResellerExemption, TaxExemptionUsNcResellerExemption, TaxExemptionUsNdResellerExemption, TaxExemptionUsOhResellerExemption, TaxExemptionUsOkResellerExemption, TaxExemptionUsOrResellerExemption, TaxExemptionUsPaResellerExemption, TaxExemptionUsRiResellerExemption, TaxExemptionUsScResellerExemption, TaxExemptionUsSdResellerExemption, TaxExemptionUsTnResellerExemption, TaxExemptionUsTxResellerExemption, TaxExemptionUsUtResellerExemption, TaxExemptionUsVtResellerExemption, TaxExemptionUsVaResellerExemption, TaxExemptionUsWaResellerExemption, TaxExemptionUsWvResellerExemption, TaxExemptionUsWiResellerExemption, TaxExemptionUsWyResellerExemption, TaxExemptionUsDcResellerExemption:
		return true
	}
	return false
}

func (e TaxExemption) String() string {
	return string(e)
}

func (e *TaxExemption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxExemption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxExemption", str)
	}
	return nil
}

func (e TaxExemption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported methods for processing a refund, indicating whether or not a physical card must be present.
type TransactionSupportedRefundType string

const (
	// Refund requiring card present data. For example, the physical card and a reader. Note: third party developers can't refund this type.
	TransactionSupportedRefundTypeCardPresentRefund TransactionSupportedRefundType = "CARD_PRESENT_REFUND"
	// Refund without a physical card.
	TransactionSupportedRefundTypeCardNotPresentRefund TransactionSupportedRefundType = "CARD_NOT_PRESENT_REFUND"
)

var AllTransactionSupportedRefundType = []TransactionSupportedRefundType{
	TransactionSupportedRefundTypeCardPresentRefund,
	TransactionSupportedRefundTypeCardNotPresentRefund,
}

func (e TransactionSupportedRefundType) IsValid() bool {
	switch e {
	case TransactionSupportedRefundTypeCardPresentRefund, TransactionSupportedRefundTypeCardNotPresentRefund:
		return true
	}
	return false
}

func (e TransactionSupportedRefundType) String() string {
	return string(e)
}

func (e *TransactionSupportedRefundType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionSupportedRefundType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionSupportedRefundType", str)
	}
	return nil
}

func (e TransactionSupportedRefundType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources that are translatable.
type TranslatableResourceType string

const (
	// A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
	TranslatableResourceTypeCollection TranslatableResourceType = "COLLECTION"
	// The delivery method definition. For example, "Standard", or "Expedited".
	//         Translatable fields: `name`.
	TranslatableResourceTypeDeliveryMethodDefinition TranslatableResourceType = "DELIVERY_METHOD_DEFINITION"
	// An email template. Translatable fields: `title`, `body_html`.
	TranslatableResourceTypeEmailTemplate TranslatableResourceType = "EMAIL_TEMPLATE"
	// A link to direct users. Translatable fields: `title`.
	TranslatableResourceTypeLink TranslatableResourceType = "LINK"
	// A Metafield. Translatable fields: `value`.
	TranslatableResourceTypeMetafield TranslatableResourceType = "METAFIELD"
	// An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStoreArticle TranslatableResourceType = "ONLINE_STORE_ARTICLE"
	// An online store blog. Translatable fields: `title`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStoreBlog TranslatableResourceType = "ONLINE_STORE_BLOG"
	// A category of links. Translatable fields: `title`.
	TranslatableResourceTypeOnlineStoreMenu TranslatableResourceType = "ONLINE_STORE_MENU"
	// An online store page. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStorePage TranslatableResourceType = "ONLINE_STORE_PAGE"
	// An online store theme. Translatable fields: `dynamic keys based on theme data`.
	TranslatableResourceTypeOnlineStoreTheme TranslatableResourceType = "ONLINE_STORE_THEME"
	// A packing slip template. Translatable fields: `body`.
	TranslatableResourceTypePackingSlipTemplate TranslatableResourceType = "PACKING_SLIP_TEMPLATE"
	// A payment gateway. Translatable fields: `name`.
	TranslatableResourceTypePaymentGateway TranslatableResourceType = "PAYMENT_GATEWAY"
	// An online store product. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
	TranslatableResourceTypeProduct TranslatableResourceType = "PRODUCT"
	// An online store custom product property name. For example, "Size", "Color", or "Material".
	//         Translatable fields: `name`.
	TranslatableResourceTypeProductOption TranslatableResourceType = "PRODUCT_OPTION"
	// An online store product variant. Translatable fields: `title`, `option1`, `option2`, `option3`.
	TranslatableResourceTypeProductVariant TranslatableResourceType = "PRODUCT_VARIANT"
	// A shop. Translatable fields: `meta_title`, `meta_description`.
	TranslatableResourceTypeShop TranslatableResourceType = "SHOP"
	// A shop policy. Translatable fields: `body`.
	TranslatableResourceTypeShopPolicy TranslatableResourceType = "SHOP_POLICY"
	// An SMS template. Translatable fields: `body`.
	TranslatableResourceTypeSmsTemplate TranslatableResourceType = "SMS_TEMPLATE"
)

var AllTranslatableResourceType = []TranslatableResourceType{
	TranslatableResourceTypeCollection,
	TranslatableResourceTypeDeliveryMethodDefinition,
	TranslatableResourceTypeEmailTemplate,
	TranslatableResourceTypeLink,
	TranslatableResourceTypeMetafield,
	TranslatableResourceTypeOnlineStoreArticle,
	TranslatableResourceTypeOnlineStoreBlog,
	TranslatableResourceTypeOnlineStoreMenu,
	TranslatableResourceTypeOnlineStorePage,
	TranslatableResourceTypeOnlineStoreTheme,
	TranslatableResourceTypePackingSlipTemplate,
	TranslatableResourceTypePaymentGateway,
	TranslatableResourceTypeProduct,
	TranslatableResourceTypeProductOption,
	TranslatableResourceTypeProductVariant,
	TranslatableResourceTypeShop,
	TranslatableResourceTypeShopPolicy,
	TranslatableResourceTypeSmsTemplate,
}

func (e TranslatableResourceType) IsValid() bool {
	switch e {
	case TranslatableResourceTypeCollection, TranslatableResourceTypeDeliveryMethodDefinition, TranslatableResourceTypeEmailTemplate, TranslatableResourceTypeLink, TranslatableResourceTypeMetafield, TranslatableResourceTypeOnlineStoreArticle, TranslatableResourceTypeOnlineStoreBlog, TranslatableResourceTypeOnlineStoreMenu, TranslatableResourceTypeOnlineStorePage, TranslatableResourceTypeOnlineStoreTheme, TranslatableResourceTypePackingSlipTemplate, TranslatableResourceTypePaymentGateway, TranslatableResourceTypeProduct, TranslatableResourceTypeProductOption, TranslatableResourceTypeProductVariant, TranslatableResourceTypeShop, TranslatableResourceTypeShopPolicy, TranslatableResourceTypeSmsTemplate:
		return true
	}
	return false
}

func (e TranslatableResourceType) String() string {
	return string(e)
}

func (e *TranslatableResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslatableResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslatableResourceType", str)
	}
	return nil
}

func (e TranslatableResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `TranslationUserError`.
type TranslationErrorCode string

const (
	// The input value is blank.
	TranslationErrorCodeBlank TranslationErrorCode = "BLANK"
	// The input value is invalid.
	TranslationErrorCodeInvalid TranslationErrorCode = "INVALID"
	// Resource does not exist.
	TranslationErrorCodeResourceNotFound TranslationErrorCode = "RESOURCE_NOT_FOUND"
	// Too many translation keys for the resource.
	TranslationErrorCodeTooManyKeysForResource TranslationErrorCode = "TOO_MANY_KEYS_FOR_RESOURCE"
	// Translation key is invalid.
	TranslationErrorCodeInvalidKeyForModel TranslationErrorCode = "INVALID_KEY_FOR_MODEL"
	// Translation value is invalid.
	TranslationErrorCodeFailsResourceValidation TranslationErrorCode = "FAILS_RESOURCE_VALIDATION"
	// Translatable content is invalid.
	TranslationErrorCodeInvalidTranslatableContent TranslationErrorCode = "INVALID_TRANSLATABLE_CONTENT"
	// Locale is invalid for the shop.
	TranslationErrorCodeInvalidLocaleForShop TranslationErrorCode = "INVALID_LOCALE_FOR_SHOP"
	// Locale language code is invalid.
	TranslationErrorCodeInvalidCode TranslationErrorCode = "INVALID_CODE"
	// Locale code format is invalid.
	TranslationErrorCodeInvalidFormat TranslationErrorCode = "INVALID_FORMAT"
)

var AllTranslationErrorCode = []TranslationErrorCode{
	TranslationErrorCodeBlank,
	TranslationErrorCodeInvalid,
	TranslationErrorCodeResourceNotFound,
	TranslationErrorCodeTooManyKeysForResource,
	TranslationErrorCodeInvalidKeyForModel,
	TranslationErrorCodeFailsResourceValidation,
	TranslationErrorCodeInvalidTranslatableContent,
	TranslationErrorCodeInvalidLocaleForShop,
	TranslationErrorCodeInvalidCode,
	TranslationErrorCodeInvalidFormat,
}

func (e TranslationErrorCode) IsValid() bool {
	switch e {
	case TranslationErrorCodeBlank, TranslationErrorCodeInvalid, TranslationErrorCodeResourceNotFound, TranslationErrorCodeTooManyKeysForResource, TranslationErrorCodeInvalidKeyForModel, TranslationErrorCodeFailsResourceValidation, TranslationErrorCodeInvalidTranslatableContent, TranslationErrorCodeInvalidLocaleForShop, TranslationErrorCodeInvalidCode, TranslationErrorCodeInvalidFormat:
		return true
	}
	return false
}

func (e TranslationErrorCode) String() string {
	return string(e)
}

func (e *TranslationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslationErrorCode", str)
	}
	return nil
}

func (e TranslationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Systems of weights and measures.
type UnitSystem string

const (
	// Imperial system of weights and measures.
	UnitSystemImperialSystem UnitSystem = "IMPERIAL_SYSTEM"
	// Metric system of weights and measures.
	UnitSystemMetricSystem UnitSystem = "METRIC_SYSTEM"
)

var AllUnitSystem = []UnitSystem{
	UnitSystemImperialSystem,
	UnitSystemMetricSystem,
}

func (e UnitSystem) IsValid() bool {
	switch e {
	case UnitSystemImperialSystem, UnitSystemMetricSystem:
		return true
	}
	return false
}

func (e UnitSystem) String() string {
	return string(e)
}

func (e *UnitSystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitSystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitSystem", str)
	}
	return nil
}

func (e UnitSystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
type URLRedirectBulkDeleteByIdsUserErrorCode string

const (
	// You must pass one or more [`URLRedirect`](
	//             https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
	//           ) object IDs.
	URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty URLRedirectBulkDeleteByIdsUserErrorCode = "IDS_EMPTY"
)

var AllURLRedirectBulkDeleteByIdsUserErrorCode = []URLRedirectBulkDeleteByIdsUserErrorCode{
	URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty,
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteByIdsUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteByIdsUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteByIdsUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
type URLRedirectBulkDeleteBySavedSearchUserErrorCode string

const (
	// Saved search not found.
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound URLRedirectBulkDeleteBySavedSearchUserErrorCode = "SAVED_SEARCH_NOT_FOUND"
	// The saved search's query cannot match all entries or be empty.
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery URLRedirectBulkDeleteBySavedSearchUserErrorCode = "INVALID_SAVED_SEARCH_QUERY"
)

var AllURLRedirectBulkDeleteBySavedSearchUserErrorCode = []URLRedirectBulkDeleteBySavedSearchUserErrorCode{
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound,
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery,
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound, URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteBySavedSearchUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteBySavedSearchUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteBySavedSearchUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
type URLRedirectBulkDeleteBySearchUserErrorCode string

const (
	// Invalid search string.
	URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument URLRedirectBulkDeleteBySearchUserErrorCode = "INVALID_SEARCH_ARGUMENT"
)

var AllURLRedirectBulkDeleteBySearchUserErrorCode = []URLRedirectBulkDeleteBySearchUserErrorCode{
	URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument,
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteBySearchUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteBySearchUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteBySearchUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectUserError`.
type URLRedirectErrorCode string

const (
	// Redirect does not exist.
	URLRedirectErrorCodeDoesNotExist URLRedirectErrorCode = "DOES_NOT_EXIST"
	// Redirect could not be created.
	URLRedirectErrorCodeCreateFailed URLRedirectErrorCode = "CREATE_FAILED"
	// Redirect could not be updated.
	URLRedirectErrorCodeUpdateFailed URLRedirectErrorCode = "UPDATE_FAILED"
	// Redirect could not be deleted.
	URLRedirectErrorCodeDeleteFailed URLRedirectErrorCode = "DELETE_FAILED"
)

var AllURLRedirectErrorCode = []URLRedirectErrorCode{
	URLRedirectErrorCodeDoesNotExist,
	URLRedirectErrorCodeCreateFailed,
	URLRedirectErrorCodeUpdateFailed,
	URLRedirectErrorCodeDeleteFailed,
}

func (e URLRedirectErrorCode) IsValid() bool {
	switch e {
	case URLRedirectErrorCodeDoesNotExist, URLRedirectErrorCodeCreateFailed, URLRedirectErrorCodeUpdateFailed, URLRedirectErrorCodeDeleteFailed:
		return true
	}
	return false
}

func (e URLRedirectErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectErrorCode", str)
	}
	return nil
}

func (e URLRedirectErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectImportUserError`.
type URLRedirectImportErrorCode string

const (
	// CSV file does not exist at given URL.
	URLRedirectImportErrorCodeFileDoesNotExist URLRedirectImportErrorCode = "FILE_DOES_NOT_EXIST"
	// URL redirect import not found.
	URLRedirectImportErrorCodeNotFound URLRedirectImportErrorCode = "NOT_FOUND"
	// The import has already completed.
	URLRedirectImportErrorCodeAlreadyImported URLRedirectImportErrorCode = "ALREADY_IMPORTED"
	// The import is already in progress.
	URLRedirectImportErrorCodeInProgress URLRedirectImportErrorCode = "IN_PROGRESS"
)

var AllURLRedirectImportErrorCode = []URLRedirectImportErrorCode{
	URLRedirectImportErrorCodeFileDoesNotExist,
	URLRedirectImportErrorCodeNotFound,
	URLRedirectImportErrorCodeAlreadyImported,
	URLRedirectImportErrorCodeInProgress,
}

func (e URLRedirectImportErrorCode) IsValid() bool {
	switch e {
	case URLRedirectImportErrorCodeFileDoesNotExist, URLRedirectImportErrorCodeNotFound, URLRedirectImportErrorCodeAlreadyImported, URLRedirectImportErrorCodeInProgress:
		return true
	}
	return false
}

func (e URLRedirectImportErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectImportErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectImportErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectImportErrorCode", str)
	}
	return nil
}

func (e URLRedirectImportErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the UrlRedirect query.
type URLRedirectSortKeys string

const (
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	URLRedirectSortKeysRelevance URLRedirectSortKeys = "RELEVANCE"
	// Sort by the `path` value.
	URLRedirectSortKeysPath URLRedirectSortKeys = "PATH"
	// Sort by the `id` value.
	URLRedirectSortKeysID URLRedirectSortKeys = "ID"
)

var AllURLRedirectSortKeys = []URLRedirectSortKeys{
	URLRedirectSortKeysRelevance,
	URLRedirectSortKeysPath,
	URLRedirectSortKeysID,
}

func (e URLRedirectSortKeys) IsValid() bool {
	switch e {
	case URLRedirectSortKeysRelevance, URLRedirectSortKeysPath, URLRedirectSortKeysID:
		return true
	}
	return false
}

func (e URLRedirectSortKeys) String() string {
	return string(e)
}

func (e *URLRedirectSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectSortKeys", str)
	}
	return nil
}

func (e URLRedirectSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported formats for webhook subscriptions.
type WebhookSubscriptionFormat string

const (
	WebhookSubscriptionFormatJSON WebhookSubscriptionFormat = "JSON"
	WebhookSubscriptionFormatXML  WebhookSubscriptionFormat = "XML"
)

var AllWebhookSubscriptionFormat = []WebhookSubscriptionFormat{
	WebhookSubscriptionFormatJSON,
	WebhookSubscriptionFormatXML,
}

func (e WebhookSubscriptionFormat) IsValid() bool {
	switch e {
	case WebhookSubscriptionFormatJSON, WebhookSubscriptionFormatXML:
		return true
	}
	return false
}

func (e WebhookSubscriptionFormat) String() string {
	return string(e)
}

func (e *WebhookSubscriptionFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionFormat", str)
	}
	return nil
}

func (e WebhookSubscriptionFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the WebhookSubscription query.
type WebhookSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	WebhookSubscriptionSortKeysCreatedAt WebhookSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	WebhookSubscriptionSortKeysID WebhookSubscriptionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	//
	WebhookSubscriptionSortKeysRelevance WebhookSubscriptionSortKeys = "RELEVANCE"
)

var AllWebhookSubscriptionSortKeys = []WebhookSubscriptionSortKeys{
	WebhookSubscriptionSortKeysCreatedAt,
	WebhookSubscriptionSortKeysID,
	WebhookSubscriptionSortKeysRelevance,
}

func (e WebhookSubscriptionSortKeys) IsValid() bool {
	switch e {
	case WebhookSubscriptionSortKeysCreatedAt, WebhookSubscriptionSortKeysID, WebhookSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e WebhookSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *WebhookSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionSortKeys", str)
	}
	return nil
}

func (e WebhookSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
// notifications about particular events in a shop.
//
// You don't create webhook subscriptions to
// [mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).
// Instead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.
type WebhookSubscriptionTopic string

const (
	// The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
	WebhookSubscriptionTopicAppUninstalled WebhookSubscriptionTopic = "APP_UNINSTALLED"
	// The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCartsCreate WebhookSubscriptionTopic = "CARTS_CREATE"
	// The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCartsUpdate WebhookSubscriptionTopic = "CARTS_UPDATE"
	// The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope.
	WebhookSubscriptionTopicChannelsDelete WebhookSubscriptionTopic = "CHANNELS_DELETE"
	// The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsCreate WebhookSubscriptionTopic = "CHECKOUTS_CREATE"
	// The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsDelete WebhookSubscriptionTopic = "CHECKOUTS_DELETE"
	// The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsUpdate WebhookSubscriptionTopic = "CHECKOUTS_UPDATE"
	// The webhook topic for `checkouts/paid` events. Occurs whenever a checkout is paid. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsPaid WebhookSubscriptionTopic = "CHECKOUTS_PAID"
	// The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_CREATE"
	// The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_UPDATE"
	// The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_REVOKE"
	// The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsAdd WebhookSubscriptionTopic = "COLLECTION_LISTINGS_ADD"
	// The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsRemove WebhookSubscriptionTopic = "COLLECTION_LISTINGS_REMOVE"
	// The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsUpdate WebhookSubscriptionTopic = "COLLECTION_LISTINGS_UPDATE"
	// The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsCreate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_CREATE"
	// The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsDelete WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_DELETE"
	// The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsUpdate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_UPDATE"
	// The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsCreate WebhookSubscriptionTopic = "COLLECTIONS_CREATE"
	// The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsDelete WebhookSubscriptionTopic = "COLLECTIONS_DELETE"
	// The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsUpdate WebhookSubscriptionTopic = "COLLECTIONS_UPDATE"
	// The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsCreate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_CREATE"
	// The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsDelete WebhookSubscriptionTopic = "CUSTOMER_GROUPS_DELETE"
	// The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsUpdate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_UPDATE"
	// The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersCreate WebhookSubscriptionTopic = "CUSTOMERS_CREATE"
	// The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersDelete WebhookSubscriptionTopic = "CUSTOMERS_DELETE"
	// The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersDisable WebhookSubscriptionTopic = "CUSTOMERS_DISABLE"
	// The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersEnable WebhookSubscriptionTopic = "CUSTOMERS_ENABLE"
	// The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersUpdate WebhookSubscriptionTopic = "CUSTOMERS_UPDATE"
	// The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's marketing consent is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersMarketingConsentUpdate WebhookSubscriptionTopic = "CUSTOMERS_MARKETING_CONSENT_UPDATE"
	// The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope.
	WebhookSubscriptionTopicDisputesCreate WebhookSubscriptionTopic = "DISPUTES_CREATE"
	// The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope.
	WebhookSubscriptionTopicDisputesUpdate WebhookSubscriptionTopic = "DISPUTES_UPDATE"
	// The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersCreate WebhookSubscriptionTopic = "DRAFT_ORDERS_CREATE"
	// The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersDelete WebhookSubscriptionTopic = "DRAFT_ORDERS_DELETE"
	// The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersUpdate WebhookSubscriptionTopic = "DRAFT_ORDERS_UPDATE"
	// The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentEventsCreate WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_CREATE"
	// The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentEventsDelete WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_DELETE"
	// The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentsCreate WebhookSubscriptionTopic = "FULFILLMENTS_CREATE"
	// The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentsUpdate WebhookSubscriptionTopic = "FULFILLMENTS_UPDATE"
	// The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope.
	WebhookSubscriptionTopicAttributedSessionsFirst WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_FIRST"
	// The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope.
	WebhookSubscriptionTopicAttributedSessionsLast WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_LAST"
	// The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrderTransactionsCreate WebhookSubscriptionTopic = "ORDER_TRANSACTIONS_CREATE"
	// The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersCancelled WebhookSubscriptionTopic = "ORDERS_CANCELLED"
	// The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersCreate WebhookSubscriptionTopic = "ORDERS_CREATE"
	// The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersDelete WebhookSubscriptionTopic = "ORDERS_DELETE"
	// The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersEdited WebhookSubscriptionTopic = "ORDERS_EDITED"
	// The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersFulfilled WebhookSubscriptionTopic = "ORDERS_FULFILLED"
	// The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersPaid WebhookSubscriptionTopic = "ORDERS_PAID"
	// The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersPartiallyFulfilled WebhookSubscriptionTopic = "ORDERS_PARTIALLY_FULFILLED"
	// The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersUpdated WebhookSubscriptionTopic = "ORDERS_UPDATED"
	// The webhook topic for `fulfillment_orders/ready_to_fulfill` events. Occurs whenever a fulfillment order is ready to fulfill. Requires the `read_` scope.
	WebhookSubscriptionTopicFulfillmentOrdersReadyToFulfill WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_READY_TO_FULFILL"
	// The webhook topic for `fulfillment_orders/move` events. Occurs whenever a fulfillment order is moved. Requires the `read_` scope.
	WebhookSubscriptionTopicFulfillmentOrdersMove WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_MOVE"
	// The webhook topic for `fulfillment_orders/hold_fulfillment` events. Occurs whenever a fulfillment order is held. Requires the `read_` scope.
	WebhookSubscriptionTopicFulfillmentOrdersHoldFulfillment WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_HOLD_FULFILLMENT"
	// The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsAdd WebhookSubscriptionTopic = "PRODUCT_LISTINGS_ADD"
	// The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsRemove WebhookSubscriptionTopic = "PRODUCT_LISTINGS_REMOVE"
	// The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsUpdate WebhookSubscriptionTopic = "PRODUCT_LISTINGS_UPDATE"
	// The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsAdd WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_ADD"
	// The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsUpdate WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_UPDATE"
	// The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsRemove WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_REMOVE"
	// The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsCreate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_CREATE"
	// The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsDelete WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_DELETE"
	// The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsUpdate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_UPDATE"
	// The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsCreate WebhookSubscriptionTopic = "PRODUCTS_CREATE"
	// The webhook topic for `products/delete` events. Occurs whenever a product publication is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsDelete WebhookSubscriptionTopic = "PRODUCTS_DELETE"
	// The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsUpdate WebhookSubscriptionTopic = "PRODUCTS_UPDATE"
	// The webhook topic for `refunds/create` events. Occurs whenever a new Refund is created on an order. Requires the `read_orders` scope.
	WebhookSubscriptionTopicRefundsCreate WebhookSubscriptionTopic = "REFUNDS_CREATE"
	// The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsCreate WebhookSubscriptionTopic = "SEGMENTS_CREATE"
	// The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsDelete WebhookSubscriptionTopic = "SEGMENTS_DELETE"
	// The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsUpdate WebhookSubscriptionTopic = "SEGMENTS_UPDATE"
	// The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope.
	WebhookSubscriptionTopicShippingAddressesCreate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_CREATE"
	// The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope.
	WebhookSubscriptionTopicShippingAddressesUpdate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_UPDATE"
	// The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
	WebhookSubscriptionTopicShopUpdate WebhookSubscriptionTopic = "SHOP_UPDATE"
	// The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope.
	WebhookSubscriptionTopicTaxServicesCreate WebhookSubscriptionTopic = "TAX_SERVICES_CREATE"
	// The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope.
	WebhookSubscriptionTopicTaxServicesUpdate WebhookSubscriptionTopic = "TAX_SERVICES_UPDATE"
	// The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesCreate WebhookSubscriptionTopic = "THEMES_CREATE"
	// The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesDelete WebhookSubscriptionTopic = "THEMES_DELETE"
	// The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesPublish WebhookSubscriptionTopic = "THEMES_PUBLISH"
	// The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesUpdate WebhookSubscriptionTopic = "THEMES_UPDATE"
	// The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope.
	WebhookSubscriptionTopicVariantsInStock WebhookSubscriptionTopic = "VARIANTS_IN_STOCK"
	// The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope.
	WebhookSubscriptionTopicVariantsOutOfStock WebhookSubscriptionTopic = "VARIANTS_OUT_OF_STOCK"
	// The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsConnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_CONNECT"
	// The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsUpdate WebhookSubscriptionTopic = "INVENTORY_LEVELS_UPDATE"
	// The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsDisconnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_DISCONNECT"
	// The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsCreate WebhookSubscriptionTopic = "INVENTORY_ITEMS_CREATE"
	// The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsUpdate WebhookSubscriptionTopic = "INVENTORY_ITEMS_UPDATE"
	// The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsDelete WebhookSubscriptionTopic = "INVENTORY_ITEMS_DELETE"
	// The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsCreate WebhookSubscriptionTopic = "LOCATIONS_CREATE"
	// The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsUpdate WebhookSubscriptionTopic = "LOCATIONS_UPDATE"
	// The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsDelete WebhookSubscriptionTopic = "LOCATIONS_DELETE"
	// The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope.
	WebhookSubscriptionTopicTenderTransactionsCreate WebhookSubscriptionTopic = "TENDER_TRANSACTIONS_CREATE"
	// The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate WebhookSubscriptionTopic = "APP_PURCHASES_ONE_TIME_UPDATE"
	// The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
	WebhookSubscriptionTopicAppSubscriptionsUpdate WebhookSubscriptionTopic = "APP_SUBSCRIPTIONS_UPDATE"
	// The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
	WebhookSubscriptionTopicLocalesCreate WebhookSubscriptionTopic = "LOCALES_CREATE"
	// The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope.
	WebhookSubscriptionTopicLocalesUpdate WebhookSubscriptionTopic = "LOCALES_UPDATE"
	// The webhook topic for `domains/create` events. Occurs whenever a domain is created.
	WebhookSubscriptionTopicDomainsCreate WebhookSubscriptionTopic = "DOMAINS_CREATE"
	// The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
	WebhookSubscriptionTopicDomainsUpdate WebhookSubscriptionTopic = "DOMAINS_UPDATE"
	// The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
	WebhookSubscriptionTopicDomainsDestroy WebhookSubscriptionTopic = "DOMAINS_DESTROY"
	// The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionContractsCreate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_CREATE"
	// The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionContractsUpdate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_UPDATE"
	// The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires the `read_shipping` scope.
	WebhookSubscriptionTopicProfilesCreate WebhookSubscriptionTopic = "PROFILES_CREATE"
	// The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires the `read_shipping` scope.
	WebhookSubscriptionTopicProfilesUpdate WebhookSubscriptionTopic = "PROFILES_UPDATE"
	// The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires the `read_shipping` scope.
	WebhookSubscriptionTopicProfilesDelete WebhookSubscriptionTopic = "PROFILES_DELETE"
	// The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS"
	// The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE"
	// The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED"
	// The webhook topic for `api_client/activity` events. Occurs whenever a non-Shopify-developed API client performs a request with auditable scopes to a REST or GraphQL endpoint in a Plus store. Requires the `read_audit_events` scope.
	WebhookSubscriptionTopicAPIClientActivity WebhookSubscriptionTopic = "API_CLIENT_ACTIVITY"
	// The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsCreate WebhookSubscriptionTopic = "PAYMENT_TERMS_CREATE"
	// The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsDelete WebhookSubscriptionTopic = "PAYMENT_TERMS_DELETE"
	// The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsUpdate WebhookSubscriptionTopic = "PAYMENT_TERMS_UPDATE"
	// The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsCreate WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_CREATE"
	// The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsUpdate WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_UPDATE"
	// The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsDelete WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_DELETE"
	// The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
	WebhookSubscriptionTopicBulkOperationsFinish WebhookSubscriptionTopic = "BULK_OPERATIONS_FINISH"
)

var AllWebhookSubscriptionTopic = []WebhookSubscriptionTopic{
	WebhookSubscriptionTopicAppUninstalled,
	WebhookSubscriptionTopicCartsCreate,
	WebhookSubscriptionTopicCartsUpdate,
	WebhookSubscriptionTopicChannelsDelete,
	WebhookSubscriptionTopicCheckoutsCreate,
	WebhookSubscriptionTopicCheckoutsDelete,
	WebhookSubscriptionTopicCheckoutsUpdate,
	WebhookSubscriptionTopicCheckoutsPaid,
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate,
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate,
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke,
	WebhookSubscriptionTopicCollectionListingsAdd,
	WebhookSubscriptionTopicCollectionListingsRemove,
	WebhookSubscriptionTopicCollectionListingsUpdate,
	WebhookSubscriptionTopicCollectionPublicationsCreate,
	WebhookSubscriptionTopicCollectionPublicationsDelete,
	WebhookSubscriptionTopicCollectionPublicationsUpdate,
	WebhookSubscriptionTopicCollectionsCreate,
	WebhookSubscriptionTopicCollectionsDelete,
	WebhookSubscriptionTopicCollectionsUpdate,
	WebhookSubscriptionTopicCustomerGroupsCreate,
	WebhookSubscriptionTopicCustomerGroupsDelete,
	WebhookSubscriptionTopicCustomerGroupsUpdate,
	WebhookSubscriptionTopicCustomersCreate,
	WebhookSubscriptionTopicCustomersDelete,
	WebhookSubscriptionTopicCustomersDisable,
	WebhookSubscriptionTopicCustomersEnable,
	WebhookSubscriptionTopicCustomersUpdate,
	WebhookSubscriptionTopicCustomersMarketingConsentUpdate,
	WebhookSubscriptionTopicDisputesCreate,
	WebhookSubscriptionTopicDisputesUpdate,
	WebhookSubscriptionTopicDraftOrdersCreate,
	WebhookSubscriptionTopicDraftOrdersDelete,
	WebhookSubscriptionTopicDraftOrdersUpdate,
	WebhookSubscriptionTopicFulfillmentEventsCreate,
	WebhookSubscriptionTopicFulfillmentEventsDelete,
	WebhookSubscriptionTopicFulfillmentsCreate,
	WebhookSubscriptionTopicFulfillmentsUpdate,
	WebhookSubscriptionTopicAttributedSessionsFirst,
	WebhookSubscriptionTopicAttributedSessionsLast,
	WebhookSubscriptionTopicOrderTransactionsCreate,
	WebhookSubscriptionTopicOrdersCancelled,
	WebhookSubscriptionTopicOrdersCreate,
	WebhookSubscriptionTopicOrdersDelete,
	WebhookSubscriptionTopicOrdersEdited,
	WebhookSubscriptionTopicOrdersFulfilled,
	WebhookSubscriptionTopicOrdersPaid,
	WebhookSubscriptionTopicOrdersPartiallyFulfilled,
	WebhookSubscriptionTopicOrdersUpdated,
	WebhookSubscriptionTopicFulfillmentOrdersReadyToFulfill,
	WebhookSubscriptionTopicFulfillmentOrdersMove,
	WebhookSubscriptionTopicFulfillmentOrdersHoldFulfillment,
	WebhookSubscriptionTopicProductListingsAdd,
	WebhookSubscriptionTopicProductListingsRemove,
	WebhookSubscriptionTopicProductListingsUpdate,
	WebhookSubscriptionTopicScheduledProductListingsAdd,
	WebhookSubscriptionTopicScheduledProductListingsUpdate,
	WebhookSubscriptionTopicScheduledProductListingsRemove,
	WebhookSubscriptionTopicProductPublicationsCreate,
	WebhookSubscriptionTopicProductPublicationsDelete,
	WebhookSubscriptionTopicProductPublicationsUpdate,
	WebhookSubscriptionTopicProductsCreate,
	WebhookSubscriptionTopicProductsDelete,
	WebhookSubscriptionTopicProductsUpdate,
	WebhookSubscriptionTopicRefundsCreate,
	WebhookSubscriptionTopicSegmentsCreate,
	WebhookSubscriptionTopicSegmentsDelete,
	WebhookSubscriptionTopicSegmentsUpdate,
	WebhookSubscriptionTopicShippingAddressesCreate,
	WebhookSubscriptionTopicShippingAddressesUpdate,
	WebhookSubscriptionTopicShopUpdate,
	WebhookSubscriptionTopicTaxServicesCreate,
	WebhookSubscriptionTopicTaxServicesUpdate,
	WebhookSubscriptionTopicThemesCreate,
	WebhookSubscriptionTopicThemesDelete,
	WebhookSubscriptionTopicThemesPublish,
	WebhookSubscriptionTopicThemesUpdate,
	WebhookSubscriptionTopicVariantsInStock,
	WebhookSubscriptionTopicVariantsOutOfStock,
	WebhookSubscriptionTopicInventoryLevelsConnect,
	WebhookSubscriptionTopicInventoryLevelsUpdate,
	WebhookSubscriptionTopicInventoryLevelsDisconnect,
	WebhookSubscriptionTopicInventoryItemsCreate,
	WebhookSubscriptionTopicInventoryItemsUpdate,
	WebhookSubscriptionTopicInventoryItemsDelete,
	WebhookSubscriptionTopicLocationsCreate,
	WebhookSubscriptionTopicLocationsUpdate,
	WebhookSubscriptionTopicLocationsDelete,
	WebhookSubscriptionTopicTenderTransactionsCreate,
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate,
	WebhookSubscriptionTopicAppSubscriptionsUpdate,
	WebhookSubscriptionTopicLocalesCreate,
	WebhookSubscriptionTopicLocalesUpdate,
	WebhookSubscriptionTopicDomainsCreate,
	WebhookSubscriptionTopicDomainsUpdate,
	WebhookSubscriptionTopicDomainsDestroy,
	WebhookSubscriptionTopicSubscriptionContractsCreate,
	WebhookSubscriptionTopicSubscriptionContractsUpdate,
	WebhookSubscriptionTopicProfilesCreate,
	WebhookSubscriptionTopicProfilesUpdate,
	WebhookSubscriptionTopicProfilesDelete,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged,
	WebhookSubscriptionTopicAPIClientActivity,
	WebhookSubscriptionTopicPaymentTermsCreate,
	WebhookSubscriptionTopicPaymentTermsDelete,
	WebhookSubscriptionTopicPaymentTermsUpdate,
	WebhookSubscriptionTopicSellingPlanGroupsCreate,
	WebhookSubscriptionTopicSellingPlanGroupsUpdate,
	WebhookSubscriptionTopicSellingPlanGroupsDelete,
	WebhookSubscriptionTopicBulkOperationsFinish,
}

func (e WebhookSubscriptionTopic) IsValid() bool {
	switch e {
	case WebhookSubscriptionTopicAppUninstalled, WebhookSubscriptionTopicCartsCreate, WebhookSubscriptionTopicCartsUpdate, WebhookSubscriptionTopicChannelsDelete, WebhookSubscriptionTopicCheckoutsCreate, WebhookSubscriptionTopicCheckoutsDelete, WebhookSubscriptionTopicCheckoutsUpdate, WebhookSubscriptionTopicCheckoutsPaid, WebhookSubscriptionTopicCustomerPaymentMethodsCreate, WebhookSubscriptionTopicCustomerPaymentMethodsUpdate, WebhookSubscriptionTopicCustomerPaymentMethodsRevoke, WebhookSubscriptionTopicCollectionListingsAdd, WebhookSubscriptionTopicCollectionListingsRemove, WebhookSubscriptionTopicCollectionListingsUpdate, WebhookSubscriptionTopicCollectionPublicationsCreate, WebhookSubscriptionTopicCollectionPublicationsDelete, WebhookSubscriptionTopicCollectionPublicationsUpdate, WebhookSubscriptionTopicCollectionsCreate, WebhookSubscriptionTopicCollectionsDelete, WebhookSubscriptionTopicCollectionsUpdate, WebhookSubscriptionTopicCustomerGroupsCreate, WebhookSubscriptionTopicCustomerGroupsDelete, WebhookSubscriptionTopicCustomerGroupsUpdate, WebhookSubscriptionTopicCustomersCreate, WebhookSubscriptionTopicCustomersDelete, WebhookSubscriptionTopicCustomersDisable, WebhookSubscriptionTopicCustomersEnable, WebhookSubscriptionTopicCustomersUpdate, WebhookSubscriptionTopicCustomersMarketingConsentUpdate, WebhookSubscriptionTopicDisputesCreate, WebhookSubscriptionTopicDisputesUpdate, WebhookSubscriptionTopicDraftOrdersCreate, WebhookSubscriptionTopicDraftOrdersDelete, WebhookSubscriptionTopicDraftOrdersUpdate, WebhookSubscriptionTopicFulfillmentEventsCreate, WebhookSubscriptionTopicFulfillmentEventsDelete, WebhookSubscriptionTopicFulfillmentsCreate, WebhookSubscriptionTopicFulfillmentsUpdate, WebhookSubscriptionTopicAttributedSessionsFirst, WebhookSubscriptionTopicAttributedSessionsLast, WebhookSubscriptionTopicOrderTransactionsCreate, WebhookSubscriptionTopicOrdersCancelled, WebhookSubscriptionTopicOrdersCreate, WebhookSubscriptionTopicOrdersDelete, WebhookSubscriptionTopicOrdersEdited, WebhookSubscriptionTopicOrdersFulfilled, WebhookSubscriptionTopicOrdersPaid, WebhookSubscriptionTopicOrdersPartiallyFulfilled, WebhookSubscriptionTopicOrdersUpdated, WebhookSubscriptionTopicFulfillmentOrdersReadyToFulfill, WebhookSubscriptionTopicFulfillmentOrdersMove, WebhookSubscriptionTopicFulfillmentOrdersHoldFulfillment, WebhookSubscriptionTopicProductListingsAdd, WebhookSubscriptionTopicProductListingsRemove, WebhookSubscriptionTopicProductListingsUpdate, WebhookSubscriptionTopicScheduledProductListingsAdd, WebhookSubscriptionTopicScheduledProductListingsUpdate, WebhookSubscriptionTopicScheduledProductListingsRemove, WebhookSubscriptionTopicProductPublicationsCreate, WebhookSubscriptionTopicProductPublicationsDelete, WebhookSubscriptionTopicProductPublicationsUpdate, WebhookSubscriptionTopicProductsCreate, WebhookSubscriptionTopicProductsDelete, WebhookSubscriptionTopicProductsUpdate, WebhookSubscriptionTopicRefundsCreate, WebhookSubscriptionTopicSegmentsCreate, WebhookSubscriptionTopicSegmentsDelete, WebhookSubscriptionTopicSegmentsUpdate, WebhookSubscriptionTopicShippingAddressesCreate, WebhookSubscriptionTopicShippingAddressesUpdate, WebhookSubscriptionTopicShopUpdate, WebhookSubscriptionTopicTaxServicesCreate, WebhookSubscriptionTopicTaxServicesUpdate, WebhookSubscriptionTopicThemesCreate, WebhookSubscriptionTopicThemesDelete, WebhookSubscriptionTopicThemesPublish, WebhookSubscriptionTopicThemesUpdate, WebhookSubscriptionTopicVariantsInStock, WebhookSubscriptionTopicVariantsOutOfStock, WebhookSubscriptionTopicInventoryLevelsConnect, WebhookSubscriptionTopicInventoryLevelsUpdate, WebhookSubscriptionTopicInventoryLevelsDisconnect, WebhookSubscriptionTopicInventoryItemsCreate, WebhookSubscriptionTopicInventoryItemsUpdate, WebhookSubscriptionTopicInventoryItemsDelete, WebhookSubscriptionTopicLocationsCreate, WebhookSubscriptionTopicLocationsUpdate, WebhookSubscriptionTopicLocationsDelete, WebhookSubscriptionTopicTenderTransactionsCreate, WebhookSubscriptionTopicAppPurchasesOneTimeUpdate, WebhookSubscriptionTopicAppSubscriptionsUpdate, WebhookSubscriptionTopicLocalesCreate, WebhookSubscriptionTopicLocalesUpdate, WebhookSubscriptionTopicDomainsCreate, WebhookSubscriptionTopicDomainsUpdate, WebhookSubscriptionTopicDomainsDestroy, WebhookSubscriptionTopicSubscriptionContractsCreate, WebhookSubscriptionTopicSubscriptionContractsUpdate, WebhookSubscriptionTopicProfilesCreate, WebhookSubscriptionTopicProfilesUpdate, WebhookSubscriptionTopicProfilesDelete, WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess, WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure, WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged, WebhookSubscriptionTopicAPIClientActivity, WebhookSubscriptionTopicPaymentTermsCreate, WebhookSubscriptionTopicPaymentTermsDelete, WebhookSubscriptionTopicPaymentTermsUpdate, WebhookSubscriptionTopicSellingPlanGroupsCreate, WebhookSubscriptionTopicSellingPlanGroupsUpdate, WebhookSubscriptionTopicSellingPlanGroupsDelete, WebhookSubscriptionTopicBulkOperationsFinish:
		return true
	}
	return false
}

func (e WebhookSubscriptionTopic) String() string {
	return string(e)
}

func (e *WebhookSubscriptionTopic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionTopic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionTopic", str)
	}
	return nil
}

func (e WebhookSubscriptionTopic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Units of measurement for weight.
type WeightUnit string

const (
	// 1 kilogram equals 1000 grams.
	WeightUnitKilograms WeightUnit = "KILOGRAMS"
	// Metric system unit of mass.
	WeightUnitGrams WeightUnit = "GRAMS"
	// 1 pound equals 16 ounces.
	WeightUnitPounds WeightUnit = "POUNDS"
	// Imperial system unit of mass.
	WeightUnitOunces WeightUnit = "OUNCES"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitKilograms,
	WeightUnitGrams,
	WeightUnitPounds,
	WeightUnitOunces,
}

func (e WeightUnit) IsValid() bool {
	switch e {
	case WeightUnitKilograms, WeightUnitGrams, WeightUnitPounds, WeightUnitOunces:
		return true
	}
	return false
}

func (e WeightUnit) String() string {
	return string(e)
}

func (e *WeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeightUnit", str)
	}
	return nil
}

func (e WeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
