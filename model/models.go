// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	null "gopkg.in/guregu/null.v4"
)

// The information about the price that's charged to a shop every plan period.
// The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
type AppPricingDetails interface {
	IsAppPricingDetails()
}

// Services and features purchased once by the store.
type AppPurchase interface {
	IsAppPurchase()
	// The date and time when the app purchase occurred.
	GetCreatedAt() string
	// The name of the app purchase.
	GetName() string
	// The amount to be charged to the store for the app purchase.
	GetPrice() *MoneyV2
	// The status of the app purchase.
	GetStatus() AppPurchaseStatus
	// Whether the app purchase is a test transaction.
	GetTest() bool
}

// The value of the discount.
type AppSubscriptionDiscountValue interface {
	IsAppSubscriptionDiscountValue()
}

// A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
type CalculatedDiscountApplication interface {
	IsCalculatedDiscountApplication()
	// The method by which the discount's value is allocated to its entitled items.
	GetAllocationMethod() DiscountApplicationAllocationMethod
	// The level at which the discount was applied.
	GetAppliedTo() DiscountApplicationLevel
	// The description of discount application. Indicates the reason why the discount was applied.
	GetDescription() *string
	// A globally-unique ID.
	GetID() string
	// How the discount amount is distributed on the discounted lines.
	GetTargetSelection() DiscountApplicationTargetSelection
	// Whether the discount is applied on line items or shipping lines.
	GetTargetType() DiscountApplicationTargetType
	// The value of the discount application.
	GetValue() PricingValue
}

// A list of products with publishing and pricing information.
// A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
type Catalog interface {
	IsNode()
	IsCatalog()
	// A globally-unique ID.
	GetID() string
	// Most recent catalog operations.
	GetOperations() []ResourceOperation
	// The price list associated with the catalog.
	GetPriceList() *PriceList
	// A group of products and collections that's published to a catalog.
	GetPublication() *Publication
	// The status of the catalog.
	GetStatus() CatalogStatus
	// The name of the catalog.
	GetTitle() string
}

// Specifies object for the condition of the rule.
type CollectionRuleConditionObject interface {
	IsCollectionRuleConditionObject()
}

// Specifies object with additional rule attributes.
type CollectionRuleConditionsRuleObject interface {
	IsCollectionRuleConditionsRuleObject()
}

// The main embed of a comment event.
type CommentEventEmbed interface {
	IsCommentEventEmbed()
}

// The subject line of a comment event.
type CommentEventSubject interface {
	IsCommentEventSubject()
	// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
	GetHasTimelineComment() bool
	// A globally-unique ID.
	GetID() string
}

// Represents a session preceding an order, often used for building a timeline of events leading to an order.
type CustomerMoment interface {
	IsCustomerMoment()
	// The date and time when the customer's session occurred.
	GetOccurredAt() string
}

// All possible instruments for CustomerPaymentMethods.
type CustomerPaymentInstrument interface {
	IsCustomerPaymentInstrument()
}

// The value (weight or price) that the condition field is compared to.
type DeliveryConditionCriteria interface {
	IsDeliveryConditionCriteria()
}

// A rate provided by a merchant-defined rate or a participant.
type DeliveryRateProvider interface {
	IsDeliveryRateProvider()
}

// A discount.
type Discount interface {
	IsDiscount()
}

// Discount applications capture the intentions of a discount source at
// the time of application on an order's line items or shipping lines.
//
// Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
type DiscountApplication interface {
	IsDiscountApplication()
	// The method by which the discount's value is applied to its entitled items.
	GetAllocationMethod() DiscountApplicationAllocationMethod
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	GetIndex() int
	// How the discount amount is distributed on the discounted lines.
	GetTargetSelection() DiscountApplicationTargetSelection
	// Whether the discount is applied on line items or shipping lines.
	GetTargetType() DiscountApplicationTargetType
	// The value of the discount application.
	GetValue() PricingValue
}

// The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
type DiscountAutomatic interface {
	IsDiscountAutomatic()
}

// The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
type DiscountCode interface {
	IsDiscountCode()
}

// The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
type DiscountCustomerBuysValue interface {
	IsDiscountCustomerBuysValue()
}

// The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
type DiscountCustomerGetsValue interface {
	IsDiscountCustomerGetsValue()
}

// The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
type DiscountCustomerSelection interface {
	IsDiscountCustomerSelection()
}

// The type of discount that will be applied. Currently, only a percentage discount is supported.
type DiscountEffect interface {
	IsDiscountEffect()
}

// The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
type DiscountItems interface {
	IsDiscountItems()
}

// The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
type DiscountMinimumRequirement interface {
	IsDiscountMinimumRequirement()
}

// The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
type DiscountShippingDestinationSelection interface {
	IsDiscountShippingDestinationSelection()
}

// Represents an error in the input of a mutation.
type DisplayableError interface {
	IsDisplayableError()
	// The path to the input field that caused the error.
	GetField() []string
	// The error message.
	GetMessage() string
}

// Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
// addition of a product.
type Event interface {
	IsEvent()
	// The name of the app that created the event.
	GetAppTitle() *string
	// Whether the event was created by an app.
	GetAttributeToApp() bool
	// Whether the event was caused by an admin user.
	GetAttributeToUser() bool
	// The date and time when the event was created.
	GetCreatedAt() string
	// Whether the event is critical.
	GetCriticalAlert() bool
	// A globally-unique ID.
	GetID() string
	// Human readable text that describes the event.
	GetMessage() string
}

// A file interface.
type File interface {
	IsFile()
	// A word or phrase to describe the contents or the function of a file.
	GetAlt() *string
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
	//
	GetCreatedAt() string
	// Any errors that have occurred on the file.
	GetFileErrors() []FileError
	// The status of the file.
	GetFileStatus() FileStatus
	// A globally-unique ID.
	GetID() string
	// The preview image for the media.
	GetPreview() *MediaPreviewImage
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
	GetUpdatedAt() string
}

// Represents an object that has a list of events.
type HasEvents interface {
	IsHasEvents()
	// The paginated list of events associated with the host subject.
	GetEvents() *EventConnection
}

// Localization extensions associated with the specified resource. For example, the tax id for government invoice.
type HasLocalizationExtensions interface {
	IsHasLocalizationExtensions()
	// List of localization extensions for the resource.
	GetLocalizationExtensions() *LocalizationExtensionConnection
}

// Resources that metafield definitions can be applied to.
type HasMetafieldDefinitions interface {
	IsHasMetafieldDefinitions()
	// List of metafield definitions.
	GetMetafieldDefinitions() *MetafieldDefinitionConnection
}

// Represents information about the metafields associated to the specified resource.
type HasMetafields interface {
	IsHasMetafields()
	// Returns a metafield by namespace and key that belongs to the resource.
	GetMetafield() *Metafield
	// List of metafields that belong to the resource.
	GetMetafields() *MetafieldConnection
	// Returns a private metafield by namespace and key that belongs to the resource.
	GetPrivateMetafield() *PrivateMetafield
	// List of private metafields that belong to the resource.
	GetPrivateMetafields() *PrivateMetafieldConnection
}

// Published translations associated with the resource.
type HasPublishedTranslations interface {
	IsHasPublishedTranslations()
	// The translations associated with the resource.
	GetTranslations() []Translation
}

// A job corresponds to some long running task that the client should poll for status.
type JobResult interface {
	IsJobResult()
	// This indicates if the job is still queued or has been run.
	GetDone() bool
	// A globally-unique ID that's returned when running an asynchronous mutation.
	GetID() string
}

// Interoperability metadata for types that directly correspond to a REST Admin API resource.
// For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
type LegacyInteroperability interface {
	IsLegacyInteroperability()
	// The ID of the corresponding resource in the REST Admin API.
	GetLegacyResourceID() string
}

// A geographic region which comprises a market.
type MarketRegion interface {
	IsMarketRegion()
	// A globally-unique ID.
	GetID() string
	// The name of the region.
	GetName() string
}

// Represents a media interface.
type Media interface {
	IsMedia()
	// A word or phrase to share the nature or contents of a media.
	GetAlt() *string
	// A globally-unique ID.
	GetID() string
	// The media content type.
	GetMediaContentType() MediaContentType
	// Any errors which have occurred on the media.
	GetMediaErrors() []MediaError
	// The warnings attached to the media.
	GetMediaWarnings() []MediaWarning
	// The preview image for the media.
	GetPreview() *MediaPreviewImage
	// Current status of the media.
	GetStatus() MediaStatus
}

// The resource referenced by the metafield value.
type MetafieldReference interface {
	IsMetafieldReference()
}

// Types of resources that may use metafields to reference other resources.
type MetafieldReferencer interface {
	IsMetafieldReferencer()
}

// A default cursor that you can use in queries to paginate your results. Each edge in a connection can
// return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
// the starting point to retrieve the nodes before or after it in a connection.
//
// To learn more about using cursor-based pagination, refer to
// [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
type Navigable interface {
	IsNavigable()
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	GetDefaultCursor() string
}

// An object with an ID field to support global identification, in accordance with the
// [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
// This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
// and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
type Node interface {
	IsNode()
	// A globally-unique ID.
	GetID() string
}

// Online Store preview URL of the object.
type OnlineStorePreviewable interface {
	IsOnlineStorePreviewable()
	// The online store preview URL.
	GetOnlineStorePreviewURL() *string
}

// A change that has been applied to an order.
type OrderStagedChange interface {
	IsOrderStagedChange()
}

// Payment details related to a transaction.
type PaymentDetails interface {
	IsPaymentDetails()
}

// All possible instrument outputs for Payment Mandates.
type PaymentInstrument interface {
	IsPaymentInstrument()
}

// The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
type PriceRuleValue interface {
	IsPriceRuleValue()
}

// The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
type PricingValue interface {
	IsPricingValue()
}

// The possible types of publication operations.
type PublicationOperation interface {
	IsPublicationOperation()
}

// Represents a resource that can be published to a channel.
// A publishable resource can be either a Product or Collection.
type Publishable interface {
	IsPublishable()
	// The number of publications a resource is published to without feedback errors.
	GetAvailablePublicationCount() int
	// The number of publications a resource is published on.
	GetPublicationCount() int
	// Check to see whether the resource is published to a given channel.
	GetPublishedOnChannel() bool
	// Check to see whether the resource is published to the calling app's channel.
	GetPublishedOnCurrentChannel() bool
	// Check to see whether the resource is published to the calling app's publication.
	GetPublishedOnCurrentPublication() bool
	// Check to see whether the resource is published to a given publication.
	GetPublishedOnPublication() bool
	// The list of resources that are published to a publication.
	GetResourcePublications() *ResourcePublicationConnection
	// The list of resources that are either published or staged to be published to a publication.
	GetResourcePublicationsV2() *ResourcePublicationV2Connection
	// The list of channels that the resource is not published to.
	GetUnpublishedChannels() *ChannelConnection
	// The list of publications that the resource is not published to.
	GetUnpublishedPublications() *PublicationConnection
}

// Represents information about the purchasing entity for the order or draft order.
type PurchasingEntity interface {
	IsPurchasingEntity()
}

// Represents a merchandising background operation interface.
type ResourceOperation interface {
	IsResourceOperation()
	// A globally-unique ID.
	GetID() string
	// The count of processed rows, summing imported, failed, and skipped rows.
	GetProcessedRowCount() *int
	// Represents a rows objects within this background operation.
	GetRowCount() *RowCount
	// The status of this operation.
	GetStatus() ResourceOperationStatus
}

// The delivery method and artifacts associated with a reverse delivery.
type ReverseDeliveryDeliverable interface {
	IsReverseDeliveryDeliverable()
}

// An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items.
type Sale interface {
	IsSale()
	// The type of order action that the sale represents.
	GetActionType() SaleActionType
	// The unique ID for the sale.
	GetID() string
	// The line type assocated with the sale.
	GetLineType() SaleLineType
	// The number of units either ordered or intended to be returned.
	GetQuantity() *int
	// All individual taxes associated with the sale.
	GetTaxes() []SaleTax
	// The total sale amount after taxes and discounts.
	GetTotalAmount() *MoneyBag
	// The total discounts allocated to the sale after taxes.
	GetTotalDiscountAmountAfterTaxes() *MoneyBag
	// The total discounts allocated to the sale before taxes.
	GetTotalDiscountAmountBeforeTaxes() *MoneyBag
	// The total amount of taxes for the sale.
	GetTotalTaxAmount() *MoneyBag
}

// A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more.
type SalesAgreement interface {
	IsSalesAgreement()
	// The application that created the agreement.
	GetApp() *App
	// The date and time at which the agreement occured.
	GetHappenedAt() string
	// The unique ID for the agreement.
	GetID() string
	// The reason the agremeent was created.
	GetReason() OrderActionType
	// The sales associated with the agreement.
	GetSales() *SaleConnection
	// The staff member associated with the agreement.
	GetUser() *StaffMember
}

// The filters used in segment queries associated with a shop.
type SegmentFilter interface {
	IsSegmentFilter()
	// The localized name of the filter.
	GetLocalizedName() string
	// Whether a file can have multiple values for a single customer.
	GetMultiValue() bool
	// The query name of the filter.
	GetQueryName() string
}

// Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
// three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
// policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanBillingPolicy interface {
	IsSellingPlanBillingPolicy()
}

// The portion of the price to be charged at checkout.
type SellingPlanCheckoutChargeValue interface {
	IsSellingPlanCheckoutChargeValue()
}

// Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
// every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
// pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanDeliveryPolicy interface {
	IsSellingPlanDeliveryPolicy()
}

// Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
// for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
// associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
// hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
// to restore them later.
type SellingPlanPricingPolicy interface {
	IsSellingPlanPricingPolicy()
}

// Represents a selling plan pricing policy adjustment value type.
type SellingPlanPricingPolicyAdjustmentValue interface {
	IsSellingPlanPricingPolicyAdjustmentValue()
}

// Represents selling plan pricing policy common fields.
type SellingPlanPricingPolicyBase interface {
	IsSellingPlanPricingPolicyBase()
	// The price adjustment type.
	GetAdjustmentType() SellingPlanPricingPolicyAdjustmentType
	// The price adjustment value.
	GetAdjustmentValue() SellingPlanPricingPolicyAdjustmentValue
}

// The charge descriptors for a payments account.
type ShopifyPaymentsChargeStatementDescriptor interface {
	IsShopifyPaymentsChargeStatementDescriptor()
	// The default charge statement descriptor.
	GetDefault() *string
	// The prefix of the statement descriptor.
	GetPrefix() string
}

// A response to a ShopifyQL query.
type ShopifyqlResponse interface {
	IsShopifyqlResponse()
	// A list of parse errors, if parsing fails.
	GetParseErrors() []ParseError
	// The result in a tabular format with schema and row data.
	// To be used as a raw 2-dimensional response of the query.
	// It's always present even if query has a `VISUALIZE` keyword.
	GetTableData() *TableData
}

// Represents subscription contract common fields.
type SubscriptionContractBase interface {
	IsSubscriptionContractBase()
	// The subscription app that the subscription contract is registered to.
	GetApp() *App
	// The URL of the subscription contract page on the subscription app.
	GetAppAdminURL() *string
	// The currency that's used for the subscription contract.
	GetCurrencyCode() CurrencyCode
	// A list of the custom attributes to be added to the generated orders.
	GetCustomAttributes() []Attribute
	// The customer to whom the subscription contract belongs.
	GetCustomer() *Customer
	// The customer payment method that's used for the subscription contract.
	GetCustomerPaymentMethod() *CustomerPaymentMethod
	// The delivery method for each billing of the subscription contract.
	GetDeliveryMethod() SubscriptionDeliveryMethod
	// The delivery price for each billing of the subscription contract.
	GetDeliveryPrice() *MoneyV2
	// The list of subscription discounts associated with the subscription contract.
	GetDiscounts() *SubscriptionManualDiscountConnection
	// The number of lines associated with the subscription contract.
	GetLineCount() int
	// The list of subscription lines associated with the subscription contract.
	GetLines() *SubscriptionLineConnection
	// The note field that will be applied to the generated orders.
	GetNote() *string
	// A list of the subscription contract's orders.
	GetOrders() *OrderConnection
	// The date and time when the subscription contract was updated.
	GetUpdatedAt() string
}

// Describes the delivery method to use to get the physical goods to the customer.
type SubscriptionDeliveryMethod interface {
	IsSubscriptionDeliveryMethod()
}

// The delivery option for a subscription contract.
type SubscriptionDeliveryOption interface {
	IsSubscriptionDeliveryOption()
}

// The result of the query to fetch delivery options for the subscription contract.
type SubscriptionDeliveryOptionResult interface {
	IsSubscriptionDeliveryOptionResult()
}

// Subscription draft discount types.
type SubscriptionDiscount interface {
	IsSubscriptionDiscount()
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountValue interface {
	IsSubscriptionDiscountValue()
}

// The result of the query to fetch shipping options for the subscription contract.
type SubscriptionShippingOptionResult interface {
	IsSubscriptionShippingOptionResult()
}

// Information about the payment instrument used for this transaction.
type TenderTransactionDetails interface {
	IsTenderTransactionDetails()
}

// An endpoint to which webhook subscriptions send webhooks events.
type WebhookSubscriptionEndpoint interface {
	IsWebhookSubscriptionEndpoint()
}

// A checkout that was abandoned by the customer.
type AbandonedCheckout struct {
	// The URL for the buyer to recover their checkout.
	AbandonedCheckoutURL string `json:"abandonedCheckoutUrl"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The number of products in the checkout.
	LineItemsQuantity int `json:"lineItemsQuantity"`
	// The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
	//
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

func (AbandonedCheckout) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this AbandonedCheckout) GetDefaultCursor() string { return this.DefaultCursor }

func (AbandonedCheckout) IsNode() {}

// A globally-unique ID.
func (this AbandonedCheckout) GetID() string { return this.ID }

// A browse, cart, or checkout that was abandoned by a customer.
type Abandonment struct {
	// The abandonment payload for the abandoned checkout.
	AbandonedCheckoutPayload *AbandonedCheckout `json:"abandonedCheckoutPayload,omitempty,omitempty"`
	// The abandonment type.
	AbandonmentType AbandonmentAbandonmentType `json:"abandonmentType"`
	// The app associated with an abandoned checkout.
	App *App `json:"app,omitempty"`
	// Permalink to the cart page.
	CartURL *string `json:"cartUrl,omitempty,omitempty"`
	// The date and time when the abandonment was created.
	CreatedAt string `json:"createdAt"`
	// The customer who abandoned this event.
	Customer *Customer `json:"customer,omitempty"`
	// Whether the customer has completed an order since this checkout has been abandoned.
	CustomerHasNoOrderSinceAbandonment bool `json:"customerHasNoOrderSinceAbandonment"`
	// The number of days since the last abandonment email was sent to the customer.
	DaysSinceLastAbandonmentEmail int `json:"daysSinceLastAbandonmentEmail"`
	// When the email was sent, if that is the case.
	EmailSentAt *string `json:"emailSentAt,omitempty,omitempty"`
	// The email state (e.g., sent or not sent).
	EmailState *AbandonmentEmailState `json:"emailState,omitempty,omitempty"`
	// The number of hours since the customer has last abandoned a checkout.
	HoursSinceLastAbandonedCheckout *float64 `json:"hoursSinceLastAbandonedCheckout,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the products in abandonment are available.
	InventoryAvailable bool `json:"inventoryAvailable"`
	// Whether the abandonment event comes from the Online Store sales channel.
	IsFromOnlineStore bool `json:"isFromOnlineStore"`
	// Whether the abandonment event comes from the Shop app sales channel.
	IsFromShopApp bool `json:"isFromShopApp"`
	// Whether the abandonment event comes from Shop Pay.
	IsFromShopPay bool `json:"isFromShopPay"`
	// Whether the customer did not complete another most significant step since this abandonment.
	IsMostSignificantAbandonment bool `json:"isMostSignificantAbandonment"`
	// The date for the latest browse abandonment.
	LastBrowseAbandonmentDate string `json:"lastBrowseAbandonmentDate"`
	// The date for the latest cart abandonment.
	LastCartAbandonmentDate string `json:"lastCartAbandonmentDate"`
	// The date for the latest checkout abandonment.
	LastCheckoutAbandonmentDate string `json:"lastCheckoutAbandonmentDate"`
	// The most recent step type.
	MostRecentStep AbandonmentAbandonmentType `json:"mostRecentStep"`
	// The products added to the cart during the customer abandoned visit.
	ProductsAddedToCart *CustomerVisitProductInfoConnection `json:"productsAddedToCart,omitempty"`
	// The products viewed during the customer abandoned visit.
	ProductsViewed *CustomerVisitProductInfoConnection `json:"productsViewed,omitempty"`
	// The date and time when the visit started.
	VisitStartedAt *string `json:"visitStartedAt,omitempty,omitempty"`
}

func (Abandonment) IsNode() {}

// A globally-unique ID.
func (this Abandonment) GetID() string { return this.ID }

// Return type for `abandonmentEmailStateUpdate` mutation.
type AbandonmentEmailStateUpdatePayload struct {
	// The updated abandonment.
	Abandonment *Abandonment `json:"abandonment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AbandonmentEmailStateUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AbandonmentEmailStateUpdate`.
type AbandonmentEmailStateUpdateUserError struct {
	// The error code.
	Code *AbandonmentEmailStateUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AbandonmentEmailStateUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this AbandonmentEmailStateUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this AbandonmentEmailStateUpdateUserError) GetMessage() string { return this.Message }

// Return type for `abandonmentUpdateActivitiesDeliveryStatuses` mutation.
type AbandonmentUpdateActivitiesDeliveryStatusesPayload struct {
	// The updated abandonment.
	Abandonment *Abandonment `json:"abandonment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AbandonmentUpdateActivitiesDeliveryStatusesUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`.
type AbandonmentUpdateActivitiesDeliveryStatusesUserError struct {
	// The error code.
	Code *AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AbandonmentUpdateActivitiesDeliveryStatusesUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this AbandonmentUpdateActivitiesDeliveryStatusesUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this AbandonmentUpdateActivitiesDeliveryStatusesUserError) GetMessage() string {
	return this.Message
}

// The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
type AccessScope struct {
	// A description of the actions that the access scope allows an app to perform.
	Description string `json:"description"`
	// A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
	//
	Handle string `json:"handle"`
}

// Represents an operation publishing all products to a publication.
type AddAllProductsOperation struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The count of processed rows, summing imported, failed, and skipped rows.
	ProcessedRowCount *int `json:"processedRowCount,omitempty,omitempty"`
	// Represents a rows objects within this background operation.
	RowCount *RowCount `json:"rowCount,omitempty,omitempty"`
	// The status of this operation.
	Status ResourceOperationStatus `json:"status"`
}

func (AddAllProductsOperation) IsNode() {}

// A globally-unique ID.
func (this AddAllProductsOperation) GetID() string { return this.ID }

func (AddAllProductsOperation) IsResourceOperation() {}

// A globally-unique ID.

// The count of processed rows, summing imported, failed, and skipped rows.
func (this AddAllProductsOperation) GetProcessedRowCount() *int { return this.ProcessedRowCount }

// Represents a rows objects within this background operation.
func (this AddAllProductsOperation) GetRowCount() *RowCount { return this.RowCount }

// The status of this operation.
func (this AddAllProductsOperation) GetStatus() ResourceOperationStatus { return this.Status }

func (AddAllProductsOperation) IsPublicationOperation() {}

// The additional fees that have been applied to the order.
type AdditionalFee struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the additional fee.
	Name string `json:"name"`
	// The price of the additional fee.
	Price *MoneyBag `json:"price,omitempty"`
	// A list of taxes charged on the additional fee.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
}

func (AdditionalFee) IsNode() {}

// A globally-unique ID.
func (this AdditionalFee) GetID() string { return this.ID }

// A sale associated with an additional fee charge.
type AdditionalFeeSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The additional fees for the associated sale.
	AdditionalFee *SaleAdditionalFee `json:"additionalFee,omitempty"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (AdditionalFeeSale) IsSale() {}

// The type of order action that the sale represents.
func (this AdditionalFeeSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this AdditionalFeeSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this AdditionalFeeSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this AdditionalFeeSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this AdditionalFeeSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this AdditionalFeeSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this AdditionalFeeSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this AdditionalFeeSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this AdditionalFeeSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// A sale associated with an order price adjustment.
type AdjustmentSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (AdjustmentSale) IsSale() {}

// The type of order action that the sale represents.
func (this AdjustmentSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this AdjustmentSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this AdjustmentSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this AdjustmentSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this AdjustmentSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this AdjustmentSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this AdjustmentSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this AdjustmentSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this AdjustmentSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// Targets all items the cart for a specified discount.
type AllDiscountItems struct {
	// Whether all items are eligible for the discount. This value always returns `true`.
	AllItems bool `json:"allItems"`
}

func (AllDiscountItems) IsDiscountItems() {}

// A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
// Versions are commonly referred to by their handle (for example, `2021-10`).
type APIVersion struct {
	// The human-readable name of the version.
	DisplayName string `json:"displayName"`
	// The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
	Handle string `json:"handle"`
	// Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
	Supported bool `json:"supported"`
}

// A Shopify application.
type App struct {
	// A unique application API identifier.
	APIKey string `json:"apiKey"`
	// App store page URL of the app.
	AppStoreAppURL *string `json:"appStoreAppUrl,omitempty,omitempty"`
	// App store page URL of the developer who created the app.
	AppStoreDeveloperURL *string `json:"appStoreDeveloperUrl,omitempty,omitempty"`
	// The access scopes available to the app.
	AvailableAccessScopes []AccessScope `json:"availableAccessScopes,omitempty"`
	// Banner image for the app.
	Banner *Image `json:"banner,omitempty"`
	// Description of the app.
	Description *string `json:"description,omitempty,omitempty"`
	// The name of the app developer.
	DeveloperName *string `json:"developerName,omitempty,omitempty"`
	// The type of app developer.
	DeveloperType AppDeveloperType `json:"developerType"`
	// Website of the developer who created the app.
	DeveloperURL string `json:"developerUrl"`
	// Whether the app uses the Embedded App SDK.
	Embedded bool `json:"embedded"`
	// Requirements that must be met before the app can be installed.
	FailedRequirements []FailedRequirement `json:"failedRequirements,omitempty"`
	// A list of app features that are shown in the Shopify App Store listing.
	Features []string `json:"features,omitempty"`
	// Feedback from this app about the store.
	Feedback *AppFeedback `json:"feedback,omitempty,omitempty"`
	// Handle of the app.
	Handle *string `json:"handle,omitempty,omitempty"`
	// Icon that represents the app.
	Icon *Image `json:"icon,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Webpage where you can install the app.
	InstallURL *string `json:"installUrl,omitempty,omitempty"`
	// Corresponding AppInstallation for this shop and App.
	// Returns null if the App is not installed.
	//
	Installation *AppInstallation `json:"installation,omitempty,omitempty"`
	// Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
	//
	IsPostPurchaseAppInUse bool `json:"isPostPurchaseAppInUse"`
	// Webpage that the app starts in.
	LaunchURL string `json:"launchUrl"`
	// Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
	//
	NavigationItems []NavigationItem `json:"navigationItems,omitempty"`
	// Whether the app was previously installed on the current shop.
	PreviouslyInstalled bool `json:"previouslyInstalled"`
	// Detailed information about the app pricing.
	PricingDetails *string `json:"pricingDetails,omitempty,omitempty"`
	// Summary of the app pricing details.
	PricingDetailsSummary string `json:"pricingDetailsSummary"`
	// Link to app privacy policy.
	PrivacyPolicyURL *string `json:"privacyPolicyUrl,omitempty,omitempty"`
	// The public category for the app.
	PublicCategory AppPublicCategory `json:"publicCategory"`
	// Whether the app is published to the Shopify App Store.
	Published bool `json:"published"`
	// The access scopes requested by the app.
	RequestedAccessScopes []AccessScope `json:"requestedAccessScopes,omitempty"`
	// Screenshots of the app.
	Screenshots []Image `json:"screenshots,omitempty"`
	// Whether the app was developed by Shopify.
	ShopifyDeveloped bool `json:"shopifyDeveloped"`
	// Name of the app.
	Title string `json:"title"`
	// Message that appears when the app is uninstalled. For example:
	// By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
	//
	UninstallMessage string `json:"uninstallMessage"`
	// Webpage where you can uninstall the app.
	UninstallURL *string `json:"uninstallUrl,omitempty,omitempty"`
	// The webhook API version for the app.
	WebhookAPIVersion string `json:"webhookApiVersion"`
}

func (App) IsNode() {}

// A globally-unique ID.
func (this App) GetID() string { return this.ID }

// A catalog that defines the publication associated with an app.
type AppCatalog struct {
	// The apps associated with the catalog.
	Apps *AppConnection `json:"apps,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Most recent catalog operations.
	Operations []ResourceOperation `json:"operations,omitempty"`
	// The price list associated with the catalog.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// A group of products and collections that's published to a catalog.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The status of the catalog.
	Status CatalogStatus `json:"status"`
	// The name of the catalog.
	Title string `json:"title"`
}

func (AppCatalog) IsCatalog() {}

// A globally-unique ID.
func (this AppCatalog) GetID() string { return this.ID }

// Most recent catalog operations.
func (this AppCatalog) GetOperations() []ResourceOperation {
	if this.Operations == nil {
		return nil
	}
	interfaceSlice := make([]ResourceOperation, 0, len(this.Operations))
	for _, concrete := range this.Operations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The price list associated with the catalog.
func (this AppCatalog) GetPriceList() *PriceList { return this.PriceList }

// A group of products and collections that's published to a catalog.
func (this AppCatalog) GetPublication() *Publication { return this.Publication }

// The status of the catalog.
func (this AppCatalog) GetStatus() CatalogStatus { return this.Status }

// The name of the catalog.
func (this AppCatalog) GetTitle() string { return this.Title }

func (AppCatalog) IsNode() {}

// A globally-unique ID.

// An auto-generated type for paginating through multiple Apps.
type AppConnection struct {
	// A list of edges.
	Edges []AppEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppEdge.
	Nodes []App `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
type AppCredit struct {
	// The amount that can be used towards future app purchases in Shopify.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The date and time when the app credit was created.
	CreatedAt string `json:"createdAt"`
	// The description of the app credit.
	Description string `json:"description"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the app credit is a test transaction.
	Test bool `json:"test"`
}

func (AppCredit) IsNode() {}

// A globally-unique ID.
func (this AppCredit) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple AppCredits.
type AppCreditConnection struct {
	// A list of edges.
	Edges []AppCreditEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppCreditEdge.
	Nodes []AppCredit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one AppCredit and a cursor during pagination.
type AppCreditEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppCreditEdge.
	Node *AppCredit `json:"node,omitempty"`
}

// A script that defines a discount type.
type AppDiscountType struct {
	// The app providing the app discount type.
	App *App `json:"app,omitempty"`
	// The App Bridge details for discount type configuration.
	AppBridge *FunctionsAppBridge `json:"appBridge,omitempty"`
	// The client ID of the app providing the app discount type.
	AppKey string `json:"appKey"`
	// A description of the app discount type.
	Description *string `json:"description,omitempty,omitempty"`
	// The class of the app discount type.
	DiscountClass DiscountClass `json:"discountClass"`
	// The ID of the function providing the app discount type.
	FunctionID string `json:"functionId"`
	// The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the app discount type.
	Title string `json:"title"`
}

// An auto-generated type which holds one App and a cursor during pagination.
type AppEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppEdge.
	Node *App `json:"node,omitempty"`
}

// Reports the status of shops and their resources and displays this information
// within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
// to set up an app on their store.
type AppFeedback struct {
	// The application associated to the feedback.
	App *App `json:"app,omitempty"`
	// A link to where merchants can resolve errors.
	Link *Link `json:"link,omitempty,omitempty"`
	// The feedback message presented to the merchant.
	Messages []UserError `json:"messages,omitempty"`
}

// Represents an installed application on a shop.
type AppInstallation struct {
	// The access scopes granted to the application by a merchant during installation.
	AccessScopes []AccessScope `json:"accessScopes,omitempty"`
	// The active application subscriptions billed to the shop on a recurring basis.
	ActiveSubscriptions []AppSubscription `json:"activeSubscriptions,omitempty"`
	// All subscriptions created for a shop.
	AllSubscriptions *AppSubscriptionConnection `json:"allSubscriptions,omitempty"`
	// Application which is installed.
	App *App `json:"app,omitempty"`
	// Channel associated with the installed application.
	Channel *Channel `json:"channel,omitempty,omitempty"`
	// Credits that can be used towards future app purchases.
	Credits *AppCreditConnection `json:"credits,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The URL to launch the application.
	LaunchURL string `json:"launchUrl"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// One-time purchases to a shop.
	OneTimePurchases *AppPurchaseOneTimeConnection `json:"oneTimePurchases,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The publication associated with the installed application.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
	RevenueAttributionRecords *AppRevenueAttributionRecordConnection `json:"revenueAttributionRecords,omitempty"`
	// Subscriptions charge to a shop on a recurring basis.
	Subscriptions []AppSubscription `json:"subscriptions,omitempty"`
	// The URL to uninstall the application.
	UninstallURL *string `json:"uninstallUrl,omitempty,omitempty"`
}

func (AppInstallation) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this AppInstallation) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this AppInstallation) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this AppInstallation) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this AppInstallation) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (AppInstallation) IsNode() {}

// A globally-unique ID.
func (this AppInstallation) GetID() string { return this.ID }

func (AppInstallation) IsMetafieldReferencer() {}

// An auto-generated type for paginating through multiple AppInstallations.
type AppInstallationConnection struct {
	// A list of edges.
	Edges []AppInstallationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppInstallationEdge.
	Nodes []AppInstallation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one AppInstallation and a cursor during pagination.
type AppInstallationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppInstallationEdge.
	Node *AppInstallation `json:"node,omitempty"`
}

// The pricing model for the app subscription.
// The pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.
type AppPlanInput struct {
	// The pricing details for usage-based billing.
	AppUsagePricingDetails *AppUsagePricingInput `json:"appUsagePricingDetails,omitempty,omitempty"`
	// The pricing details for recurring billing.
	AppRecurringPricingDetails *AppRecurringPricingInput `json:"appRecurringPricingDetails,omitempty,omitempty"`
}

// The app plan that the merchant is subscribed to.
type AppPlanV2 struct {
	// The plan billed to a shop on a recurring basis.
	PricingDetails AppPricingDetails `json:"pricingDetails"`
}

// Services and features purchased once by a store.
type AppPurchaseOneTime struct {
	// The date and time when the app purchase occurred.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the app purchase.
	Name string `json:"name"`
	// The amount to be charged to the store for the app purchase.
	Price *MoneyV2 `json:"price,omitempty"`
	// The status of the app purchase.
	Status AppPurchaseStatus `json:"status"`
	// Whether the app purchase is a test transaction.
	Test bool `json:"test"`
}

func (AppPurchaseOneTime) IsAppPurchase() {}

// The date and time when the app purchase occurred.
func (this AppPurchaseOneTime) GetCreatedAt() string { return this.CreatedAt }

// The name of the app purchase.
func (this AppPurchaseOneTime) GetName() string { return this.Name }

// The amount to be charged to the store for the app purchase.
func (this AppPurchaseOneTime) GetPrice() *MoneyV2 { return this.Price }

// The status of the app purchase.
func (this AppPurchaseOneTime) GetStatus() AppPurchaseStatus { return this.Status }

// Whether the app purchase is a test transaction.
func (this AppPurchaseOneTime) GetTest() bool { return this.Test }

func (AppPurchaseOneTime) IsNode() {}

// A globally-unique ID.
func (this AppPurchaseOneTime) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple AppPurchaseOneTimes.
type AppPurchaseOneTimeConnection struct {
	// A list of edges.
	Edges []AppPurchaseOneTimeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppPurchaseOneTimeEdge.
	Nodes []AppPurchaseOneTime `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appPurchaseOneTimeCreate` mutation.
type AppPurchaseOneTimeCreatePayload struct {
	// The newly created app one-time purchase.
	AppPurchaseOneTime *AppPurchaseOneTime `json:"appPurchaseOneTime,omitempty,omitempty"`
	// The URL that the merchant can access to approve or decline the newly created app one-time purchase.
	//
	// If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
	// If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
	//
	// You get paid after the charge is activated.
	//
	ConfirmationURL *string `json:"confirmationUrl,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
type AppPurchaseOneTimeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppPurchaseOneTimeEdge.
	Node *AppPurchaseOneTime `json:"node,omitempty"`
}

// The pricing information about a subscription app.
// The object contains an interval (the frequency at which the shop is billed for an app subscription) and
// a price (the amount to be charged to the subscribing shop at each interval).
type AppRecurringPricing struct {
	// The discount applied to the subscription for a given number of billing intervals.
	Discount *AppSubscriptionDiscount `json:"discount,omitempty,omitempty"`
	// The frequency at which the subscribing shop is billed for an app subscription.
	Interval AppPricingInterval `json:"interval"`
	// The amount and currency to be charged to the subscribing shop every billing interval.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (AppRecurringPricing) IsAppPricingDetails() {}

// Instructs the app subscription to generate a fixed charge on a recurring basis. The frequency is specified by the billing interval.
type AppRecurringPricingInput struct {
	// How often the app subscription generates a charge.
	Interval *AppPricingInterval `json:"interval,omitempty,omitempty"`
	// The amount to be charged to the store every billing interval.
	Price *MoneyInput `json:"price,omitempty"`
	// The discount applied to the subscription for a given number of billing intervals.
	Discount *AppSubscriptionDiscountInput `json:"discount,omitempty,omitempty"`
}

// Represents app revenue that was captured externally by the partner.
type AppRevenueAttributionRecord struct {
	// The financial amount captured in this attribution.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The timestamp when the financial amount was captured.
	CapturedAt string `json:"capturedAt"`
	// The timestamp at which this revenue attribution was issued.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The unique value submitted during the creation of the app revenue attribution record.
	// For more information, refer to
	// [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	//
	IdempotencyKey string `json:"idempotencyKey"`
	// Indicates whether this is a test submission.
	Test bool `json:"test"`
	// The type of revenue attribution.
	Type AppRevenueAttributionType `json:"type"`
}

func (AppRevenueAttributionRecord) IsNode() {}

// A globally-unique ID.
func (this AppRevenueAttributionRecord) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
type AppRevenueAttributionRecordConnection struct {
	// A list of edges.
	Edges []AppRevenueAttributionRecordEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppRevenueAttributionRecordEdge.
	Nodes []AppRevenueAttributionRecord `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appRevenueAttributionRecordCreate` mutation.
type AppRevenueAttributionRecordCreatePayload struct {
	// The created app revenue attribution record.
	AppRevenueAttributionRecord *AppRevenueAttributionRecord `json:"appRevenueAttributionRecord,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AppRevenueAttributionRecordCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AppRevenueAttributionRecordCreate`.
type AppRevenueAttributionRecordCreateUserError struct {
	// The error code.
	Code *AppRevenueAttributionRecordCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AppRevenueAttributionRecordCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this AppRevenueAttributionRecordCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this AppRevenueAttributionRecordCreateUserError) GetMessage() string { return this.Message }

// Return type for `appRevenueAttributionRecordDelete` mutation.
type AppRevenueAttributionRecordDeletePayload struct {
	// The ID of the revenue attribution that was deleted, if one was.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AppRevenueAttributionRecordDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AppRevenueAttributionRecordDelete`.
type AppRevenueAttributionRecordDeleteUserError struct {
	// The error code.
	Code *AppRevenueAttributionRecordDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AppRevenueAttributionRecordDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this AppRevenueAttributionRecordDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this AppRevenueAttributionRecordDeleteUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
type AppRevenueAttributionRecordEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppRevenueAttributionRecordEdge.
	Node *AppRevenueAttributionRecord `json:"node,omitempty"`
}

// The input fields to supply an app revenue attribution record.
type AppRevenueAttributionRecordInput struct {
	// The unique value submitted during creation.
	// For more information, refer to
	// [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	//
	IdempotencyKey string `json:"idempotencyKey"`
	// The timestamp when the financial amount was captured.
	CapturedAt string `json:"capturedAt"`
	// The financial amount captured in this attribution.
	Amount *MoneyInput `json:"amount,omitempty"`
	// The type of revenue attribution.
	Type AppRevenueAttributionType `json:"type"`
	// Indicates whether this is a test submission.
	Test bool `json:"test"`
}

// Provides users access to services and/or features for a duration of time.
type AppSubscription struct {
	// The date and time when the app subscription was created.
	CreatedAt string `json:"createdAt"`
	// The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
	CurrentPeriodEnd *string `json:"currentPeriodEnd,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The plans attached to the app subscription.
	LineItems []AppSubscriptionLineItem `json:"lineItems,omitempty"`
	// The name of the app subscription.
	Name string `json:"name"`
	// The URL that the merchant is redirected to after approving the app subscription.
	ReturnURL string `json:"returnUrl"`
	// The status of the app subscription.
	Status AppSubscriptionStatus `json:"status"`
	// Specifies whether the app subscription is a test transaction.
	Test bool `json:"test"`
	// The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
	TrialDays int `json:"trialDays"`
}

func (AppSubscription) IsNode() {}

// A globally-unique ID.
func (this AppSubscription) GetID() string { return this.ID }

// Return type for `appSubscriptionCancel` mutation.
type AppSubscriptionCancelPayload struct {
	// The cancelled app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple AppSubscriptions.
type AppSubscriptionConnection struct {
	// A list of edges.
	Edges []AppSubscriptionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppSubscriptionEdge.
	Nodes []AppSubscription `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appSubscriptionCreate` mutation.
type AppSubscriptionCreatePayload struct {
	// The newly-created app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty,omitempty"`
	// The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
	ConfirmationURL *string `json:"confirmationUrl,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Discount applied to the recurring pricing portion of a subscription.
type AppSubscriptionDiscount struct {
	// The total number of billing intervals to which the discount will be applied.
	// The discount will be applied to an indefinite number of billing intervals if this value is blank.
	//
	DurationLimitInIntervals *int `json:"durationLimitInIntervals,omitempty,omitempty"`
	// The price of the subscription after the discount is applied.
	PriceAfterDiscount *MoneyV2 `json:"priceAfterDiscount,omitempty"`
	// The remaining number of billing intervals to which the discount will be applied.
	RemainingDurationInIntervals *int `json:"remainingDurationInIntervals,omitempty,omitempty"`
	// The value of the discount applied every billing interval.
	Value AppSubscriptionDiscountValue `json:"value"`
}

// The fixed amount value of a discount.
type AppSubscriptionDiscountAmount struct {
	// The fixed amount value of a discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
}

func (AppSubscriptionDiscountAmount) IsAppSubscriptionDiscountValue() {}

// The input fields to specify a discount to the recurring pricing portion of a subscription over a number of billing intervals.
type AppSubscriptionDiscountInput struct {
	// The value to be discounted every billing interval.
	Value *AppSubscriptionDiscountValueInput `json:"value,omitempty,omitempty"`
	// The total number of billing intervals to which the discount will be applied.
	// The discount will be applied to an indefinite number of billing intervals if this value is left blank.
	//
	DurationLimitInIntervals *int `json:"durationLimitInIntervals,omitempty,omitempty"`
}

// The percentage value of a discount.
type AppSubscriptionDiscountPercentage struct {
	// The percentage value of a discount.
	Percentage float64 `json:"percentage"`
}

func (AppSubscriptionDiscountPercentage) IsAppSubscriptionDiscountValue() {}

// The input fields to specify the value discounted every billing interval.
type AppSubscriptionDiscountValueInput struct {
	// The percentage value of a discount.
	Percentage *float64 `json:"percentage,omitempty,omitempty"`
	// The monetary value of a discount.
	Amount *null.String `json:"amount,omitempty,omitempty"`
}

// An auto-generated type which holds one AppSubscription and a cursor during pagination.
type AppSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppSubscriptionEdge.
	Node *AppSubscription `json:"node,omitempty"`
}

// The plan attached to an app subscription.
type AppSubscriptionLineItem struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The pricing model for the app subscription.
	Plan *AppPlanV2 `json:"plan,omitempty"`
	// A list of the store's usage records for a usage pricing plan.
	UsageRecords *AppUsageRecordConnection `json:"usageRecords,omitempty"`
}

// The input fields to add more than one pricing plan to an app subscription.
type AppSubscriptionLineItemInput struct {
	// The pricing model for the app subscription.
	Plan *AppPlanInput `json:"plan,omitempty"`
}

// Return type for `appSubscriptionLineItemUpdate` mutation.
type AppSubscriptionLineItemUpdatePayload struct {
	// The updated app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty,omitempty"`
	// The URL where the merchant approves or declines the updated app subscription line item.
	ConfirmationURL *string `json:"confirmationUrl,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `appSubscriptionTrialExtend` mutation.
type AppSubscriptionTrialExtendPayload struct {
	// The app subscription that had its trial extended.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []AppSubscriptionTrialExtendUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `AppSubscriptionTrialExtend`.
type AppSubscriptionTrialExtendUserError struct {
	// The error code.
	Code *AppSubscriptionTrialExtendUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (AppSubscriptionTrialExtendUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this AppSubscriptionTrialExtendUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this AppSubscriptionTrialExtendUserError) GetMessage() string { return this.Message }

// Defines a usage pricing model for the app subscription.
// These charges are variable based on how much the merchant uses the app.
type AppUsagePricing struct {
	// The total usage records for interval.
	BalanceUsed *MoneyV2 `json:"balanceUsed,omitempty"`
	// The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
	// This prevents billing from exceeding a maximum threshold over the duration of the billing period.
	// For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
	//
	CappedAmount *MoneyV2 `json:"cappedAmount,omitempty"`
	// The frequency with which the app usage records are billed.
	Interval AppPricingInterval `json:"interval"`
	// The terms and conditions for app usage pricing.
	// Must be present in order to create usage charges.
	// The terms are presented to the merchant when they approve an app's usage charges.
	//
	Terms string `json:"terms"`
}

func (AppUsagePricing) IsAppPricingDetails() {}

// The input fields to issue arbitrary charges for app usage associated with a subscription.
type AppUsagePricingInput struct {
	// The maximum amount of usage charges that can be incurred within a subscription billing interval.
	CappedAmount *MoneyInput `json:"cappedAmount,omitempty"`
	// The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates.
	Terms string `json:"terms"`
}

// Store usage for app subscriptions with usage pricing.
type AppUsageRecord struct {
	// The date and time when the usage record was created.
	CreatedAt string `json:"createdAt"`
	// The description of the app usage record.
	Description string `json:"description"`
	// A globally-unique ID.
	ID string `json:"id"`
	// A unique key generated by the client to avoid duplicate charges.
	//
	IdempotencyKey *string `json:"idempotencyKey,omitempty,omitempty"`
	// The price of the usage record.
	Price *MoneyV2 `json:"price,omitempty"`
	// Defines the usage pricing plan the merchant is subscribed to.
	SubscriptionLineItem *AppSubscriptionLineItem `json:"subscriptionLineItem,omitempty"`
}

func (AppUsageRecord) IsNode() {}

// A globally-unique ID.
func (this AppUsageRecord) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple AppUsageRecords.
type AppUsageRecordConnection struct {
	// A list of edges.
	Edges []AppUsageRecordEdge `json:"edges,omitempty"`
	// A list of the nodes contained in AppUsageRecordEdge.
	Nodes []AppUsageRecord `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appUsageRecordCreate` mutation.
type AppUsageRecordCreatePayload struct {
	// The newly created app usage record.
	AppUsageRecord *AppUsageRecord `json:"appUsageRecord,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
type AppUsageRecordEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of AppUsageRecordEdge.
	Node *AppUsageRecord `json:"node,omitempty"`
}

// Represents a generic custom attribute.
type Attribute struct {
	// Key or name of the attribute.
	Key string `json:"key"`
	// Value of the attribute.
	Value *string `json:"value,omitempty,omitempty"`
}

// The input fields for an attribute.
type AttributeInput struct {
	// Key or name of the attribute.
	Key string `json:"key"`
	// Value of the attribute.
	Value string `json:"value"`
}

// Automatic discount applications capture the intentions of a discount that was automatically applied.
type AutomaticDiscountApplication struct {
	// The method by which the discount's value is applied to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the discount application.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (AutomaticDiscountApplication) IsDiscountApplication() {}

// The method by which the discount's value is applied to its entitled items.
func (this AutomaticDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// An ordered index that can be used to identify the discount application and indicate the precedence
// of the discount application for calculations.
func (this AutomaticDiscountApplication) GetIndex() int { return this.Index }

// How the discount amount is distributed on the discounted lines.
func (this AutomaticDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this AutomaticDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this AutomaticDiscountApplication) GetValue() PricingValue { return this.Value }

// Represents an object containing all information for channels available to a shop.
type AvailableChannelDefinitionsByChannel struct {
	// The channel definitions for channels installed on a shop.
	ChannelDefinitions []ChannelDefinition `json:"channelDefinitions,omitempty"`
	// The name of the channel.
	ChannelName string `json:"channelName"`
}

// Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
// the addition of a product.
type BasicEvent struct {
	// The name of the app that created the event.
	AppTitle *string `json:"appTitle,omitempty,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser"`
	// The date and time when the event was created.
	CreatedAt string `json:"createdAt"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Human readable text that describes the event.
	Message string `json:"message"`
}

func (BasicEvent) IsEvent() {}

// The name of the app that created the event.
func (this BasicEvent) GetAppTitle() *string { return this.AppTitle }

// Whether the event was created by an app.
func (this BasicEvent) GetAttributeToApp() bool { return this.AttributeToApp }

// Whether the event was caused by an admin user.
func (this BasicEvent) GetAttributeToUser() bool { return this.AttributeToUser }

// The date and time when the event was created.
func (this BasicEvent) GetCreatedAt() string { return this.CreatedAt }

// Whether the event is critical.
func (this BasicEvent) GetCriticalAlert() bool { return this.CriticalAlert }

// A globally-unique ID.
func (this BasicEvent) GetID() string { return this.ID }

// Human readable text that describes the event.
func (this BasicEvent) GetMessage() string { return this.Message }

func (BasicEvent) IsNode() {}

// A globally-unique ID.

// Represents an error that happens during the execution of a billing attempt mutation.
type BillingAttemptUserError struct {
	// The error code.
	Code *BillingAttemptUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BillingAttemptUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this BillingAttemptUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this BillingAttemptUserError) GetMessage() string { return this.Message }

// Represents an error that happens during execution of a bulk mutation.
type BulkMutationUserError struct {
	// The error code.
	Code *BulkMutationErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BulkMutationUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this BulkMutationUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this BulkMutationUserError) GetMessage() string { return this.Message }

// An asynchronous long-running operation to fetch data in bulk or to bulk import data.
//
// Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
// they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
// a link to the data in [JSONL](http://jsonlines.org/) format.
//
// Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
type BulkOperation struct {
	// When the bulk operation was successfully completed.
	CompletedAt *string `json:"completedAt,omitempty,omitempty"`
	// When the bulk operation was created.
	CreatedAt string `json:"createdAt"`
	// Error code for failed operations.
	ErrorCode *BulkOperationErrorCode `json:"errorCode,omitempty,omitempty"`
	// File size in bytes of the file in the `url` field.
	FileSize *string `json:"fileSize,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// A running count of all the objects processed.
	// For example, when fetching all the products and their variants, this field counts both products and variants.
	// This field can be used to track operation progress.
	//
	ObjectCount string `json:"objectCount"`
	// The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
	// The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
	//
	PartialDataURL *string `json:"partialDataUrl,omitempty,omitempty"`
	// GraphQL query document specified in `bulkOperationRunQuery`.
	Query string `json:"query"`
	// A running count of all the objects that are processed at the root of the query.
	// For example, when fetching all the products and their variants, this field only counts products.
	// This field can be used to track operation progress.
	//
	RootObjectCount string `json:"rootObjectCount"`
	// Status of the bulk operation.
	Status BulkOperationStatus `json:"status"`
	// The bulk operation's type.
	Type BulkOperationType `json:"type"`
	// The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
	// The URL expires 7 days after the operation completes.
	//
	URL *string `json:"url,omitempty,omitempty"`
}

func (BulkOperation) IsNode() {}

// A globally-unique ID.
func (this BulkOperation) GetID() string { return this.ID }

// Return type for `bulkOperationCancel` mutation.
type BulkOperationCancelPayload struct {
	// The bulk operation to be canceled.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `bulkOperationRunMutation` mutation.
type BulkOperationRunMutationPayload struct {
	// The newly created bulk operation.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BulkMutationUserError `json:"userErrors,omitempty"`
}

// Return type for `bulkOperationRunQuery` mutation.
type BulkOperationRunQueryPayload struct {
	// The newly created bulk operation.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `bulkProductResourceFeedbackCreate` mutation.
type BulkProductResourceFeedbackCreatePayload struct {
	// The feedback that is created.
	Feedback []ProductResourceFeedback `json:"feedback,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BulkProductResourceFeedbackCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
type BulkProductResourceFeedbackCreateUserError struct {
	// The error code.
	Code *BulkProductResourceFeedbackCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BulkProductResourceFeedbackCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this BulkProductResourceFeedbackCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this BulkProductResourceFeedbackCreateUserError) GetMessage() string { return this.Message }

// Represents the Bundles feature configuration for the shop.
type BundlesFeature struct {
	// Whether a shop is configured properly to sell bundles.
	EligibleForBundles bool `json:"eligibleForBundles"`
	// The reason why a shop is not eligible for bundles.
	IneligibilityReason *string `json:"ineligibilityReason,omitempty,omitempty"`
	// Whether a shop has any fixed bundle products or has a cartTransform function installed.
	SellsBundles bool `json:"sellsBundles"`
}

// An error that happens during the execution of a business customer mutation.
type BusinessCustomerUserError struct {
	// The error code.
	Code *BusinessCustomerErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (BusinessCustomerUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this BusinessCustomerUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this BusinessCustomerUserError) GetMessage() string { return this.Message }

// Settings describing the behavior of checkout for a B2B buyer.
type BuyerExperienceConfiguration struct {
	// Whether to checkout to draft order for merchant review.
	CheckoutToDraft bool `json:"checkoutToDraft"`
	// Whether to allow customers to use editable shipping addresses.
	EditableShippingAddress bool `json:"editableShippingAddress"`
	// Whether a buyer must pay at checkout or they can also choose to pay
	// later using net terms.
	//
	PayNowOnly bool `json:"payNowOnly"`
	// Represents the merchant configured payment terms.
	PaymentTermsTemplate *PaymentTermsTemplate `json:"paymentTermsTemplate,omitempty,omitempty"`
}

// The input fields specifying the behavior of checkout for a B2B buyer.
type BuyerExperienceConfigurationInput struct {
	// Whether to checkout to draft order for merchant review.
	CheckoutToDraft *bool `json:"checkoutToDraft,omitempty,omitempty"`
	// Represents the merchant configured payment terms.
	PaymentTermsTemplateID *string `json:"paymentTermsTemplateId,omitempty,omitempty"`
	// Whether to allow customers to edit their shipping address at checkout.
	EditableShippingAddress *bool `json:"editableShippingAddress,omitempty,omitempty"`
}

// A discount that is automatically applied to an order that is being edited.
type CalculatedAutomaticDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedAutomaticDiscountApplication) IsCalculatedDiscountApplication() {}

// The method by which the discount's value is allocated to its entitled items.
func (this CalculatedAutomaticDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// The level at which the discount was applied.
func (this CalculatedAutomaticDiscountApplication) GetAppliedTo() DiscountApplicationLevel {
	return this.AppliedTo
}

// The description of discount application. Indicates the reason why the discount was applied.
func (this CalculatedAutomaticDiscountApplication) GetDescription() *string { return this.Description }

// A globally-unique ID.
func (this CalculatedAutomaticDiscountApplication) GetID() string { return this.ID }

// How the discount amount is distributed on the discounted lines.
func (this CalculatedAutomaticDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this CalculatedAutomaticDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this CalculatedAutomaticDiscountApplication) GetValue() PricingValue { return this.Value }

// An amount discounting the line that has been allocated by an associated discount application.
type CalculatedDiscountAllocation struct {
	// The money amount that's allocated by the discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount that the allocated amount originated from.
	DiscountApplication CalculatedDiscountApplication `json:"discountApplication"`
}

// An auto-generated type for paginating through multiple CalculatedDiscountApplications.
type CalculatedDiscountApplicationConnection struct {
	// A list of edges.
	Edges []CalculatedDiscountApplicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CalculatedDiscountApplicationEdge.
	Nodes []CalculatedDiscountApplication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
type CalculatedDiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CalculatedDiscountApplicationEdge.
	Node CalculatedDiscountApplication `json:"node"`
}

// A discount code that is applied to an order that is being edited.
type CalculatedDiscountCodeApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The string identifying the discount code that was used at the time of application.
	Code string `json:"code"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedDiscountCodeApplication) IsCalculatedDiscountApplication() {}

// The method by which the discount's value is allocated to its entitled items.
func (this CalculatedDiscountCodeApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// The level at which the discount was applied.
func (this CalculatedDiscountCodeApplication) GetAppliedTo() DiscountApplicationLevel {
	return this.AppliedTo
}

// The description of discount application. Indicates the reason why the discount was applied.
func (this CalculatedDiscountCodeApplication) GetDescription() *string { return this.Description }

// A globally-unique ID.
func (this CalculatedDiscountCodeApplication) GetID() string { return this.ID }

// How the discount amount is distributed on the discounted lines.
func (this CalculatedDiscountCodeApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this CalculatedDiscountCodeApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this CalculatedDiscountCodeApplication) GetValue() PricingValue { return this.Value }

// The computed properties for a draft order.
type CalculatedDraftOrder struct {
	// Order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty,omitempty"`
	// The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
	AvailableShippingRates []ShippingRate `json:"availableShippingRates,omitempty"`
	// Whether the billing address matches the shipping address.
	BillingAddressMatchesShippingAddress bool `json:"billingAddressMatchesShippingAddress"`
	// The currency of the store for this draft order.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// Customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// Line items in the draft order with their computed properties.
	LineItems []CalculatedDraftOrderLineItem `json:"lineItems,omitempty"`
	// A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
	LineItemsSubtotalPrice *MoneyBag `json:"lineItemsSubtotalPrice,omitempty"`
	// The name of the selected market.
	MarketName string `json:"marketName"`
	// The selected market region country code for the draft order.
	MarketRegionCountryCode CountryCode `json:"marketRegionCountryCode"`
	// Phone number assigned to draft order.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The payment currency of the customer for this draft order.
	PresentmentCurrencyCode CurrencyCode `json:"presentmentCurrencyCode"`
	// The purchasing entity for the draft order.
	PurchasingEntity PurchasingEntity `json:"purchasingEntity,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	//
	SubtotalPrice null.String `json:"subtotalPrice"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Total discounts for this draft order.
	TotalDiscountsSet *MoneyBag `json:"totalDiscountsSet,omitempty"`
	// Total price of line items for this draft order.
	TotalLineItemsPriceSet *MoneyBag `json:"totalLineItemsPriceSet,omitempty"`
	// Total amount of the draft order (includes taxes, shipping charges, and discounts).
	TotalPrice null.String `json:"totalPrice"`
	// Total amount of the draft order(includes taxes, shipping charges, and discounts).
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// Total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// Total shipping charge for the draft order.
	TotalShippingPriceSet *MoneyBag `json:"totalShippingPriceSet,omitempty"`
	// Total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax"`
	// Total amount of taxes for the draft order.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
}

// The computed line items for a draft order.
type CalculatedDraftOrderLineItem struct {
	// The discount applied to the line item.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty,omitempty"`
	// Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
	Custom bool `json:"custom"`
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Additional information (metafields) about the line item with the associated types.
	CustomAttributesV2 []TypedAttribute `json:"customAttributesV2,omitempty"`
	// Total price with discounts applied.
	DiscountedTotal *MoneyV2 `json:"discountedTotal,omitempty"`
	// The total price with discounts applied.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The unit price with discounts applied.
	DiscountedUnitPrice *MoneyV2 `json:"discountedUnitPrice,omitempty"`
	// Unit price with discounts applied.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The image associated with the draft order line item.
	Image *Image `json:"image,omitempty,omitempty"`
	// Whether the line item represents the purchase of a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// The name of the product.
	Name string `json:"name"`
	// The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	//
	OriginalTotal *MoneyV2 `json:"originalTotal,omitempty"`
	// The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant price without any discounts applied.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// The variant price without any discounts applied.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The product associated with the draft order line item.
	Product *Product `json:"product,omitempty,omitempty"`
	// The number of variant items requested in the draft order.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The SKU number of the product variant.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product or variant. This field only applies to custom line items.
	Title string `json:"title"`
	// The total value of the discount.
	TotalDiscount *MoneyV2 `json:"totalDiscount,omitempty"`
	// The total value of the discount.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The variant associated with the draft order line item.
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who created the product variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
	// The weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty,omitempty"`
}

// A line item involved in order editing that may be newly added or have new changes applied.
type CalculatedLineItem struct {
	// The discounts that have been allocated onto the line item by discount applications.
	CalculatedDiscountAllocations []CalculatedDiscountAllocation `json:"calculatedDiscountAllocations,omitempty"`
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of items that can be edited.
	EditableQuantity int `json:"editableQuantity"`
	// The editable quantity prior to any changes made in the current edit.
	EditableQuantityBeforeChanges int `json:"editableQuantityBeforeChanges"`
	// The total price of editable lines in shop and presentment currencies.
	EditableSubtotalSet *MoneyBag `json:"editableSubtotalSet,omitempty"`
	// Whether the calculated line item has a staged discount.
	HasStagedLineItemDiscount bool `json:"hasStagedLineItemDiscount"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image object associated to the line item's variant.
	Image *Image `json:"image,omitempty,omitempty"`
	// The variant unit price in shop and presentment currencies, without any discounts applied.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The total number of items.
	Quantity int `json:"quantity"`
	// Whether the line item can be restocked or not.
	Restockable bool `json:"restockable"`
	// Whether the changes on the line item will result in a restock.
	Restocking bool `json:"restocking"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty,omitempty"`
	// A list of changes that affect this line item.
	StagedChanges []OrderStagedChange `json:"stagedChanges,omitempty"`
	// The title of the product.
	Title string `json:"title"`
	// The total price of uneditable lines in shop and presentment currencies.
	UneditableSubtotalSet *MoneyBag `json:"uneditableSubtotalSet,omitempty"`
	// The product variant associated with this line item. The value is null for custom line items and items where
	// the variant has been deleted.
	//
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The title of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple CalculatedLineItems.
type CalculatedLineItemConnection struct {
	// A list of edges.
	Edges []CalculatedLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CalculatedLineItemEdge.
	Nodes []CalculatedLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
type CalculatedLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CalculatedLineItemEdge.
	Node *CalculatedLineItem `json:"node,omitempty"`
}

// Represents a discount that was manually created for an order that is being edited.
type CalculatedManualDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedManualDiscountApplication) IsCalculatedDiscountApplication() {}

// The method by which the discount's value is allocated to its entitled items.
func (this CalculatedManualDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// The level at which the discount was applied.
func (this CalculatedManualDiscountApplication) GetAppliedTo() DiscountApplicationLevel {
	return this.AppliedTo
}

// The description of discount application. Indicates the reason why the discount was applied.
func (this CalculatedManualDiscountApplication) GetDescription() *string { return this.Description }

// A globally-unique ID.
func (this CalculatedManualDiscountApplication) GetID() string { return this.ID }

// How the discount amount is distributed on the discounted lines.
func (this CalculatedManualDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this CalculatedManualDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this CalculatedManualDiscountApplication) GetValue() PricingValue { return this.Value }

// An order with edits applied but not saved.
type CalculatedOrder struct {
	// Returns only the new discount applications being added to the order in the current edit.
	//
	AddedDiscountApplications *CalculatedDiscountApplicationConnection `json:"addedDiscountApplications,omitempty"`
	// Returns only the new line items being added to the order during the current edit.
	//
	AddedLineItems *CalculatedLineItemConnection `json:"addedLineItems,omitempty"`
	// Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty,omitempty"`
	// Whether the changes have been applied and saved to the order.
	Committed bool `json:"committed"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns all items on the order that existed before starting the edit.
	// Will include any changes that have been made.
	// Will not include line items added during the current edit.
	//
	LineItems *CalculatedLineItemConnection `json:"lineItems,omitempty"`
	// The HTML of the customer notification for the order edit.
	NotificationPreviewHTML *string `json:"notificationPreviewHtml,omitempty,omitempty"`
	// The customer notification title.
	NotificationPreviewTitle string `json:"notificationPreviewTitle"`
	// The order without any changes applied.
	Order *Order `json:"order,omitempty"`
	// The order without any changes applied.
	//
	OriginalOrder *Order `json:"originalOrder,omitempty"`
	// List of changes made to the order during the current edit.
	//
	StagedChanges *OrderStagedChangeConnection `json:"stagedChanges,omitempty"`
	// The sum of the quantities for the line items that contribute to the order's subtotal.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity"`
	// The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal does not include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty,omitempty"`
	// Taxes charged for the line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Total price of the order less the total amount received from the customer in shop and presentment currencies.
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

func (CalculatedOrder) IsNode() {}

// A globally-unique ID.
func (this CalculatedOrder) GetID() string { return this.ID }

// A discount created by a Shopify script for an order that is being edited.
type CalculatedScriptDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (CalculatedScriptDiscountApplication) IsCalculatedDiscountApplication() {}

// The method by which the discount's value is allocated to its entitled items.
func (this CalculatedScriptDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// The level at which the discount was applied.
func (this CalculatedScriptDiscountApplication) GetAppliedTo() DiscountApplicationLevel {
	return this.AppliedTo
}

// The description of discount application. Indicates the reason why the discount was applied.
func (this CalculatedScriptDiscountApplication) GetDescription() *string { return this.Description }

// A globally-unique ID.
func (this CalculatedScriptDiscountApplication) GetID() string { return this.ID }

// How the discount amount is distributed on the discounted lines.
func (this CalculatedScriptDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this CalculatedScriptDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this CalculatedScriptDiscountApplication) GetValue() PricingValue { return this.Value }

// Card payment details related to a transaction.
type CardPaymentDetails struct {
	// The response code from the address verification system (AVS). The code is always a single letter.
	AvsResultCode *string `json:"avsResultCode,omitempty,omitempty"`
	// The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number.
	Bin *string `json:"bin,omitempty,omitempty"`
	// The name of the company that issued the customer's credit card.
	Company *string `json:"company,omitempty,omitempty"`
	// The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string.
	CvvResultCode *string `json:"cvvResultCode,omitempty,omitempty"`
	// The month in which the used credit card expires.
	ExpirationMonth *int `json:"expirationMonth,omitempty,omitempty"`
	// The year in which the used credit card expires.
	ExpirationYear *int `json:"expirationYear,omitempty,omitempty"`
	// The holder of the credit card.
	Name *string `json:"name,omitempty,omitempty"`
	// The customer's credit card number, with most of the leading digits redacted.
	Number *string `json:"number,omitempty,omitempty"`
	// Digital wallet used for the payment.
	Wallet *DigitalWallet `json:"wallet,omitempty,omitempty"`
}

func (CardPaymentDetails) IsPaymentDetails() {}

// A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle).
type CartTransform struct {
	// The ID for the Cart Transform function.
	FunctionID string `json:"functionId"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
}

func (CartTransform) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this CartTransform) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this CartTransform) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this CartTransform) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this CartTransform) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (CartTransform) IsNode() {}

// A globally-unique ID.
func (this CartTransform) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple CartTransforms.
type CartTransformConnection struct {
	// A list of edges.
	Edges []CartTransformEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CartTransformEdge.
	Nodes []CartTransform `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `cartTransformCreate` mutation.
type CartTransformCreatePayload struct {
	// The newly created cart transform function.
	CartTransform *CartTransform `json:"cartTransform,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CartTransformCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CartTransformCreate`.
type CartTransformCreateUserError struct {
	// The error code.
	Code *CartTransformCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CartTransformCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CartTransformCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CartTransformCreateUserError) GetMessage() string { return this.Message }

// Return type for `cartTransformDelete` mutation.
type CartTransformDeletePayload struct {
	// The globally-unique ID for the deleted cart transform.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CartTransformDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CartTransformDelete`.
type CartTransformDeleteUserError struct {
	// The error code.
	Code *CartTransformDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CartTransformDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CartTransformDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CartTransformDeleteUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one CartTransform and a cursor during pagination.
type CartTransformEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CartTransformEdge.
	Node *CartTransform `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple Catalogs.
type CatalogConnection struct {
	// A list of edges.
	Edges []CatalogEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CatalogEdge.
	Nodes []Catalog `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// The total count of Catalogs.
	TotalCount string `json:"totalCount"`
}

// The input fields for the context in which the catalog's publishing and pricing rules apply.
type CatalogContextInput struct {
	// The IDs of the company locations to associate to the catalog.
	CompanyLocationIds []string `json:"companyLocationIds,omitempty,omitempty"`
}

// Return type for `catalogContextUpdate` mutation.
type CatalogContextUpdatePayload struct {
	// The updated catalog.
	Catalog Catalog `json:"catalog,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CatalogUserError `json:"userErrors,omitempty"`
}

// The input fields required to create a catalog.
type CatalogCreateInput struct {
	// The name of the catalog.
	Title string `json:"title"`
	// The status of the catalog.
	Status CatalogStatus `json:"status"`
	// The context associated with the catalog.
	Context *CatalogContextInput `json:"context,omitempty"`
	// The ID of the price list to associate to the catalog.
	PriceListID *string `json:"priceListId,omitempty,omitempty"`
	// The ID of the publication to associate to the catalog.
	PublicationID *string `json:"publicationId,omitempty,omitempty"`
}

// Return type for `catalogCreate` mutation.
type CatalogCreatePayload struct {
	// The newly created catalog.
	Catalog Catalog `json:"catalog,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CatalogUserError `json:"userErrors,omitempty"`
}

// A catalog csv operation represents a CSV file import.
type CatalogCSVOperation struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The count of processed rows, summing imported, failed, and skipped rows.
	ProcessedRowCount *int `json:"processedRowCount,omitempty,omitempty"`
	// Represents a rows objects within this background operation.
	RowCount *RowCount `json:"rowCount,omitempty,omitempty"`
	// The status of this operation.
	Status ResourceOperationStatus `json:"status"`
}

func (CatalogCSVOperation) IsNode() {}

// A globally-unique ID.
func (this CatalogCSVOperation) GetID() string { return this.ID }

func (CatalogCSVOperation) IsResourceOperation() {}

// A globally-unique ID.

// The count of processed rows, summing imported, failed, and skipped rows.
func (this CatalogCSVOperation) GetProcessedRowCount() *int { return this.ProcessedRowCount }

// Represents a rows objects within this background operation.
func (this CatalogCSVOperation) GetRowCount() *RowCount { return this.RowCount }

// The status of this operation.
func (this CatalogCSVOperation) GetStatus() ResourceOperationStatus { return this.Status }

func (CatalogCSVOperation) IsPublicationOperation() {}

// Return type for `catalogDelete` mutation.
type CatalogDeletePayload struct {
	// The ID of the deleted catalog.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CatalogUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Catalog and a cursor during pagination.
type CatalogEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CatalogEdge.
	Node Catalog `json:"node"`
}

// The input fields used to update a catalog.
type CatalogUpdateInput struct {
	// The name of the catalog.
	Title *string `json:"title,omitempty,omitempty"`
	// The status of the catalog.
	Status *CatalogStatus `json:"status,omitempty,omitempty"`
	// The context associated with the catalog.
	Context *CatalogContextInput `json:"context,omitempty,omitempty"`
	// The ID of the price list to associate to the catalog.
	PriceListID *string `json:"priceListId,omitempty,omitempty"`
	// The ID of the publication to associate to the catalog.
	PublicationID *string `json:"publicationId,omitempty,omitempty"`
}

// Return type for `catalogUpdate` mutation.
type CatalogUpdatePayload struct {
	// The updated catalog.
	Catalog Catalog `json:"catalog,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CatalogUserError `json:"userErrors,omitempty"`
}

// Defines errors encountered while managing a catalog.
type CatalogUserError struct {
	// The error code.
	Code *CatalogUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CatalogUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CatalogUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CatalogUserError) GetMessage() string { return this.Message }

// A channel represents an app where you sell a group of products and collections.
// A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
type Channel struct {
	// The underlying app used by the channel.
	App *App `json:"app,omitempty"`
	// The collection publications for the list of collections published to the channel.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the channel.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The unique identifier for the channel.
	Handle string `json:"handle"`
	// Whether the collection is available to the channel.
	HasCollection bool `json:"hasCollection"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the channel.
	Name string `json:"name"`
	// The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
	//
	NavigationItems []NavigationItem `json:"navigationItems,omitempty"`
	// Home page for the channel.
	OverviewPath *string `json:"overviewPath,omitempty,omitempty"`
	// The product publications for the products published to the channel.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product publications for the list of products published to the channel.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the channel.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether the channel supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing"`
}

func (Channel) IsNode() {}

// A globally-unique ID.
func (this Channel) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple Channels.
type ChannelConnection struct {
	// A list of edges.
	Edges []ChannelEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ChannelEdge.
	Nodes []Channel `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// A channel definition represents channels surfaces on the platform.
// A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
type ChannelDefinition struct {
	// Name of the channel that this sub channel belongs to.
	ChannelName string `json:"channelName"`
	// Unique string used as a public identifier for the channel definition.
	Handle string `json:"handle"`
	// The unique ID for the channel definition.
	ID string `json:"id"`
	// Whether this channel definition represents a marketplace.
	IsMarketplace bool `json:"isMarketplace"`
	// Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
	SubChannelName string `json:"subChannelName"`
	// Icon displayed when showing the channel in admin.
	SVGIcon *string `json:"svgIcon,omitempty,omitempty"`
}

func (ChannelDefinition) IsNode() {}

// A globally-unique ID.
func (this ChannelDefinition) GetID() string { return this.ID }

// An auto-generated type which holds one Channel and a cursor during pagination.
type ChannelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ChannelEdge.
	Node *Channel `json:"node,omitempty"`
}

// Contains the information for a given sales channel.
type ChannelInformation struct {
	// The app associated with the channel.
	App *App `json:"app,omitempty"`
	// The channel definition associated with the channel.
	ChannelDefinition *ChannelDefinition `json:"channelDefinition,omitempty,omitempty"`
	// The unique ID for the channel.
	ChannelID string `json:"channelId"`
	// A globally-unique ID.
	ID string `json:"id"`
}

func (ChannelInformation) IsNode() {}

// A globally-unique ID.
func (this ChannelInformation) GetID() string { return this.ID }

// A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.
type CheckoutProfile struct {
	// The date and time when the checkout profile was created.
	CreatedAt string `json:"createdAt"`
	// The date and time when the checkout profile was last edited.
	EditedAt string `json:"editedAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the checkout profile is published or not.
	IsPublished bool `json:"isPublished"`
	// The profile name.
	Name string `json:"name"`
	// The date and time when the checkout profile was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (CheckoutProfile) IsNode() {}

// A globally-unique ID.
func (this CheckoutProfile) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple CheckoutProfiles.
type CheckoutProfileConnection struct {
	// A list of edges.
	Edges []CheckoutProfileEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CheckoutProfileEdge.
	Nodes []CheckoutProfile `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
type CheckoutProfileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CheckoutProfileEdge.
	Node *CheckoutProfile `json:"node,omitempty"`
}

// Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
//
// Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
//
// Collections can also be created for a custom group of products. These are called custom or manual collections.
type Collection struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount"`
	// A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
	//
	Description string `json:"description"`
	// The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
	//
	DescriptionHTML string `json:"descriptionHtml"`
	// Information about the collection that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty,omitempty"`
	// A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
	//
	// If the title is changed, the handle doesn't automatically change.
	//
	// The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
	//
	Handle string `json:"handle"`
	// Whether the collection includes the specified product.
	HasProduct bool `json:"hasProduct"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated with the collection.
	Image *Image `json:"image,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The products that are included in the collection.
	Products *ProductConnection `json:"products,omitempty"`
	// The number of products in the collection.
	ProductsCount int `json:"productsCount"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount"`
	// The channels where the collection is published.
	Publications *CollectionPublicationConnection `json:"publications,omitempty"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// For a smart (automated) collection, specifies the rules that determine whether a product is included.
	//
	RuleSet *CollectionRuleSet `json:"ruleSet,omitempty,omitempty"`
	// If the default SEO fields for page title and description have been modified, contains the modified information.
	//
	Seo *Seo `json:"seo,omitempty"`
	// The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
	//
	SortOrder CollectionSortOrder `json:"sortOrder"`
	// The Storefront GraphQL API ID of the `Collection`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
	// The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
	//
	Title string `json:"title"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (Collection) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Collection) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Collection) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Collection) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Collection) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Collection) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Collection) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (Collection) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this Collection) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (Collection) IsNode() {}

// A globally-unique ID.
func (this Collection) GetID() string { return this.ID }

func (Collection) IsPublishable() {}

// The number of publications a resource is published to without feedback errors.
func (this Collection) GetAvailablePublicationCount() int { return this.AvailablePublicationCount }

// The number of publications a resource is published on.
func (this Collection) GetPublicationCount() int { return this.PublicationCount }

// Check to see whether the resource is published to a given channel.
func (this Collection) GetPublishedOnChannel() bool { return this.PublishedOnChannel }

// Check to see whether the resource is published to the calling app's channel.
func (this Collection) GetPublishedOnCurrentChannel() bool { return this.PublishedOnCurrentChannel }

// Check to see whether the resource is published to the calling app's publication.
func (this Collection) GetPublishedOnCurrentPublication() bool {
	return this.PublishedOnCurrentPublication
}

// Check to see whether the resource is published to a given publication.
func (this Collection) GetPublishedOnPublication() bool { return this.PublishedOnPublication }

// The list of resources that are published to a publication.
func (this Collection) GetResourcePublications() *ResourcePublicationConnection {
	return this.ResourcePublications
}

// The list of resources that are either published or staged to be published to a publication.
func (this Collection) GetResourcePublicationsV2() *ResourcePublicationV2Connection {
	return this.ResourcePublicationsV2
}

// The list of channels that the resource is not published to.
func (this Collection) GetUnpublishedChannels() *ChannelConnection { return this.UnpublishedChannels }

// The list of publications that the resource is not published to.
func (this Collection) GetUnpublishedPublications() *PublicationConnection {
	return this.UnpublishedPublications
}

func (Collection) IsMetafieldReference() {}

func (Collection) IsMetafieldReferencer() {}

// Return type for `collectionAddProducts` mutation.
type CollectionAddProductsPayload struct {
	// The updated collection. Returns `null` if an error is raised.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionAddProductsV2` mutation.
type CollectionAddProductsV2Payload struct {
	// The asynchronous job adding the products.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CollectionAddProductsV2UserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CollectionAddProductsV2`.
type CollectionAddProductsV2UserError struct {
	// The error code.
	Code *CollectionAddProductsV2UserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CollectionAddProductsV2UserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CollectionAddProductsV2UserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CollectionAddProductsV2UserError) GetMessage() string { return this.Message }

// An auto-generated type for paginating through multiple Collections.
type CollectionConnection struct {
	// A list of edges.
	Edges []CollectionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CollectionEdge.
	Nodes []Collection `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `collectionCreate` mutation.
type CollectionCreatePayload struct {
	// The collection that has been created.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for specifying the collection to delete.
type CollectionDeleteInput struct {
	// The ID of the collection to be deleted.
	ID string `json:"id"`
}

// Return type for `collectionDelete` mutation.
type CollectionDeletePayload struct {
	// The ID of the collection that was deleted. Returns `null` if the collection doesn't exist.
	DeletedCollectionID *string `json:"deletedCollectionId,omitempty,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Collection and a cursor during pagination.
type CollectionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CollectionEdge.
	Node *Collection `json:"node,omitempty"`
}

// The input fields required to create a collection.
type CollectionInput struct {
	// The description of the collection, in HTML format.
	DescriptionHTML *string `json:"descriptionHtml,omitempty,omitempty"`
	// A unique human-friendly string for the collection. Automatically generated from the collection's title.
	//
	Handle *string `json:"handle,omitempty,omitempty"`
	// Specifies the collection to update or create a new collection if absent. Required for updating a collection.
	//
	ID *string `json:"id,omitempty,omitempty"`
	// The image associated with the collection.
	Image *ImageInput `json:"image,omitempty,omitempty"`
	// Initial list of collection products. Only valid with `collectionCreate` and without rules.
	Products []string `json:"products,omitempty,omitempty"`
	// The rules used to assign products to the collection.
	//
	RuleSet *CollectionRuleSetInput `json:"ruleSet,omitempty,omitempty"`
	// The theme template used when viewing the collection in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
	// The order in which the collection's products are sorted.
	SortOrder *CollectionSortOrder `json:"sortOrder,omitempty,omitempty"`
	// The title of the collection. Required for creating a new collection.
	Title *string `json:"title,omitempty,omitempty"`
	// The metafields to associate with the collection.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// SEO information for the collection.
	Seo *SEOInput `json:"seo,omitempty,omitempty"`
	// Indicates whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	//
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty,omitempty"`
}

// Represents the publications where a collection is published.
type CollectionPublication struct {
	// The channel where the collection will be published.
	Channel *Channel `json:"channel,omitempty"`
	// The collection to be published on the publication.
	Collection *Collection `json:"collection,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished"`
	// The publication where the collection will be published.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the publication was or is going to be published.
	PublishDate string `json:"publishDate"`
}

// An auto-generated type for paginating through multiple CollectionPublications.
type CollectionPublicationConnection struct {
	// A list of edges.
	Edges []CollectionPublicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CollectionPublicationEdge.
	Nodes []CollectionPublication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CollectionPublication and a cursor during pagination.
type CollectionPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CollectionPublicationEdge.
	Node *CollectionPublication `json:"node,omitempty"`
}

// The input fields for publications to which a collection will be published.
type CollectionPublicationInput struct {
	// The ID of the publication.
	PublicationID *string `json:"publicationId,omitempty,omitempty"`
}

// The input fields for specifying a collection to publish and the sales channels to publish it to.
type CollectionPublishInput struct {
	// The collection to create or update publications for.
	ID string `json:"id"`
	// The channels where the collection will be published.
	CollectionPublications []CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionPublish` mutation.
type CollectionPublishPayload struct {
	// The published collection.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// The channels where the collection has been published.
	CollectionPublications []CollectionPublication `json:"collectionPublications,omitempty,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionRemoveProducts` mutation.
type CollectionRemoveProductsPayload struct {
	// The asynchronous job removing the products.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionReorderProducts` mutation.
type CollectionReorderProductsPayload struct {
	// The asynchronous job reordering the products.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents at rule that's used to assign products to a collection.
type CollectionRule struct {
	// The attribute that the rule focuses on. For example, `title` or `product_type`.
	Column CollectionRuleColumn `json:"column"`
	// The value that the operator is applied to. For example, `Hats`.
	Condition string `json:"condition"`
	// The value that the operator is applied to.
	ConditionObject CollectionRuleConditionObject `json:"conditionObject,omitempty"`
	// The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
	//
	Relation CollectionRuleRelation `json:"relation"`
}

// This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.
type CollectionRuleConditions struct {
	// Allowed relations of the rule.
	AllowedRelations []CollectionRuleRelation `json:"allowedRelations,omitempty"`
	// Most commonly used relation for this rule.
	DefaultRelation CollectionRuleRelation `json:"defaultRelation"`
	// Additional attributes defining the rule.
	RuleObject CollectionRuleConditionsRuleObject `json:"ruleObject,omitempty"`
	// Type of the rule.
	RuleType CollectionRuleColumn `json:"ruleType"`
}

// The input fields for a rule to associate with a collection.
type CollectionRuleInput struct {
	// The attribute that the rule focuses on. For example, `title` or `product_type`.
	Column CollectionRuleColumn `json:"column"`
	// The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
	//
	Relation CollectionRuleRelation `json:"relation"`
	// The value that the operator is applied to. For example, `Hats`.
	Condition string `json:"condition"`
	// The object ID that points to additional attributes for the collection rule.
	// This is only required when using metafield definition rules.
	//
	ConditionObjectID *string `json:"conditionObjectId,omitempty,omitempty"`
}

// Identifies a metafield definition used as a rule for the smart collection.
type CollectionRuleMetafieldCondition struct {
	// The metafield definition associated with the condition.
	MetafieldDefinition *MetafieldDefinition `json:"metafieldDefinition,omitempty"`
}

func (CollectionRuleMetafieldCondition) IsCollectionRuleConditionObject() {}

func (CollectionRuleMetafieldCondition) IsCollectionRuleConditionsRuleObject() {}

// Specifies the condition for a Product Category field.
type CollectionRuleProductCategoryCondition struct {
	// The value of the condition.
	Value *ProductTaxonomyNode `json:"value,omitempty"`
}

func (CollectionRuleProductCategoryCondition) IsCollectionRuleConditionObject() {}

// The set of rules that are used to determine which products are included in the collection.
type CollectionRuleSet struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match at least one of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	//
	AppliedDisjunctively bool `json:"appliedDisjunctively"`
	// The rules used to assign products to the collection.
	Rules []CollectionRule `json:"rules,omitempty"`
}

// The input fields for a rule set of the collection.
type CollectionRuleSetInput struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match at least one of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	//
	AppliedDisjunctively bool `json:"appliedDisjunctively"`
	// The rules used to assign products to the collection.
	Rules []CollectionRuleInput `json:"rules,omitempty,omitempty"`
}

// Specifies the condition for a text field.
type CollectionRuleTextCondition struct {
	// The value of the condition.
	Value string `json:"value"`
}

func (CollectionRuleTextCondition) IsCollectionRuleConditionObject() {}

// The input fields for specifying the collection to unpublish and the sales channels to remove it from.
type CollectionUnpublishInput struct {
	// The collection to create or update publications for.
	ID string `json:"id"`
	// The channels where the collection is published.
	CollectionPublications []CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionUnpublish` mutation.
type CollectionUnpublishPayload struct {
	// The collection that has been unpublished.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionUpdate` mutation.
type CollectionUpdatePayload struct {
	// The updated collection.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// The asynchronous job updating the products based on the new rule set.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Comment events are generated by staff members of a shop.
// They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
type CommentEvent struct {
	// The name of the app that created the event.
	AppTitle *string `json:"appTitle,omitempty,omitempty"`
	// The attachments associated with the comment event.
	Attachments []CommentEventAttachment `json:"attachments,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser"`
	// The name of the user that authored the comment event.
	Author *StaffMember `json:"author,omitempty"`
	// Whether the comment event can be deleted. If true, then the comment event can be deleted.
	CanDelete bool `json:"canDelete"`
	// Whether the comment event can be edited. If true, then the comment event can be edited.
	CanEdit bool `json:"canEdit"`
	// The date and time when the event was created.
	CreatedAt string `json:"createdAt"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert"`
	// Whether the comment event has been edited. If true, then the comment event has been edited.
	Edited bool `json:"edited"`
	// The object reference associated with the comment event. For example, a product or discount).
	Embed CommentEventEmbed `json:"embed,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Human readable text that describes the event.
	Message string `json:"message"`
	// The raw body of the comment event.
	RawMessage string `json:"rawMessage"`
	// The parent subject to which the comment event belongs.
	Subject CommentEventSubject `json:"subject"`
}

func (CommentEvent) IsEvent() {}

// The name of the app that created the event.
func (this CommentEvent) GetAppTitle() *string { return this.AppTitle }

// Whether the event was created by an app.
func (this CommentEvent) GetAttributeToApp() bool { return this.AttributeToApp }

// Whether the event was caused by an admin user.
func (this CommentEvent) GetAttributeToUser() bool { return this.AttributeToUser }

// The date and time when the event was created.
func (this CommentEvent) GetCreatedAt() string { return this.CreatedAt }

// Whether the event is critical.
func (this CommentEvent) GetCriticalAlert() bool { return this.CriticalAlert }

// A globally-unique ID.
func (this CommentEvent) GetID() string { return this.ID }

// Human readable text that describes the event.
func (this CommentEvent) GetMessage() string { return this.Message }

func (CommentEvent) IsNode() {}

// A globally-unique ID.

// A file attachment associated to a comment event.
type CommentEventAttachment struct {
	// The file extension of the comment event attachment, indicating the file format.
	FileExtension *string `json:"fileExtension,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image attached to the comment event.
	Image *Image `json:"image,omitempty,omitempty"`
	// The filename of the comment event attachment.
	Name string `json:"name"`
	// The size of the attachment.
	Size int `json:"size"`
	// The URL of the attachment.
	URL string `json:"url"`
}

// Return type for `companiesDelete` mutation.
type CompaniesDeletePayload struct {
	// A list of IDs of the deleted companies.
	DeletedCompanyIds []string `json:"deletedCompanyIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Represents information about a company which is also a customer of the shop.
type Company struct {
	// The number of contacts that belong to the company.
	ContactCount int `json:"contactCount"`
	// The list of roles for the company contacts.
	ContactRoles *CompanyContactRoleConnection `json:"contactRoles,omitempty"`
	// The list of contacts in the company.
	Contacts *CompanyContactConnection `json:"contacts,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
	CustomerSince string `json:"customerSince"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// The role proposed by default for a contact at the company.
	DefaultRole *CompanyContactRole `json:"defaultRole,omitempty,omitempty"`
	// The list of the company's draft orders.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A unique externally-supplied ID for the company.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// Whether the merchant added a timeline comment to the company.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
	LifetimeDuration string `json:"lifetimeDuration"`
	// The number of locations that belong to the company.
	LocationCount int `json:"locationCount"`
	// The list of locations in the company.
	Locations *CompanyLocationConnection `json:"locations,omitempty"`
	// The main contact for the company.
	MainContact *CompanyContact `json:"mainContact,omitempty,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The name of the company.
	Name string `json:"name"`
	// A note about the company.
	Note *string `json:"note,omitempty,omitempty"`
	// The total number of orders placed for this company, across all its locations.
	OrderCount int `json:"orderCount"`
	// The list of the company's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The total amount spent by this company, across all its locations.
	TotalSpent *MoneyV2 `json:"totalSpent,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
	UpdatedAt string `json:"updatedAt"`
}

func (Company) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this Company) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this Company) GetID() string { return this.ID }

func (Company) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this Company) GetEvents() *EventConnection { return this.Events }

func (Company) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Company) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Company) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Company) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Company) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Company) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Company) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

func (Company) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this Company) GetDefaultCursor() string { return this.DefaultCursor }

func (Company) IsNode() {}

// A globally-unique ID.

// Represents a billing or shipping address for a company location.
type CompanyAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 string `json:"address1"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The name of the company.
	CompanyName string `json:"companyName"`
	// The name of the country.
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	//
	CountryCode CountryCode `json:"countryCode"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
	//
	CreatedAt string `json:"createdAt"`
	// The formatted version of the address.
	FormattedAddress []string `json:"formattedAddress,omitempty"`
	// A comma-separated list of the values for city, province, and country.
	FormattedArea *string `json:"formattedArea,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// A unique phone number for the customer.
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The identity of the recipient e.g. 'Receiving Department'.
	Recipient *string `json:"recipient,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated.
	//
	UpdatedAt string `json:"updatedAt"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	//
	ZoneCode *string `json:"zoneCode,omitempty,omitempty"`
}

func (CompanyAddress) IsNode() {}

// A globally-unique ID.
func (this CompanyAddress) GetID() string { return this.ID }

// Return type for `companyAddressDelete` mutation.
type CompanyAddressDeletePayload struct {
	// The ID of the deleted address.
	DeletedAddressID *string `json:"deletedAddressId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update the address of a company location.
type CompanyAddressInput struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
	// The identity of the recipient e.g. 'Receiving Department'.
	Recipient *string `json:"recipient,omitempty,omitempty"`
	// A phone number for the recipient. Formatted using E.164 standard. For example, _+16135551111_.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The two-letter code ([ISO 3166-2 alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-2) format) for the region of the address, such as the province, state, or district. For example, `ON` for Ontario, Canada.
	ZoneCode *string `json:"zoneCode,omitempty,omitempty"`
	// The two-letter code ([ISO 3166-1 alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the address. For example, `US`` for the United States.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
}

// Return type for `companyAssignCustomerAsContact` mutation.
type CompanyAssignCustomerAsContactPayload struct {
	// The created company contact.
	CompanyContact *CompanyContact `json:"companyContact,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyAssignMainContact` mutation.
type CompanyAssignMainContactPayload struct {
	// The company for which the main contact is assigned.
	Company *Company `json:"company,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Companies.
type CompanyConnection struct {
	// A list of edges.
	Edges []CompanyEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CompanyEdge.
	Nodes []Company `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
type CompanyContact struct {
	// The company to which the contact belongs.
	Company *Company `json:"company,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify.
	CreatedAt string `json:"createdAt"`
	// The customer associated to this contact.
	Customer *Customer `json:"customer,omitempty"`
	// The list of draft orders for the company contact.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the contact is the main contact of the company.
	IsMainContact bool `json:"isMainContact"`
	// The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`.
	LifetimeDuration string `json:"lifetimeDuration"`
	// The company contact's locale (language).
	Locale *string `json:"locale,omitempty,omitempty"`
	// The list of orders for the company contact.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The list of roles assigned to this company contact.
	RoleAssignments *CompanyContactRoleAssignmentConnection `json:"roleAssignments,omitempty"`
	// The company contact's job title.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (CompanyContact) IsNode() {}

// A globally-unique ID.
func (this CompanyContact) GetID() string { return this.ID }

// Return type for `companyContactAssignRole` mutation.
type CompanyContactAssignRolePayload struct {
	// The company contact role assignment.
	CompanyContactRoleAssignment *CompanyContactRoleAssignment `json:"companyContactRoleAssignment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactAssignRoles` mutation.
type CompanyContactAssignRolesPayload struct {
	// A list of newly created assignments of company contacts to a company location.
	RoleAssignments []CompanyContactRoleAssignment `json:"roleAssignments,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple CompanyContacts.
type CompanyContactConnection struct {
	// A list of edges.
	Edges []CompanyContactEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CompanyContactEdge.
	Nodes []CompanyContact `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `companyContactCreate` mutation.
type CompanyContactCreatePayload struct {
	// The created company contact.
	CompanyContact *CompanyContact `json:"companyContact,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactDelete` mutation.
type CompanyContactDeletePayload struct {
	// The ID of the deleted company contact.
	DeletedCompanyContactID *string `json:"deletedCompanyContactId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one CompanyContact and a cursor during pagination.
type CompanyContactEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CompanyContactEdge.
	Node *CompanyContact `json:"node,omitempty"`
}

// The input fields for company contact attributes when creating or updating a company contact.
type CompanyContactInput struct {
	// The company contact's first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The company contact's last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The unique email address of the company contact.
	Email *string `json:"email,omitempty,omitempty"`
	// The title of the company contact.
	Title *string `json:"title,omitempty,omitempty"`
	// The contact's locale.
	Locale *string `json:"locale,omitempty,omitempty"`
	// The phone number of the company contact.
	Phone *string `json:"phone,omitempty,omitempty"`
}

// Return type for `companyContactRemoveFromCompany` mutation.
type CompanyContactRemoveFromCompanyPayload struct {
	// The ID of the removed company contact.
	RemovedCompanyContactID *string `json:"removedCompanyContactId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactRevokeRole` mutation.
type CompanyContactRevokeRolePayload struct {
	// The role assignment that was revoked.
	RevokedCompanyContactRoleAssignmentID *string `json:"revokedCompanyContactRoleAssignmentId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactRevokeRoles` mutation.
type CompanyContactRevokeRolesPayload struct {
	// A list of role assignment IDs that were removed from the company contact.
	RevokedRoleAssignmentIds []string `json:"revokedRoleAssignmentIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
type CompanyContactRole struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of a role.
	// For example, `admin` or `buyer`.
	//
	Name string `json:"name"`
	// A note for the role.
	Note *string `json:"note,omitempty,omitempty"`
}

func (CompanyContactRole) IsNode() {}

// A globally-unique ID.
func (this CompanyContactRole) GetID() string { return this.ID }

// The input fields for the role and location to assign to a company contact.
type CompanyContactRoleAssign struct {
	// The role ID.
	CompanyContactRoleID string `json:"companyContactRoleId"`
	// The location.
	CompanyLocationID string `json:"companyLocationId"`
}

// The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
type CompanyContactRoleAssignment struct {
	// The company this role assignment belongs to.
	Company *Company `json:"company,omitempty"`
	// The company contact for whom this role is assigned.
	CompanyContact *CompanyContact `json:"companyContact,omitempty"`
	// The company location to which the role is assigned.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The role that is assigned to the company contact.
	Role *CompanyContactRole `json:"role,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (CompanyContactRoleAssignment) IsNode() {}

// A globally-unique ID.
func (this CompanyContactRoleAssignment) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
type CompanyContactRoleAssignmentConnection struct {
	// A list of edges.
	Edges []CompanyContactRoleAssignmentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CompanyContactRoleAssignmentEdge.
	Nodes []CompanyContactRoleAssignment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
type CompanyContactRoleAssignmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CompanyContactRoleAssignmentEdge.
	Node *CompanyContactRoleAssignment `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple CompanyContactRoles.
type CompanyContactRoleConnection struct {
	// A list of edges.
	Edges []CompanyContactRoleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CompanyContactRoleEdge.
	Nodes []CompanyContactRole `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
type CompanyContactRoleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CompanyContactRoleEdge.
	Node *CompanyContactRole `json:"node,omitempty"`
}

// Return type for `companyContactSendWelcomeEmail` mutation.
type CompanyContactSendWelcomeEmailPayload struct {
	// The company contact to whom a welcome email was sent.
	CompanyContact *CompanyContact `json:"companyContact,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactUpdate` mutation.
type CompanyContactUpdatePayload struct {
	// The updated company contact.
	CompanyContact *CompanyContact `json:"companyContact,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyContactsDelete` mutation.
type CompanyContactsDeletePayload struct {
	// The list of IDs of the deleted company contacts.
	DeletedCompanyContactIds []string `json:"deletedCompanyContactIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// The input fields and values for creating a company and its associated resources.
type CompanyCreateInput struct {
	// The attributes for the company.
	Company *CompanyInput `json:"company,omitempty"`
	// The attributes for the company contact.
	CompanyContact *CompanyContactInput `json:"companyContact,omitempty,omitempty"`
	// The attributes for the company location.
	CompanyLocation *CompanyLocationInput `json:"companyLocation,omitempty,omitempty"`
}

// Return type for `companyCreate` mutation.
type CompanyCreatePayload struct {
	// The created company.
	Company *Company `json:"company,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyDelete` mutation.
type CompanyDeletePayload struct {
	// The ID of the deleted company.
	DeletedCompanyID *string `json:"deletedCompanyId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Company and a cursor during pagination.
type CompanyEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CompanyEdge.
	Node *Company `json:"node,omitempty"`
}

// The input fields for company attributes when creating or updating a company.
type CompanyInput struct {
	// The name of the company.
	Name *string `json:"name,omitempty,omitempty"`
	// A note about the company.
	Note *string `json:"note,omitempty,omitempty"`
	// A unique externally-supplied ID for the company.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at
	// which the company became the customer.
	CustomerSince *string `json:"customerSince,omitempty,omitempty"`
}

// A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.
type CompanyLocation struct {
	// The address used as billing address for the location.
	BillingAddress *CompanyAddress `json:"billingAddress,omitempty,omitempty"`
	// The configuration for the buyer's B2B checkout.
	BuyerExperienceConfiguration *BuyerExperienceConfiguration `json:"buyerExperienceConfiguration,omitempty,omitempty"`
	// The list of catalogs associated with the company location.
	Catalogs *CatalogConnection `json:"catalogs,omitempty"`
	// The company that the company location belongs to.
	Company *Company `json:"company,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market.
	Currency CurrencyCode `json:"currency"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// The list of draft orders for the company location.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A unique externally-supplied ID for the company location.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// Whether the merchant added a timeline comment to the company location.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the company location is assigned a specific catalog.
	InCatalog bool `json:"inCatalog"`
	// The preferred locale of the company location.
	Locale *string `json:"locale,omitempty,omitempty"`
	// The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market.
	Market *Market `json:"market,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The name of the company location.
	Name string `json:"name"`
	// A note about the company location.
	Note *string `json:"note,omitempty,omitempty"`
	// The total number of orders placed for the location.
	OrderCount int `json:"orderCount"`
	// The list of orders for the company location.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The phone number of the company location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The list of roles assigned to the company location.
	RoleAssignments *CompanyContactRoleAssignmentConnection `json:"roleAssignments,omitempty"`
	// The address used as shipping address for the location.
	ShippingAddress *CompanyAddress `json:"shippingAddress,omitempty,omitempty"`
	// The list of tax exemptions applied to the location.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
	// The tax registration ID for the company location.
	TaxRegistrationID *string `json:"taxRegistrationId,omitempty,omitempty"`
	// The total amount spent by the location.
	TotalSpent *MoneyV2 `json:"totalSpent,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified.
	UpdatedAt string `json:"updatedAt"`
}

func (CompanyLocation) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this CompanyLocation) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this CompanyLocation) GetID() string { return this.ID }

func (CompanyLocation) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this CompanyLocation) GetEvents() *EventConnection { return this.Events }

func (CompanyLocation) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this CompanyLocation) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (CompanyLocation) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this CompanyLocation) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this CompanyLocation) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this CompanyLocation) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this CompanyLocation) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (CompanyLocation) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this CompanyLocation) GetDefaultCursor() string { return this.DefaultCursor }

func (CompanyLocation) IsNode() {}

// A globally-unique ID.

// Return type for `companyLocationAssignAddress` mutation.
type CompanyLocationAssignAddressPayload struct {
	// The list of updated addresses on the company location.
	Addresses []CompanyAddress `json:"addresses,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationAssignRoles` mutation.
type CompanyLocationAssignRolesPayload struct {
	// A list of newly created assignments of company contacts to a company location.
	RoleAssignments []CompanyContactRoleAssignment `json:"roleAssignments,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationAssignTaxExemptions` mutation.
type CompanyLocationAssignTaxExemptionsPayload struct {
	// The updated company location.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// A list of products with publishing and pricing information associated with company locations.
type CompanyLocationCatalog struct {
	// The company locations associated with the catalog.
	CompanyLocations *CompanyLocationConnection `json:"companyLocations,omitempty"`
	// The number of company locations associated with the catalog.
	CompanyLocationsCount int `json:"companyLocationsCount"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Most recent catalog operations.
	Operations []ResourceOperation `json:"operations,omitempty"`
	// The price list associated with the catalog.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// A group of products and collections that's published to a catalog.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The status of the catalog.
	Status CatalogStatus `json:"status"`
	// The name of the catalog.
	Title string `json:"title"`
}

func (CompanyLocationCatalog) IsCatalog() {}

// A globally-unique ID.
func (this CompanyLocationCatalog) GetID() string { return this.ID }

// Most recent catalog operations.
func (this CompanyLocationCatalog) GetOperations() []ResourceOperation {
	if this.Operations == nil {
		return nil
	}
	interfaceSlice := make([]ResourceOperation, 0, len(this.Operations))
	for _, concrete := range this.Operations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The price list associated with the catalog.
func (this CompanyLocationCatalog) GetPriceList() *PriceList { return this.PriceList }

// A group of products and collections that's published to a catalog.
func (this CompanyLocationCatalog) GetPublication() *Publication { return this.Publication }

// The status of the catalog.
func (this CompanyLocationCatalog) GetStatus() CatalogStatus { return this.Status }

// The name of the catalog.
func (this CompanyLocationCatalog) GetTitle() string { return this.Title }

func (CompanyLocationCatalog) IsNode() {}

// A globally-unique ID.

// An auto-generated type for paginating through multiple CompanyLocations.
type CompanyLocationConnection struct {
	// A list of edges.
	Edges []CompanyLocationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CompanyLocationEdge.
	Nodes []CompanyLocation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `companyLocationCreate` mutation.
type CompanyLocationCreatePayload struct {
	// The created company location.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationCreateTaxRegistration` mutation.
type CompanyLocationCreateTaxRegistrationPayload struct {
	// The company location with the created tax registration.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationDelete` mutation.
type CompanyLocationDeletePayload struct {
	// The ID of the deleted company location.
	DeletedCompanyLocationID *string `json:"deletedCompanyLocationId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one CompanyLocation and a cursor during pagination.
type CompanyLocationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CompanyLocationEdge.
	Node *CompanyLocation `json:"node,omitempty"`
}

// The input fields for company location when creating or updating a company location.
type CompanyLocationInput struct {
	// The name of the company location.
	Name *string `json:"name,omitempty,omitempty"`
	// The phone number of the company location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The preferred locale of the company location.
	Locale *string `json:"locale,omitempty,omitempty"`
	// A unique externally-supplied ID for the company location.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// A note about the company location.
	Note *string `json:"note,omitempty,omitempty"`
	// The configuration for the buyer's checkout at the company location.
	BuyerExperienceConfiguration *BuyerExperienceConfigurationInput `json:"buyerExperienceConfiguration,omitempty,omitempty"`
	// The input fields to create or update the billing address for a company location.
	BillingAddress *CompanyAddressInput `json:"billingAddress,omitempty,omitempty"`
	// The input fields to create or update the shipping address for a company location.
	ShippingAddress *CompanyAddressInput `json:"shippingAddress,omitempty,omitempty"`
	// Whether the billing address is the same as the shipping address. If the value is true, then the input for `billingAddress` is ignored.
	BillingSameAsShipping *bool `json:"billingSameAsShipping,omitempty,omitempty"`
	// The tax registration ID of the company location.
	TaxRegistrationID *string `json:"taxRegistrationId,omitempty,omitempty"`
	// The list of tax exemptions to apply to the company location.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty,omitempty"`
}

// Return type for `companyLocationRevokeRoles` mutation.
type CompanyLocationRevokeRolesPayload struct {
	// A list of role assignment IDs that were removed from the company location.
	RevokedRoleAssignmentIds []string `json:"revokedRoleAssignmentIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationRevokeTaxExemptions` mutation.
type CompanyLocationRevokeTaxExemptionsPayload struct {
	// The updated company location.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationRevokeTaxRegistration` mutation.
type CompanyLocationRevokeTaxRegistrationPayload struct {
	// The updated company location.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// The input fields for the role and contact to assign on a location.
type CompanyLocationRoleAssign struct {
	// The role ID.
	CompanyContactRoleID string `json:"companyContactRoleId"`
	// The company contact ID..
	CompanyContactID string `json:"companyContactId"`
}

// The input fields for company location when creating or updating a company location.
type CompanyLocationUpdateInput struct {
	// The name of the company location.
	Name *string `json:"name,omitempty,omitempty"`
	// The phone number of the company location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The preferred locale of the company location.
	Locale *string `json:"locale,omitempty,omitempty"`
	// A unique externally-supplied ID for the company location.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// A note about the company location.
	Note *string `json:"note,omitempty,omitempty"`
	// The configuration for the buyer's checkout at the company location.
	BuyerExperienceConfiguration *BuyerExperienceConfigurationInput `json:"buyerExperienceConfiguration,omitempty,omitempty"`
}

// Return type for `companyLocationUpdate` mutation.
type CompanyLocationUpdatePayload struct {
	// The updated company location.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyLocationsDelete` mutation.
type CompanyLocationsDeletePayload struct {
	// A list of IDs of the deleted company locations.
	DeletedCompanyLocationIds []string `json:"deletedCompanyLocationIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyRevokeMainContact` mutation.
type CompanyRevokeMainContactPayload struct {
	// The company from which the main contact is revoked.
	Company *Company `json:"company,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// Return type for `companyUpdate` mutation.
type CompanyUpdatePayload struct {
	// The updated company.
	Company *Company `json:"company,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BusinessCustomerUserError `json:"userErrors,omitempty"`
}

// The input fields for the context data that determines the pricing of a variant.
type ContextualPricingContext struct {
	// The country code used to fetch country-specific prices.
	Country *CountryCode `json:"country,omitempty,omitempty"`
	// The CompanyLocation ID used to fetch company location specific prices.
	//
	CompanyLocationID *string `json:"companyLocationId,omitempty,omitempty"`
}

// The context data that determines the publication status of a product.
type ContextualPublicationContext struct {
	// The country code used to fetch country-specific publication.
	Country *CountryCode `json:"country,omitempty,omitempty"`
	// The company location ID used to fetch company-specific publication.
	CompanyLocationID *string `json:"companyLocationId,omitempty,omitempty"`
}

// The list of all the countries from the combined shipping zones for the shop.
type CountriesInShippingZones struct {
	// The list of all the countries from all the combined shipping zones.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether 'Rest of World' has been defined in any of the shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
}

// The country-specific harmonized system code and ISO country code for an inventory item.
type CountryHarmonizedSystemCode struct {
	// The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
	CountryCode CountryCode `json:"countryCode"`
	// The country-specific harmonized system code. These are usually longer than 6 digits.
	HarmonizedSystemCode string `json:"harmonizedSystemCode"`
}

// An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
type CountryHarmonizedSystemCodeConnection struct {
	// A list of edges.
	Edges []CountryHarmonizedSystemCodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CountryHarmonizedSystemCodeEdge.
	Nodes []CountryHarmonizedSystemCode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
type CountryHarmonizedSystemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CountryHarmonizedSystemCodeEdge.
	Node *CountryHarmonizedSystemCode `json:"node,omitempty"`
}

// The input fields required to specify a harmonized system code.
type CountryHarmonizedSystemCodeInput struct {
	// Country specific harmonized system code.
	HarmonizedSystemCode string `json:"harmonizedSystemCode"`
	// The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
	CountryCode CountryCode `json:"countryCode"`
}

// The input fields required to create a media object.
type CreateMediaInput struct {
	// The original source of the media object. This might be an external URL or a staged upload URL.
	OriginalSource string `json:"originalSource"`
	// The alt text associated with the media.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
}

// Currency formats configured for the merchant. These formats are available to use within Liquid.
type CurrencyFormats struct {
	// Money without currency in HTML.
	MoneyFormat string `json:"moneyFormat"`
	// Money without currency in emails.
	MoneyInEmailsFormat string `json:"moneyInEmailsFormat"`
	// Money with currency in HTML.
	MoneyWithCurrencyFormat string `json:"moneyWithCurrencyFormat"`
	// Money with currency in emails.
	MoneyWithCurrencyInEmailsFormat string `json:"moneyWithCurrencyInEmailsFormat"`
}

// A setting for a presentment currency.
type CurrencySetting struct {
	// The currency's ISO code.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The full name of the currency.
	CurrencyName string `json:"currencyName"`
	// Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
	Enabled bool `json:"enabled"`
	// The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
	RateUpdatedAt *string `json:"rateUpdatedAt,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple CurrencySettings.
type CurrencySettingConnection struct {
	// A list of edges.
	Edges []CurrencySettingEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CurrencySettingEdge.
	Nodes []CurrencySetting `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CurrencySetting and a cursor during pagination.
type CurrencySettingEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CurrencySettingEdge.
	Node *CurrencySetting `json:"node,omitempty"`
}

// The input fields for a custom shipping package used to pack shipment.
type CustomShippingPackageInput struct {
	// Weight of the empty shipping package.
	Weight *WeightInput `json:"weight,omitempty,omitempty"`
	// Outside dimensions of the empty shipping package.
	Dimensions *ObjectDimensionsInput `json:"dimensions,omitempty,omitempty"`
	// The default package is the one used to calculate shipping costs on checkout.
	Default *bool `json:"default,omitempty,omitempty"`
	// Descriptive name for the package.
	Name *string `json:"name,omitempty,omitempty"`
	// Type of package.
	Type *ShippingPackageType `json:"type,omitempty,omitempty"`
}

// Represents information about a customer of the shop, such as the customer's contact details, their order
// history, and whether they've agreed to receive marketing material by email.
//
// **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type Customer struct {
	// Whether the customer has agreed to receive marketing material.
	AcceptsMarketing bool `json:"acceptsMarketing"`
	// The date and time when the customer consented or objected to receiving marketing material by email.
	//
	AcceptsMarketingUpdatedAt string `json:"acceptsMarketingUpdatedAt"`
	// A list of addresses associated with the customer.
	Addresses []MailingAddress `json:"addresses,omitempty"`
	// The total amount that the customer has spent on orders in their lifetime.
	AmountSpent *MoneyV2 `json:"amountSpent,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmount *null.String `json:"averageOrderAmount,omitempty,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmountV2 *MoneyV2 `json:"averageOrderAmountV2,omitempty,omitempty"`
	// Whether the merchant can delete the customer from their store.
	//
	// A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
	// order, they can't be deleted from a store.
	//
	CanDelete bool `json:"canDelete"`
	// A list of the customer's company contact profiles.
	CompanyContactProfiles []CompanyContact `json:"companyContactProfiles,omitempty"`
	// The date and time when the customer was added to the store.
	CreatedAt string `json:"createdAt"`
	// The default address associated with the customer.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty,omitempty"`
	// The full name of the customer, based on the values for first_name and last_name. If the first_name and
	// last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
	//
	DisplayName string `json:"displayName"`
	// The customer's email address.
	Email *string `json:"email,omitempty,omitempty"`
	// The current email marketing state for the customer.
	// If the customer doesn't have an email address, then this property is `null`.
	//
	EmailMarketingConsent *CustomerEmailMarketingConsentState `json:"emailMarketingConsent,omitempty,omitempty"`
	// A list of events associated with the customer.
	Events *EventConnection `json:"events,omitempty"`
	// The customer's first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// Whether the merchant has added timeline comments about the customer on the customer's page.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated with the customer.
	Image *Image `json:"image,omitempty"`
	// The customer's last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The customer's last order.
	LastOrder *Order `json:"lastOrder,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The amount of time since the customer was first added to the store.
	//
	// Example: 'about 12 years'.
	//
	LifetimeDuration string `json:"lifetimeDuration"`
	// The customer's locale.
	Locale string `json:"locale"`
	// The market that includes the customer’s default address.
	Market *Market `json:"market,omitempty,omitempty"`
	// The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
	// customer gave when they consented to receive marketing material by email.
	//
	// If the customer does not accept email marketing, then this property is `null`.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty,omitempty"`
	// Whether the customer can be merged with another customer.
	Mergeable *CustomerMergeable `json:"mergeable,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// A unique identifier for the customer that's used with Multipass login.
	MultipassIdentifier *string `json:"multipassIdentifier,omitempty,omitempty"`
	// A note about the customer.
	Note *string `json:"note,omitempty,omitempty"`
	// The number of orders that the customer has made at the store in their lifetime.
	NumberOfOrders string `json:"numberOfOrders"`
	// A list of the customer's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// A list of the customer's payment methods.
	PaymentMethods *CustomerPaymentMethodConnection `json:"paymentMethods,omitempty"`
	// The customer's phone number.
	Phone *string `json:"phone,omitempty,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Possible subscriber states of a customer defined by their subscription contracts.
	ProductSubscriberStatus CustomerProductSubscriberStatus `json:"productSubscriberStatus"`
	// The current SMS marketing state for the customer's phone number.
	//
	// If the customer does not have a phone number, then this property is `null`.
	//
	SmsMarketingConsent *CustomerSmsMarketingConsentState `json:"smsMarketingConsent,omitempty,omitempty"`
	// The state of the customer's account with the shop.
	State CustomerState `json:"state"`
	// The statistics for a given customer.
	Statistics *CustomerStatistics `json:"statistics,omitempty"`
	// A list of the customer's subscription contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
	// A comma separated list of tags that have been added to the customer.
	Tags []string `json:"tags,omitempty"`
	// Whether the customer is exempt from being charged taxes on their orders.
	TaxExempt bool `json:"taxExempt"`
	// The list of tax exemptions applied to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
	// The URL to unsubscribe the customer from the mailing list.
	UnsubscribeURL string `json:"unsubscribeUrl"`
	// The date and time when the customer was last updated.
	UpdatedAt string `json:"updatedAt"`
	// Whether the email address is formatted correctly.
	//
	// Returns `true` when the email is formatted correctly and
	// belongs to an existing domain. This doesn't guarantee that
	// the email address actually exists.
	//
	ValidEmailAddress bool `json:"validEmailAddress"`
	// Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
	VerifiedEmail bool `json:"verifiedEmail"`
}

func (Customer) IsCommentEventEmbed() {}

func (Customer) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this Customer) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this Customer) GetID() string { return this.ID }

func (Customer) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this Customer) GetEvents() *EventConnection { return this.Events }

func (Customer) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Customer) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Customer) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Customer) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Customer) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Customer) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Customer) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (Customer) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Customer) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Customer) IsNode() {}

// A globally-unique ID.

func (Customer) IsMetafieldReferencer() {}

func (Customer) IsPurchasingEntity() {}

// Return type for `customerAddTaxExemptions` mutation.
type CustomerAddTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Customers.
type CustomerConnection struct {
	// A list of edges.
	Edges []CustomerEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CustomerEdge.
	Nodes []Customer `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerCreate` mutation.
type CustomerCreatePayload struct {
	// The created customer.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a card instrument for customer payment method.
type CustomerCreditCard struct {
	// The billing address of the card.
	BillingAddress *CustomerCreditCardBillingAddress `json:"billingAddress,omitempty,omitempty"`
	// The brand of the card.
	Brand string `json:"brand"`
	// Whether the card is about to expire.
	ExpiresSoon bool `json:"expiresSoon"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear"`
	// The card's BIN number.
	FirstDigits *string `json:"firstDigits,omitempty,omitempty"`
	// The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The last 4 digits of the card.
	LastDigits string `json:"lastDigits"`
	// The masked card number with only the last 4 digits displayed.
	MaskedNumber string `json:"maskedNumber"`
	// The name of the card holder.
	Name string `json:"name"`
	// The source of the card if coming from a wallet such as Apple Pay.
	Source *string `json:"source,omitempty,omitempty"`
	// The last 4 digits of the Device Account Number.
	VirtualLastDigits *string `json:"virtualLastDigits,omitempty,omitempty"`
}

func (CustomerCreditCard) IsCustomerPaymentInstrument() {}

// The billing address of a credit card payment instrument.
type CustomerCreditCardBillingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The first name in the billing address.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The last name in the billing address.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// The input fields to delete a customer.
type CustomerDeleteInput struct {
	// The ID of the customer to delete.
	ID string `json:"id"`
}

// Return type for `customerDelete` mutation.
type CustomerDeletePayload struct {
	// The ID of the deleted customer.
	DeletedCustomerID *string `json:"deletedCustomerId,omitempty,omitempty"`
	// The shop of the deleted customer.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Customer and a cursor during pagination.
type CustomerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerEdge.
	Node *Customer `json:"node,omitempty"`
}

// Represents an email address.
type CustomerEmailAddress struct {
	// The customer's default email address.
	EmailAddress string `json:"emailAddress"`
	// Whether the customer has subscribed to email marketing.
	MarketingState CustomerEmailAddressMarketingState `json:"marketingState"`
	// The URL to unsubscribe a member from all mailing lists.
	MarketingUnsubscribeURL string `json:"marketingUnsubscribeUrl"`
	// Whether the customer has opted in to having their opened emails tracked.
	//
	OpenTrackingLevel CustomerEmailAddressOpenTrackingLevel `json:"openTrackingLevel"`
	// The URL that can be used to opt a customer in or out of email open tracking.
	//
	OpenTrackingURL string `json:"openTrackingUrl"`
}

// Information that describes when a customer consented to
// receiving marketing material by email.
type CustomerEmailMarketingConsentInput struct {
	// The customer opt-in level at the time of subscribing to marketing material.
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty,omitempty"`
	// The current marketing state associated with the customer's email.
	// If the customer doesn't have an email, then this field is `null`.
	MarketingState CustomerEmailMarketingState `json:"marketingState"`
	// The latest date and time when the customer consented or objected to
	// receiving marketing material by email.
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty,omitempty"`
}

// The record of when a customer consented to receive marketing material by email.
type CustomerEmailMarketingConsentState struct {
	// The date and time at which the customer consented to receive marketing material by email.
	// The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
	// If no date is provided, then the date and time at which the consent information was sent is used.
	//
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty,omitempty"`
	// The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
	// that the customer gave when they consented to receive marketing material by email.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty,omitempty"`
	// The current email marketing state for the customer.
	MarketingState CustomerEmailMarketingState `json:"marketingState"`
}

// The input fields for the email consent information to update for a given customer ID.
type CustomerEmailMarketingConsentUpdateInput struct {
	// The ID of the customer for which to update the email marketing consent information. The customer must have a unique email address associated to the record. If not, add the email address using the `customerUpdate` mutation first.
	CustomerID string `json:"customerId"`
	// The marketing consent information when the customer consented to receiving marketing material by email.
	EmailMarketingConsent *CustomerEmailMarketingConsentInput `json:"emailMarketingConsent,omitempty"`
}

// Return type for `customerEmailMarketingConsentUpdate` mutation.
type CustomerEmailMarketingConsentUpdatePayload struct {
	// The updated customer.
	//
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerEmailMarketingConsentUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
type CustomerEmailMarketingConsentUpdateUserError struct {
	// The error code.
	Code *CustomerEmailMarketingConsentUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerEmailMarketingConsentUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerEmailMarketingConsentUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerEmailMarketingConsentUpdateUserError) GetMessage() string { return this.Message }

// Return type for `customerGenerateAccountActivationUrl` mutation.
type CustomerGenerateAccountActivationURLPayload struct {
	// The generated account activation URL.
	AccountActivationURL *string `json:"accountActivationUrl,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields and values to use when creating or updating a customer.
type CustomerInput struct {
	// The addresses for a customer.
	Addresses []MailingAddressInput `json:"addresses,omitempty,omitempty"`
	// The unique email address of the customer.
	Email *string `json:"email,omitempty,omitempty"`
	// The customer's first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The ID of the customer to update.
	ID *string `json:"id,omitempty,omitempty"`
	// The customer's last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The customer's locale.
	Locale *string `json:"locale,omitempty,omitempty"`
	// Additional metafields to associate to the customer.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// A note about the customer.
	Note *string `json:"note,omitempty,omitempty"`
	// The unique phone number for the customer.
	Phone *string `json:"phone,omitempty,omitempty"`
	// A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
	//
	// Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty,omitempty"`
	// Information that describes when the customer consented to receiving marketing
	// material by email. The `email` field is required when creating a customer with email marketing
	// consent information.
	EmailMarketingConsent *CustomerEmailMarketingConsentInput `json:"emailMarketingConsent,omitempty,omitempty"`
	// The marketing consent information when the customer consented to receiving marketing
	// material by SMS. The `phone` field is required when creating a customer with SMS
	// marketing consent information.
	SmsMarketingConsent *CustomerSmsMarketingConsentInput `json:"smsMarketingConsent,omitempty,omitempty"`
	// Whether the customer is exempt from paying taxes on their order.
	TaxExempt *bool `json:"taxExempt,omitempty,omitempty"`
	// The list of tax exemptions to apply to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty,omitempty"`
}

// Represents a customer's visiting activities on a shop's online store.
type CustomerJourney struct {
	// The position of the current order within the customer's order history.
	CustomerOrderIndex int `json:"customerOrderIndex"`
	// The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
	DaysToConversion int `json:"daysToConversion"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty,omitempty"`
	// Events preceding a customer order, such as shop sessions.
	Moments []CustomerMoment `json:"moments,omitempty"`
}

// Represents a customer's visiting activities on a shop's online store.
type CustomerJourneySummary struct {
	// The position of the current order within the customer's order history. Test orders aren't included.
	CustomerOrderIndex *int `json:"customerOrderIndex,omitempty,omitempty"`
	// The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
	DaysToConversion *int `json:"daysToConversion,omitempty,omitempty"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty,omitempty"`
	// The events preceding a customer's order, such as shop sessions.
	Moments *CustomerMomentConnection `json:"moments,omitempty,omitempty"`
	// The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
	MomentsCount *int `json:"momentsCount,omitempty,omitempty"`
	// Whether the attributed sessions for the order have been created yet.
	Ready bool `json:"ready"`
}

// The error blocking a customer merge.
type CustomerMergeError struct {
	// The list of fields preventing the customer from being merged.
	ErrorFields []CustomerMergeErrorFieldType `json:"errorFields,omitempty"`
	// The customer merge error message.
	Message string `json:"message"`
}

// The input fields to override default customer merge rules.
type CustomerMergeOverrideFields struct {
	// The ID of the customer whose first name will be kept.
	//
	CustomerIDOfFirstNameToKeep *string `json:"customerIdOfFirstNameToKeep,omitempty,omitempty"`
	// The ID of the customer whose last name will be kept.
	//
	CustomerIDOfLastNameToKeep *string `json:"customerIdOfLastNameToKeep,omitempty,omitempty"`
	// The ID of the customer whose email will be kept.
	//
	CustomerIDOfEmailToKeep *string `json:"customerIdOfEmailToKeep,omitempty,omitempty"`
	// The ID of the customer whose phone number will be kept.
	//
	CustomerIDOfPhoneNumberToKeep *string `json:"customerIdOfPhoneNumberToKeep,omitempty,omitempty"`
	// The ID of the customer whose default address will be kept.
	//
	CustomerIDOfDefaultAddressToKeep *string `json:"customerIdOfDefaultAddressToKeep,omitempty,omitempty"`
	// The note to keep.
	Note *string `json:"note,omitempty,omitempty"`
	// The tags to keep.
	Tags []string `json:"tags,omitempty,omitempty"`
}

// Return type for `customerMerge` mutation.
type CustomerMergePayload struct {
	// The asynchronous job for merging the customers.
	Job *Job `json:"job,omitempty,omitempty"`
	// The ID of the customer resulting from the merge.
	ResultingCustomerID *string `json:"resultingCustomerId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerMergeUserError `json:"userErrors,omitempty"`
}

// A preview of the results of a customer merge request.
type CustomerMergePreview struct {
	// The fields that can be used to override the default fields.
	AlternateFields *CustomerMergePreviewAlternateFields `json:"alternateFields,omitempty,omitempty"`
	// The fields that will block the merge if the two customers are merged.
	BlockingFields *CustomerMergePreviewBlockingFields `json:"blockingFields,omitempty,omitempty"`
	// The errors blocking the customer merge.
	CustomerMergeErrors []CustomerMergeError `json:"customerMergeErrors,omitempty,omitempty"`
	// The fields that will be kept if the two customers are merged.
	DefaultFields *CustomerMergePreviewDefaultFields `json:"defaultFields,omitempty,omitempty"`
	// The resulting customer ID if the two customers are merged.
	ResultingCustomerID *string `json:"resultingCustomerId,omitempty,omitempty"`
}

// The fields that can be used to override the default fields.
type CustomerMergePreviewAlternateFields struct {
	// The default address of a customer.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty,omitempty"`
	// The email state of a customer.
	Email *CustomerEmailAddress `json:"email,omitempty,omitempty"`
	// The first name of a customer.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The last name of a customer.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The phone number state of a customer.
	PhoneNumber *CustomerPhoneNumber `json:"phoneNumber,omitempty,omitempty"`
}

// The blocking fields of a customer merge preview. These fields will block customer merge unless edited.
type CustomerMergePreviewBlockingFields struct {
	// The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.
	//
	Note *string `json:"note,omitempty,omitempty"`
	// The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.
	//
	Tags []string `json:"tags,omitempty"`
}

// The fields that will be kept as part of a customer merge preview.
type CustomerMergePreviewDefaultFields struct {
	// The merged addresses resulting from a customer merge.
	Addresses *MailingAddressConnection `json:"addresses,omitempty"`
	// The default address resulting from a customer merge.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty,omitempty"`
	// The total number of customer-specific discounts resulting from a customer merge.
	DiscountNodeCount string `json:"discountNodeCount"`
	// The merged customer-specific discounts resulting from a customer merge.
	DiscountNodes *DiscountNodeConnection `json:"discountNodes,omitempty"`
	// The full name of the customer, based on the values for `first_name` and `last_name`. If `first_name` and `last_name` aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number.
	DisplayName string `json:"displayName"`
	// The total number of merged draft orders.
	DraftOrderCount string `json:"draftOrderCount"`
	// The merged draft orders resulting from a customer merge.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The email state of a customer.
	Email *CustomerEmailAddress `json:"email,omitempty,omitempty"`
	// The first name resulting from a customer merge.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The total number of merged gift cards.
	GiftCardCount string `json:"giftCardCount"`
	// The merged gift cards resulting from a customer merge.
	GiftCards *GiftCardConnection `json:"giftCards,omitempty"`
	// The last name resulting from a customer merge.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The total number of merged metafields.
	MetafieldCount string `json:"metafieldCount"`
	// The merged note resulting from a customer merge.
	Note *string `json:"note,omitempty,omitempty"`
	// The total number of merged orders.
	OrderCount string `json:"orderCount"`
	// The merged orders resulting from a customer merge.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The phone number state of a customer.
	PhoneNumber *CustomerPhoneNumber `json:"phoneNumber,omitempty,omitempty"`
	// The merged tags resulting from a customer merge.
	Tags []string `json:"tags,omitempty"`
}

// A merge request for merging two customers.
type CustomerMergeRequest struct {
	// The merge errors that occurred during the customer merge request.
	CustomerMergeErrors []CustomerMergeError `json:"customerMergeErrors,omitempty"`
	// The UUID of the merge job.
	JobID *string `json:"jobId,omitempty,omitempty"`
	// The ID of the customer resulting from the merge.
	ResultingCustomerID string `json:"resultingCustomerId"`
	// The status of the customer merge request.
	Status CustomerMergeRequestStatus `json:"status"`
}

// An error that occurs while merging two customers.
type CustomerMergeUserError struct {
	// The error code.
	Code *CustomerMergeErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerMergeUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerMergeUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerMergeUserError) GetMessage() string { return this.Message }

// An object that represents whether a customer can be merged with another customer.
type CustomerMergeable struct {
	// The list of fields preventing the customer from being merged.
	//
	ErrorFields []CustomerMergeErrorFieldType `json:"errorFields,omitempty"`
	// Whether the customer can be merged with another customer.
	//
	IsMergeable bool `json:"isMergeable"`
	// The merge request if one is currently in progress.
	//
	MergeInProgress *CustomerMergeRequest `json:"mergeInProgress,omitempty,omitempty"`
	// The reason why the customer can't be merged with another customer.
	//
	Reason *string `json:"reason,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple CustomerMoments.
type CustomerMomentConnection struct {
	// A list of edges.
	Edges []CustomerMomentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CustomerMomentEdge.
	Nodes []CustomerMoment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CustomerMoment and a cursor during pagination.
type CustomerMomentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerMomentEdge.
	Node CustomerMoment `json:"node"`
}

// The billing address of a payment instrument.
type CustomerPaymentInstrumentBillingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The name of the buyer of the address.
	Name *string `json:"name,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// A customer's payment method.
type CustomerPaymentMethod struct {
	// The customer to whom the payment method belongs.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The ID of this payment method.
	ID string `json:"id"`
	// The instrument for this payment method.
	Instrument CustomerPaymentInstrument `json:"instrument,omitempty"`
	// The time that the payment method was revoked.
	RevokedAt *string `json:"revokedAt,omitempty,omitempty"`
	// The revocation reason for this payment method.
	RevokedReason *CustomerPaymentMethodRevocationReason `json:"revokedReason,omitempty,omitempty"`
	// List Subscription Contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
}

func (CustomerPaymentMethod) IsNode() {}

// A globally-unique ID.
func (this CustomerPaymentMethod) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple CustomerPaymentMethods.
type CustomerPaymentMethodConnection struct {
	// A list of edges.
	Edges []CustomerPaymentMethodEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CustomerPaymentMethodEdge.
	Nodes []CustomerPaymentMethod `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerPaymentMethodCreateFromDuplicationData` mutation.
type CustomerPaymentMethodCreateFromDuplicationDataPayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodCreateFromDuplicationDataUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`.
type CustomerPaymentMethodCreateFromDuplicationDataUserError struct {
	// The error code.
	Code *CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodCreateFromDuplicationDataUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerPaymentMethodCreateFromDuplicationDataUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerPaymentMethodCreateFromDuplicationDataUserError) GetMessage() string {
	return this.Message
}

// Return type for `customerPaymentMethodCreditCardCreate` mutation.
type CustomerPaymentMethodCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodCreditCardUpdate` mutation.
type CustomerPaymentMethodCreditCardUpdatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
type CustomerPaymentMethodEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerPaymentMethodEdge.
	Node *CustomerPaymentMethod `json:"node,omitempty"`
}

// Return type for `customerPaymentMethodGetDuplicationData` mutation.
type CustomerPaymentMethodGetDuplicationDataPayload struct {
	// The encrypted data from the payment method to be duplicated.
	EncryptedDuplicationData *string `json:"encryptedDuplicationData,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodGetDuplicationDataUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`.
type CustomerPaymentMethodGetDuplicationDataUserError struct {
	// The error code.
	Code *CustomerPaymentMethodGetDuplicationDataUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodGetDuplicationDataUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerPaymentMethodGetDuplicationDataUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerPaymentMethodGetDuplicationDataUserError) GetMessage() string { return this.Message }

// Return type for `customerPaymentMethodGetUpdateUrl` mutation.
type CustomerPaymentMethodGetUpdateURLPayload struct {
	// The URL to redirect the customer to update the payment method.
	UpdatePaymentMethodURL *string `json:"updatePaymentMethodUrl,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodGetUpdateURLUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
type CustomerPaymentMethodGetUpdateURLUserError struct {
	// The error code.
	Code *CustomerPaymentMethodGetUpdateURLUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodGetUpdateURLUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerPaymentMethodGetUpdateURLUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerPaymentMethodGetUpdateURLUserError) GetMessage() string { return this.Message }

// Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
type CustomerPaymentMethodPaypalBillingAgreementCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
type CustomerPaymentMethodPaypalBillingAgreementUpdatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodRemoteCreate` mutation.
type CustomerPaymentMethodRemoteCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodRemoteUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
type CustomerPaymentMethodRemoteCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// The input fields for a remote gateway payment method, only one remote reference permitted.
type CustomerPaymentMethodRemoteInput struct {
	// Input containing the fields for a remote stripe payment method.
	//
	StripePaymentMethod *RemoteStripePaymentMethodInput `json:"stripePaymentMethod,omitempty,omitempty"`
	// The input fields for a remote authorize net customer profile.
	//
	AuthorizeNetCustomerPaymentProfile *RemoteAuthorizeNetCustomerPaymentProfileInput `json:"authorizeNetCustomerPaymentProfile,omitempty,omitempty"`
	// The input fields for a remote Braintree customer profile.
	BraintreePaymentMethod *RemoteBraintreePaymentMethodInput `json:"braintreePaymentMethod,omitempty,omitempty"`
}

// Represents an error in the input of a mutation.
type CustomerPaymentMethodRemoteUserError struct {
	// The error code.
	Code *CustomerPaymentMethodRemoteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodRemoteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerPaymentMethodRemoteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerPaymentMethodRemoteUserError) GetMessage() string { return this.Message }

// Return type for `customerPaymentMethodRevoke` mutation.
type CustomerPaymentMethodRevokePayload struct {
	// The ID of the revoked customer payment method.
	RevokedCustomerPaymentMethodID *string `json:"revokedCustomerPaymentMethodId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodSendUpdateEmail` mutation.
type CustomerPaymentMethodSendUpdateEmailPayload struct {
	// The customer to whom an update payment method email was sent.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error in the input of a mutation.
type CustomerPaymentMethodUserError struct {
	// The error code.
	Code *CustomerPaymentMethodUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerPaymentMethodUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerPaymentMethodUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerPaymentMethodUserError) GetMessage() string { return this.Message }

// Represents a PayPal instrument for customer payment method.
type CustomerPaypalBillingAgreement struct {
	// The billing address of this payment method.
	BillingAddress *CustomerPaymentInstrumentBillingAddress `json:"billingAddress,omitempty,omitempty"`
	// Whether the PayPal billing agreement is inactive.
	Inactive bool `json:"inactive"`
	// Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The customers's PayPal account email address.
	PaypalAccountEmail *string `json:"paypalAccountEmail,omitempty,omitempty"`
}

func (CustomerPaypalBillingAgreement) IsCustomerPaymentInstrument() {}

// A phone number.
type CustomerPhoneNumber struct {
	// Whether the customer has subscribed to SMS marketing material.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
	// A customer's phone number.
	PhoneNumber string `json:"phoneNumber"`
}

// Return type for `customerRemoveTaxExemptions` mutation.
type CustomerRemoveTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerReplaceTaxExemptions` mutation.
type CustomerReplaceTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The member of a segment.
type CustomerSegmentMember struct {
	// The total amount of money that the member has spent on orders.
	AmountSpent *MoneyV2 `json:"amountSpent,omitempty,omitempty"`
	// The member's default address.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty,omitempty"`
	// The member's default email address.
	DefaultEmailAddress *CustomerEmailAddress `json:"defaultEmailAddress,omitempty,omitempty"`
	// The member's default phone number.
	DefaultPhoneNumber *CustomerPhoneNumber `json:"defaultPhoneNumber,omitempty,omitempty"`
	// The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
	DisplayName string `json:"displayName"`
	// The member's first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The member’s ID.
	ID string `json:"id"`
	// The member's last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The ID of the member's most recent order.
	LastOrderID *string `json:"lastOrderId,omitempty,omitempty"`
	// Whether the customer can be merged with another customer.
	Mergeable *CustomerMergeable `json:"mergeable,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// A note about the member.
	Note *string `json:"note,omitempty,omitempty"`
	// The total number of orders that the member has made.
	NumberOfOrders *string `json:"numberOfOrders,omitempty,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
}

func (CustomerSegmentMember) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this CustomerSegmentMember) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this CustomerSegmentMember) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this CustomerSegmentMember) GetPrivateMetafield() *PrivateMetafield {
	return this.PrivateMetafield
}

// List of private metafields that belong to the resource.
func (this CustomerSegmentMember) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

// The connection type for the `CustomerSegmentMembers` object.
type CustomerSegmentMemberConnection struct {
	// A list of edges.
	Edges []CustomerSegmentMemberEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// The statistics for a given segment.
	Statistics *SegmentStatistics `json:"statistics,omitempty"`
	// The total number of members in a given segment.
	TotalCount int `json:"totalCount"`
}

// An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
type CustomerSegmentMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerSegmentMemberEdge.
	Node *CustomerSegmentMember `json:"node,omitempty"`
}

// A job to determine a list of members, such as customers, that are associated with an individual segment.
type CustomerSegmentMembersQuery struct {
	// The current total number of members in a given segment.
	CurrentCount int `json:"currentCount"`
	// This indicates if the job is still queued or has been run.
	Done bool `json:"done"`
	// A globally-unique ID that's returned when running an asynchronous mutation.
	ID string `json:"id"`
}

func (CustomerSegmentMembersQuery) IsJobResult() {}

// This indicates if the job is still queued or has been run.
func (this CustomerSegmentMembersQuery) GetDone() bool { return this.Done }

// A globally-unique ID that's returned when running an asynchronous mutation.
func (this CustomerSegmentMembersQuery) GetID() string { return this.ID }

func (CustomerSegmentMembersQuery) IsNode() {}

// A globally-unique ID.

// Return type for `customerSegmentMembersQueryCreate` mutation.
type CustomerSegmentMembersQueryCreatePayload struct {
	// The newly created customer segment members query.
	CustomerSegmentMembersQuery *CustomerSegmentMembersQuery `json:"customerSegmentMembersQuery,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerSegmentMembersQueryUserError `json:"userErrors,omitempty"`
}

// The input fields and values for creating a customer segment members query.
type CustomerSegmentMembersQueryInput struct {
	// The ID of the segment.
	SegmentID *string `json:"segmentId,omitempty,omitempty"`
	// The query that's used to filter the members. The query is composed of a combination of conditions on facts about customers such as `email_subscription_status = 'SUBSCRIBED'` with [this syntax](https://shopify.dev/api/shopifyql/segment-query-language-reference).
	Query *string `json:"query,omitempty,omitempty"`
	// Reverse the order of the list. The sorting behaviour defaults to ascending order.
	Reverse *bool `json:"reverse,omitempty,omitempty"`
	// Sort the list by a given key.
	SortKey *string `json:"sortKey,omitempty,omitempty"`
}

// Represents a customer segment members query custom error.
type CustomerSegmentMembersQueryUserError struct {
	// The error code.
	Code *CustomerSegmentMembersQueryUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerSegmentMembersQueryUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerSegmentMembersQueryUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerSegmentMembersQueryUserError) GetMessage() string { return this.Message }

// Represents a Shop Pay card instrument for customer payment method.
type CustomerShopPayAgreement struct {
	// The billing address of the card.
	BillingAddress *CustomerCreditCardBillingAddress `json:"billingAddress,omitempty,omitempty"`
	// Whether the card is about to expire.
	ExpiresSoon bool `json:"expiresSoon"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear"`
	// Whether the Shop Pay billing agreement is inactive.
	Inactive bool `json:"inactive"`
	// The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable"`
	// The last 4 digits of the card.
	LastDigits string `json:"lastDigits"`
	// The masked card number with only the last 4 digits displayed.
	MaskedNumber string `json:"maskedNumber"`
	// The name of the card holder.
	Name string `json:"name"`
}

func (CustomerShopPayAgreement) IsCustomerPaymentInstrument() {}

// An error that occurs during execution of an SMS marketing consent mutation.
type CustomerSmsMarketingConsentError struct {
	// The error code.
	Code *CustomerSmsMarketingConsentErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (CustomerSmsMarketingConsentError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this CustomerSmsMarketingConsentError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this CustomerSmsMarketingConsentError) GetMessage() string { return this.Message }

// The marketing consent information when the customer consented to
// receiving marketing material by SMS.
type CustomerSmsMarketingConsentInput struct {
	// The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
	//
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty,omitempty"`
	// The current SMS marketing state for the customer.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
	// The date and time when the customer consented to receive marketing material by SMS.
	// If no date is provided, then the date and time when the consent information was sent is used.
	//
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty,omitempty"`
}

// The record of when a customer consented to receive marketing material by SMS.
//
// The customer's consent state reflects the record with the most recent date when consent was updated.
type CustomerSmsMarketingConsentState struct {
	// The source from which the SMS marketing information for the customer was collected.
	ConsentCollectedFrom *CustomerConsentCollectedFrom `json:"consentCollectedFrom,omitempty,omitempty"`
	// The date and time when the customer consented to receive marketing material by SMS.
	// If no date is provided, then the date and time when the consent information was sent is used.
	//
	ConsentUpdatedAt *string `json:"consentUpdatedAt,omitempty,omitempty"`
	// The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
	//
	MarketingOptInLevel CustomerMarketingOptInLevel `json:"marketingOptInLevel"`
	// The current SMS marketing state for the customer.
	MarketingState CustomerSmsMarketingState `json:"marketingState"`
}

// The input fields for updating SMS marketing consent information for a given customer ID.
type CustomerSmsMarketingConsentUpdateInput struct {
	// The ID of the customer to update the SMS marketing consent information for. The customer must have a unique phone number associated to the record. If not, add the phone number using the `customerUpdate` mutation first.
	CustomerID string `json:"customerId"`
	// The marketing consent information when the customer consented to receiving marketing material by SMS.
	SmsMarketingConsent *CustomerSmsMarketingConsentInput `json:"smsMarketingConsent,omitempty"`
}

// Return type for `customerSmsMarketingConsentUpdate` mutation.
type CustomerSmsMarketingConsentUpdatePayload struct {
	// The updated customer.
	//
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CustomerSmsMarketingConsentError `json:"userErrors,omitempty"`
}

// A customer's computed statistics.
type CustomerStatistics struct {
	// The predicted spend tier of a customer with a shop.
	PredictedSpendTier *CustomerPredictedSpendTier `json:"predictedSpendTier,omitempty,omitempty"`
}

// Return type for `customerUpdateDefaultAddress` mutation.
type CustomerUpdateDefaultAddressPayload struct {
	// The customer whose address was updated.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `customerUpdate` mutation.
type CustomerUpdatePayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
type CustomerVisit struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// URL of the first page the customer landed on for the session.
	LandingPage *string `json:"landingPage,omitempty,omitempty"`
	// Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
	LandingPageHTML *string `json:"landingPageHtml,omitempty,omitempty"`
	// Represent actions taken by an app, on behalf of a merchant,
	// to market Shopify resources such as products, collections, and discounts.
	//
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty,omitempty"`
	// The date and time when the customer's session occurred.
	OccurredAt string `json:"occurredAt"`
	// Marketing referral code from the link that the customer clicked to visit the store.
	// Supports the following URL attributes: _ref_, _source_, or _r_.
	// For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
	//
	ReferralCode *string `json:"referralCode,omitempty,omitempty"`
	// Referral information with URLs linked in HTML.
	ReferralInfoHTML string `json:"referralInfoHtml"`
	// Webpage where the customer clicked a link that sent them to the online store.
	// For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
	//
	ReferrerURL *string `json:"referrerUrl,omitempty,omitempty"`
	// Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
	// a website domain, QR code, or unknown.
	//
	Source string `json:"source"`
	// Describes the source explicitly for first or last session.
	SourceDescription *string `json:"sourceDescription,omitempty,omitempty"`
	// Type of marketing tactic.
	SourceType *MarketingTactic `json:"sourceType,omitempty,omitempty"`
	// A set of UTM parameters gathered from the URL parameters of the referrer.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty,omitempty"`
}

func (CustomerVisit) IsCustomerMoment() {}

// The date and time when the customer's session occurred.
func (this CustomerVisit) GetOccurredAt() string { return this.OccurredAt }

func (CustomerVisit) IsNode() {}

// A globally-unique ID.
func (this CustomerVisit) GetID() string { return this.ID }

// This type returns the information about the product and product variant from a customer visit.
type CustomerVisitProductInfo struct {
	// The product information. If `null`, then the product was deleted from the store.
	Product *Product `json:"product,omitempty,omitempty"`
	// The quantity of the product that the customer requested.
	Quantity int `json:"quantity"`
	// The product variant information, if the product variant exists.
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple CustomerVisitProductInfos.
type CustomerVisitProductInfoConnection struct {
	// A list of edges.
	Edges []CustomerVisitProductInfoEdge `json:"edges,omitempty"`
	// A list of the nodes contained in CustomerVisitProductInfoEdge.
	Nodes []CustomerVisitProductInfo `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
type CustomerVisitProductInfoEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of CustomerVisitProductInfoEdge.
	Node *CustomerVisitProductInfo `json:"node,omitempty"`
}

// A token that delegates a set of scopes from the original permission.
//
// To learn more about creating delegate access tokens, refer to
// [Delegate OAuth access tokens to subsystems]
// (https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
type DelegateAccessToken struct {
	// The list of permissions associated with the token.
	AccessScopes []string `json:"accessScopes,omitempty"`
	// The issued delegate access token.
	AccessToken string `json:"accessToken"`
	// The date and time when the delegate access token was created.
	CreatedAt string `json:"createdAt"`
}

// Return type for `delegateAccessTokenCreate` mutation.
type DelegateAccessTokenCreatePayload struct {
	// The delegate access token.
	DelegateAccessToken *DelegateAccessToken `json:"delegateAccessToken,omitempty,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DelegateAccessTokenCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `DelegateAccessTokenCreate`.
type DelegateAccessTokenCreateUserError struct {
	// The error code.
	Code *DelegateAccessTokenCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DelegateAccessTokenCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DelegateAccessTokenCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DelegateAccessTokenCreateUserError) GetMessage() string { return this.Message }

// Return type for `delegateAccessTokenDestroy` mutation.
type DelegateAccessTokenDestroyPayload struct {
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The status of the delegate access token destroy operation. Returns true if successful.
	Status *bool `json:"status,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DelegateAccessTokenDestroyUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `DelegateAccessTokenDestroy`.
type DelegateAccessTokenDestroyUserError struct {
	// The error code.
	Code *DelegateAccessTokenDestroyUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DelegateAccessTokenDestroyUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DelegateAccessTokenDestroyUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DelegateAccessTokenDestroyUserError) GetMessage() string { return this.Message }

// The input fields for a delegate access token.
type DelegateAccessTokenInput struct {
	// The list of scopes that will be delegated to the new access token.
	DelegateAccessScope []string `json:"delegateAccessScope,omitempty"`
	// The amount of time, in seconds, after which the delegate access token is no longer valid.
	ExpiresIn *int `json:"expiresIn,omitempty,omitempty"`
}

// Deletion events chronicle the destruction of resources (e.g. products and collections).
// Once deleted, the deletion event is the only trace of the original's existence,
// as the resource itself has been removed and can no longer be accessed.
type DeletionEvent struct {
	// The date and time when the deletion event for the related resource was generated.
	OccurredAt string `json:"occurredAt"`
	// The ID of the resource that was deleted.
	SubjectID string `json:"subjectId"`
	// The type of resource that was deleted.
	SubjectType DeletionEventSubjectType `json:"subjectType"`
}

// An auto-generated type for paginating through multiple DeletionEvents.
type DeletionEventConnection struct {
	// A list of edges.
	Edges []DeletionEventEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeletionEventEdge.
	Nodes []DeletionEvent `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeletionEvent and a cursor during pagination.
type DeletionEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeletionEventEdge.
	Node *DeletionEvent `json:"node,omitempty"`
}

// A shipping service and a list of countries that the service is available for.
type DeliveryAvailableService struct {
	// The countries the service provider ships to.
	Countries *DeliveryCountryCodesOrRestOfWorld `json:"countries,omitempty"`
	// The name of the service.
	Name string `json:"name"`
}

// Represents a branded promise presented to buyers.
type DeliveryBrandedPromise struct {
	// The handle of the branded promise.  For example: `shop_promise`.
	Handle string `json:"handle"`
	// The name of the branded promise.  For example: `Shop Promise`.
	Name string `json:"name"`
}

// A shipping service provider or a carrier account.
type DeliveryCarrierService struct {
	// The list of services offered for given destinations.
	AvailableServicesForCountries []DeliveryAvailableService `json:"availableServicesForCountries,omitempty"`
	// The properly formatted name of the shipping service provider, ready to display.
	FormattedName *string `json:"formattedName,omitempty,omitempty"`
	// The logo of the service provider.
	Icon *Image `json:"icon,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the shipping service provider.
	Name *string `json:"name,omitempty,omitempty"`
}

func (DeliveryCarrierService) IsNode() {}

// A globally-unique ID.
func (this DeliveryCarrierService) GetID() string { return this.ID }

// A carrier service and the associated list of shop locations.
type DeliveryCarrierServiceAndLocations struct {
	// The carrier service.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The list of locations that support this carrier service.
	Locations []Location `json:"locations,omitempty"`
}

// A condition that must pass for a delivery method definition to be applied to an order.
type DeliveryCondition struct {
	// The value (weight or price) that the condition field is compared to.
	ConditionCriteria DeliveryConditionCriteria `json:"conditionCriteria"`
	// The field to compare the criterion value against, using the operator.
	Field DeliveryConditionField `json:"field"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The operator to compare the field and criterion value.
	Operator DeliveryConditionOperator `json:"operator"`
}

func (DeliveryCondition) IsNode() {}

// A globally-unique ID.
func (this DeliveryCondition) GetID() string { return this.ID }

// A country that is used to define a shipping zone.
type DeliveryCountry struct {
	// A two-letter country code in ISO 3166-1 alpha-2 standard.
	// It also includes a flag indicating whether the country should be
	// a part of the 'Rest Of World' shipping zone.
	//
	Code *DeliveryCountryCodeOrRestOfWorld `json:"code,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The full name of the country.
	Name string `json:"name"`
	// The list of regions associated with this country.
	Provinces []DeliveryProvince `json:"provinces,omitempty"`
	// The translated name of the country. The translation returned is based on the system's locale.
	TranslatedName string `json:"translatedName"`
}

func (DeliveryCountry) IsNode() {}

// A globally-unique ID.
func (this DeliveryCountry) GetID() string { return this.ID }

// The country details and the associated shipping zone.
type DeliveryCountryAndZone struct {
	// The country details.
	Country *DeliveryCountry `json:"country,omitempty"`
	// The name of the shipping zone.
	Zone string `json:"zone"`
}

// The country code and whether the country is a part of the 'Rest Of World' shipping zone.
type DeliveryCountryCodeOrRestOfWorld struct {
	// The country code in the ISO 3166-1 alpha-2 format.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// Whether the country is a part of the 'Rest of World' shipping zone.
	RestOfWorld bool `json:"restOfWorld"`
}

// The list of country codes and information whether the countries
// are a part of the 'Rest Of World' shipping zone.
type DeliveryCountryCodesOrRestOfWorld struct {
	// List of applicable country codes in the ISO 3166-1 alpha-2 format.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the countries are a part of the 'Rest of World' shipping zone.
	RestOfWorld bool `json:"restOfWorld"`
}

// The input fields to specify a country.
type DeliveryCountryInput struct {
	// The country code of the country in the ISO 3166-1 alpha-2 format.
	Code *CountryCode `json:"code,omitempty,omitempty"`
	// Whether the country is a part of the 'Rest of World' shipping zone.
	RestOfWorld *bool `json:"restOfWorld,omitempty,omitempty"`
	// The regions associated with this country.
	Provinces []DeliveryProvinceInput `json:"provinces,omitempty,omitempty"`
	// Associate all available provinces with this country.
	IncludeAllProvinces *bool `json:"includeAllProvinces,omitempty,omitempty"`
}

// A delivery customization.
type DeliveryCustomization struct {
	// The enabled status of the delivery customization.
	Enabled bool `json:"enabled"`
	// The error history on the most recent version of the delivery customization.
	ErrorHistory *FunctionsErrorHistory `json:"errorHistory,omitempty,omitempty"`
	// The ID of the Shopify Function implementing the delivery customization.
	FunctionID string `json:"functionId"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The Shopify Function implementing the delivery customization.
	ShopifyFunction *ShopifyFunction `json:"shopifyFunction,omitempty"`
	// The title of the delivery customization.
	Title string `json:"title"`
}

func (DeliveryCustomization) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this DeliveryCustomization) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (DeliveryCustomization) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this DeliveryCustomization) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this DeliveryCustomization) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this DeliveryCustomization) GetPrivateMetafield() *PrivateMetafield {
	return this.PrivateMetafield
}

// List of private metafields that belong to the resource.
func (this DeliveryCustomization) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (DeliveryCustomization) IsNode() {}

// A globally-unique ID.
func (this DeliveryCustomization) GetID() string { return this.ID }

func (DeliveryCustomization) IsMetafieldReferencer() {}

// Return type for `deliveryCustomizationActivation` mutation.
type DeliveryCustomizationActivationPayload struct {
	// The IDs of the updated delivery customizations.
	Ids []string `json:"ids,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryCustomizationError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DeliveryCustomizations.
type DeliveryCustomizationConnection struct {
	// A list of edges.
	Edges []DeliveryCustomizationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeliveryCustomizationEdge.
	Nodes []DeliveryCustomization `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `deliveryCustomizationCreate` mutation.
type DeliveryCustomizationCreatePayload struct {
	// Returns the created delivery customization.
	DeliveryCustomization *DeliveryCustomization `json:"deliveryCustomization,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryCustomizationError `json:"userErrors,omitempty"`
}

// Return type for `deliveryCustomizationDelete` mutation.
type DeliveryCustomizationDeletePayload struct {
	// Returns the deleted delivery customization ID.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryCustomizationError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.
type DeliveryCustomizationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryCustomizationEdge.
	Node *DeliveryCustomization `json:"node,omitempty"`
}

// An error that occurs during the execution of a delivery customization mutation.
type DeliveryCustomizationError struct {
	// The error code.
	Code *DeliveryCustomizationErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DeliveryCustomizationError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DeliveryCustomizationError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DeliveryCustomizationError) GetMessage() string { return this.Message }

// The input fields to create and update a delivery customization.
type DeliveryCustomizationInput struct {
	// The ID of the function providing the delivery customization.
	FunctionID *string `json:"functionId,omitempty,omitempty"`
	// The title of the delivery customization.
	Title *string `json:"title,omitempty,omitempty"`
	// The enabled status of the delivery customization.
	Enabled *bool `json:"enabled,omitempty,omitempty"`
	// Additional metafields to associate to the delivery customization.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `deliveryCustomizationUpdate` mutation.
type DeliveryCustomizationUpdatePayload struct {
	// Returns the updated delivery customization.
	DeliveryCustomization *DeliveryCustomization `json:"deliveryCustomization,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryCustomizationError `json:"userErrors,omitempty"`
}

// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
type DeliveryLegacyModeBlocked struct {
	// Whether the shop can convert to full multi-location delivery profiles mode.
	Blocked bool `json:"blocked"`
	// The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
	Reasons []DeliveryLegacyModeBlockedReason `json:"reasons,omitempty,omitempty"`
}

// Local pickup settings associated with a location.
type DeliveryLocalPickupSettings struct {
	// Additional instructions or information related to the local pickup.
	Instructions string `json:"instructions"`
	// The estimated pickup time to show customers at checkout.
	PickupTime DeliveryLocalPickupTime `json:"pickupTime"`
}

// A location group is a collection of locations. They share zones and delivery methods across delivery
// profiles.
type DeliveryLocationGroup struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// A list of all locations that are part of this location group.
	Locations *LocationConnection `json:"locations,omitempty"`
	// A count of all locations that are part of this location group.
	LocationsCount int `json:"locationsCount"`
}

func (DeliveryLocationGroup) IsNode() {}

// A globally-unique ID.
func (this DeliveryLocationGroup) GetID() string { return this.ID }

// Links a location group with a zone and the associated method definitions.
type DeliveryLocationGroupZone struct {
	// The number of method definitions for the zone.
	MethodDefinitionCounts *DeliveryMethodDefinitionCounts `json:"methodDefinitionCounts,omitempty"`
	// The method definitions associated to a zone and location group.
	MethodDefinitions *DeliveryMethodDefinitionConnection `json:"methodDefinitions,omitempty"`
	// The zone associated to a location group.
	Zone *DeliveryZone `json:"zone,omitempty"`
}

// An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
type DeliveryLocationGroupZoneConnection struct {
	// A list of edges.
	Edges []DeliveryLocationGroupZoneEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeliveryLocationGroupZoneEdge.
	Nodes []DeliveryLocationGroupZone `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
type DeliveryLocationGroupZoneEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryLocationGroupZoneEdge.
	Node *DeliveryLocationGroupZone `json:"node,omitempty"`
}

// The input fields for a delivery zone associated to a location group and profile.
type DeliveryLocationGroupZoneInput struct {
	// A globally-unique ID of the zone.
	ID *string `json:"id,omitempty,omitempty"`
	// The name of the zone.
	Name *string `json:"name,omitempty,omitempty"`
	// A list of countries to associate with the zone.
	Countries []DeliveryCountryInput `json:"countries,omitempty,omitempty"`
	// A list of method definitions to create.
	MethodDefinitionsToCreate []DeliveryMethodDefinitionInput `json:"methodDefinitionsToCreate,omitempty,omitempty"`
	// A list of method definitions to update.
	MethodDefinitionsToUpdate []DeliveryMethodDefinitionInput `json:"methodDefinitionsToUpdate,omitempty,omitempty"`
}

// The input fields for a local pickup setting associated with a location.
type DeliveryLocationLocalPickupEnableInput struct {
	// The ID of the location associated with the location setting.
	LocationID string `json:"locationId"`
	// The time of the local pickup.
	PickupTime DeliveryLocalPickupTime `json:"pickupTime"`
	// The instructions for the local pickup.
	Instructions *string `json:"instructions,omitempty,omitempty"`
}

// Represents an error that happened when changing local pickup settings for a location.
type DeliveryLocationLocalPickupSettingsError struct {
	// The error code.
	Code *DeliveryLocationLocalPickupSettingsErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DeliveryLocationLocalPickupSettingsError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DeliveryLocationLocalPickupSettingsError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DeliveryLocationLocalPickupSettingsError) GetMessage() string { return this.Message }

// The delivery method used by a fulfillment order.
type DeliveryMethod struct {
	// The branded promise that was presented to the buyer during checkout.  For example: Shop Promise.
	BrandedPromise *DeliveryBrandedPromise `json:"brandedPromise,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
	MaxDeliveryDateTime *string `json:"maxDeliveryDateTime,omitempty,omitempty"`
	// The type of the delivery method.
	MethodType DeliveryMethodType `json:"methodType"`
	// The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
	MinDeliveryDateTime *string `json:"minDeliveryDateTime,omitempty,omitempty"`
}

func (DeliveryMethod) IsNode() {}

// A globally-unique ID.
func (this DeliveryMethod) GetID() string { return this.ID }

// A method definition contains the delivery rate and the conditions that must be met for the method to be
// applied.
type DeliveryMethodDefinition struct {
	// Whether this method definition is active.
	Active bool `json:"active"`
	// The description of the method definition.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The method conditions that must pass for this method definition to be applied to an order.
	MethodConditions []DeliveryCondition `json:"methodConditions,omitempty"`
	// The name of the method definition.
	Name string `json:"name"`
	// The provided rate for this method definition, from a rate definition or participant.
	RateProvider DeliveryRateProvider `json:"rateProvider"`
}

func (DeliveryMethodDefinition) IsNode() {}

// A globally-unique ID.
func (this DeliveryMethodDefinition) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
type DeliveryMethodDefinitionConnection struct {
	// A list of edges.
	Edges []DeliveryMethodDefinitionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeliveryMethodDefinitionEdge.
	Nodes []DeliveryMethodDefinition `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The number of method definitions for a zone, separated into merchant-owned and participant definitions.
type DeliveryMethodDefinitionCounts struct {
	// The number of participant method definitions for the specified zone.
	ParticipantDefinitionsCount int `json:"participantDefinitionsCount"`
	// The number of merchant-defined method definitions for the specified zone.
	RateDefinitionsCount int `json:"rateDefinitionsCount"`
}

// An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
type DeliveryMethodDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryMethodDefinitionEdge.
	Node *DeliveryMethodDefinition `json:"node,omitempty"`
}

// The input fields for a method definition.
type DeliveryMethodDefinitionInput struct {
	// A globally-unique ID of the method definition. Use only when updating a method definiton.
	ID *string `json:"id,omitempty,omitempty"`
	// The name of the method definition.
	Name *string `json:"name,omitempty,omitempty"`
	// The description of the method definition.
	Description *string `json:"description,omitempty,omitempty"`
	// Whether to use this method definition during rate calculation.
	Active *bool `json:"active,omitempty,omitempty"`
	// A rate definition to apply to the method definition.
	RateDefinition *DeliveryRateDefinitionInput `json:"rateDefinition,omitempty,omitempty"`
	// A participant to apply to the method definition.
	Participant *DeliveryParticipantInput `json:"participant,omitempty,omitempty"`
	// A list of weight conditions on the method definition.
	WeightConditionsToCreate []DeliveryWeightConditionInput `json:"weightConditionsToCreate,omitempty,omitempty"`
	// A list of price conditions on the method definition.
	PriceConditionsToCreate []DeliveryPriceConditionInput `json:"priceConditionsToCreate,omitempty,omitempty"`
	// A list of conditions to update on the method definition.
	ConditionsToUpdate []DeliveryUpdateConditionInput `json:"conditionsToUpdate,omitempty,omitempty"`
}

// A participant defines carrier-calculated rates for shipping services
// with a possible merchant-defined fixed fee or a percentage-of-rate fee.
type DeliveryParticipant struct {
	// Whether to display new shipping services automatically to the customer when the service becomes available.
	//
	AdaptToNewServicesFlag bool `json:"adaptToNewServicesFlag"`
	// The carrier used for this participant.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The merchant-defined fixed fee for this participant.
	FixedFee *MoneyV2 `json:"fixedFee,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The carrier-specific services offered by the participant, and whether each service is active.
	ParticipantServices []DeliveryParticipantService `json:"participantServices,omitempty"`
	// The merchant-defined percentage-of-rate fee for this participant.
	PercentageOfRateFee float64 `json:"percentageOfRateFee"`
}

func (DeliveryParticipant) IsNode() {}

// A globally-unique ID.
func (this DeliveryParticipant) GetID() string { return this.ID }

func (DeliveryParticipant) IsDeliveryRateProvider() {}

// The input fields for a participant.
type DeliveryParticipantInput struct {
	// The ID of the participant.
	ID *string `json:"id,omitempty,omitempty"`
	// The ID of the carrier service for this participant.
	CarrierServiceID *string `json:"carrierServiceId,omitempty,omitempty"`
	// The fixed feed that is defined by the merchant for this participant.
	FixedFee *MoneyInput `json:"fixedFee,omitempty,omitempty"`
	// The merchant-defined percentage-of-rate fee for this participant.
	PercentageOfRateFee *float64 `json:"percentageOfRateFee,omitempty,omitempty"`
	// The list of shipping services offered by the participant.
	ParticipantServices []DeliveryParticipantServiceInput `json:"participantServices,omitempty,omitempty"`
	// Whether to automatically display new shipping services to the customer when a service becomes available.
	//
	AdaptToNewServices *bool `json:"adaptToNewServices,omitempty,omitempty"`
}

// A mail service provided by the participant.
type DeliveryParticipantService struct {
	// Whether the service is active.
	Active bool `json:"active"`
	// The name of the service.
	Name string `json:"name"`
}

// The input fields for a shipping service provided by a participant.
type DeliveryParticipantServiceInput struct {
	// The name of the service.
	Name string `json:"name"`
	// Whether the service is active.
	Active bool `json:"active"`
}

// The input fields for a price-based condition of a delivery method definition.
type DeliveryPriceConditionInput struct {
	// The monetary value to compare the price of an order to.
	Criteria *MoneyInput `json:"criteria,omitempty,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty,omitempty"`
}

// How many product variants are in a profile. This count is capped at 500.
type DeliveryProductVariantsCount struct {
	// Whether the count has reached the cap of 500.
	Capped bool `json:"capped"`
	// The product variant count.
	Count int `json:"count"`
}

// A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
type DeliveryProfile struct {
	// The number of active shipping rates for the profile.
	ActiveMethodDefinitionsCount int `json:"activeMethodDefinitionsCount"`
	// Whether this is the default profile.
	Default bool `json:"default"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether this shop has enabled legacy compatibility mode for delivery profiles.
	LegacyMode bool `json:"legacyMode"`
	// The number of locations without rates defined.
	LocationsWithoutRatesCount int `json:"locationsWithoutRatesCount"`
	// The name of the delivery profile.
	Name string `json:"name"`
	// The number of active origin locations for the profile.
	OriginLocationCount int `json:"originLocationCount"`
	// The number of product variants for this profile. The count for the default profile is not supported and will return -1.
	ProductVariantsCount int `json:"productVariantsCount"`
	// How many product variants are in this profile.
	ProductVariantsCountV2 *DeliveryProductVariantsCount `json:"productVariantsCountV2,omitempty"`
	// The products and variants associated with this profile.
	ProfileItems *DeliveryProfileItemConnection `json:"profileItems,omitempty"`
	// The location groups and associated zones using this profile.
	ProfileLocationGroups []DeliveryProfileLocationGroup `json:"profileLocationGroups,omitempty"`
	// Selling plan groups associated with the specified delivery profile.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// List of locations that have not been assigned to a location group for this profile.
	UnassignedLocations []Location `json:"unassignedLocations,omitempty"`
	// List of locations that have not been assigned to a location group for this profile.
	UnassignedLocationsPaginated *LocationConnection `json:"unassignedLocationsPaginated,omitempty"`
	// The number of countries with active rates to deliver to.
	ZoneCountryCount int `json:"zoneCountryCount"`
}

func (DeliveryProfile) IsNode() {}

// A globally-unique ID.
func (this DeliveryProfile) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple DeliveryProfiles.
type DeliveryProfileConnection struct {
	// A list of edges.
	Edges []DeliveryProfileEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeliveryProfileEdge.
	Nodes []DeliveryProfile `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
type DeliveryProfileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryProfileEdge.
	Node *DeliveryProfile `json:"node,omitempty"`
}

// The input fields for a delivery profile.
type DeliveryProfileInput struct {
	// The name of the delivery profile.
	Name *string `json:"name,omitempty,omitempty"`
	// The list of location groups associated with the delivery profile.
	ProfileLocationGroups []DeliveryProfileLocationGroupInput `json:"profileLocationGroups,omitempty,omitempty"`
	// The list of location groups to be created in the delivery profile.
	//
	// **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
	//
	LocationGroupsToCreate []DeliveryProfileLocationGroupInput `json:"locationGroupsToCreate,omitempty,omitempty"`
	// The list of location groups to be updated in the delivery profile.
	//
	// **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
	//
	LocationGroupsToUpdate []DeliveryProfileLocationGroupInput `json:"locationGroupsToUpdate,omitempty,omitempty"`
	// The list of location groups to be deleted from the delivery profile.
	LocationGroupsToDelete []string `json:"locationGroupsToDelete,omitempty,omitempty"`
	// The list of product variant IDs to be associated with the delivery profile.
	VariantsToAssociate []string `json:"variantsToAssociate,omitempty,omitempty"`
	// The list of product variant IDs to be dissociated from the delivery profile.
	// The dissociated product variants are moved back to the default delivery profile.
	//
	VariantsToDissociate []string `json:"variantsToDissociate,omitempty,omitempty"`
	// The list of zone IDs to delete.
	ZonesToDelete []string `json:"zonesToDelete,omitempty,omitempty"`
	// The list of method definition IDs to delete.
	MethodDefinitionsToDelete []string `json:"methodDefinitionsToDelete,omitempty,omitempty"`
	// The list of condition IDs to delete.
	ConditionsToDelete []string `json:"conditionsToDelete,omitempty,omitempty"`
	// The list of selling plan groups to be associated with the delivery profile.
	SellingPlanGroupsToAssociate []string `json:"sellingPlanGroupsToAssociate,omitempty,omitempty"`
	// The list of selling plan groups to be dissociated with the delivery profile.
	SellingPlanGroupsToDissociate []string `json:"sellingPlanGroupsToDissociate,omitempty,omitempty"`
}

// A product and the subset of associated variants that are part of this delivery profile.
type DeliveryProfileItem struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// A product associated with this profile.
	Product *Product `json:"product,omitempty"`
	// The product variants associated with this delivery profile.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
}

func (DeliveryProfileItem) IsNode() {}

// A globally-unique ID.
func (this DeliveryProfileItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple DeliveryProfileItems.
type DeliveryProfileItemConnection struct {
	// A list of edges.
	Edges []DeliveryProfileItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DeliveryProfileItemEdge.
	Nodes []DeliveryProfileItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
type DeliveryProfileItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DeliveryProfileItemEdge.
	Node *DeliveryProfileItem `json:"node,omitempty"`
}

// Links a location group with zones. Both are associated to a delivery profile.
type DeliveryProfileLocationGroup struct {
	// The countries already selected in any zone for the specified location group.
	CountriesInAnyZone []DeliveryCountryAndZone `json:"countriesInAnyZone,omitempty"`
	// The collection of locations that make up the specified location group.
	LocationGroup *DeliveryLocationGroup `json:"locationGroup,omitempty"`
	// The applicable zones associated to the specified location group.
	LocationGroupZones *DeliveryLocationGroupZoneConnection `json:"locationGroupZones,omitempty"`
}

// The input fields for a location group associated to a delivery profile.
type DeliveryProfileLocationGroupInput struct {
	// The globally-unique ID of the delivery profile location group.
	ID *string `json:"id,omitempty,omitempty"`
	// The list of location IDs to be moved to this location group.
	Locations []string `json:"locations,omitempty,omitempty"`
	// The list of location IDs to be added to this location group.
	//
	// **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
	//
	LocationsToAdd []string `json:"locationsToAdd,omitempty,omitempty"`
	// The list of location IDs to be removed from this location group.
	//
	// **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
	//
	LocationsToRemove []string `json:"locationsToRemove,omitempty,omitempty"`
	// The list of location group zones to create.
	//
	// **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
	//
	ZonesToCreate []DeliveryLocationGroupZoneInput `json:"zonesToCreate,omitempty,omitempty"`
	// The list of location group zones to update.
	//
	// **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
	//
	ZonesToUpdate []DeliveryLocationGroupZoneInput `json:"zonesToUpdate,omitempty,omitempty"`
}

// A region that is used to define a shipping zone.
type DeliveryProvince struct {
	// The code of the region.
	Code string `json:"code"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The full name of the region.
	Name string `json:"name"`
	// The translated name of the region. The translation returned is based on the system's locale.
	TranslatedName string `json:"translatedName"`
}

func (DeliveryProvince) IsNode() {}

// A globally-unique ID.
func (this DeliveryProvince) GetID() string { return this.ID }

// The input fields to specify a region.
type DeliveryProvinceInput struct {
	// The code of the region.
	Code string `json:"code"`
}

// The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
type DeliveryRateDefinition struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The price of this rate.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (DeliveryRateDefinition) IsNode() {}

// A globally-unique ID.
func (this DeliveryRateDefinition) GetID() string { return this.ID }

func (DeliveryRateDefinition) IsDeliveryRateProvider() {}

// The input fields for a rate definition.
type DeliveryRateDefinitionInput struct {
	// A globally-unique ID of the rate definition.
	ID *string `json:"id,omitempty,omitempty"`
	// The price of the rate definition.
	Price *MoneyInput `json:"price,omitempty"`
}

// The `DeliverySetting` object enables you to manage shop-wide shipping settings.
// You can enable legacy compatibility mode for the multi-location delivery profiles feature
// if the legacy mode isn't blocked.
type DeliverySetting struct {
	// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
	LegacyModeBlocked *DeliveryLegacyModeBlocked `json:"legacyModeBlocked,omitempty"`
	// Enables legacy compatability mode for the multi-location delivery profiles feature.
	LegacyModeProfiles bool `json:"legacyModeProfiles"`
}

// The input fields for shop-level delivery settings.
type DeliverySettingInput struct {
	// Whether legacy compatability mode is enabled for the multi-location delivery profiles feature.
	LegacyModeProfiles *bool `json:"legacyModeProfiles,omitempty,omitempty"`
}

// Return type for `deliverySettingUpdate` mutation.
type DeliverySettingUpdatePayload struct {
	// The updated delivery shop level settings.
	Setting *DeliverySetting `json:"setting,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryShippingOriginAssign` mutation.
type DeliveryShippingOriginAssignPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for updating the condition of a delivery method definition.
type DeliveryUpdateConditionInput struct {
	// A globally-unique ID of the condition.
	ID string `json:"id"`
	// The value that will be used in comparison.
	Criteria *float64 `json:"criteria,omitempty,omitempty"`
	// The unit associated with the value that will be used in comparison.
	CriteriaUnit *string `json:"criteriaUnit,omitempty,omitempty"`
	// The property of an order that will be used in comparison.
	Field *DeliveryConditionField `json:"field,omitempty,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty,omitempty"`
}

// The input fields for a weight-based condition of a delivery method definition.
type DeliveryWeightConditionInput struct {
	// The weight value to compare the weight of an order to.
	Criteria *WeightInput `json:"criteria,omitempty,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty,omitempty"`
}

// A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
type DeliveryZone struct {
	// The list of countries within the zone.
	Countries []DeliveryCountry `json:"countries,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the zone.
	Name string `json:"name"`
}

func (DeliveryZone) IsNode() {}

// A globally-unique ID.
func (this DeliveryZone) GetID() string { return this.ID }

// An amount that's allocated to a line based on an associated discount application.
type DiscountAllocation struct {
	// The money amount that's allocated to a line based on the associated discount application.
	AllocatedAmount *MoneyV2 `json:"allocatedAmount,omitempty"`
	// The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount application that the allocated amount originated from.
	DiscountApplication DiscountApplication `json:"discountApplication"`
}

// The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
type DiscountAmount struct {
	// The value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem bool `json:"appliesOnEachItem"`
}

func (DiscountAmount) IsDiscountCustomerGetsValue() {}

// The input fields for the value of the discount and how it is applied.
type DiscountAmountInput struct {
	// The value of the discount.
	Amount *null.String `json:"amount,omitempty,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountApplications.
type DiscountApplicationConnection struct {
	// A list of edges.
	Edges []DiscountApplicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountApplicationEdge.
	Nodes []DiscountApplication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountApplication and a cursor during pagination.
type DiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountApplicationEdge.
	Node DiscountApplication `json:"node"`
}

// Return type for `discountAutomaticActivate` mutation.
type DiscountAutomaticActivatePayload struct {
	// The activated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic app discount.
type DiscountAutomaticApp struct {
	// The app discount type providing the discount type.
	AppDiscountType *AppDiscountType `json:"appDiscountType,omitempty"`
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The class of the discount for combining purposes.
	DiscountClass DiscountClass `json:"discountClass"`
	// The ID for the discount.
	DiscountID string `json:"discountId"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The error history on the most recent version of the app discount.
	ErrorHistory *FunctionsErrorHistory `json:"errorHistory,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// The title of the discount.
	Title string `json:"title"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (DiscountAutomaticApp) IsDiscount() {}

func (DiscountAutomaticApp) IsDiscountAutomatic() {}

// Return type for `discountAutomaticAppCreate` mutation.
type DiscountAutomaticAppCreatePayload struct {
	// The created app discount.
	AutomaticAppDiscount *DiscountAutomaticApp `json:"automaticAppDiscount,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create an app discount.
type DiscountAutomaticAppInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The ID of the function providing the app discount type.
	FunctionID *string `json:"functionId,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// Additional metafields to associate to the discount.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `discountAutomaticAppUpdate` mutation.
type DiscountAutomaticAppUpdatePayload struct {
	// The updated automatic app discount.
	AutomaticAppDiscount *DiscountAutomaticApp `json:"automaticAppDiscount,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order.
type DiscountAutomaticBasic struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The class of the discount for combining purposes.
	DiscountClass MerchandiseDiscountClass `json:"discountClass"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount"`
}

func (DiscountAutomaticBasic) IsDiscount() {}

func (DiscountAutomaticBasic) IsDiscountAutomatic() {}

// Return type for `discountAutomaticBasicCreate` mutation.
type DiscountAutomaticBasicCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update an automatic basic discount.
type DiscountAutomaticBasicInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty,omitempty"`
	// Information about the qualifying items and their discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty,omitempty"`
}

// Return type for `discountAutomaticBasicUpdate` mutation.
type DiscountAutomaticBasicUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticBulkDelete` mutation.
type DiscountAutomaticBulkDeletePayload struct {
	// The asynchronous job removing the automatic discounts.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
type DiscountAutomaticBxgy struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The class of the discount for combining purposes.
	DiscountClass MerchandiseDiscountClass `json:"discountClass"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A legacy unique ID for the discount.
	ID string `json:"id"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty,omitempty"`
}

func (DiscountAutomaticBxgy) IsDiscount() {}

func (DiscountAutomaticBxgy) IsDiscountAutomatic() {}

func (DiscountAutomaticBxgy) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this DiscountAutomaticBxgy) GetEvents() *EventConnection { return this.Events }

func (DiscountAutomaticBxgy) IsNode() {}

// A globally-unique ID.
func (this DiscountAutomaticBxgy) GetID() string { return this.ID }

// Return type for `discountAutomaticBxgyCreate` mutation.
type DiscountAutomaticBxgyCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update an automatic Buy X, Get Y (BXGY) discount.
type DiscountAutomaticBxgyInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *string `json:"usesPerOrderLimit,omitempty,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty,omitempty"`
}

// Return type for `discountAutomaticBxgyUpdate` mutation.
type DiscountAutomaticBxgyUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountAutomatics.
type DiscountAutomaticConnection struct {
	// A list of edges.
	Edges []DiscountAutomaticEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountAutomaticEdge.
	Nodes []DiscountAutomatic `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `discountAutomaticDeactivate` mutation.
type DiscountAutomaticDeactivatePayload struct {
	// The deactivated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticDelete` mutation.
type DiscountAutomaticDeletePayload struct {
	// The deleted automatic discount ID.
	DeletedAutomaticDiscountID *string `json:"deletedAutomaticDiscountId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
type DiscountAutomaticEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountAutomaticEdge.
	Node DiscountAutomatic `json:"node"`
}

// A node containing an automatic discount and its related events.
type DiscountAutomaticNode struct {
	// The automatic discount object.
	AutomaticDiscount DiscountAutomatic `json:"automaticDiscount"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
}

func (DiscountAutomaticNode) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this DiscountAutomaticNode) GetEvents() *EventConnection { return this.Events }

func (DiscountAutomaticNode) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this DiscountAutomaticNode) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (DiscountAutomaticNode) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this DiscountAutomaticNode) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this DiscountAutomaticNode) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this DiscountAutomaticNode) GetPrivateMetafield() *PrivateMetafield {
	return this.PrivateMetafield
}

// List of private metafields that belong to the resource.
func (this DiscountAutomaticNode) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (DiscountAutomaticNode) IsNode() {}

// A globally-unique ID.
func (this DiscountAutomaticNode) GetID() string { return this.ID }

func (DiscountAutomaticNode) IsMetafieldReferencer() {}

// An auto-generated type for paginating through multiple DiscountAutomaticNodes.
type DiscountAutomaticNodeConnection struct {
	// A list of edges.
	Edges []DiscountAutomaticNodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountAutomaticNodeEdge.
	Nodes []DiscountAutomaticNode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
type DiscountAutomaticNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountAutomaticNodeEdge.
	Node *DiscountAutomaticNode `json:"node,omitempty"`
}

// Return type for `discountCodeActivate` mutation.
type DiscountCodeActivatePayload struct {
	// The activated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A code app discount.
type DiscountCodeApp struct {
	// The app discount type providing the discount type.
	AppDiscountType *AppDiscountType `json:"appDiscountType,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// The class of the discount for combining purposes.
	DiscountClass DiscountClass `json:"discountClass"`
	// The ID for the discount.
	DiscountID string `json:"discountId"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The error history on the most recent version of the discount.
	ErrorHistory *FunctionsErrorHistory `json:"errorHistory,omitempty,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty,omitempty"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
}

func (DiscountCodeApp) IsDiscount() {}

func (DiscountCodeApp) IsDiscountCode() {}

// Return type for `discountCodeAppCreate` mutation.
type DiscountCodeAppCreatePayload struct {
	// The created code app discount.
	CodeAppDiscount *DiscountCodeApp `json:"codeAppDiscount,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create a code app discount.
type DiscountCodeAppInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The ID of the function providing the app discount type.
	FunctionID *string `json:"functionId,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty,omitempty"`
	// Additional metafields to associate to the discount.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `discountCodeAppUpdate` mutation.
type DiscountCodeAppUpdatePayload struct {
	// The updated code app discount.
	CodeAppDiscount *DiscountCodeApp `json:"codeAppDiscount,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
//
// Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
type DiscountCodeApplication struct {
	// The method by which the discount's value is applied to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The string identifying the discount code that was used at the time of application.
	Code string `json:"code"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (DiscountCodeApplication) IsDiscountApplication() {}

// The method by which the discount's value is applied to its entitled items.
func (this DiscountCodeApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// An ordered index that can be used to identify the discount application and indicate the precedence
// of the discount application for calculations.
func (this DiscountCodeApplication) GetIndex() int { return this.Index }

// How the discount amount is distributed on the discounted lines.
func (this DiscountCodeApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this DiscountCodeApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this DiscountCodeApplication) GetValue() PricingValue { return this.Value }

// A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order.
type DiscountCodeBasic struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// The class of the discount for combining purposes.
	DiscountClass MerchandiseDiscountClass `json:"discountClass"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty,omitempty"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
}

func (DiscountCodeBasic) IsDiscount() {}

func (DiscountCodeBasic) IsDiscountCode() {}

// Return type for `discountCodeBasicCreate` mutation.
type DiscountCodeBasicCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update a basic code discount.
type DiscountCodeBasicInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
}

// Return type for `discountCodeBasicUpdate` mutation.
type DiscountCodeBasicUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkActivate` mutation.
type DiscountCodeBulkActivatePayload struct {
	// The asynchronous job that activates the code discounts.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDeactivate` mutation.
type DiscountCodeBulkDeactivatePayload struct {
	// The asynchronous job that deactivates the code discounts.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDelete` mutation.
type DiscountCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the code discounts.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A code discount that offers customers a Buy X, Get Y (BXGY) discount.
type DiscountCodeBxgy struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// The class of the discount for combining purposes.
	DiscountClass MerchandiseDiscountClass `json:"discountClass"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty,omitempty"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty,omitempty"`
}

func (DiscountCodeBxgy) IsDiscount() {}

func (DiscountCodeBxgy) IsDiscountCode() {}

// Return type for `discountCodeBxgyCreate` mutation.
type DiscountCodeBxgyCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update a BXGY code discount.
type DiscountCodeBxgyInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty,omitempty"`
	// The qualifying items that will be discounted, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty,omitempty"`
	// The customers that are eligible to use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty,omitempty"`
}

// Return type for `discountCodeBxgyUpdate` mutation.
type DiscountCodeBxgyUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDeactivate` mutation.
type DiscountCodeDeactivatePayload struct {
	// The deactivated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDelete` mutation.
type DiscountCodeDeletePayload struct {
	// The deleted code discount ID.
	DeletedCodeDiscountID *string `json:"deletedCodeDiscountId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A code discount that offers customers free shipping on their order.
type DiscountCodeFreeShipping struct {
	// Whether the discount applies on regular one-time-purchase shipping lines.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase"`
	// Whether the discount applies on subscription shipping lines.
	AppliesOnSubscription bool `json:"appliesOnSubscription"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the discount was created.
	CreatedAt string `json:"createdAt"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection"`
	// A shipping destination that qualifies for the discount.
	DestinationSelection DiscountShippingDestinationSelection `json:"destinationSelection"`
	// The class of the discount for combining purposes.
	DiscountClass ShippingDiscountClass `json:"discountClass"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// The maximum shipping price amount accepted to qualify for the discount.
	MaximumShippingPrice *MoneyV2 `json:"maximumShippingPrice,omitempty,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary string `json:"shortSummary"`
	// The date and time when the discount starts.
	StartsAt string `json:"startsAt"`
	// The status of the discount.
	Status DiscountStatus `json:"status"`
	// A detailed summary of the discount.
	Summary string `json:"summary"`
	// The title of the discount.
	Title string `json:"title"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty,omitempty"`
	// The date and time when the discount was updated.
	UpdatedAt string `json:"updatedAt"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
}

func (DiscountCodeFreeShipping) IsDiscount() {}

func (DiscountCodeFreeShipping) IsDiscountCode() {}

// Return type for `discountCodeFreeShippingCreate` mutation.
type DiscountCodeFreeShippingCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The input fields to create or update a free shipping code discount.
type DiscountCodeFreeShippingInput struct {
	// Determines which discount classes the shipping discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// The title of the discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The date and time when the discount starts.
	StartsAt *string `json:"startsAt,omitempty,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// The code to use the discount.
	Code *string `json:"code,omitempty,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty,omitempty"`
	// The customers that are eligible to use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty,omitempty"`
	// A list of destinations where the discount will apply.
	Destination *DiscountShippingDestinationSelectionInput `json:"destination,omitempty,omitempty"`
	// The maximum shipping price that qualifies for the discount.
	MaximumShippingPrice *null.String `json:"maximumShippingPrice,omitempty,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty,omitempty"`
}

// Return type for `discountCodeFreeShippingUpdate` mutation.
type DiscountCodeFreeShippingUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A node containing a code discount and its related events.
type DiscountCodeNode struct {
	// The underlying code discount object.
	CodeDiscount DiscountCode `json:"codeDiscount"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
}

func (DiscountCodeNode) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this DiscountCodeNode) GetEvents() *EventConnection { return this.Events }

func (DiscountCodeNode) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this DiscountCodeNode) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (DiscountCodeNode) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this DiscountCodeNode) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this DiscountCodeNode) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this DiscountCodeNode) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this DiscountCodeNode) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (DiscountCodeNode) IsNode() {}

// A globally-unique ID.
func (this DiscountCodeNode) GetID() string { return this.ID }

func (DiscountCodeNode) IsMetafieldReferencer() {}

// An auto-generated type for paginating through multiple DiscountCodeNodes.
type DiscountCodeNodeConnection struct {
	// A list of edges.
	Edges []DiscountCodeNodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountCodeNodeEdge.
	Nodes []DiscountCodeNode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
type DiscountCodeNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountCodeNodeEdge.
	Node *DiscountCodeNode `json:"node,omitempty"`
}

// Return type for `discountCodeRedeemCodeBulkDelete` mutation.
type DiscountCodeRedeemCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the discount redeem codes.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
type DiscountCollections struct {
	// The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
	Collections *CollectionConnection `json:"collections,omitempty"`
}

func (DiscountCollections) IsDiscountItems() {}

// The input fields for collections attached to a discount.
type DiscountCollectionsInput struct {
	// Specifies list of collection ids to add.
	Add []string `json:"add,omitempty,omitempty"`
	// Specifies list of collection ids to remove.
	Remove []string `json:"remove,omitempty,omitempty"`
}

// Determines which discount classes the discount can combine with.
type DiscountCombinesWith struct {
	// Combines with order discounts.
	OrderDiscounts bool `json:"orderDiscounts"`
	// Combines with product discounts.
	ProductDiscounts bool `json:"productDiscounts"`
	// Combines with shipping discounts.
	ShippingDiscounts bool `json:"shippingDiscounts"`
}

// The input fields to determine which discount classes the discount can combine with.
type DiscountCombinesWithInput struct {
	// Combines with product discounts.
	ProductDiscounts *bool `json:"productDiscounts,omitempty,omitempty"`
	// Combines with order discounts.
	OrderDiscounts *bool `json:"orderDiscounts,omitempty,omitempty"`
	// Combines with shipping discounts.
	ShippingDiscounts *bool `json:"shippingDiscounts,omitempty,omitempty"`
}

// The shipping destinations where the discount can be applied.
type DiscountCountries struct {
	// The codes for the countries where the discount can be applied.
	Countries []CountryCode `json:"countries,omitempty"`
	// Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
}

func (DiscountCountries) IsDiscountShippingDestinationSelection() {}

// The input fields for a list of countries to add or remove from the free shipping discount.
type DiscountCountriesInput struct {
	// The country codes to add to the list of countries where the discount applies.
	Add []CountryCode `json:"add,omitempty,omitempty"`
	// The country codes to remove from the list of countries where the discount applies.
	Remove []CountryCode `json:"remove,omitempty,omitempty"`
	// Whether the discount code is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty,omitempty"`
}

// The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
type DiscountCountryAll struct {
	// Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
	AllCountries bool `json:"allCountries"`
}

func (DiscountCountryAll) IsDiscountShippingDestinationSelection() {}

// The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
type DiscountCustomerAll struct {
	// Whether the discount can be applied by all customers. This value is always `true`.
	AllCustomers bool `json:"allCustomers"`
}

func (DiscountCustomerAll) IsDiscountCustomerSelection() {}

// The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
type DiscountCustomerBuys struct {
	// The items required for the discount to be applicable.
	Items DiscountItems `json:"items"`
	// The prerequisite value.
	Value DiscountCustomerBuysValue `json:"value"`
}

// The input fields for prerequisite items and quantity for the discount.
type DiscountCustomerBuysInput struct {
	// The quantity of prerequisite items.
	Value *DiscountCustomerBuysValueInput `json:"value,omitempty,omitempty"`
	// The IDs of items that the customer buys. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty,omitempty"`
}

// The input fields for prerequisite quantity or minimum purchase amount required for the discount.
type DiscountCustomerBuysValueInput struct {
	// The quantity of prerequisite items.
	Quantity *string `json:"quantity,omitempty,omitempty"`
	// The prerequisite minimum purchase amount required for the discount to be applicable.
	Amount *null.String `json:"amount,omitempty,omitempty"`
}

// The qualifying items in an order, the quantity of each one, and the total value of the discount.
type DiscountCustomerGets struct {
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription bool `json:"appliesOnSubscription"`
	// The items to which the discount applies.
	Items DiscountItems `json:"items"`
	// Entitled quantity and the discount value.
	Value DiscountCustomerGetsValue `json:"value"`
}

// Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
type DiscountCustomerGetsInput struct {
	// The quantity of items discounted and the discount value.
	Value *DiscountCustomerGetsValueInput `json:"value,omitempty,omitempty"`
	// The IDs of the items that the customer gets. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty,omitempty"`
}

// The input fields for the quantity of items discounted and the discount value.
type DiscountCustomerGetsValueInput struct {
	// The quantity of the items that are discounted and the discount value.
	DiscountOnQuantity *DiscountOnQuantityInput `json:"discountOnQuantity,omitempty,omitempty"`
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty,omitempty"`
	// The value of the discount.
	DiscountAmount *DiscountAmountInput `json:"discountAmount,omitempty,omitempty"`
}

// A list of customer segments that contain the customers that the discount applies to.
type DiscountCustomerSegments struct {
	// A list of customer segments that contain the customers who can use the discount.
	Segments []Segment `json:"segments,omitempty"`
}

func (DiscountCustomerSegments) IsDiscountCustomerSelection() {}

// The input fields for which customer segments to add to or remove from the discount.
type DiscountCustomerSegmentsInput struct {
	// A list of customer segments to add to the current list of customer segments.
	Add []string `json:"add,omitempty,omitempty"`
	// A list of customer segments to remove from the current list of customer segments.
	Remove []string `json:"remove,omitempty,omitempty"`
}

// The input fields for the customers who can use this discount.
type DiscountCustomerSelectionInput struct {
	// Whether all customers can use this discount.
	All *bool `json:"all,omitempty,omitempty"`
	// The list of customer IDs to add or remove from the list of customers.
	Customers *DiscountCustomersInput `json:"customers,omitempty,omitempty"`
	// The list of customer segment IDs to add or remove from the list of customer segments.
	CustomerSegments *DiscountCustomerSegmentsInput `json:"customerSegments,omitempty,omitempty"`
}

// A list of customers eligible for the discount.
type DiscountCustomers struct {
	// The list of customers eligible for the discount.
	Customers []Customer `json:"customers,omitempty"`
}

func (DiscountCustomers) IsDiscountCustomerSelection() {}

// The input fields for which customers to add to or remove from the discount.
type DiscountCustomersInput struct {
	// A list of customers to add to the current list of customers who can use the discount.
	Add []string `json:"add,omitempty,omitempty"`
	// A list of customers to remove from the current list of customers who can use the discount.
	Remove []string `json:"remove,omitempty,omitempty"`
}

// The input fields for how the discount will be applied. Currently, only percentage off is supported.
type DiscountEffectInput struct {
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty,omitempty"`
}

// The input fields for the items attached to a discount. You can specify the discount items by product ID or collection ID.
type DiscountItemsInput struct {
	// The products and product variants that are attached to a discount.
	Products *DiscountProductsInput `json:"products,omitempty,omitempty"`
	// The collections that are attached to a discount.
	Collections *DiscountCollectionsInput `json:"collections,omitempty,omitempty"`
	// Whether all items should be selected.
	All *bool `json:"all,omitempty,omitempty"`
}

// The minimum quantity of items required for the discount to apply.
type DiscountMinimumQuantity struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity string `json:"greaterThanOrEqualToQuantity"`
}

func (DiscountMinimumQuantity) IsDiscountMinimumRequirement() {}

// The input fields for the minimum quantity required for the discount.
type DiscountMinimumQuantityInput struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity *string `json:"greaterThanOrEqualToQuantity,omitempty,omitempty"`
}

// The input fields for the minimum quantity or subtotal required for a discount.
type DiscountMinimumRequirementInput struct {
	// The minimum required quantity.
	Quantity *DiscountMinimumQuantityInput `json:"quantity,omitempty,omitempty"`
	// The minimum required subtotal.
	Subtotal *DiscountMinimumSubtotalInput `json:"subtotal,omitempty,omitempty"`
}

// The minimum subtotal required for the discount to apply.
type DiscountMinimumSubtotal struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *MoneyV2 `json:"greaterThanOrEqualToSubtotal,omitempty"`
}

func (DiscountMinimumSubtotal) IsDiscountMinimumRequirement() {}

// The input fields for the minimum subtotal required for a discount.
type DiscountMinimumSubtotalInput struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *null.String `json:"greaterThanOrEqualToSubtotal,omitempty,omitempty"`
}

// A discount wrapper node.
type DiscountNode struct {
	// A discount.
	Discount Discount `json:"discount"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
}

func (DiscountNode) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this DiscountNode) GetEvents() *EventConnection { return this.Events }

func (DiscountNode) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this DiscountNode) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (DiscountNode) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this DiscountNode) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this DiscountNode) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this DiscountNode) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this DiscountNode) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (DiscountNode) IsNode() {}

// A globally-unique ID.
func (this DiscountNode) GetID() string { return this.ID }

func (DiscountNode) IsMetafieldReferencer() {}

// An auto-generated type for paginating through multiple DiscountNodes.
type DiscountNodeConnection struct {
	// A list of edges.
	Edges []DiscountNodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountNodeEdge.
	Nodes []DiscountNode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountNode and a cursor during pagination.
type DiscountNodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountNodeEdge.
	Node *DiscountNode `json:"node,omitempty"`
}

// The quantity of items discounted, the discount value, and how the discount will be applied.
type DiscountOnQuantity struct {
	// The discount's effect on qualifying items.
	Effect DiscountEffect `json:"effect"`
	// The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
	Quantity *DiscountQuantity `json:"quantity,omitempty"`
}

func (DiscountOnQuantity) IsDiscountCustomerGetsValue() {}

// The input fields for the quantity of items discounted and the discount value.
type DiscountOnQuantityInput struct {
	// The quantity of items that are discounted.
	Quantity *string `json:"quantity,omitempty,omitempty"`
	// The percentage value of the discount.
	Effect *DiscountEffectInput `json:"effect,omitempty,omitempty"`
}

// A discount effect that gives customers a percentage off of specified items on their order.
type DiscountPercentage struct {
	// The percentage value of the discount.
	Percentage float64 `json:"percentage"`
}

func (DiscountPercentage) IsDiscountCustomerGetsValue() {}

func (DiscountPercentage) IsDiscountEffect() {}

// A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
type DiscountProducts struct {
	// The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
	Products *ProductConnection `json:"products,omitempty"`
}

func (DiscountProducts) IsDiscountItems() {}

// The input fields for the products and product variants attached to a discount.
type DiscountProductsInput struct {
	// Specifies list of product ids to add.
	ProductsToAdd []string `json:"productsToAdd,omitempty,omitempty"`
	// Specifies list of product ids to remove.
	ProductsToRemove []string `json:"productsToRemove,omitempty,omitempty"`
	// Specifies list of product variant ids to add.
	ProductVariantsToAdd []string `json:"productVariantsToAdd,omitempty,omitempty"`
	// Specifies list of product variant ids to remove.
	ProductVariantsToRemove []string `json:"productVariantsToRemove,omitempty,omitempty"`
}

// A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
type DiscountPurchaseAmount struct {
	// The purchase amount in decimal format.
	Amount null.String `json:"amount"`
}

func (DiscountPurchaseAmount) IsDiscountCustomerBuysValue() {}

// A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
type DiscountQuantity struct {
	// The quantity of items.
	Quantity string `json:"quantity"`
}

func (DiscountQuantity) IsDiscountCustomerBuysValue() {}

// A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
type DiscountRedeemCode struct {
	// The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount"`
	// The code that a customer can use at checkout to receive a discount.
	Code string `json:"code"`
	// The application that created the discount redeem code.
	CreatedBy *App `json:"createdBy,omitempty,omitempty"`
	// A globally-unique ID of the discount redeem code.
	ID string `json:"id"`
}

// Return type for `discountRedeemCodeBulkAdd` mutation.
type DiscountRedeemCodeBulkAddPayload struct {
	// The ID of the discount redeem code bulk creation operation. The properties and status of the operation can be tracked using the [`DiscountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/2022-04/queries/discountRedeemCodeBulkCreation).
	BulkCreation *DiscountRedeemCodeBulkCreation `json:"bulkCreation,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DiscountUserError `json:"userErrors,omitempty"`
}

// The properties and status of a bulk discount redeem code creation operation.
type DiscountRedeemCodeBulkCreation struct {
	// The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
	Codes *DiscountRedeemCodeBulkCreationCodeConnection `json:"codes,omitempty"`
	// The number of codes to create.
	CodesCount int `json:"codesCount"`
	// The date and time when the bulk creation was created.
	CreatedAt string `json:"createdAt"`
	// The code discount associated with the created codes.
	DiscountCode *DiscountCodeNode `json:"discountCode,omitempty,omitempty"`
	// Whether the bulk creation is still queued (`false`) or has been run (`true`).
	Done bool `json:"done"`
	// The number of codes that weren't created successfully.
	FailedCount int `json:"failedCount"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The number of codes created successfully.
	ImportedCount int `json:"importedCount"`
}

func (DiscountRedeemCodeBulkCreation) IsNode() {}

// A globally-unique ID.
func (this DiscountRedeemCodeBulkCreation) GetID() string { return this.ID }

// A result of a discount redeem code creation operation created by a bulk creation.
type DiscountRedeemCodeBulkCreationCode struct {
	// The code to use in the discount redeem code creation operation.
	Code string `json:"code"`
	// The successfully created discount redeem code.
	//
	// If the discount redeem code couldn't be created, then this field is `null``.
	//
	DiscountRedeemCode *DiscountRedeemCode `json:"discountRedeemCode,omitempty,omitempty"`
	// A list of errors that occurred during the creation operation of the discount redeem code.
	Errors []DiscountUserError `json:"errors,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
type DiscountRedeemCodeBulkCreationCodeConnection struct {
	// A list of edges.
	Edges []DiscountRedeemCodeBulkCreationCodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
	Nodes []DiscountRedeemCodeBulkCreationCode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
type DiscountRedeemCodeBulkCreationCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
	Node *DiscountRedeemCodeBulkCreationCode `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountRedeemCodes.
type DiscountRedeemCodeConnection struct {
	// A list of edges.
	Edges []DiscountRedeemCodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DiscountRedeemCodeEdge.
	Nodes []DiscountRedeemCode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
type DiscountRedeemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DiscountRedeemCodeEdge.
	Node *DiscountRedeemCode `json:"node,omitempty"`
}

// The input fields for the redeem code to attach to a discount.
type DiscountRedeemCodeInput struct {
	// The code that a customer can use at checkout to receive the associated discount.
	Code string `json:"code"`
}

// A shareable URL for a discount code.
type DiscountShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty,omitempty"`
	// The type of page that's associated with the URL.
	TargetType DiscountShareableURLTargetType `json:"targetType"`
	// The title of the page that's associated with the URL.
	Title string `json:"title"`
	// The URL for the discount code.
	URL string `json:"url"`
}

// The input fields for the destinations where the free shipping discount will be applied.
type DiscountShippingDestinationSelectionInput struct {
	// Whether the discount code applies to all countries.
	All *bool `json:"all,omitempty,omitempty"`
	// A list of countries where the discount code will apply.
	Countries *DiscountCountriesInput `json:"countries,omitempty,omitempty"`
}

// An error that occurs during the execution of a discount mutation.
type DiscountUserError struct {
	// The error code.
	Code *DiscountErrorCode `json:"code,omitempty,omitempty"`
	// Extra information about this error.
	ExtraInfo *string `json:"extraInfo,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DiscountUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DiscountUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DiscountUserError) GetMessage() string { return this.Message }

// Return type for `disputeEvidenceUpdate` mutation.
type DisputeEvidenceUpdatePayload struct {
	// The updated dispute evidence.
	DisputeEvidence *ShopifyPaymentsDisputeEvidence `json:"disputeEvidence,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DisputeEvidenceUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `DisputeEvidenceUpdate`.
type DisputeEvidenceUpdateUserError struct {
	// The error code.
	Code *DisputeEvidenceUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (DisputeEvidenceUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this DisputeEvidenceUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this DisputeEvidenceUpdateUserError) GetMessage() string { return this.Message }

// A unique string that represents the address of a Shopify store on the Internet.
type Domain struct {
	// The host name of the domain. For example, `example.com`.
	Host string `json:"host"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The localization of the domain, if the domain doesn't redirect.
	Localization *DomainLocalization `json:"localization,omitempty,omitempty"`
	// The web presence of the domain.
	MarketWebPresence *MarketWebPresence `json:"marketWebPresence,omitempty,omitempty"`
	// Whether SSL is enabled.
	SslEnabled bool `json:"sslEnabled"`
	// The URL of the domain (for example, `https://example.com`).
	URL string `json:"url"`
}

func (Domain) IsNode() {}

// A globally-unique ID.
func (this Domain) GetID() string { return this.ID }

// The country and language settings assigned to a domain.
type DomainLocalization struct {
	// The ISO codes for the domain’s alternate locales. For example, `["en"]`.
	AlternateLocales []string `json:"alternateLocales,omitempty"`
	// The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
	Country *string `json:"country,omitempty,omitempty"`
	// The ISO code for the domain’s default locale. For example, `"en"`.
	DefaultLocale string `json:"defaultLocale"`
}

// An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
//
// - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
// - Send invoices to customers to pay with a secure checkout link.
// - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
// - Re-create orders manually from active sales channels.
// - Sell products at discount or wholesale rates.
// - Take pre-orders.
// - Save an order as a draft and resume working on it later.
//
// For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
//
// **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type DraftOrder struct {
	// The order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty,omitempty"`
	// The billing address of the customer.
	//
	BillingAddress *MailingAddress `json:"billingAddress,omitempty,omitempty"`
	// Whether the billing address matches the shipping address.
	BillingAddressMatchesShippingAddress bool `json:"billingAddressMatchesShippingAddress"`
	// The date and time when the draft order converted to a new order,
	// and the draft order's status changed to **Completed**.
	//
	CompletedAt *string `json:"completedAt,omitempty,omitempty"`
	// The date and time when the draft order was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// The three letter code for the currency of the store at the time of the most recent update to the draft order.
	//
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The custom information added to the draft order on behalf of the customer.
	//
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// The email address of the customer, which is used to send notifications.
	Email *string `json:"email,omitempty,omitempty"`
	// The list of events associated with the draft order.
	Events *EventConnection `json:"events,omitempty"`
	// Whether the merchant has added timeline comments to the draft order.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The subject defined for the draft invoice email template.
	InvoiceEmailTemplateSubject string `json:"invoiceEmailTemplateSubject"`
	// The date and time when the invoice was last emailed to the customer.
	InvoiceSentAt *string `json:"invoiceSentAt,omitempty,omitempty"`
	// The link to the checkout, which is sent to the customer in the invoice email.
	InvoiceURL *string `json:"invoiceUrl,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The list of the line items in the draft order.
	LineItems *DraftOrderLineItemConnection `json:"lineItems,omitempty"`
	// The subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
	LineItemsSubtotalPrice *MoneyBag `json:"lineItemsSubtotalPrice,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// The name of the selected market.
	MarketName string `json:"marketName"`
	// The selected market region country code for the draft order.
	MarketRegionCountryCode CountryCode `json:"marketRegionCountryCode"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The identifier for the draft order, which is unique within the store. For example, _#D1223_.
	//
	Name string `json:"name"`
	// The text from an optional note attached to the draft order.
	Note2 *string `json:"note2,omitempty,omitempty"`
	// The order that was created from this draft order.
	Order *Order `json:"order,omitempty,omitempty"`
	// The associated payment terms for this draft order.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty,omitempty"`
	// The phone number assigned to the draft order.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The purchase order number.
	PoNumber *string `json:"poNumber,omitempty,omitempty"`
	// The payment currency of the customer for this draft order.
	PresentmentCurrencyCode CurrencyCode `json:"presentmentCurrencyCode"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The purchasing entity for the draft order.
	PurchasingEntity PurchasingEntity `json:"purchasingEntity,omitempty"`
	// Whether the Draft Order is ready and can be completed. Draft Orders
	// might have asynchronous operations that can take time to finish.
	Ready bool `json:"ready"`
	// The time after which inventory will automatically be restocked.
	ReserveInventoryUntil *string `json:"reserveInventoryUntil,omitempty,omitempty"`
	// The shipping address of the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty,omitempty"`
	// The line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty,omitempty"`
	// Status of the draft order.
	Status DraftOrderStatus `json:"status"`
	// The subtotal of the line items and their discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
	//
	SubtotalPrice null.String `json:"subtotalPrice"`
	// A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// A comma separated list of tags associated with the draft order. Updating `tags` overwrites
	// any existing tags that were previously added to the draft order. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// Whether the draft order is tax exempt.
	TaxExempt bool `json:"taxExempt"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the line item prices include taxes.
	TaxesIncluded bool `json:"taxesIncluded"`
	// The total discounts for this draft order.
	TotalDiscountsSet *MoneyBag `json:"totalDiscountsSet,omitempty"`
	// The total price of line items for this draft order.
	TotalLineItemsPriceSet *MoneyBag `json:"totalLineItemsPriceSet,omitempty"`
	// The total amount of the draft order, including taxes, shipping charges, and discounts.
	TotalPrice null.String `json:"totalPrice"`
	// The total amount of the draft order including taxes, shipping charges, and discounts.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// The total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// The total shipping charge for the draft order.
	TotalShippingPriceSet *MoneyBag `json:"totalShippingPriceSet,omitempty"`
	// The total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax"`
	// The total amount of taxes for the draft order.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// The total weight in grams of the draft order.
	TotalWeight string `json:"totalWeight"`
	// The date and time when the draft order was last changed.
	// The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
	//
	UpdatedAt string `json:"updatedAt"`
	// Whether the draft order will be visible to the customer on the self-serve portal.
	VisibleToCustomer bool `json:"visibleToCustomer"`
}

func (DraftOrder) IsCommentEventEmbed() {}

func (DraftOrder) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this DraftOrder) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this DraftOrder) GetID() string { return this.ID }

func (DraftOrder) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this DraftOrder) GetEvents() *EventConnection { return this.Events }

func (DraftOrder) IsHasLocalizationExtensions() {}

// List of localization extensions for the resource.
func (this DraftOrder) GetLocalizationExtensions() *LocalizationExtensionConnection {
	return this.LocalizationExtensions
}

func (DraftOrder) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this DraftOrder) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this DraftOrder) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this DraftOrder) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this DraftOrder) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (DraftOrder) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this DraftOrder) GetLegacyResourceID() string { return this.LegacyResourceID }

func (DraftOrder) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this DraftOrder) GetDefaultCursor() string { return this.DefaultCursor }

func (DraftOrder) IsNode() {}

// A globally-unique ID.

func (DraftOrder) IsMetafieldReferencer() {}

// The order-level discount applied to a draft order.
type DraftOrderAppliedDiscount struct {
	// Amount of the order-level discount that is applied to the draft order.
	Amount null.String `json:"amount"`
	// The amount of money discounted, with values shown in both shop currency and presentment currency.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// Amount of money discounted.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Description of the order-level discount.
	Description string `json:"description"`
	// Name of the order-level discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The order level discount amount. If `valueType` is `"percentage"`,
	// then `value` is the percentage discount.
	//
	Value float64 `json:"value"`
	// Type of the order-level discount.
	ValueType DraftOrderAppliedDiscountType `json:"valueType"`
}

// The input fields for applying an order-level discount to a draft order.
type DraftOrderAppliedDiscountInput struct {
	// The applied amount of the discount.
	// If the type of the discount is fixed amount, then this is the fixed dollar amount.
	// If the type is percentage, then this is the subtotal multiplied by the percentage.
	//
	Amount *null.String `json:"amount,omitempty,omitempty"`
	// Reason for the discount.
	//
	Description *string `json:"description,omitempty,omitempty"`
	// Title of the discount.
	//
	Title *string `json:"title,omitempty,omitempty"`
	// The value of the discount.
	// If the type of the discount is fixed amount, then this is a fixed dollar amount.
	// If the type is percentage, then this is the percentage.
	//
	Value float64 `json:"value"`
	// The type of discount.
	//
	ValueType DraftOrderAppliedDiscountType `json:"valueType"`
}

// Return type for `draftOrderBulkAddTags` mutation.
type DraftOrderBulkAddTagsPayload struct {
	// The asynchronous job for adding tags to the draft orders.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderBulkDelete` mutation.
type DraftOrderBulkDeletePayload struct {
	// The asynchronous job for deleting the draft orders.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderBulkRemoveTags` mutation.
type DraftOrderBulkRemoveTagsPayload struct {
	// The asynchronous job for removing tags from the draft orders.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderCalculate` mutation.
type DraftOrderCalculatePayload struct {
	// The calculated properties for a draft order.
	CalculatedDraftOrder *CalculatedDraftOrder `json:"calculatedDraftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderComplete` mutation.
type DraftOrderCompletePayload struct {
	// The completed draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DraftOrders.
type DraftOrderConnection struct {
	// A list of edges.
	Edges []DraftOrderEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DraftOrderEdge.
	Nodes []DraftOrder `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `draftOrderCreateFromOrder` mutation.
type DraftOrderCreateFromOrderPayload struct {
	// The created Draft Order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderCreateMerchantCheckout` mutation.
type DraftOrderCreateMerchantCheckoutPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderCreate` mutation.
type DraftOrderCreatePayload struct {
	// The created draft order.
	//
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields to specify the draft order to delete by its ID.
type DraftOrderDeleteInput struct {
	// The ID of the draft order to delete.
	//
	ID string `json:"id"`
}

// Return type for `draftOrderDelete` mutation.
type DraftOrderDeletePayload struct {
	// The ID of the deleted draft order.
	//
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderDuplicate` mutation.
type DraftOrderDuplicatePayload struct {
	// The newly duplicated draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DraftOrder and a cursor during pagination.
type DraftOrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DraftOrderEdge.
	Node *DraftOrder `json:"node,omitempty"`
}

// The input fields used to create or update a draft order.
type DraftOrderInput struct {
	// The discount that will be applied to the draft order.
	// A draft order line item can have one discount. A draft order can also have one order-level discount.
	//
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty,omitempty"`
	// The mailing address associated with the payment method.
	//
	BillingAddress *MailingAddressInput `json:"billingAddress,omitempty,omitempty"`
	// Extra information added to the customer.
	//
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
	// The customer's email address.
	//
	Email *string `json:"email,omitempty,omitempty"`
	// Product variant line item or custom line item associated to the draft order.
	// Each draft order must include at least one line item.
	//
	LineItems []DraftOrderLineItemInput `json:"lineItems,omitempty,omitempty"`
	// Metafields attached to the draft order.
	//
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// The localization extensions attached to the draft order. For example, Tax IDs.
	LocalizationExtensions []LocalizationExtensionInput `json:"localizationExtensions,omitempty,omitempty"`
	// The text of an optional note that a shop owner can attach to the draft order.
	//
	Note *string `json:"note,omitempty,omitempty"`
	// The mailing address to where the order will be shipped.
	//
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty,omitempty"`
	// A shipping line object, which details the shipping method used.
	//
	ShippingLine *ShippingLineInput `json:"shippingLine,omitempty,omitempty"`
	// A comma separated list of tags that have been added to the draft order.
	//
	Tags []string `json:"tags,omitempty,omitempty"`
	// Whether or not taxes are exempt for the draft order.
	// If false, then Shopify will refer to the taxable field for each line item.
	// If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
	//
	TaxExempt *bool `json:"taxExempt,omitempty,omitempty"`
	// Sent as part of a draft order object to load customer shipping information.
	//
	UseCustomerDefaultAddress *bool `json:"useCustomerDefaultAddress,omitempty,omitempty"`
	// Whether the draft order will be visible to the customer on the self-serve portal.
	VisibleToCustomer *bool `json:"visibleToCustomer,omitempty,omitempty"`
	// Time after which inventory will automatically be restocked.
	ReserveInventoryUntil *string `json:"reserveInventoryUntil,omitempty,omitempty"`
	// The payment currency of the customer for this draft order.
	PresentmentCurrencyCode *CurrencyCode `json:"presentmentCurrencyCode,omitempty,omitempty"`
	// The selected market region country code for the draft order.
	MarketRegionCountryCode *CountryCode `json:"marketRegionCountryCode,omitempty,omitempty"`
	// The customer's phone number.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The fields used to create payment terms.
	PaymentTerms *PaymentTermsInput `json:"paymentTerms,omitempty,omitempty"`
	// The purchasing entity for this draft order.
	PurchasingEntity *PurchasingEntityInput `json:"purchasingEntity,omitempty,omitempty"`
	// The source of the checkout.
	// To use this field for sales attribution, you must register the channels that your app is managing.
	// You can register the channels that your app is managing by completing
	// [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
	// After you've submitted your request, you need to wait for your request to be processed by Shopify.
	// You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension.
	// You need to specify the handle as the `source_name` value in your request.
	// The handle is the channel that the order was placed from.
	SourceName *string `json:"sourceName,omitempty,omitempty"`
	// The purchase order number.
	PoNumber *string `json:"poNumber,omitempty,omitempty"`
}

// Return type for `draftOrderInvoicePreview` mutation.
type DraftOrderInvoicePreviewPayload struct {
	// The draft order invoice email rendered as HTML to allow previewing.
	PreviewHTML *string `json:"previewHtml,omitempty,omitempty"`
	// The subject preview for the draft order invoice email.
	PreviewSubject *string `json:"previewSubject,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderInvoiceSend` mutation.
type DraftOrderInvoiceSendPayload struct {
	// The draft order an invoice email is sent for.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A line item included in a draft order.
type DraftOrderLineItem struct {
	// The discount that will be applied to the line item or the overall order.
	//
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty,omitempty"`
	// Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
	//
	Custom bool `json:"custom"`
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Additional information (metafields) about the line item with the associated types.
	CustomAttributesV2 []TypedAttribute `json:"customAttributesV2,omitempty"`
	// The line item price after discounts are applied.
	//
	DiscountedTotal null.String `json:"discountedTotal"`
	// The line item price after discounts are applied.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
	//
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The weight of the line item in grams. The weight can only be specified if the line item is a custom
	// line item.
	//
	Grams *int `json:"grams,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated with the draft order line item.
	Image *Image `json:"image,omitempty,omitempty"`
	// Whether the line item is a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// The name of the product.
	Name string `json:"name"`
	// The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// The total price (without discounts) of the line item,based on the original unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant price without any discounts applied.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The variant price without any discounts applied.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The product corresponding to the line item’s product variant.
	//
	Product *Product `json:"product,omitempty,omitempty"`
	// The number of product variants that are requested in the draft order.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The SKU number of the product variant.
	Sku *string `json:"sku,omitempty,omitempty"`
	// A list of tax line objects, each of which details the total taxes applicable to the order.
	//
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product or variant. This field only applies to custom line items.
	Title string `json:"title"`
	// The total value of the discount that is applied to the line item.
	//
	TotalDiscount null.String `json:"totalDiscount"`
	// The total value of the discount that is applied to the line item.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The associated variant for the line item.
	//
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who created the product variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
	// The weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty,omitempty"`
}

func (DraftOrderLineItem) IsNode() {}

// A globally-unique ID.
func (this DraftOrderLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple DraftOrderLineItems.
type DraftOrderLineItemConnection struct {
	// A list of edges.
	Edges []DraftOrderLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in DraftOrderLineItemEdge.
	Nodes []DraftOrderLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
type DraftOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of DraftOrderLineItemEdge.
	Node *DraftOrderLineItem `json:"node,omitempty"`
}

// The input fields used to create a line item for a draft order.
type DraftOrderLineItemInput struct {
	// Discount which will be applied to the line item.
	//
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty,omitempty"`
	// Represents a generic custom attribute using a key value pair.
	//
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
	// The price without any discounts applied. This value is ignored when `variantId` is provided.
	OriginalUnitPrice *null.String `json:"originalUnitPrice,omitempty,omitempty"`
	// The number of products that were purchased.
	//
	Quantity int `json:"quantity"`
	// Whether physical shipping is required. This value is ignored when `variantId` is provided.
	//
	RequiresShipping *bool `json:"requiresShipping,omitempty,omitempty"`
	// The SKU number of the item. This value is ignored when `variantId` is provided.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether the item is taxable. This value is ignored when `variantId` is provided.
	Taxable *bool `json:"taxable,omitempty,omitempty"`
	// Title of the item. Ignored when `variantId` is provided.
	Title *string `json:"title,omitempty,omitempty"`
	// The ID of the product variant corresponding to the line item.
	// Null if custom line item. Required if product variant line item.
	//
	VariantID *string `json:"variantId,omitempty,omitempty"`
	// Specifies the weight unit and value inputs.
	// This value is ignored when `variantId` is provided.
	//
	Weight *WeightInput `json:"weight,omitempty,omitempty"`
}

// Represents a draft order tag.
type DraftOrderTag struct {
	// Handle of draft order tag.
	Handle string `json:"handle"`
	// ID of draft order tag.
	ID string `json:"id"`
	// Title of draft order tag.
	Title string `json:"title"`
}

func (DraftOrderTag) IsNode() {}

// A globally-unique ID.
func (this DraftOrderTag) GetID() string { return this.ID }

// Return type for `draftOrderUpdate` mutation.
type DraftOrderUpdatePayload struct {
	// The updated draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The duty details for a line item.
type Duty struct {
	// The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty,omitempty"`
	// The harmonized system code of the item used in calculating the duty.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The amount of the duty.
	Price *MoneyBag `json:"price,omitempty"`
	// A list of taxes charged on the duty.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
}

func (Duty) IsNode() {}

// A globally-unique ID.
func (this Duty) GetID() string { return this.ID }

// A sale associated with a duty charge.
type DutySale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The duty for the associated sale.
	Duty *Duty `json:"duty,omitempty"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (DutySale) IsSale() {}

// The type of order action that the sale represents.
func (this DutySale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this DutySale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this DutySale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this DutySale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this DutySale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this DutySale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this DutySale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this DutySale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this DutySale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// The attribute editable information.
type EditableProperty struct {
	// Whether the attribute is locked for editing.
	Locked bool `json:"locked"`
	// The reason the attribute is locked for editing.
	Reason *string `json:"reason,omitempty,omitempty"`
}

// The input fields for an email.
type EmailInput struct {
	// Specifies the email subject.
	Subject *string `json:"subject,omitempty,omitempty"`
	// Specifies the email recipient.
	To *string `json:"to,omitempty,omitempty"`
	// Specifies the email sender.
	From *string `json:"from,omitempty,omitempty"`
	// Specifies the email body.
	Body *string `json:"body,omitempty,omitempty"`
	// Specifies any bcc recipients for the email.
	Bcc []string `json:"bcc,omitempty,omitempty"`
	// Specifies a custom message to include in the email.
	CustomMessage *string `json:"customMessage,omitempty,omitempty"`
}

// Error position information in a ShopifyQL parsing error.
type ErrorPosition struct {
	// The character position of the error in the line.
	Character int `json:"character"`
	// The line number of the error.
	Line int `json:"line"`
}

// An error that occurs during the execution of a server pixel mutation.
type ErrorsServerPixelUserError struct {
	// The error code.
	Code *ErrorsServerPixelUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ErrorsServerPixelUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ErrorsServerPixelUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ErrorsServerPixelUserError) GetMessage() string { return this.Message }

// An error that occurs during the execution of a web pixel mutation.
type ErrorsWebPixelUserError struct {
	// The error code.
	Code *ErrorsWebPixelUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ErrorsWebPixelUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ErrorsWebPixelUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ErrorsWebPixelUserError) GetMessage() string { return this.Message }

// Return type for `eventBridgeServerPixelUpdate` mutation.
type EventBridgeServerPixelUpdatePayload struct {
	// The server pixel as configured by the mutation.
	ServerPixel *ServerPixel `json:"serverPixel,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsServerPixelUserError `json:"userErrors,omitempty"`
}

// Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
type EventBridgeWebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// The input fields for an EventBridge webhook subscription.
type EventBridgeWebhookSubscriptionInput struct {
	// The ARN of the EventBridge partner event source.
	Arn *string `json:"arn,omitempty,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty,omitempty"`
}

// Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
type EventBridgeWebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple Events.
type EventConnection struct {
	// A list of edges.
	Edges []EventEdge `json:"edges,omitempty"`
	// A list of the nodes contained in EventEdge.
	Nodes []Event `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Event and a cursor during pagination.
type EventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of EventEdge.
	Node Event `json:"node"`
}

// An exchange where existing items on an order are returned and new items are added to the order.
type ExchangeV2 struct {
	// The details of the new items in the exchange.
	Additions *ExchangeV2Additions `json:"additions,omitempty"`
	// The date and time when the exchange was completed.
	CompletedAt *string `json:"completedAt,omitempty,omitempty"`
	// The date and time when the exchange was created.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The location where the exchange happened.
	Location *Location `json:"location,omitempty,omitempty"`
	// The text of an optional note that a shop owner can attach to the exchange.
	Note *string `json:"note,omitempty,omitempty"`
	// The refunds processed during the exchange.
	Refunds []Refund `json:"refunds,omitempty"`
	// The details of the returned items in the exchange.
	Returns *ExchangeV2Returns `json:"returns,omitempty"`
	// The staff member associated with the exchange.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// The amount of money that was paid or refunded as part of the exchange.
	TotalAmountProcessedSet *MoneyBag `json:"totalAmountProcessedSet,omitempty"`
	// The difference in values of the items that were exchanged.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// The order transactions related to the exchange.
	Transactions []OrderTransaction `json:"transactions,omitempty"`
}

func (ExchangeV2) IsNode() {}

// A globally-unique ID.
func (this ExchangeV2) GetID() string { return this.ID }

// New items associated to the exchange.
type ExchangeV2Additions struct {
	// The list of new items for the exchange.
	LineItems []ExchangeV2LineItem `json:"lineItems,omitempty"`
	// The subtotal of the items being added, including discounts.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// The summary of all taxes of the items being added.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// The total price of the items being added, including discounts and taxes.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

// An auto-generated type for paginating through multiple ExchangeV2s.
type ExchangeV2Connection struct {
	// A list of edges.
	Edges []ExchangeV2Edge `json:"edges,omitempty"`
	// A list of the nodes contained in ExchangeV2Edge.
	Nodes []ExchangeV2 `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ExchangeV2 and a cursor during pagination.
type ExchangeV2Edge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ExchangeV2Edge.
	Node *ExchangeV2 `json:"node,omitempty"`
}

// Contains information about an item in the exchange.
type ExchangeV2LineItem struct {
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The total line price, in shop and presentment currencies, after discounts are applied.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The price, in shop and presentment currencies,
	// of a single variant unit after line item discounts are applied.
	//
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// Indiciates if this line item is a gift card.
	GiftCard bool `json:"giftCard"`
	// The gift cards associated with the line item.
	GiftCards []GiftCard `json:"giftCards,omitempty"`
	// The line item associated with this object.
	LineItem *LineItem `json:"lineItem,omitempty,omitempty"`
	// The name of the product.
	Name string `json:"name"`
	// The total price, in shop and presentment currencies, before discounts are applied.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The price, in shop and presentment currencies,
	// of a single variant unit before line item discounts are applied.
	//
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The number of products that were purchased.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The SKU number of the product variant.
	Sku *string `json:"sku,omitempty,omitempty"`
	// The TaxLine object connected to this line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product or variant. This field only applies to custom line items.
	Title string `json:"title"`
	// The product variant of the line item.
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who created the product variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
}

// Return items associated to the exchange.
type ExchangeV2Returns struct {
	// The list of return items for the exchange.
	LineItems []ExchangeV2LineItem `json:"lineItems,omitempty"`
	// The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts.
	//
	OrderDiscountAmountSet *MoneyBag `json:"orderDiscountAmountSet,omitempty"`
	// The amount of money to be refunded for shipping.
	ShippingRefundAmountSet *MoneyBag `json:"shippingRefundAmountSet,omitempty"`
	// The subtotal of the items being returned.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// The summary of all taxes of the items being returned.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// The amount of money to be refunded for tip.
	TipRefundAmountSet *MoneyBag `json:"tipRefundAmountSet,omitempty"`
	// The total value of the items being returned.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

// Represents a video hosted outside of Shopify.
type ExternalVideo struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The embed URL of the video for the respective host.
	EmbedURL string `json:"embedUrl"`
	// The URL.
	EmbeddedURL string `json:"embeddedUrl"`
	// The host of the external video.
	Host MediaHost `json:"host"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The origin URL of the video on the respective host.
	OriginURL string `json:"originUrl"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (ExternalVideo) IsMedia() {}

// A word or phrase to share the nature or contents of a media.
func (this ExternalVideo) GetAlt() *string { return this.Alt }

// A globally-unique ID.
func (this ExternalVideo) GetID() string { return this.ID }

// The media content type.
func (this ExternalVideo) GetMediaContentType() MediaContentType { return this.MediaContentType }

// Any errors which have occurred on the media.
func (this ExternalVideo) GetMediaErrors() []MediaError {
	if this.MediaErrors == nil {
		return nil
	}
	interfaceSlice := make([]MediaError, 0, len(this.MediaErrors))
	for _, concrete := range this.MediaErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The warnings attached to the media.
func (this ExternalVideo) GetMediaWarnings() []MediaWarning {
	if this.MediaWarnings == nil {
		return nil
	}
	interfaceSlice := make([]MediaWarning, 0, len(this.MediaWarnings))
	for _, concrete := range this.MediaWarnings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The preview image for the media.
func (this ExternalVideo) GetPreview() *MediaPreviewImage { return this.Preview }

// Current status of the media.
func (this ExternalVideo) GetStatus() MediaStatus { return this.Status }

func (ExternalVideo) IsNode() {}

// A globally-unique ID.

// Requirements that must be met before an app can be installed.
type FailedRequirement struct {
	// Action to be taken to resolve a failed requirement, including URL link.
	Action *NavigationItem `json:"action,omitempty,omitempty"`
	// A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
	// encounters when trying to make use of their Shop and its resources.
	//
	Message string `json:"message"`
}

// Return type for `fileAcknowledgeUpdateFailed` mutation.
type FileAcknowledgeUpdateFailedPayload struct {
	// The updated file(s).
	Files []File `json:"files,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Files.
type FileConnection struct {
	// A list of edges.
	Edges []FileEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FileEdge.
	Nodes []File `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields that are required to create a file object.
type FileCreateInput struct {
	// When provided, the file will be created with the given filename,
	// otherwise the filename in the originalSource will be used.
	//
	Filename *string `json:"filename,omitempty,omitempty"`
	// An external URL (for images only) or a
	// [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
	//
	OriginalSource string `json:"originalSource"`
	// The file content type. If omitted, then Shopify will attempt to determine the content type during file processing.
	ContentType *FileContentType `json:"contentType,omitempty,omitempty"`
	// The alternative text description of the file.
	Alt *string `json:"alt,omitempty,omitempty"`
	// How to handle if filename is already in use.
	DuplicateResolutionMode *FileCreateInputDuplicateResolutionMode `json:"duplicateResolutionMode,omitempty,omitempty"`
}

// Return type for `fileCreate` mutation.
type FileCreatePayload struct {
	// The newly created files.
	Files []File `json:"files,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// Return type for `fileDelete` mutation.
type FileDeletePayload struct {
	// The IDs of the deleted files.
	DeletedFileIds []string `json:"deletedFileIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one File and a cursor during pagination.
type FileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FileEdge.
	Node File `json:"node"`
}

// A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
// Check the file before attempting to upload again.
type FileError struct {
	// Code representing the type of error.
	Code FileErrorCode `json:"code"`
	// Additional details regarding the error.
	Details *string `json:"details,omitempty,omitempty"`
	// Translated error message.
	Message string `json:"message"`
}

// The input fields that are required to update a file object.
type FileUpdateInput struct {
	// The ID of the file to be updated.
	ID string `json:"id"`
	// The alternative text description of the file.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The source from which to update a media image or generic file.
	// An external URL (for images only) or a
	// [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
	//
	OriginalSource *string `json:"originalSource,omitempty,omitempty"`
	// The source from which to update the media preview image.
	// May be an external URL or a
	// [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
	//
	PreviewImageSource *string `json:"previewImageSource,omitempty,omitempty"`
	// The name of the file including its extension.
	//
	Filename *string `json:"filename,omitempty,omitempty"`
}

// Return type for `fileUpdate` mutation.
type FileUpdatePayload struct {
	// The list of updated files.
	Files []File `json:"files,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FilesUserError `json:"userErrors,omitempty"`
}

// An error that happens during the execution of a Files API query or mutation.
type FilesUserError struct {
	// The error code.
	Code *FilesErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FilesUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FilesUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FilesUserError) GetMessage() string { return this.Message }

// A filter option is one possible value in a search filter.
type FilterOption struct {
	// The filter option's label for display purposes.
	Label string `json:"label"`
	// The filter option's value.
	Value string `json:"value"`
}

// Return type for `flowTriggerReceive` mutation.
type FlowTriggerReceivePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a fulfillment.
// In Shopify, a fulfillment represents a shipment of one or more items in an order.
// When an order has been completely fulfilled, it means that all the items that are included
// in the order have been sent to the customer.
// There can be more than one fulfillment for an order.
type Fulfillment struct {
	// The date and time when the fulfillment was created.
	CreatedAt string `json:"createdAt"`
	// The date that this fulfillment was delivered.
	DeliveredAt *string `json:"deliveredAt,omitempty,omitempty"`
	// Human readable display status for this fulfillment.
	DisplayStatus *FulfillmentDisplayStatus `json:"displayStatus,omitempty,omitempty"`
	// The estimated date that this fulfillment will arrive.
	EstimatedDeliveryAt *string `json:"estimatedDeliveryAt,omitempty,omitempty"`
	// The history of events associated with this fulfillment.
	Events *FulfillmentEventConnection `json:"events,omitempty"`
	// List of the fulfillment's line items.
	FulfillmentLineItems *FulfillmentLineItemConnection `json:"fulfillmentLineItems,omitempty"`
	// A paginated list of fulfillment orders for the fulfillment.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The date and time when the fulfillment went into transit.
	InTransitAt *string `json:"inTransitAt,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The location that the fulfillment was processed at.
	Location *Location `json:"location,omitempty,omitempty"`
	// Human readable reference identifier for this fulfillment.
	Name string `json:"name"`
	// The order for which the fulfillment was created.
	Order *Order `json:"order,omitempty"`
	// The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
	OriginAddress *FulfillmentOriginAddress `json:"originAddress,omitempty,omitempty"`
	// Whether any of the line items in the fulfillment require shipping.
	RequiresShipping bool `json:"requiresShipping"`
	// Fulfillment service associated with the fulfillment.
	Service *FulfillmentService `json:"service,omitempty,omitempty"`
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
	// Sum of all line item quantities for the fulfillment.
	TotalQuantity int `json:"totalQuantity"`
	// Tracking information associated with the fulfillment,
	// such as the tracking company, tracking number, and tracking URL.
	//
	TrackingInfo []FulfillmentTrackingInfo `json:"trackingInfo,omitempty"`
	// The date and time when the fulfillment was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (Fulfillment) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Fulfillment) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Fulfillment) IsNode() {}

// A globally-unique ID.
func (this Fulfillment) GetID() string { return this.ID }

// Return type for `fulfillmentCancel` mutation.
type FulfillmentCancelPayload struct {
	// The canceled fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Fulfillments.
type FulfillmentConnection struct {
	// A list of edges.
	Edges []FulfillmentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentEdge.
	Nodes []Fulfillment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `fulfillmentCreateV2` mutation.
type FulfillmentCreateV2Payload struct {
	// The created fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Fulfillment and a cursor during pagination.
type FulfillmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentEdge.
	Node *Fulfillment `json:"node,omitempty"`
}

// The fulfillment event that describes the fulfilllment status at a particular time.
type FulfillmentEvent struct {
	// The street address where this fulfillment event occurred.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The city where this fulfillment event occurred.
	City *string `json:"city,omitempty,omitempty"`
	// The country where this fulfillment event occurred.
	Country *string `json:"country,omitempty,omitempty"`
	// The estimated delivery date and time of the fulfillment.
	EstimatedDeliveryAt *string `json:"estimatedDeliveryAt,omitempty,omitempty"`
	// The time at which this fulfillment event happened.
	HappenedAt string `json:"happenedAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The latitude where this fulfillment event occurred.
	Latitude *float64 `json:"latitude,omitempty,omitempty"`
	// The longitude where this fulfillment event occurred.
	Longitude *float64 `json:"longitude,omitempty,omitempty"`
	// A message associated with this fulfillment event.
	Message *string `json:"message,omitempty,omitempty"`
	// The province where this fulfillment event occurred.
	Province *string `json:"province,omitempty,omitempty"`
	// The status of this fulfillment event.
	Status FulfillmentEventStatus `json:"status"`
	// The zip code of the location where this fulfillment event occurred.
	Zip *string `json:"zip,omitempty,omitempty"`
}

func (FulfillmentEvent) IsNode() {}

// A globally-unique ID.
func (this FulfillmentEvent) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple FulfillmentEvents.
type FulfillmentEventConnection struct {
	// A list of edges.
	Edges []FulfillmentEventEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentEventEdge.
	Nodes []FulfillmentEvent `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `fulfillmentEventCreate` mutation.
type FulfillmentEventCreatePayload struct {
	// The created fulfillment event.
	FulfillmentEvent *FulfillmentEvent `json:"fulfillmentEvent,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
type FulfillmentEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentEventEdge.
	Node *FulfillmentEvent `json:"node,omitempty"`
}

// The input fields used to create a fulfillment event.
type FulfillmentEventInput struct {
	// The street address where this fulfillment event occurred.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The city where this fulfillment event occurred.
	City *string `json:"city,omitempty,omitempty"`
	// The country where this fulfillment event occurred.
	Country *string `json:"country,omitempty,omitempty"`
	// The estimated delivery date and time of the fulfillment.
	EstimatedDeliveryAt *string `json:"estimatedDeliveryAt,omitempty,omitempty"`
	// The time at which this fulfillment event happened.
	HappenedAt *string `json:"happenedAt,omitempty,omitempty"`
	// The ID for the fulfillment that is associated with this fulfillment event.
	FulfillmentID string `json:"fulfillmentId"`
	// The latitude where this fulfillment event occurred.
	Latitude *float64 `json:"latitude,omitempty,omitempty"`
	// The longitude where this fulfillment event occurred.
	Longitude *float64 `json:"longitude,omitempty,omitempty"`
	// A message associated with this fulfillment event.
	Message *string `json:"message,omitempty,omitempty"`
	// The province where this fulfillment event occurred.
	Province *string `json:"province,omitempty,omitempty"`
	// The status of this fulfillment event.
	Status FulfillmentEventStatus `json:"status"`
	// The zip code of the location where this fulfillment event occurred.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// A fulfillment hold currently applied on a fulfillment order.
type FulfillmentHold struct {
	// The name of the app or service that applied the fulfillment hold.
	HeldBy *string `json:"heldBy,omitempty,omitempty"`
	// The reason for the fulfillment hold.
	Reason FulfillmentHoldReason `json:"reason"`
	// Additional information about the fulfillment hold reason.
	ReasonNotes *string `json:"reasonNotes,omitempty,omitempty"`
}

// Represents a line item from an order that's included in a fulfillment.
type FulfillmentLineItem struct {
	// The total price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total price after discounts are applied in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The associated order's line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The total price before discounts are applied.
	OriginalTotal null.String `json:"originalTotal"`
	// The total price before discounts are applied in shop and presentment currencies.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// Number of line items in the fulfillment.
	Quantity *int `json:"quantity,omitempty,omitempty"`
}

func (FulfillmentLineItem) IsNode() {}

// A globally-unique ID.
func (this FulfillmentLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple FulfillmentLineItems.
type FulfillmentLineItemConnection struct {
	// A list of edges.
	Edges []FulfillmentLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentLineItemEdge.
	Nodes []FulfillmentLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
type FulfillmentLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentLineItemEdge.
	Node *FulfillmentLineItem `json:"node,omitempty"`
}

// The FulfillmentOrder object represents either an item or a group of items in an
// [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// that are expected to be fulfilled from the same location.
// There can be more than one fulfillment order for an
// [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// at a given location.
//
// {{ '/api/reference/fulfillment_order_relationships.png' | image }}
//
// Fulfillment orders represent the work which is intended to be done in relation to an order.
// When fulfillment has started for one or more line items, a
// [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
// is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
//
// [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
//
// > Note:
// > Shopify creates fulfillment orders automatically when an order is created.
// > It is not possible to manually create fulfillment orders.
// >
// > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
//
// ## Retrieving fulfillment orders
//
// ### Fulfillment orders from an order
//
// All fulfillment orders related to a given order can be retrieved with the
// [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
// connection.
//
// [API access scopes](#api-access-scopes)
// govern which fulfillments orders are returned to clients.
// An API client will only receive a subset of the fulfillment orders which belong to an order
// if they don't have the necessary access scopes to view all of the fulfillment orders.
//
// ### Fulfillment orders assigned to the app for fulfillment
//
// Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
// [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
// connection.
// Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
// should be returned or only those where a merchant has sent a
// [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
// and it has yet to be responded to.
//
// The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
// the assigned fulfillment orders.
//
// ### All fulfillment orders
//
// Apps can retrieve all fulfillment orders with the
// [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
// query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
// which are accessible to the app according to the
// [fulfillment order access scopes](#api-access-scopes) it was granted with.
//
// ## The lifecycle of a fulfillment order
//
// ### Fulfillment Order Creation
//
// After an order is created, a background worker performs the order routing process which determines
// which locations will be responsible for fulfilling the purchased items.
// Once the order routing process is complete, one or more fulfillment orders will be created
// and assigned to these locations. It is not possible to manually create fulfillment orders.
//
// Once a fulfillment order has been created, it will have one of two different lifecycles depending on
// the type of location which the fulfillment order is assigned to.
//
// ### The lifecycle of a fulfillment order at a merchant managed location
//
// Fulfillment orders are completed by creating
// [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
// Fulfillments represents the work done.
//
// For digital products a merchant or an order management app would create a fulfilment once the digital asset
// has been provisioned.
// For example, in the case of a digital gift card, a merchant would to do this once
// the gift card has been activated - before the email has been shipped.
//
// On the other hand, for a traditional shipped order,
// a merchant or an order management app would create a fulfillment after picking and packing the items relating
// to a fulfillment order, but before the courier has collected the goods.
//
// [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
//
// ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
//
// For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
// a merchant or an Order Management App can
// [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
// to the fulfillment service which operates the location to request that they fulfill the associated items.
// A fulfillment service has the option to
// [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
// or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
// this fulfillment request.
//
// Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
// or order management app and instead a
// [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
// to the fulfillment service.
//
// Once a fulfillment service accepts a fulfillment request,
// then after they are ready to pack items and send them for delivery, they create fulfillments with the
// [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
// mutation.
// They can provide tracking information right away or create fulfillments without it and then
// update the tracking information for fulfillments with the
// [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
// mutation.
//
// [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
//
// ## API access scopes
//
// Fulfillment orders are governed by the following API access scopes:
//
//   - The `read_merchant_managed_fulfillment_orders` and
//     `write_merchant_managed_fulfillment_orders` access scopes
//     grant access to fulfillment orders assigned to merchant-managed locations.
//   - The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
//     access scopes are intended for fulfillment services.
//     These scopes grant access to fulfillment orders assigned to locations that are being managed
//     by fulfillment services.
//   - The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
//     access scopes grant access to fulfillment orders
//     assigned to locations managed by other fulfillment services.
//
// ### Fulfillment service app access scopes
//
// Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
// and don't have the `*_third_party_fulfillment_orders`
// or `*_merchant_managed_fulfillment_orders` access scopes.
// The app will only have access to the fulfillment orders assigned to their location
// (or multiple locations if the app registers multiple fulfillment services on the shop).
// The app will not have access to fulfillment orders assigned to merchant-managed locations
// or locations owned by other fulfillment service apps.
//
// ### Order management app access scopes
//
// **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
// `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
// on behalf of a merchant.
//
// If an app combines the functions of an order management app and a fulfillment service,
// then the app should request all
// access scopes to manage all assigned and all unassigned fulfillment orders.
//
// ## Notifications about fulfillment orders
//
// Fulfillment services are required to
// [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
// a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
// whenever a merchant submits a fulfillment or cancellation request.
//
// Both merchants and apps can
// [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
// to the
// [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
// to be notified whenever fulfillment order related domain events occur.
//
// [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
type FulfillmentOrder struct {
	// The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
	//
	// The fulfillment order's assigned location might change in the following cases:
	//
	// - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
	//   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
	//   ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
	//   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
	//   ) field within the mutation's response.
	// - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
	//     [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
	//     [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
	//     [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
	//     status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
	//
	AssignedLocation *FulfillmentOrderAssignedLocation `json:"assignedLocation,omitempty"`
	// Date and time when the fulfillment order was created.
	CreatedAt string `json:"createdAt"`
	// Delivery method of this fulfillment order.
	DeliveryMethod *DeliveryMethod `json:"deliveryMethod,omitempty,omitempty"`
	// The destination where the items should be sent.
	Destination *FulfillmentOrderDestination `json:"destination,omitempty,omitempty"`
	// The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
	FulfillAt *string `json:"fulfillAt,omitempty,omitempty"`
	// The latest date and time by which all items in the fulfillment order need to be fulfilled.
	FulfillBy *string `json:"fulfillBy,omitempty,omitempty"`
	// The fulfillment holds applied on the fulfillment order.
	FulfillmentHolds []FulfillmentHold `json:"fulfillmentHolds,omitempty"`
	// A list of fulfillments for the fulfillment order.
	Fulfillments *FulfillmentConnection `json:"fulfillments,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The duties delivery method of this fulfillment order.
	InternationalDuties *FulfillmentOrderInternationalDuties `json:"internationalDuties,omitempty,omitempty"`
	// A list of the fulfillment order's line items.
	LineItems *FulfillmentOrderLineItemConnection `json:"lineItems,omitempty"`
	// A list of locations that the fulfillment order can potentially move to.
	LocationsForMove *FulfillmentOrderLocationForMoveConnection `json:"locationsForMove,omitempty"`
	// A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
	MerchantRequests *FulfillmentOrderMerchantRequestConnection `json:"merchantRequests,omitempty"`
	// The order that's associated with the fulfillment order.
	Order *Order `json:"order,omitempty"`
	// The request status of the fulfillment order.
	RequestStatus FulfillmentOrderRequestStatus `json:"requestStatus"`
	// The status of the fulfillment order.
	Status FulfillmentOrderStatus `json:"status"`
	// The actions that can be performed on this fulfillment order.
	SupportedActions []FulfillmentOrderSupportedAction `json:"supportedActions,omitempty"`
	// The date and time when the fulfillment order was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (FulfillmentOrder) IsNode() {}

// A globally-unique ID.
func (this FulfillmentOrder) GetID() string { return this.ID }

func (FulfillmentOrder) IsMetafieldReferencer() {}

// Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
type FulfillmentOrderAcceptCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
type FulfillmentOrderAcceptFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
//
//	The fulfillment order's assigned location might change in the following cases:
//
//	 - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
//	   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
//	   ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
//	   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
//	   ) field within the mutation's response.
//
//	 - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
//	     [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
//	     [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
//	     [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
//	     status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
//
// If the [fulfillmentOrderMove](
// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
// ) mutation has moved the fulfillment order's line items to a new location,
// but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
// doesn't change.
// This happens if the fulfillment order is being split during the move, or if all line items can be moved
// to an existing fulfillment order at a new location.
//
// Once the fulfillment order has been taken into work or canceled,
// which means that the fulfillment order has the
// [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
// [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
// [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
// [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
// status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
// Up-to-date shop's location data may be queried through [location](
//
//	https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
//
// ) connection.
type FulfillmentOrderAssignedLocation struct {
	// The first line of the address for the location.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address for the location.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city of the location.
	City *string `json:"city,omitempty,omitempty"`
	// The two-letter country code of the location.
	CountryCode CountryCode `json:"countryCode"`
	// The location where the fulfillment is expected to happen. This value might be different from
	// `FulfillmentOrderAssignedLocation` if the location's attributes were updated
	// after the fulfillment order was taken into work of canceled.
	//
	Location *Location `json:"location,omitempty,omitempty"`
	// The name of the location.
	Name string `json:"name"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The province of the location.
	Province *string `json:"province,omitempty,omitempty"`
	// The ZIP code of the location.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// Return type for `fulfillmentOrderCancel` mutation.
type FulfillmentOrderCancelPayload struct {
	// The fulfillment order that was marked as canceled.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The fulfillment order that was created to replace the canceled fulfillment order.
	ReplacementFulfillmentOrder *FulfillmentOrder `json:"replacementFulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderClose` mutation.
type FulfillmentOrderClosePayload struct {
	// The fulfillment order that was marked as incomplete.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple FulfillmentOrders.
type FulfillmentOrderConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentOrderEdge.
	Nodes []FulfillmentOrder `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Represents the destination where the items should be sent upon fulfillment.
type FulfillmentOrderDestination struct {
	// The first line of the address of the destination.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address of the destination.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city of the destination.
	City *string `json:"city,omitempty,omitempty"`
	// The company of the destination.
	Company *string `json:"company,omitempty,omitempty"`
	// The two-letter country code of the destination.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The email of the customer at the destination.
	Email *string `json:"email,omitempty,omitempty"`
	// The first name of the customer at the destination.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The last name of the customer at the destination.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The phone number of the customer at the destination.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The province of the destination.
	Province *string `json:"province,omitempty,omitempty"`
	// The ZIP code of the destination.
	Zip *string `json:"zip,omitempty,omitempty"`
}

func (FulfillmentOrderDestination) IsNode() {}

// A globally-unique ID.
func (this FulfillmentOrderDestination) GetID() string { return this.ID }

// An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
type FulfillmentOrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderEdge.
	Node *FulfillmentOrder `json:"node,omitempty"`
}

// The input fields for the fulfillment hold applied on the fulfillment order.
type FulfillmentOrderHoldInput struct {
	// The reason for the fulfillment hold.
	Reason FulfillmentHoldReason `json:"reason"`
	// Additional information about the fulfillment hold reason.
	ReasonNotes *string `json:"reasonNotes,omitempty,omitempty"`
	// Whether the merchant receives a notification about the fulfillment hold. The default value is `false`.
	NotifyMerchant *bool `json:"notifyMerchant,omitempty,omitempty"`
	// A configurable ID used to track the automation system releasing these holds.
	ExternalID *string `json:"externalId,omitempty,omitempty"`
	// The fulfillment order line items to be placed on hold.
	// If left blank, all line items of the fulfillment order are placed on hold.
	//
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty,omitempty"`
}

// Return type for `fulfillmentOrderHold` mutation.
type FulfillmentOrderHoldPayload struct {
	// The fulfillment order on which a fulfillment hold was applied.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The remaining fulfillment order containing the line items to which the hold was not applied,
	// if specific line items were specified to be placed on hold.
	//
	RemainingFulfillmentOrder *FulfillmentOrder `json:"remainingFulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderHoldUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderHold`.
type FulfillmentOrderHoldUserError struct {
	// The error code.
	Code *FulfillmentOrderHoldUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderHoldUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderHoldUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderHoldUserError) GetMessage() string { return this.Message }

// The international duties relevant to a fulfillment order.
type FulfillmentOrderInternationalDuties struct {
	// The method of duties payment. Example values: `DDP`, `DAP`.
	Incoterm string `json:"incoterm"`
}

// Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
type FulfillmentOrderLineItem struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated to the line item's variant.
	Image *Image `json:"image,omitempty,omitempty"`
	// The ID of the inventory item.
	InventoryItemID *string `json:"inventoryItemId,omitempty,omitempty"`
	// The associated order line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The title of the product.
	ProductTitle string `json:"productTitle"`
	// The number of units remaining to be fulfilled.
	RemainingQuantity int `json:"remainingQuantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty,omitempty"`
	// The total number of units to be fulfilled.
	TotalQuantity int `json:"totalQuantity"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
	// Warning messages for a fulfillment order line item.
	Warnings []FulfillmentOrderLineItemWarning `json:"warnings,omitempty"`
	// The weight of a line item unit.
	Weight *Weight `json:"weight,omitempty,omitempty"`
}

func (FulfillmentOrderLineItem) IsNode() {}

// A globally-unique ID.
func (this FulfillmentOrderLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
type FulfillmentOrderLineItemConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentOrderLineItemEdge.
	Nodes []FulfillmentOrderLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
type FulfillmentOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderLineItemEdge.
	Node *FulfillmentOrderLineItem `json:"node,omitempty"`
}

// The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.
type FulfillmentOrderLineItemInput struct {
	// The ID of the fulfillment order line item.
	ID string `json:"id"`
	// The quantity of the fulfillment order line item.
	Quantity int `json:"quantity"`
}

// A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
type FulfillmentOrderLineItemWarning struct {
	// The description of warning.
	Description *string `json:"description,omitempty,omitempty"`
	// The title of warning.
	Title *string `json:"title,omitempty,omitempty"`
}

// The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
type FulfillmentOrderLineItemsInput struct {
	// The ID of the fulfillment order.
	FulfillmentOrderID string `json:"fulfillmentOrderId"`
	// The fulfillment order line items to be fulfilled.
	// If left blank, all line items of the fulfillment order will be fulfilled.
	//
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty,omitempty"`
}

// The input fields for marking fulfillment order line items as ready for pickup.
type FulfillmentOrderLineItemsPreparedForPickupInput struct {
	// The fulfillment orders associated with the line items which are ready to be picked up by a customer.
	//
	LineItemsByFulfillmentOrder []PreparedFulfillmentOrderLineItemsInput `json:"lineItemsByFulfillmentOrder,omitempty"`
}

// Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation.
type FulfillmentOrderLineItemsPreparedForPickupPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderLineItemsPreparedForPickupUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`.
type FulfillmentOrderLineItemsPreparedForPickupUserError struct {
	// The error code.
	Code *FulfillmentOrderLineItemsPreparedForPickupUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderLineItemsPreparedForPickupUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderLineItemsPreparedForPickupUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderLineItemsPreparedForPickupUserError) GetMessage() string {
	return this.Message
}

// A location that a fulfillment order can potentially move to.
type FulfillmentOrderLocationForMove struct {
	// The location being considered as the fulfillment order's new assigned location.
	Location *Location `json:"location,omitempty"`
	// A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
	// moved to the location.
	//
	Message *string `json:"message,omitempty,omitempty"`
	// Whether the fulfillment order can be moved to the location.
	Movable bool `json:"movable"`
}

// An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
type FulfillmentOrderLocationForMoveConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderLocationForMoveEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentOrderLocationForMoveEdge.
	Nodes []FulfillmentOrderLocationForMove `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
type FulfillmentOrderLocationForMoveEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderLocationForMoveEdge.
	Node *FulfillmentOrderLocationForMove `json:"node,omitempty"`
}

// A request made by the merchant or an order management app to a fulfillment service
// for a fulfillment order.
type FulfillmentOrderMerchantRequest struct {
	// The fulfillment order associated with the merchant request.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The kind of request made.
	Kind FulfillmentOrderMerchantRequestKind `json:"kind"`
	// The optional message that the merchant included in the request.
	Message *string `json:"message,omitempty,omitempty"`
	// Additional options requested by the merchant. These depend on the `kind` of the request.
	// For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
	// merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
	// `notifyCustomer` when making calls to `FulfillmentCreateV2`.
	//
	RequestOptions *string `json:"requestOptions,omitempty,omitempty"`
	// The response from the fulfillment service.
	ResponseData *string `json:"responseData,omitempty,omitempty"`
	// The timestamp when the request was made.
	SentAt string `json:"sentAt"`
}

func (FulfillmentOrderMerchantRequest) IsNode() {}

// A globally-unique ID.
func (this FulfillmentOrderMerchantRequest) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
type FulfillmentOrderMerchantRequestConnection struct {
	// A list of edges.
	Edges []FulfillmentOrderMerchantRequestEdge `json:"edges,omitempty"`
	// A list of the nodes contained in FulfillmentOrderMerchantRequestEdge.
	Nodes []FulfillmentOrderMerchantRequest `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
type FulfillmentOrderMerchantRequestEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of FulfillmentOrderMerchantRequestEdge.
	Node *FulfillmentOrderMerchantRequest `json:"node,omitempty"`
}

// The input fields for merging fulfillment orders.
type FulfillmentOrderMergeInput struct {
	// The details of the fulfillment orders to be merged.
	MergeIntents []FulfillmentOrderMergeInputMergeIntent `json:"mergeIntents,omitempty"`
}

// The input fields for merging fulfillment orders into a single merged fulfillment order.
type FulfillmentOrderMergeInputMergeIntent struct {
	// The fulfillment order line items to be merged.
	//
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty,omitempty"`
	// The ID of the fulfillment order to be merged.
	FulfillmentOrderID string `json:"fulfillmentOrderId"`
}

// Return type for `fulfillmentOrderMerge` mutation.
type FulfillmentOrderMergePayload struct {
	// The result of the fulfillment order merges.
	FulfillmentOrderMerges []FulfillmentOrderMergeResult `json:"fulfillmentOrderMerges,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderMergeUserError `json:"userErrors,omitempty"`
}

// The result of merging a set of fulfillment orders.
type FulfillmentOrderMergeResult struct {
	// The new fulfillment order as a result of the merge.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderMerge`.
type FulfillmentOrderMergeUserError struct {
	// The error code.
	Code *FulfillmentOrderMergeUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderMergeUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderMergeUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderMergeUserError) GetMessage() string { return this.Message }

// Return type for `fulfillmentOrderMove` mutation.
type FulfillmentOrderMovePayload struct {
	// The fulfillment order which now contains the moved line items and is assigned to the destination location.
	//
	// **First scenario:** All line items belonging to the original fulfillment order are re-assigned.
	//
	// In this case, this will be the original fulfillment order.
	//
	// **Second scenario:** A subset of the line items belonging to the original fulfillment order are re-assigned.
	//
	// If the new location is already assigned to fulfill line items on the order, then
	// this will be an existing active fulfillment order.
	// Otherwise, this will be a new fulfillment order with the moved line items assigned.
	//
	MovedFulfillmentOrder *FulfillmentOrder `json:"movedFulfillmentOrder,omitempty,omitempty"`
	// The final state of the original fulfillment order.
	//
	// As a result of the move operation, the original fulfillment order might be moved to the new location
	// or remain in the original location. The original fulfillment order might have the same status or be closed.
	//
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty,omitempty"`
	// This field is deprecated.
	//
	RemainingFulfillmentOrder *FulfillmentOrder `json:"remainingFulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderOpen` mutation.
type FulfillmentOrderOpenPayload struct {
	// The fulfillment order that was transitioned to open and is fulfillable.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
type FulfillmentOrderRejectCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
type FulfillmentOrderRejectFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderReleaseHold` mutation.
type FulfillmentOrderReleaseHoldPayload struct {
	// The fulfillment order on which the hold was released.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderReleaseHoldUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
type FulfillmentOrderReleaseHoldUserError struct {
	// The error code.
	Code *FulfillmentOrderReleaseHoldUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderReleaseHoldUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderReleaseHoldUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderReleaseHoldUserError) GetMessage() string { return this.Message }

// Return type for `fulfillmentOrderReschedule` mutation.
type FulfillmentOrderReschedulePayload struct {
	// The fulfillment order that was rescheduled.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderRescheduleUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderReschedule`.
type FulfillmentOrderRescheduleUserError struct {
	// The error code.
	Code *FulfillmentOrderRescheduleUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderRescheduleUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderRescheduleUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderRescheduleUserError) GetMessage() string { return this.Message }

// The input fields for the split applied to the fulfillment order.
type FulfillmentOrderSplitInput struct {
	// The fulfillment order line items to be split out.
	//
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty"`
	// The ID of the fulfillment order to be split.
	FulfillmentOrderID string `json:"fulfillmentOrderId"`
}

// Return type for `fulfillmentOrderSplit` mutation.
type FulfillmentOrderSplitPayload struct {
	// The result of the fulfillment order splits.
	FulfillmentOrderSplits []FulfillmentOrderSplitResult `json:"fulfillmentOrderSplits,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrderSplitUserError `json:"userErrors,omitempty"`
}

// The result of splitting a fulfillment order.
type FulfillmentOrderSplitResult struct {
	// The original fulfillment order as a result of the split.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The remaining fulfillment order as a result of the split.
	RemainingFulfillmentOrder *FulfillmentOrder `json:"remainingFulfillmentOrder,omitempty"`
	// The replacement fulfillment order if the original fulfillment order was not in a state to be split.
	ReplacementFulfillmentOrder *FulfillmentOrder `json:"replacementFulfillmentOrder,omitempty,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrderSplit`.
type FulfillmentOrderSplitUserError struct {
	// The error code.
	Code *FulfillmentOrderSplitUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrderSplitUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrderSplitUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrderSplitUserError) GetMessage() string { return this.Message }

// Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
type FulfillmentOrderSubmitCancellationRequestPayload struct {
	// The fulfillment order specified in the cancelation request.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
type FulfillmentOrderSubmitFulfillmentRequestPayload struct {
	// The original fulfillment order intended to request fulfillment for.
	//
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty,omitempty"`
	// The fulfillment order that was submitted to the fulfillment service. This will be the same as
	// the original fulfillment order field. The exception to this is partial fulfillment requests or
	// fulfillment request for cancelled or incomplete fulfillment orders.
	//
	SubmittedFulfillmentOrder *FulfillmentOrder `json:"submittedFulfillmentOrder,omitempty,omitempty"`
	// This field will only be present for partial fulfillment requests. This will represent the new
	// fulfillment order with the remaining line items not submitted to the fulfillment service.
	//
	UnsubmittedFulfillmentOrder *FulfillmentOrder `json:"unsubmittedFulfillmentOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// One of the actions that the fulfillment order supports in its current state.
type FulfillmentOrderSupportedAction struct {
	// The action value.
	Action FulfillmentOrderAction `json:"action"`
	// The external URL to be used to initiate the fulfillment process outside Shopify.
	// Applicable only when the `action` value is `EXTERNAL`.
	//
	ExternalURL *string `json:"externalUrl,omitempty,omitempty"`
}

// Return type for `fulfillmentOrdersReleaseHolds` mutation.
type FulfillmentOrdersReleaseHoldsPayload struct {
	// The asynchronous job that will release the fulfillment holds.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrdersReleaseHoldsUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`.
type FulfillmentOrdersReleaseHoldsUserError struct {
	// The error code.
	Code *FulfillmentOrdersReleaseHoldsUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrdersReleaseHoldsUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrdersReleaseHoldsUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrdersReleaseHoldsUserError) GetMessage() string { return this.Message }

// Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation.
type FulfillmentOrdersSetFulfillmentDeadlinePayload struct {
	// Whether the fulfillment deadline was successfully set.
	Success *bool `json:"success,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentOrdersSetFulfillmentDeadlineUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
type FulfillmentOrdersSetFulfillmentDeadlineUserError struct {
	// The error code.
	Code *FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (FulfillmentOrdersSetFulfillmentDeadlineUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this FulfillmentOrdersSetFulfillmentDeadlineUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this FulfillmentOrdersSetFulfillmentDeadlineUserError) GetMessage() string { return this.Message }

// The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
type FulfillmentOriginAddress struct {
	// The street address of the fulfillment location.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city in which the fulfillment location is located.
	City *string `json:"city,omitempty,omitempty"`
	// The country code of the fulfillment location.
	CountryCode string `json:"countryCode"`
	// The province code of the fulfillment location.
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip code of the fulfillment location.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// The input fields used to include the address at which the fulfillment occurred. Typically the address of a warehouse or a fulfillment center.
type FulfillmentOriginAddressInput struct {
	// The street address of the fulfillment location.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city in which the fulfillment location is located.
	City *string `json:"city,omitempty,omitempty"`
	// The zip code of the fulfillment location.
	Zip *string `json:"zip,omitempty,omitempty"`
	// The province of the fulfillment location.
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The country of the fulfillment location.
	CountryCode string `json:"countryCode"`
}

// A **Fulfillment Service** is a third party warehouse that prepares and ships orders
// on behalf of the store owner. Fulfillment services charge a fee to package and ship items
// and update product inventory levels. Some well known fulfillment services with Shopify integrations
// include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
// Shopify automatically creates a `Location` that's associated to the fulfillment service.
// To learn more about fulfillment services, refer to
// [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
// guide.
//
// ## Mutations
//
// You can work with the `FulfillmentService` object with the
// [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
// [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
// and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
// mutations.
//
// ## Hosted endpoints
//
// Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
// Shopify can query on certain conditions.
// These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
// in the
// [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
// mutation.
//
//   - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
//     to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
//     if `fulfillment_orders_opt_in` is set to `true`.
//
//     [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
//     it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
//     having `fulfillment_orders_opt_in` set to `true`,
//     hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.
//
//     For more information, refer to
//     [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
//
//   - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
//     if `trackingSupport` is set to `true`.
//
//     For more information, refer to
//     [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
//
//     Fulfillment services can also update tracking information with the
//     [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
//     rather than waiting for Shopify to ask for tracking numbers.
//
//   - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
//     if `inventoryManagement` is set to `true`.
//
//     For more information, refer to
//     [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).
//
// To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
// in your development store.
//
// ## Resources and webhooks
//
// There are a variety of objects and webhooks that enable a fulfillment service to work.
// To exchange fulfillment information with Shopify, fulfillment services use the
// [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
// [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
// [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
// To act on fulfillment process events that happen on the Shopify side,
// besides awaiting calls to `callbackUrl`-prefixed endpoints,
// fulfillment services can subscribe to the
// [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
// and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
// webhooks.
type FulfillmentService struct {
	// The callback URL that the fulfillment service has registered for requests. The following considerations apply:
	//
	// - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
	//     for orders, if `trackingSupport` is set to `true`.
	// - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
	//     if `inventoryManagement` is set to `true`.
	// - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
	//     [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
	//     if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
	//     (`fulfillmentOrdersOptIn` is set to `true`).
	//
	CallbackURL *string `json:"callbackUrl,omitempty,omitempty"`
	// Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
	//
	FulfillmentOrdersOptIn bool `json:"fulfillmentOrdersOptIn"`
	// Human-readable unique identifier for this fulfillment service.
	Handle string `json:"handle"`
	// The ID of the fulfillment service.
	ID string `json:"id"`
	// Whether the fulfillment service tracks product inventory and provides updates to Shopify.
	InventoryManagement bool `json:"inventoryManagement"`
	// Location associated with the fulfillment service.
	Location *Location `json:"location,omitempty,omitempty"`
	// Whether the fulfillment service can stock inventory alongside other locations.
	PermitsSkuSharing bool `json:"permitsSkuSharing"`
	// Whether the fulfillment service supports local deliveries.
	ProductBased bool `json:"productBased"`
	// The name of the fulfillment service as seen by merchants.
	ServiceName string `json:"serviceName"`
	// Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
	ShippingMethods []ShippingMethod `json:"shippingMethods,omitempty"`
	// Type associated with the fulfillment service.
	Type FulfillmentServiceType `json:"type"`
}

// Return type for `fulfillmentServiceCreate` mutation.
type FulfillmentServiceCreatePayload struct {
	// The created fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceDelete` mutation.
type FulfillmentServiceDeletePayload struct {
	// The ID of the deleted fulfillment service.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceUpdate` mutation.
type FulfillmentServiceUpdatePayload struct {
	// The updated fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the tracking information for a fulfillment.
type FulfillmentTrackingInfo struct {
	// The name of the tracking company.
	//
	// For tracking company names from the list below
	// Shopify will automatically build tracking URLs for all provided tracking numbers,
	// which will make the tracking numbers clickable in the interface.
	//
	// Additionally, for the tracking companies listed on the
	// [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
	// Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
	//
	// ### Supported tracking companies
	//
	// The following tracking companies display for shops located in any country:
	//
	//   * 4PX
	//   * AGS
	//   * Amazon Logistics UK
	//   * Amazon Logistics US
	//   * An Post
	//   * Anjun Logistics
	//   * APC
	//   * Asendia USA
	//   * Australia Post
	//   * Bonshaw
	//   * BPost
	//   * BPost International
	//   * Canada Post
	//   * Canpar
	//   * CDL Last Mile
	//   * China Post
	//   * Chronopost
	//   * Chukou1
	//   * Colissimo
	//   * Comingle
	//   * Coordinadora
	//   * Correios
	//   * Correos
	//   * CTT
	//   * CTT Express
	//   * Cyprus Post
	//   * Delnext
	//   * Deutsche Post
	//   * DHL eCommerce
	//   * DHL eCommerce Asia
	//   * DHL Express
	//   * DoorDash
	//   * DPD
	//   * DPD Local
	//   * DPD UK
	//   * DTD Express
	//   * DX
	//   * Eagle
	//   * Estes
	//   * Evri
	//   * FedEx
	//   * First Global Logistics
	//   * First Line
	//   * FSC
	//   * Fulfilla
	//   * GLS
	//   * Guangdong Weisuyi Information Technology (WSE)
	//   * Heppner Internationale Spedition GmbH & Co.
	//   * Iceland Post
	//   * IDEX
	//   * Israel Post
	//   * Japan Post (EN)
	//   * Japan Post (JA)
	//   * La Poste
	//   * Lasership
	//   * Latvia Post
	//   * Lietuvos Paštas
	//   * Logisters
	//   * Lone Star Overnight
	//   * M3 Logistics
	//   * Meteor Space
	//   * Mondial Relay
	//   * New Zealand Post
	//   * NinjaVan
	//   * North Russia Supply Chain (Shenzhen) Co.
	//   * OnTrac
	//   * Packeta
	//   * Pago Logistics
	//   * Ping An Da Tengfei Express
	//   * Pitney Bowes
	//   * Portal PostNord
	//   * Poste Italiane
	//   * PostNL
	//   * PostNord DK
	//   * PostNord NO
	//   * PostNord SE
	//   * Purolator
	//   * Qxpress
	//   * Qyun Express
	//   * Royal Mail
	//   * Royal Shipments
	//   * Sagawa (EN)
	//   * Sagawa (JA)
	//   * Sendle
	//   * SF Express
	//   * SFC Fulfillment
	//   * SHREE NANDAN COURIER
	//   * Singapore Post
	//   * Southwest Air Cargo
	//   * StarTrack
	//   * Step Forward Freight
	//   * Swiss Post
	//   * TForce Final Mile
	//   * Tinghao
	//   * TNT
	//   * Toll IPEC
	//   * United Delivery Service
	//   * UPS
	//   * USPS
	//   * Venipak
	//   * We Post
	//   * Whistl
	//   * Wizmo
	//   * WMYC
	//   * Xpedigo
	//   * XPO Logistics
	//   * Yamato (EN)
	//   * Yamato (JA)
	//   * YiFan Express
	//   * YunExpress
	//
	// The following tracking companies are displayed for shops located in specific countries:
	//
	//   * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
	//   * **Austria**: Österreichische Post
	//   * **Bulgaria**: Speedy
	//   * **Canada**: Intelcom, BoxKnight, Loomis, GLS
	//   * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
	//   * **Czechia**: Zásilkovna
	//   * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
	//   * **Spain**: SEUR
	//   * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
	//   * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
	//   * **Greece**: ACS Courier
	//   * **Hong Kong SAR**: SF Express
	//   * **Ireland**: Fastway, DPD Ireland
	//   * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
	//   * **Italy**: BRT, GLS Italy
	//   * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
	//   * **Netherlands**: DHL Parcel, DPD
	//   * **Norway**: Bring
	//   * **Poland**: Inpost
	//   * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
	//   * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, R+L Carriers, Southwest Air Cargo
	//   * **South Africa**: Fastway, Skynet.
	//
	Company *string `json:"company,omitempty,omitempty"`
	// The tracking number of the fulfillment.
	//
	// The tracking number is clickable in the interface if one of the following applies
	// (the highest in the list has the highest priority):
	//
	// * Tracking url provided in the `url` field.
	// * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
	//   Shopify will build the tracking URL automatically based on the tracking number specified.
	// * The tracking number has a Shopify-known format.
	//   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
	//   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
	//   This can result in an invalid tracking URL.
	//   It is highly recommended that you send the tracking company and the tracking URL.
	//
	Number *string `json:"number,omitempty,omitempty"`
	// The URLs to track the fulfillment.
	//
	// The tracking URL is displayed in the merchant's admin on the order page.
	// The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
	// When accounts are enabled, it is also displayed in the customer's order history.
	//
	URL *string `json:"url,omitempty,omitempty"`
}

// Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
type FulfillmentTrackingInfoUpdateV2Payload struct {
	// The updated fulfillment with tracking information.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields that specify all possible fields for tracking information.
//
// > Note:
// > If you provide the `url` field, you should not provide the `urls` field.
// >
// > If you provide the `number` field, you should not provide the `numbers` field.
// >
// > If you provide the `url` field, you should provide the `number` field.
// >
// > If you provide the `urls` field, you should provide the `numbers` field.
type FulfillmentTrackingInput struct {
	// The tracking number of the fulfillment.
	//
	// The tracking number will be clickable in the interface if one of the following applies
	// (the highest in the list has the highest priority):
	//
	// * Tracking url provided in the `url` field.
	// * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	//   specified in the `company` field.
	//   Shopify will build the tracking URL automatically based on the tracking number specified.
	// * The tracking number has a Shopify-known format.
	//   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
	//   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
	//   This can result in an invalid tracking URL.
	//   It is highly recommended that you send the tracking company and the tracking URL.
	//
	Number *string `json:"number,omitempty,omitempty"`
	// The URL to track the fulfillment.
	//
	// The tracking URL is displayed in the merchant's admin on the order page.
	// The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
	// When accounts are enabled, it is also displayed in the customer's order history.
	//
	// The URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
	// [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
	// For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
	// It includes a scheme (`https`) and a host (`myshipping.com`).
	//
	URL *string `json:"url,omitempty,omitempty"`
	// The name of the tracking company.
	//
	// If you specify a tracking company name from
	// [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies),
	// Shopify will automatically build tracking URLs for all provided tracking numbers,
	// which will make the tracking numbers clickable in the interface.
	// The same tracking company will be applied to all tracking numbers specified.
	//
	// Additionally, for the tracking companies listed on the
	// [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
	// Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
	//
	// > Note:
	// > Send the tracking company name exactly as written in
	// > [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// > (capitalization matters).
	//
	Company *string `json:"company,omitempty,omitempty"`
	// The tracking numbers of the fulfillment, one or many.
	//
	// With multiple tracking numbers, you can provide tracking information
	// for all shipments associated with the fulfillment, if there are more than one.
	// For example, if you are shipping assembly parts of one furniture item in several boxes.
	//
	// Tracking numbers will be clickable in the interface if one of the following applies
	// (the highest in the list has the highest priority):
	//
	// * Tracking URLs provided in the `urls` field.
	//   The tracking URLs will be matched to the tracking numbers based on their positions in the arrays.
	// * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	//   specified in the `company` field.
	//   Shopify will build tracking URLs automatically for all tracking numbers specified.
	//   The same tracking company will be applied to all tracking numbers.
	// * Tracking numbers have a Shopify-known format.
	//   Shopify will guess tracking providers and build tracking URLs based on the tracking number formats.
	//   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
	//   This can result in an invalid tracking URL.
	//   It is highly recommended that you send the tracking company and the tracking URLs.
	//
	//
	Numbers []string `json:"numbers,omitempty,omitempty"`
	// The URLs to track the fulfillment, one or many.
	//
	// The tracking URLs are displayed in the merchant's admin on the order page.
	// The tracking URLs are displayed in the shipping confirmation email, which can optionally be sent to the customer.
	// When accounts are enabled, the tracking URLs are also displayed in the customer's order history.
	//
	// If you are not specifying a
	// [Shopify-known](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// tracking company name in the `company` field,
	// then provide tracking URLs for all tracking numbers from the `numbers` field.
	//
	// Tracking URLs from the `urls` array field are being matched with the tracking numbers from the `numbers` array
	// field correspondingly their positions in the arrays.
	//
	// Each URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
	// [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
	// For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
	// It includes a scheme (`https`) and a host (`myshipping.com`).
	//
	Urls []string `json:"urls,omitempty,omitempty"`
}

// The input fields used to create a fulfillment from fulfillment orders.
type FulfillmentV2Input struct {
	// The fulfillment's tracking information, including a tracking URL, a tracking number,
	// and the company associated with the fulfillment.
	//
	TrackingInfo *FulfillmentTrackingInput `json:"trackingInfo,omitempty,omitempty"`
	// Whether the customer is notified.
	// If `true`, then a notification is sent when the fulfillment is created.
	//
	NotifyCustomer *bool `json:"notifyCustomer,omitempty,omitempty"`
	// Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
	// order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
	// fulfillment order line items are left blank then all the fulfillment order line items of the
	// associated fulfillment order ID will be fulfilled.
	//
	LineItemsByFulfillmentOrder []FulfillmentOrderLineItemsInput `json:"lineItemsByFulfillmentOrder,omitempty"`
	// Address information about the location from which the order was fulfilled.
	//
	OriginAddress *FulfillmentOriginAddressInput `json:"originAddress,omitempty,omitempty"`
}

// The App Bridge information for a Shopify Function.
type FunctionsAppBridge struct {
	// The relative path for creating a customization.
	CreatePath string `json:"createPath"`
	// The relative path for viewing a customization.
	DetailsPath string `json:"detailsPath"`
}

// The error history from running a Shopify Function.
type FunctionsErrorHistory struct {
	// The date and time that the first error occurred.
	ErrorsFirstOccurredAt string `json:"errorsFirstOccurredAt"`
	// The date and time that the first error occurred.
	FirstOccurredAt string `json:"firstOccurredAt"`
	// Whether the merchant has shared all the recent errors with the developer.
	HasBeenSharedSinceLastError bool `json:"hasBeenSharedSinceLastError"`
	// Whether the merchant has shared all the recent errors with the developer.
	HasSharedRecentErrors bool `json:"hasSharedRecentErrors"`
}

// Represents any file other than HTML.
type GenericFile struct {
	// A word or phrase to describe the contents or the function of a file.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
	//
	CreatedAt string `json:"createdAt"`
	// Any errors that have occurred on the file.
	FileErrors []FileError `json:"fileErrors,omitempty"`
	// The status of the file.
	FileStatus FileStatus `json:"fileStatus"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The generic file's MIME type.
	MimeType *string `json:"mimeType,omitempty,omitempty"`
	// The generic file's size in bytes.
	OriginalFileSize *int `json:"originalFileSize,omitempty,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The generic file's URL.
	URL *string `json:"url,omitempty,omitempty"`
}

func (GenericFile) IsFile() {}

// A word or phrase to describe the contents or the function of a file.
func (this GenericFile) GetAlt() *string { return this.Alt }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
func (this GenericFile) GetCreatedAt() string { return this.CreatedAt }

// Any errors that have occurred on the file.
func (this GenericFile) GetFileErrors() []FileError {
	if this.FileErrors == nil {
		return nil
	}
	interfaceSlice := make([]FileError, 0, len(this.FileErrors))
	for _, concrete := range this.FileErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The status of the file.
func (this GenericFile) GetFileStatus() FileStatus { return this.FileStatus }

// A globally-unique ID.
func (this GenericFile) GetID() string { return this.ID }

// The preview image for the media.
func (this GenericFile) GetPreview() *MediaPreviewImage { return this.Preview }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
func (this GenericFile) GetUpdatedAt() string { return this.UpdatedAt }

func (GenericFile) IsNode() {}

// A globally-unique ID.

func (GenericFile) IsMetafieldReference() {}

// Represents an issued gift card.
type GiftCard struct {
	// The gift card's remaining balance.
	Balance *MoneyV2 `json:"balance,omitempty"`
	// The date and time at which the gift card was created.
	CreatedAt string `json:"createdAt"`
	// The customer who will receive the gift card.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The date and time at which the gift card was disabled.
	DisabledAt *string `json:"disabledAt,omitempty,omitempty"`
	// Whether the gift card is enabled.
	Enabled bool `json:"enabled"`
	// The date at which the gift card will expire.
	ExpiresOn *string `json:"expiresOn,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The initial value of the gift card.
	InitialValue *MoneyV2 `json:"initialValue,omitempty"`
	// The final four characters of the gift card code.
	LastCharacters string `json:"lastCharacters"`
	// The gift card code. Everything but the final four characters is masked.
	MaskedCode string `json:"maskedCode"`
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty,omitempty"`
	// The order associated with the gift card. This value is `null` if the gift card was issued manually.
	//
	Order *Order `json:"order,omitempty,omitempty"`
}

func (GiftCard) IsNode() {}

// A globally-unique ID.
func (this GiftCard) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple GiftCards.
type GiftCardConnection struct {
	// A list of edges.
	Edges []GiftCardEdge `json:"edges,omitempty"`
	// A list of the nodes contained in GiftCardEdge.
	Nodes []GiftCard `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields to issue a gift card.
type GiftCardCreateInput struct {
	// The initial value of the gift card.
	InitialValue null.String `json:"initialValue"`
	// The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).
	// It is not case sensitive. If not provided, then a random code will be generated.
	//
	Code *string `json:"code,omitempty,omitempty"`
	// The ID of the customer who will receive the gift card. Requires `write_customers` access_scope.
	CustomerID *string `json:"customerId,omitempty,omitempty"`
	// The date at which the gift card will expire. If not provided, then the gift card will never expire.
	//
	ExpiresOn *string `json:"expiresOn,omitempty,omitempty"`
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty,omitempty"`
	// The suffix of the Liquid template that is used to render the gift card online.
	// For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
	// If not provided, then the default `gift_card.liquid` template is used.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
}

// Return type for `giftCardCreate` mutation.
type GiftCardCreatePayload struct {
	// The created gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty,omitempty"`
	// The created gift card's code.
	GiftCardCode *string `json:"giftCardCode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []GiftCardUserError `json:"userErrors,omitempty"`
}

// Return type for `giftCardDisable` mutation.
type GiftCardDisablePayload struct {
	// The disabled gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one GiftCard and a cursor during pagination.
type GiftCardEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of GiftCardEdge.
	Node *GiftCard `json:"node,omitempty"`
}

// A sale associated with a gift card.
type GiftCardSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (GiftCardSale) IsSale() {}

// The type of order action that the sale represents.
func (this GiftCardSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this GiftCardSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this GiftCardSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this GiftCardSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this GiftCardSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this GiftCardSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this GiftCardSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this GiftCardSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this GiftCardSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// The input fields to update a gift card.
type GiftCardUpdateInput struct {
	// The note associated with the gift card, which is not visible to the customer.
	Note *string `json:"note,omitempty,omitempty"`
	// The date at which the gift card will expire. If set to `null`, then the gift card will never expire.
	//
	ExpiresOn *string `json:"expiresOn,omitempty,omitempty"`
	// The ID of the customer who will receive the gift card. The ID cannot be changed if the gift card already has an assigned customer ID.
	//
	CustomerID *string `json:"customerId,omitempty,omitempty"`
	// The suffix of the Liquid template that is used to render the gift card online.
	// For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
	//
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
}

// Return type for `giftCardUpdate` mutation.
type GiftCardUpdatePayload struct {
	// The updated gift card.
	GiftCard *GiftCard `json:"giftCard,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during the execution of a gift card mutation.
type GiftCardUserError struct {
	// The error code.
	Code *GiftCardErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (GiftCardUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this GiftCardUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this GiftCardUserError) GetMessage() string { return this.Message }

// Represents an image resource.
type Image struct {
	// A word or phrase to share the nature or contents of an image.
	AltText *string `json:"altText,omitempty,omitempty"`
	// The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Height *int `json:"height,omitempty,omitempty"`
	// A unique ID for the image.
	ID *string `json:"id,omitempty,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The location of the original image as a URL.
	//
	// If there are any existing transformations in the original source URL, they will remain and not be stripped.
	//
	OriginalSrc string `json:"originalSrc"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The location of the image as a URL.
	Src string `json:"src"`
	// The location of the transformed image as a URL.
	//
	// All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
	// Otherwise any transformations which an image type does not support will be ignored.
	//
	TransformedSrc string `json:"transformedSrc"`
	// The location of the image as a URL.
	//
	// If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
	//
	// All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
	//
	// If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
	//
	URL string `json:"url"`
	// The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Width *int `json:"width,omitempty,omitempty"`
}

func (Image) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Image) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Image) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Image) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Image) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

// An auto-generated type for paginating through multiple Images.
type ImageConnection struct {
	// A list of edges.
	Edges []ImageEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ImageEdge.
	Nodes []Image `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Image and a cursor during pagination.
type ImageEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ImageEdge.
	Node *Image `json:"node,omitempty"`
}

// The input fields for an image.
type ImageInput struct {
	// A globally-unique ID.
	ID *string `json:"id,omitempty,omitempty"`
	// A word or phrase to share the nature or contents of an image.
	AltText *string `json:"altText,omitempty,omitempty"`
	// The URL of the image. May be a staged upload URL.
	Src *string `json:"src,omitempty,omitempty"`
}

// The available options for transforming an image.
//
// All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
type ImageTransformInput struct {
	// The region of the image to remain after cropping.
	// Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
	// The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
	// a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
	// in an image with a width of 5 and height of 10, where the right side of the image is removed.
	//
	Crop *CropRegion `json:"crop,omitempty,omitempty"`
	// Image width in pixels between 1 and 5760.
	//
	MaxWidth *int `json:"maxWidth,omitempty,omitempty"`
	// Image height in pixels between 1 and 5760.
	//
	MaxHeight *int `json:"maxHeight,omitempty,omitempty"`
	// Image size multiplier for high-resolution retina displays. Must be within 1..3.
	//
	Scale *int `json:"scale,omitempty,omitempty"`
	// Convert the source image into the preferred content type.
	// Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
	//
	PreferredContentType *ImageContentType `json:"preferredContentType,omitempty,omitempty"`
}

// A parameter to upload an image.
//
// Deprecated in favor of
// [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
// which is used in
// [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
// and returned by the
// [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
type ImageUploadParameter struct {
	// The parameter name.
	Name string `json:"name"`
	// The parameter value.
	Value string `json:"value"`
}

// The input fields for the incoming line item.
type IncomingRequestLineItemInput struct {
	// The ID of the rejected line item.
	FulfillmentOrderLineItemID string `json:"fulfillmentOrderLineItemId"`
	// The rejection message of the line item.
	Message *string `json:"message,omitempty,omitempty"`
}

// Return type for `inventoryActivate` mutation.
type InventoryActivatePayload struct {
	// The inventory level that was activated.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for items and their adjustments.
type InventoryAdjustItemInput struct {
	// ID of the inventory item to adjust.
	InventoryItemID string `json:"inventoryItemId"`
	// The change applied to the `available` quantity of the item at the location.
	AvailableDelta int `json:"availableDelta"`
}

// The input fields required to adjust inventory quantities.
type InventoryAdjustQuantitiesInput struct {
	// The reason for the quantity changes.
	Reason string `json:"reason"`
	// The quantity name to be adjusted.
	Name string `json:"name"`
	// The reference document URI for the changes. Used to denote what is causing the change.
	ReferenceDocumentURI *string `json:"referenceDocumentUri,omitempty,omitempty"`
	// The quantity changes of items at locations to be made.
	Changes []InventoryChangeInput `json:"changes,omitempty"`
}

// Return type for `inventoryAdjustQuantities` mutation.
type InventoryAdjustQuantitiesPayload struct {
	// The group of changes made by the operation.
	InventoryAdjustmentGroup *InventoryAdjustmentGroup `json:"inventoryAdjustmentGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []InventoryAdjustQuantitiesUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `InventoryAdjustQuantities`.
type InventoryAdjustQuantitiesUserError struct {
	// The error code.
	Code *InventoryAdjustQuantitiesUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (InventoryAdjustQuantitiesUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this InventoryAdjustQuantitiesUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this InventoryAdjustQuantitiesUserError) GetMessage() string { return this.Message }

// The input fields required to adjust the inventory quantity.
type InventoryAdjustQuantityInput struct {
	// ID of the inventory level to adjust.
	InventoryLevelID string `json:"inventoryLevelId"`
	// The change applied to the `available` quantity of the item at the location.
	AvailableDelta int `json:"availableDelta"`
}

// Return type for `inventoryAdjustQuantity` mutation.
type InventoryAdjustQuantityPayload struct {
	// Represents the updated inventory quantity of an inventory item at a specific location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a group of adjustments made as part of the same operation.
type InventoryAdjustmentGroup struct {
	// The app that triggered the inventory event, if one exists.
	App *App `json:"app,omitempty,omitempty"`
	// The set of inventory quantity changes that occurred in the inventory event.
	Changes []InventoryChange `json:"changes,omitempty"`
	// The date and time the inventory adjustment group was created.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The reason for the group of adjustments.
	Reason string `json:"reason"`
	// The reference document URI for the changes. Denotes what is causing the change.
	ReferenceDocumentURI *string `json:"referenceDocumentUri,omitempty,omitempty"`
	// The staff member associated with the inventory event.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
}

func (InventoryAdjustmentGroup) IsNode() {}

// A globally-unique ID.
func (this InventoryAdjustmentGroup) GetID() string { return this.ID }

// Return type for `inventoryBulkAdjustQuantityAtLocation` mutation.
type InventoryBulkAdjustQuantityAtLocationPayload struct {
	// Represents the updated inventory quantities of an inventory item at the location.
	InventoryLevels []InventoryLevel `json:"inventoryLevels,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields to specify whether the inventory item should be activated or not at the specified location.
type InventoryBulkToggleActivationInput struct {
	// The ID of the location to modify the inventory item's stocked status.
	LocationID string `json:"locationId"`
	// Whether the inventory item can be stocked at the specified location. To deactivate, set the value to false which removes an inventory item's quantities from that location, and turns off inventory at that location.
	Activate bool `json:"activate"`
}

// Return type for `inventoryBulkToggleActivation` mutation.
type InventoryBulkToggleActivationPayload struct {
	// The inventory item that was updated.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty,omitempty"`
	// The activated inventory levels.
	InventoryLevels []InventoryLevel `json:"inventoryLevels,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []InventoryBulkToggleActivationUserError `json:"userErrors,omitempty"`
}

// An error that occurred while setting the activation status of an inventory item.
type InventoryBulkToggleActivationUserError struct {
	// The error code.
	Code *InventoryBulkToggleActivationUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (InventoryBulkToggleActivationUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this InventoryBulkToggleActivationUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this InventoryBulkToggleActivationUserError) GetMessage() string { return this.Message }

// Represents a change in an inventory quantity of an inventory item at a location.
type InventoryChange struct {
	// The amount by which the inventory quantity was changed.
	Delta int `json:"delta"`
	// The inventory item associated with this inventory change.
	Item *InventoryItem `json:"item,omitempty,omitempty"`
	// The ledger document URI for the change. Denotes who the change is applied to.
	LedgerDocumentURI *string `json:"ledgerDocumentUri,omitempty,omitempty"`
	// The location associated with this inventory change.
	Location *Location `json:"location,omitempty,omitempty"`
	// The name of the inventory quantity that was changed.
	Name string `json:"name"`
	// The quantity of named inventory after the change.
	QuantityAfterChange *int `json:"quantityAfterChange,omitempty,omitempty"`
}

// The input fields for the change to be made to an inventory item at a location.
type InventoryChangeInput struct {
	// The amount by which the inventory quantity will be changed.
	Delta int `json:"delta"`
	// Specifies the inventory item to which the change will be applied.
	InventoryItemID string `json:"inventoryItemId"`
	// Specifies the location at which the change will be applied.
	LocationID string `json:"locationId"`
	// The ledger document URI to which the quantity change is being applied. Not allowed for 'available' and required for other quantity names.
	LedgerDocumentURI *string `json:"ledgerDocumentUri,omitempty,omitempty"`
}

// Return type for `inventoryDeactivate` mutation.
type InventoryDeactivatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents the goods available to be shipped to a customer.
// It holds essential information about the goods, including SKU and whether it is tracked.
type InventoryItem struct {
	// The ISO 3166-1 alpha-2 country code of where the item originated from.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty,omitempty"`
	// A list of country specific harmonized system codes.
	CountryHarmonizedSystemCodes *CountryHarmonizedSystemCodeConnection `json:"countryHarmonizedSystemCodes,omitempty"`
	// The date and time when the inventory item was created.
	CreatedAt string `json:"createdAt"`
	// The number of inventory items that share the same SKU with this item.
	DuplicateSkuCount int `json:"duplicateSkuCount"`
	// The harmonized system code of the item.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The URL that points to the inventory history for the item.
	InventoryHistoryURL *string `json:"inventoryHistoryUrl,omitempty,omitempty"`
	// The inventory item's quantities at the specified location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty,omitempty"`
	// A list of the inventory item's quantities for each location that the inventory item can be stocked at.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The number of locations where this inventory item is stocked.
	LocationsCount int `json:"locationsCount"`
	// The ISO 3166-2 alpha-2 province code of where the item originated from.
	ProvinceCodeOfOrigin *string `json:"provinceCodeOfOrigin,omitempty,omitempty"`
	// Whether the inventory item requires shipping.
	RequiresShipping bool `json:"requiresShipping"`
	// Inventory item SKU. Case-sensitive string.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether inventory levels are tracked for the item.
	Tracked bool `json:"tracked"`
	// Whether the value of the `tracked` field for the inventory item can be changed.
	TrackedEditable *EditableProperty `json:"trackedEditable,omitempty"`
	// Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled.
	UnitCost *MoneyV2 `json:"unitCost,omitempty,omitempty"`
	// The date and time when the inventory item was updated.
	UpdatedAt string `json:"updatedAt"`
	// The variant that owns this inventory item.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (InventoryItem) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this InventoryItem) GetLegacyResourceID() string { return this.LegacyResourceID }

func (InventoryItem) IsNode() {}

// A globally-unique ID.
func (this InventoryItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple InventoryItems.
type InventoryItemConnection struct {
	// A list of edges.
	Edges []InventoryItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in InventoryItemEdge.
	Nodes []InventoryItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryItem and a cursor during pagination.
type InventoryItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of InventoryItemEdge.
	Node *InventoryItem `json:"node,omitempty"`
}

// The input fields for an inventory item.
type InventoryItemInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty,omitempty"`
	// Whether the inventory item is tracked.
	Tracked *bool `json:"tracked,omitempty,omitempty"`
}

// The input fields for an inventory item.
type InventoryItemUpdateInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty,omitempty"`
	// Whether the inventory item is tracked. The value must be true to adjust the item's inventory levels.
	Tracked *bool `json:"tracked,omitempty,omitempty"`
	// The ISO 3166-1 alpha-2 country code of where the item originated from.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty,omitempty"`
	// The ISO 3166-2 alpha-2 province/state code of where the item originated from.
	ProvinceCodeOfOrigin *string `json:"provinceCodeOfOrigin,omitempty,omitempty"`
	// The harmonized system code of the inventory item. This must be a number between 6 and 13 digits.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// List of country-specific harmonized system codes.
	CountryHarmonizedSystemCodes []CountryHarmonizedSystemCodeInput `json:"countryHarmonizedSystemCodes,omitempty,omitempty"`
}

// Return type for `inventoryItemUpdate` mutation.
type InventoryItemUpdatePayload struct {
	// The inventory item that was updated.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The quantities of an inventory item that are related to a specific location.
type InventoryLevel struct {
	// The quantity of inventory items that are available at the inventory level's associated location.
	Available int `json:"available"`
	// Whether the inventory items associated with the inventory level can be deactivated.
	CanDeactivate bool `json:"canDeactivate"`
	// The date and time when the inventory level was created.
	CreatedAt string `json:"createdAt"`
	// Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
	DeactivationAlert *string `json:"deactivationAlert,omitempty,omitempty"`
	// Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
	DeactivationAlertHTML *string `json:"deactivationAlertHtml,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The quantity of inventory items that are going to the inventory level's associated location.
	Incoming int `json:"incoming"`
	// Inventory item associated with the inventory level.
	Item *InventoryItem `json:"item,omitempty"`
	// The location associated with the inventory level.
	Location *Location `json:"location,omitempty"`
	// Quantities for the requested names.
	Quantities []InventoryQuantity `json:"quantities,omitempty"`
	// The date and time when the inventory level was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (InventoryLevel) IsNode() {}

// A globally-unique ID.
func (this InventoryLevel) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple InventoryLevels.
type InventoryLevelConnection struct {
	// A list of edges.
	Edges []InventoryLevelEdge `json:"edges,omitempty"`
	// A list of the nodes contained in InventoryLevelEdge.
	Nodes []InventoryLevel `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryLevel and a cursor during pagination.
type InventoryLevelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of InventoryLevelEdge.
	Node *InventoryLevel `json:"node,omitempty"`
}

// The input fields for an inventory level.
type InventoryLevelInput struct {
	// The available quantity of an inventory item at a location.
	AvailableQuantity int `json:"availableQuantity"`
	// The ID of a location.
	LocationID string `json:"locationId"`
}

// The input fields required to move inventory quantities.
type InventoryMoveQuantitiesInput struct {
	// The reason for the quantity changes.
	Reason string `json:"reason"`
	// The reference document URI for the changes. Used to denote what is causing the change.
	ReferenceDocumentURI string `json:"referenceDocumentUri"`
	// The quantity changes of items at locations to be made.
	Changes []InventoryMoveQuantityChange `json:"changes,omitempty"`
}

// Return type for `inventoryMoveQuantities` mutation.
type InventoryMoveQuantitiesPayload struct {
	// The group of changes made by the operation.
	InventoryAdjustmentGroup *InventoryAdjustmentGroup `json:"inventoryAdjustmentGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []InventoryMoveQuantitiesUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `InventoryMoveQuantities`.
type InventoryMoveQuantitiesUserError struct {
	// The error code.
	Code *InventoryMoveQuantitiesUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (InventoryMoveQuantitiesUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this InventoryMoveQuantitiesUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this InventoryMoveQuantitiesUserError) GetMessage() string { return this.Message }

// Represents the change to be made to an inventory item at a location.
// The change can either involve the same quantity name between different locations,
// or involve different quantity names between the same location.
type InventoryMoveQuantityChange struct {
	// Specifies the inventory item to which the change will be applied.
	InventoryItemID string `json:"inventoryItemId"`
	// The amount by which the inventory quantity will be changed.
	Quantity int `json:"quantity"`
	// The location, quantity name, and ledger document from where the move will be made.
	From *InventoryMoveQuantityTerminalInput `json:"from,omitempty"`
	// The location, quantity name, and ledger document to where the move will be made.
	To *InventoryMoveQuantityTerminalInput `json:"to,omitempty"`
}

// The input fields representing the change to be made to an inventory item at a location.
type InventoryMoveQuantityTerminalInput struct {
	// Specifies the location at which the change will be applied.
	LocationID string `json:"locationId"`
	// The quantity name to be moved.
	Name string `json:"name"`
	// The ledger document URI for the quantity move. Not allowed for 'available' and required for other quantity names.
	LedgerDocumentURI *string `json:"ledgerDocumentUri,omitempty,omitempty"`
}

// General inventory properties for the shop.
type InventoryProperties struct {
	// All the quantity names.
	QuantityNames []InventoryQuantityName `json:"quantityNames,omitempty"`
}

// Represents a quantity of an inventory item at a specific location, for a specific name.
type InventoryQuantity struct {
	// The name that identifies the inventory quantity.
	Name string `json:"name"`
	// The quantity for the quantity name.
	Quantity int `json:"quantity"`
	// When the quantity was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty,omitempty"`
}

// Details about an individual quantity name.
type InventoryQuantityName struct {
	// List of quantity names that this quantity name belongs to.
	BelongsTo []string `json:"belongsTo,omitempty"`
	// List of quantity names that comprise this quantity name.
	Comprises []string `json:"comprises,omitempty"`
	// The i18n-friendly display name of the quantity.
	DisplayName *string `json:"displayName,omitempty,omitempty"`
	// Whether the quantity name has been used by the merchant.
	IsInUse bool `json:"isInUse"`
	// The quantity name as used by the API.
	Name string `json:"name"`
}

// The input fields required to set inventory on hand quantities.
type InventorySetOnHandQuantitiesInput struct {
	// The reason for the quantity changes.
	Reason string `json:"reason"`
	// The reference document URI for the changes. Used to denote what is causing the change.
	ReferenceDocumentURI *string `json:"referenceDocumentUri,omitempty,omitempty"`
	// The value to which the on hand quantity will be set.
	SetQuantities []InventorySetQuantityInput `json:"setQuantities,omitempty"`
}

// Return type for `inventorySetOnHandQuantities` mutation.
type InventorySetOnHandQuantitiesPayload struct {
	// The group of changes made by the operation.
	InventoryAdjustmentGroup *InventoryAdjustmentGroup `json:"inventoryAdjustmentGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []InventorySetOnHandQuantitiesUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `InventorySetOnHandQuantities`.
type InventorySetOnHandQuantitiesUserError struct {
	// The error code.
	Code *InventorySetOnHandQuantitiesUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (InventorySetOnHandQuantitiesUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this InventorySetOnHandQuantitiesUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this InventorySetOnHandQuantitiesUserError) GetMessage() string { return this.Message }

// The input fields for the quantity to be set for an inventory item at a location.
type InventorySetQuantityInput struct {
	// Specifies the inventory item to which the quantity will be set.
	InventoryItemID string `json:"inventoryItemId"`
	// Specifies the location at which the quantity will be set.
	LocationID string `json:"locationId"`
	// The quantity to which the inventory quantity will be set.
	Quantity int `json:"quantity"`
}

// A job corresponds to some long running task that the client should poll for status.
type Job struct {
	// This indicates if the job is still queued or has been run.
	Done bool `json:"done"`
	// A globally-unique ID that's returned when running an asynchronous mutation.
	ID string `json:"id"`
	// This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
	Query *QueryRoot `json:"query,omitempty,omitempty"`
}

// The total number of pending orders on a shop if less then a maximum, or that maximum.
// The atMax field indicates when this maximum has been reached.
type LimitedPendingOrderCount struct {
	// This is set when the number of pending orders has reached the maximum.
	AtMax bool `json:"atMax"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	//
	Count int `json:"count"`
}

// Represents individual products and quantities purchased in the associated order.
type LineItem struct {
	// Whether the line item can be restocked.
	CanRestock bool `json:"canRestock"`
	// The subscription contract associated with this line item.
	Contract *SubscriptionContract `json:"contract,omitempty,omitempty"`
	// The line item's quantity, minus the removed quantity.
	CurrentQuantity int `json:"currentQuantity"`
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied, in shop currency.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total line price after discounts are applied, in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The duties associated with the line item.
	Duties []Duty `json:"duties,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity"`
	// The fulfillment service that stocks the product variant belonging to a line item.
	//
	// This is a third-party fulfillment service in the following scenarios:
	//
	// **Scenario 1**
	// - The product variant is stocked by a single fulfillment service.
	// - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
	//
	// **Scenario 2**
	// - Multiple fulfillment services stock the product variant.
	// - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
	//
	// If none of the above conditions are met, then the fulfillment service has the `manual` handle.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	//
	FulfillmentStatus string `json:"fulfillmentStatus"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated to the line item's variant.
	Image *Image `json:"image,omitempty,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable"`
	// The title of the product, optionally appended with the title of the variant (if applicable).
	Name string `json:"name"`
	// The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity"`
	// The total price without discounts applied, in shop currency.
	// This value is based on the unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant unit price without discounts applied, in shop currency.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty,omitempty"`
	// The number of variant units ordered.
	Quantity int `json:"quantity"`
	// The line item's quantity, minus the removed quantity.
	RefundableQuantity int `json:"refundableQuantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Whether the line item can be restocked.
	Restockable bool `json:"restockable"`
	// The selling plan details associated with the line item.
	SellingPlan *LineItemSellingPlan `json:"sellingPlan,omitempty,omitempty"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Staff attributed to the line item.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// The taxes charged for this line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product at time of order creation.
	Title string `json:"title"`
	// The total amount of the discount allocated to the line item in the shop currency.
	TotalDiscount null.String `json:"totalDiscount"`
	// The total amount of the discount that's allocated to the line item, in the shop and presentment currencies. This field must be explicitly set using draft orders, Shopify scripts, or the API.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units, in shop currency.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal"`
	// The total discounted value of unfulfilled units, in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal"`
	// The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The title of the variant at time of order creation.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
}

func (LineItem) IsNode() {}

// A globally-unique ID.
func (this LineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple LineItems.
type LineItemConnection struct {
	// A list of edges.
	Edges []LineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in LineItemEdge.
	Nodes []LineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItem and a cursor during pagination.
type LineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LineItemEdge.
	Node *LineItem `json:"node,omitempty"`
}

// Represents a single line item on an order.
type LineItemMutable struct {
	// Whether the line item can be restocked.
	CanRestock bool `json:"canRestock"`
	// A list of attributes that represent custom features or special requests.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied, in shop currency.
	DiscountedTotal null.String `json:"discountedTotal"`
	// The total line price after discounts are applied, in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice"`
	// The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity"`
	// The service provider that fulfills the line item.
	//
	// Deleted fulfillment services will return null.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	//
	FulfillmentStatus string `json:"fulfillmentStatus"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image associated to the line item's variant.
	Image *Image `json:"image,omitempty,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable"`
	// The name of the product.
	Name string `json:"name"`
	// The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity"`
	// The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
	//
	OriginalTotal null.String `json:"originalTotal"`
	// The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// The variant unit price without discounts applied, in shop currency.
	OriginalUnitPrice null.String `json:"originalUnitPrice"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty,omitempty"`
	// The number of variant units ordered.
	Quantity int `json:"quantity"`
	// The line item's quantity, minus the removed quantity.
	RefundableQuantity int `json:"refundableQuantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// Whether the line item can be restocked.
	Restockable bool `json:"restockable"`
	// The variant SKU number.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Staff attributed to the line item.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// The TaxLine object connected to this line item.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// The title of the product.
	Title string `json:"title"`
	// The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
	TotalDiscount null.String `json:"totalDiscount"`
	// The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units, in shop currency.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal"`
	// The total discounted value of unfulfilled units, in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal"`
	// The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty,omitempty"`
	// The name of the variant.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
	// The name of the vendor who made the variant.
	Vendor *string `json:"vendor,omitempty,omitempty"`
}

func (LineItemMutable) IsNode() {}

// A globally-unique ID.
func (this LineItemMutable) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple LineItemMutables.
type LineItemMutableConnection struct {
	// A list of edges.
	Edges []LineItemMutableEdge `json:"edges,omitempty"`
	// A list of the nodes contained in LineItemMutableEdge.
	Nodes []LineItemMutable `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItemMutable and a cursor during pagination.
type LineItemMutableEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LineItemMutableEdge.
	Node *LineItemMutable `json:"node,omitempty"`
}

// Represents the selling plan for a line item.
type LineItemSellingPlan struct {
	// The name of the selling plan for display purposes.
	Name string `json:"name"`
	// The ID of the selling plan associated with the line item.
	SellingPlanID *string `json:"sellingPlanId,omitempty,omitempty"`
}

// A link to direct users to.
type Link struct {
	// A context-sensitive label for the link.
	Label string `json:"label"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The URL that the link visits.
	URL string `json:"url"`
}

func (Link) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this Link) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A locale.
type Locale struct {
	// Locale ISO code.
	IsoCode string `json:"isoCode"`
	// Human-readable locale name.
	Name string `json:"name"`
}

// Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
type LocalizationExtension struct {
	// Country ISO 3166-1 alpha-2 code.
	CountryCode CountryCode `json:"countryCode"`
	// The localized extension keys that are allowed.
	Key LocalizationExtensionKey `json:"key"`
	// The purpose of this localization extension.
	Purpose LocalizationExtensionPurpose `json:"purpose"`
	// The localized extension title.
	Title string `json:"title"`
	// The value of the field.
	Value string `json:"value"`
}

// An auto-generated type for paginating through multiple LocalizationExtensions.
type LocalizationExtensionConnection struct {
	// A list of edges.
	Edges []LocalizationExtensionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in LocalizationExtensionEdge.
	Nodes []LocalizationExtension `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
type LocalizationExtensionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LocalizationExtensionEdge.
	Node *LocalizationExtension `json:"node,omitempty"`
}

// The input fields for a LocalizationExtensionInput.
type LocalizationExtensionInput struct {
	// The key for the localization extension.
	Key LocalizationExtensionKey `json:"key"`
	// The localization extension value.
	Value string `json:"value"`
}

// Represents the location where the physical good resides.
type Location struct {
	// Whether this location can be reactivated.
	Activatable bool `json:"activatable"`
	// The address of this location.
	Address *LocationAddress `json:"address,omitempty"`
	// Whether the location address has been verified.
	AddressVerified bool `json:"addressVerified"`
	// Whether this location can be deactivated.
	Deactivatable bool `json:"deactivatable"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
	DeactivatedAt *string `json:"deactivatedAt,omitempty,omitempty"`
	// Whether this location can be deleted.
	Deletable bool `json:"deletable"`
	// Name of the service provider that fulfills from this location.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// Whether this location can fulfill online orders.
	FulfillsOnlineOrders bool `json:"fulfillsOnlineOrders"`
	// Whether this location has active inventory.
	HasActiveInventory bool `json:"hasActiveInventory"`
	// Whether this location has orders that need to be fulfilled.
	HasUnfulfilledOrders bool `json:"hasUnfulfilledOrders"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The quantities of an inventory item at this location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty,omitempty"`
	// A list of the quantities of the inventory items that can be stocked at this location.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// Whether the location is active.
	IsActive bool `json:"isActive"`
	// Whether the location is your primary location for shipping inventory.
	IsPrimary bool `json:"isPrimary"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// Local pickup settings for the location.
	LocalPickupSettingsV2 *DeliveryLocalPickupSettings `json:"localPickupSettingsV2,omitempty,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The name of the location.
	Name string `json:"name"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
	ShipsInventory bool `json:"shipsInventory"`
	// List of suggested addresses for this location (empty if none).
	SuggestedAddresses []LocationSuggestedAddress `json:"suggestedAddresses,omitempty"`
}

func (Location) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Location) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Location) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Location) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Location) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Location) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Location) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (Location) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Location) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Location) IsNode() {}

// A globally-unique ID.
func (this Location) GetID() string { return this.ID }

func (Location) IsMetafieldReferencer() {}

// Return type for `locationActivate` mutation.
type LocationActivatePayload struct {
	// The location that was activated.
	Location *Location `json:"location,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	LocationActivateUserErrors []LocationActivateUserError `json:"locationActivateUserErrors,omitempty"`
}

// An error that occurs while activating a location.
type LocationActivateUserError struct {
	// The error code.
	Code *LocationActivateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (LocationActivateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this LocationActivateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this LocationActivateUserError) GetMessage() string { return this.Message }

// The input fields to use to specify the address while adding a location.
type LocationAddAddressInput struct {
	// The first line of the address.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The ZIP code or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
	// The two-letter code of country for the address.
	CountryCode CountryCode `json:"countryCode"`
	// The code for the region of the address, such as the state, province, or district.
	// For example CA for California, United States.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
}

// The input fields to use to add a location.
type LocationAddInput struct {
	// The name of the location.
	Name string `json:"name"`
	// The address of the location.
	Address *LocationAddAddressInput `json:"address,omitempty"`
	// Whether inventory at this location is available for sale online.
	FulfillsOnlineOrders *bool `json:"fulfillsOnlineOrders,omitempty,omitempty"`
	// Additional customizable information to associate with the location.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `locationAdd` mutation.
type LocationAddPayload struct {
	// The location that was added.
	Location *Location `json:"location,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []LocationAddUserError `json:"userErrors,omitempty"`
}

// An error that occurs while adding a location.
type LocationAddUserError struct {
	// The error code.
	Code *LocationAddUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (LocationAddUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this LocationAddUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this LocationAddUserError) GetMessage() string { return this.Message }

// Represents the address of a location.
type LocationAddress struct {
	// The first line of the address for the location.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address for the location.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city of the location.
	City *string `json:"city,omitempty,omitempty"`
	// The country of the location.
	Country *string `json:"country,omitempty,omitempty"`
	// The country code of the location.
	CountryCode *string `json:"countryCode,omitempty,omitempty"`
	// A formatted version of the address for the location.
	Formatted []string `json:"formatted,omitempty"`
	// The latitude coordinates of the location.
	Latitude *float64 `json:"latitude,omitempty,omitempty"`
	// The longitude coordinates of the location.
	Longitude *float64 `json:"longitude,omitempty,omitempty"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The province of the location.
	Province *string `json:"province,omitempty,omitempty"`
	// The code for the province, state, or district of the address of the location.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The ZIP code of the location.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple Locations.
type LocationConnection struct {
	// A list of edges.
	Edges []LocationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in LocationEdge.
	Nodes []Location `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `locationDeactivate` mutation.
type LocationDeactivatePayload struct {
	// The location that was deactivated.
	Location *Location `json:"location,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	LocationDeactivateUserErrors []LocationDeactivateUserError `json:"locationDeactivateUserErrors,omitempty"`
}

// The possible errors that can be returned when executing the `locationDeactivate` mutation.
type LocationDeactivateUserError struct {
	// The error code.
	Code *LocationDeactivateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (LocationDeactivateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this LocationDeactivateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this LocationDeactivateUserError) GetMessage() string { return this.Message }

// Return type for `locationDelete` mutation.
type LocationDeletePayload struct {
	// The ID of the location that was deleted.
	DeletedLocationID *string `json:"deletedLocationId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	LocationDeleteUserErrors []LocationDeleteUserError `json:"locationDeleteUserErrors,omitempty"`
}

// An error that occurs while deleting a location.
type LocationDeleteUserError struct {
	// The error code.
	Code *LocationDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (LocationDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this LocationDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this LocationDeleteUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one Location and a cursor during pagination.
type LocationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of LocationEdge.
	Node *Location `json:"node,omitempty"`
}

// The input fields to use to edit the address of a location.
type LocationEditAddressInput struct {
	// The first line of the address.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The phone number of the location.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The ZIP code or postal code of the location.
	Zip *string `json:"zip,omitempty,omitempty"`
	// The two-letter code of country for the address.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The code for the region of the address, such as the state, province, or district.
	// For example CA for California, United States.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
}

// The input fields to use to edit a location.
type LocationEditInput struct {
	// The name of the location.
	Name *string `json:"name,omitempty,omitempty"`
	// The address of the location.
	Address *LocationEditAddressInput `json:"address,omitempty,omitempty"`
	// Whether inventory at this location is available for sale online.
	FulfillsOnlineOrders *bool `json:"fulfillsOnlineOrders,omitempty,omitempty"`
	// Additional customizable information to associate with the location.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `locationEdit` mutation.
type LocationEditPayload struct {
	// The location that was edited.
	Location *Location `json:"location,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []LocationEditUserError `json:"userErrors,omitempty"`
}

// An error that occurs while editing a location.
type LocationEditUserError struct {
	// The error code.
	Code *LocationEditUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (LocationEditUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this LocationEditUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this LocationEditUserError) GetMessage() string { return this.Message }

// Return type for `locationLocalPickupDisable` mutation.
type LocationLocalPickupDisablePayload struct {
	// The ID of the location for which local pickup was disabled.
	LocationID *string `json:"locationId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryLocationLocalPickupSettingsError `json:"userErrors,omitempty"`
}

// Return type for `locationLocalPickupEnable` mutation.
type LocationLocalPickupEnablePayload struct {
	// The local pickup settings that were enabled.
	LocalPickupSettings *DeliveryLocalPickupSettings `json:"localPickupSettings,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []DeliveryLocationLocalPickupSettingsError `json:"userErrors,omitempty"`
}

// Represents a suggested address for a location.
type LocationSuggestedAddress struct {
	// The first line of the suggested address.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the suggested address.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The city of the suggested address.
	City *string `json:"city,omitempty,omitempty"`
	// The country of the suggested address.
	Country *string `json:"country,omitempty,omitempty"`
	// The country code of the suggested address.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// A formatted version of the suggested address.
	Formatted []string `json:"formatted,omitempty"`
	// The province of the suggested address.
	Province *string `json:"province,omitempty,omitempty"`
	// The code for the province, state, or district of the suggested address.
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The ZIP code of the suggested address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// Represents a customer mailing address.
//
// For example, a customer's default address and an order's billing address are both mailling addresses.
type MailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	//
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	//
	City *string `json:"city,omitempty,omitempty"`
	// The name of the customer's company or organization.
	//
	Company *string `json:"company,omitempty,omitempty"`
	// Whether the address coordinates are valid.
	CoordinatesValidated bool `json:"coordinatesValidated"`
	// The name of the country.
	//
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCode *string `json:"countryCode,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCodeV2 *CountryCode `json:"countryCodeV2,omitempty,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// A formatted version of the address, customized by the provided arguments.
	Formatted []string `json:"formatted,omitempty"`
	// A comma-separated list of the values for city, province, and country.
	FormattedArea *string `json:"formattedArea,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The latitude coordinate of the customer address.
	Latitude *float64 `json:"latitude,omitempty,omitempty"`
	// The longitude coordinate of the customer address.
	Longitude *float64 `json:"longitude,omitempty,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	//
	Name *string `json:"name,omitempty,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The time zone of the address.
	TimeZone *string `json:"timeZone,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

func (MailingAddress) IsNode() {}

// A globally-unique ID.
func (this MailingAddress) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple MailingAddresses.
type MailingAddressConnection struct {
	// A list of edges.
	Edges []MailingAddressEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MailingAddressEdge.
	Nodes []MailingAddress `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MailingAddress and a cursor during pagination.
type MailingAddressEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MailingAddressEdge.
	Node *MailingAddress `json:"node,omitempty"`
}

// The input fields to create or update a mailing address.
type MailingAddressInput struct {
	// The first line of the address. Typically the street address or PO Box number.
	//
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	//
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	//
	City *string `json:"city,omitempty,omitempty"`
	// The name of the customer's company or organization.
	//
	Company *string `json:"company,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty,omitempty"`
	// The code for the region of the address, such as the province, state, or district.
	// For example QC for Quebec, Canada.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// Manual discount applications capture the intentions of a discount that was manually created for an order.
//
// Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
type ManualDiscountApplication struct {
	// The method by which the discount's value is applied to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The description of the discount application.
	Description *string `json:"description,omitempty,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the discount application.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (ManualDiscountApplication) IsDiscountApplication() {}

// The method by which the discount's value is applied to its entitled items.
func (this ManualDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// An ordered index that can be used to identify the discount application and indicate the precedence
// of the discount application for calculations.
func (this ManualDiscountApplication) GetIndex() int { return this.Index }

// How the discount amount is distributed on the discounted lines.
func (this ManualDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this ManualDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this ManualDiscountApplication) GetValue() PricingValue { return this.Value }

// A market is a group of one or more regions that you want to target for international sales.
// By creating a market, you can configure a distinct, localized shopping experience for
// customers from a specific area of the world. For example, you can
// [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
// [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
// or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
type Market struct {
	// The catalogs that belong to the market.
	Catalogs *MarketCatalogConnection `json:"catalogs,omitempty"`
	// The market’s currency settings.
	CurrencySettings *MarketCurrencySettings `json:"currencySettings,omitempty"`
	// Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
	// markets cannot be selected on the storefront or in checkout.
	//
	Enabled bool `json:"enabled"`
	// A short, human-readable unique identifier for the market. This is changeable by the merchant.
	Handle string `json:"handle"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The name of the market. Not shown to customers.
	Name string `json:"name"`
	// The market’s price list, which specifies a percentage-based price adjustment as well as
	// fixed price overrides for specific variants.
	//
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// Whether the market is the shop’s primary market.
	//
	Primary bool `json:"primary"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The regions that comprise the market.
	Regions *MarketRegionConnection `json:"regions,omitempty"`
	// The market’s web presence, which defines its SEO strategy. This can be a different domain,
	// subdomain, or subfolders of the primary domain. Each web presence comprises one or more
	// language variants. If a market doesn't have its own web presence, then the market is accessible on the
	// shop’s primary domain using [country
	// selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
	//
	WebPresence *MarketWebPresence `json:"webPresence,omitempty,omitempty"`
}

func (Market) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Market) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Market) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Market) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Market) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Market) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Market) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

func (Market) IsNode() {}

// A globally-unique ID.
func (this Market) GetID() string { return this.ID }

func (Market) IsMetafieldReferencer() {}

// A list of products with publishing and pricing information associated with markets.
type MarketCatalog struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The markets associated with the catalog.
	Markets *MarketConnection `json:"markets,omitempty"`
	// Most recent catalog operations.
	Operations []ResourceOperation `json:"operations,omitempty"`
	// The price list associated with the catalog.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// A group of products and collections that's published to a catalog.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The status of the catalog.
	Status CatalogStatus `json:"status"`
	// The name of the catalog.
	Title string `json:"title"`
}

func (MarketCatalog) IsCatalog() {}

// A globally-unique ID.
func (this MarketCatalog) GetID() string { return this.ID }

// Most recent catalog operations.
func (this MarketCatalog) GetOperations() []ResourceOperation {
	if this.Operations == nil {
		return nil
	}
	interfaceSlice := make([]ResourceOperation, 0, len(this.Operations))
	for _, concrete := range this.Operations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The price list associated with the catalog.
func (this MarketCatalog) GetPriceList() *PriceList { return this.PriceList }

// A group of products and collections that's published to a catalog.
func (this MarketCatalog) GetPublication() *Publication { return this.Publication }

// The status of the catalog.
func (this MarketCatalog) GetStatus() CatalogStatus { return this.Status }

// The name of the catalog.
func (this MarketCatalog) GetTitle() string { return this.Title }

func (MarketCatalog) IsNode() {}

// A globally-unique ID.

// An auto-generated type for paginating through multiple MarketCatalogs.
type MarketCatalogConnection struct {
	// A list of edges.
	Edges []MarketCatalogEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketCatalogEdge.
	Nodes []MarketCatalog `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MarketCatalog and a cursor during pagination.
type MarketCatalogEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketCatalogEdge.
	Node *MarketCatalog `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple Markets.
type MarketConnection struct {
	// A list of edges.
	Edges []MarketEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketEdge.
	Nodes []Market `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields required to create a market.
type MarketCreateInput struct {
	// The name of the market. Not shown to customers.
	//
	Name string `json:"name"`
	// A unique identifier for the market. For example `"ca"`.
	// If the handle isn't provided, then the handle is auto-generated based on the country or name.
	//
	Handle *string `json:"handle,omitempty,omitempty"`
	// Whether the market is enabled to receive visitors and sales. If a
	// value isn't provided, then the market is enabled by default if all
	// included regions have shipping rates, and disabled if any regions don't
	// have shipping rates.
	//
	// **Note**: Regions in inactive markets can't be selected on the
	// storefront or in checkout.
	//
	Enabled *bool `json:"enabled,omitempty,omitempty"`
	// The regions to be included in the market. Each region can only be included in one market at
	// a time.
	//
	Regions []MarketRegionCreateInput `json:"regions,omitempty"`
}

// Return type for `marketCreate` mutation.
type MarketCreatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// A market's currency settings.
type MarketCurrencySettings struct {
	// The currency which this market's prices are defined in, and the
	// currency which its customers must use if local currencies are disabled.
	//
	BaseCurrency *CurrencySetting `json:"baseCurrency,omitempty"`
	// Whether or not local currencies are enabled. If enabled, then prices will
	// be converted to give each customer the best experience based on their
	// region. If disabled, then all customers in this market will see prices
	// in the market's base currency.
	//
	LocalCurrencies bool `json:"localCurrencies"`
}

// The input fields used to update the currency settings of a market.
type MarketCurrencySettingsUpdateInput struct {
	// The currency which this market’s prices are defined in, and the
	// currency which its customers must use if local currencies are disabled.
	//
	BaseCurrency *CurrencyCode `json:"baseCurrency,omitempty,omitempty"`
	// Whether or not local currencies are enabled. If enabled, then prices will
	// be converted to give each customer the best experience based on their
	// region. If disabled, then all customers in this market will see prices
	// in the market's base currency.
	//
	LocalCurrencies *bool `json:"localCurrencies,omitempty,omitempty"`
}

// Return type for `marketCurrencySettingsUpdate` mutation.
type MarketCurrencySettingsUpdatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketCurrencySettingsUserError `json:"userErrors,omitempty"`
}

// Error codes for failed market multi-currency operations.
type MarketCurrencySettingsUserError struct {
	// The error code.
	Code *MarketCurrencySettingsUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MarketCurrencySettingsUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MarketCurrencySettingsUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MarketCurrencySettingsUserError) GetMessage() string { return this.Message }

// Return type for `marketDelete` mutation.
type MarketDeletePayload struct {
	// The ID of the deleted market.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Market and a cursor during pagination.
type MarketEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketEdge.
	Node *Market `json:"node,omitempty"`
}

// The market localizable content of a resource's field.
type MarketLocalizableContent struct {
	// The hash digest representation of the content value.
	Digest *string `json:"digest,omitempty,omitempty"`
	// The resource field that's being localized.
	Key string `json:"key"`
	// The content value.
	Value *string `json:"value,omitempty,omitempty"`
}

// A resource that has market localizable fields.
type MarketLocalizableResource struct {
	// The market localizable content.
	MarketLocalizableContent []MarketLocalizableContent `json:"marketLocalizableContent,omitempty"`
	// Market localizations for the market localizable content.
	MarketLocalizations []MarketLocalization `json:"marketLocalizations,omitempty"`
	// The GID of the resource.
	ResourceID string `json:"resourceId"`
}

// An auto-generated type for paginating through multiple MarketLocalizableResources.
type MarketLocalizableResourceConnection struct {
	// A list of edges.
	Edges []MarketLocalizableResourceEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketLocalizableResourceEdge.
	Nodes []MarketLocalizableResource `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
type MarketLocalizableResourceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketLocalizableResourceEdge.
	Node *MarketLocalizableResource `json:"node,omitempty"`
}

// The market localization of a field within a resource, which is determined by the market ID.
type MarketLocalization struct {
	// A reference to the value being localized on the resource that this market localization belongs to.
	Key string `json:"key"`
	// The market that the localization is specific to.
	Market *Market `json:"market,omitempty"`
	// Whether the original content has changed since this market localization was updated.
	Outdated bool `json:"outdated"`
	// The date and time when the market localization was updated.
	UpdatedAt *string `json:"updatedAt,omitempty,omitempty"`
	// The value of the market localization.
	Value *string `json:"value,omitempty,omitempty"`
}

// The input fields and values for creating or updating a market localization.
type MarketLocalizationRegisterInput struct {
	// The ID of the market that the localization is specific to.
	MarketID string `json:"marketId"`
	// A reference to the value being localized on the resource that this market localization belongs to.
	Key string `json:"key"`
	// The value of the market localization.
	Value string `json:"value"`
	// A hash digest representation of the content being localized.
	MarketLocalizableContentDigest string `json:"marketLocalizableContentDigest"`
}

// Return type for `marketLocalizationsRegister` mutation.
type MarketLocalizationsRegisterPayload struct {
	// The market localizations that were created or updated.
	MarketLocalizations []MarketLocalization `json:"marketLocalizations,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// Return type for `marketLocalizationsRemove` mutation.
type MarketLocalizationsRemovePayload struct {
	// The market localizations that were deleted.
	MarketLocalizations []MarketLocalization `json:"marketLocalizations,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple MarketRegions.
type MarketRegionConnection struct {
	// A list of edges.
	Edges []MarketRegionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketRegionEdge.
	Nodes []MarketRegion `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// A country which comprises a market.
type MarketRegionCountry struct {
	// The ISO code identifying the country.
	Code CountryCode `json:"code"`
	// The currency which this country uses given its market settings.
	Currency *CurrencySetting `json:"currency,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the region.
	Name string `json:"name"`
}

func (MarketRegionCountry) IsMarketRegion() {}

// A globally-unique ID.
func (this MarketRegionCountry) GetID() string { return this.ID }

// The name of the region.
func (this MarketRegionCountry) GetName() string { return this.Name }

func (MarketRegionCountry) IsNode() {}

// A globally-unique ID.

// The input fields for creating a market region with exactly one required option.
type MarketRegionCreateInput struct {
	// A country code for the region.
	CountryCode CountryCode `json:"countryCode"`
}

// Return type for `marketRegionDelete` mutation.
type MarketRegionDeletePayload struct {
	// The ID of the deleted market region.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The parent market object of the deleted region.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MarketRegion and a cursor during pagination.
type MarketRegionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketRegionEdge.
	Node MarketRegion `json:"node"`
}

// Return type for `marketRegionsCreate` mutation.
type MarketRegionsCreatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// The input fields used to update a market.
type MarketUpdateInput struct {
	// The name of the market. Not shown to customers.
	//
	Name *string `json:"name,omitempty,omitempty"`
	// A unique identifier for the market. For example `"ca"`.
	//
	Handle *string `json:"handle,omitempty,omitempty"`
	// Whether the market is enabled to receive visitors and sales. **Note**: Regions in
	// inactive markets cannot be selected on the storefront or in checkout.
	//
	Enabled *bool `json:"enabled,omitempty,omitempty"`
}

// Return type for `marketUpdate` mutation.
type MarketUpdatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// Defines errors encountered while managing a Market.
type MarketUserError struct {
	// The error code.
	Code *MarketUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MarketUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MarketUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MarketUserError) GetMessage() string { return this.Message }

// The market’s web presence, which defines its SEO strategy. This can be a different domain
// (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
// domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
// variants. If a market does not have its own web presence, it is accessible on the shop’s
// primary domain via [country
// selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
//
// Note: while the domain/subfolders defined by a market’s web presence are not applicable to
// custom storefronts, which must manage their own domains and routing, the languages chosen
// here do govern [the languages available on the Storefront
// API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
// this market.
type MarketWebPresence struct {
	// The ISO codes for the alternate locales. When a domain is used, these locales will be
	// available as language-specific subfolders. For example, if English is an
	// alternate locale, and `example.ca` is the market’s domain, then
	// `example.ca/en` will load in English.
	//
	AlternateLocales []string `json:"alternateLocales,omitempty"`
	// The ISO code for the default locale. When a domain is used, this is the locale that will
	// be used when the domain root is accessed. For example, if French is the default locale,
	// and `example.ca` is the market’s domian, then `example.ca` will load in French.
	//
	DefaultLocale string `json:"defaultLocale"`
	// The web presence’s domain.
	// This field will be null if `subfolderSuffix` isn't null.
	//
	Domain *Domain `json:"domain,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The associated market.
	Market *Market `json:"market,omitempty"`
	// The list of root URLs for each of the web presence’s locales.
	//
	RootUrls []MarketWebPresenceRootURL `json:"rootUrls,omitempty"`
	// The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
	SubfolderSuffix *string `json:"subfolderSuffix,omitempty,omitempty"`
}

func (MarketWebPresence) IsNode() {}

// A globally-unique ID.
func (this MarketWebPresence) GetID() string { return this.ID }

// The input fields used to create a web presence for a market.
type MarketWebPresenceCreateInput struct {
	// The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`.
	//
	DomainID *string `json:"domainId,omitempty,omitempty"`
	// The default locale for the market’s web presence.
	//
	DefaultLocale string `json:"defaultLocale"`
	// The alternate locales for the market’s web presence.
	//
	AlternateLocales []string `json:"alternateLocales,omitempty,omitempty"`
	// The market-specific suffix of the subfolders defined by the web presence.
	// For example: in `/en-us`, the subfolder suffix is `us`.
	// Only ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.
	//
	SubfolderSuffix *string `json:"subfolderSuffix,omitempty,omitempty"`
}

// Return type for `marketWebPresenceCreate` mutation.
type MarketWebPresenceCreatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// Return type for `marketWebPresenceDelete` mutation.
type MarketWebPresenceDeletePayload struct {
	// The ID of the deleted web presence.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The market for which the web presence was deleted.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// The URL for the homepage of the online store in the context of a particular market and a
// particular locale.
type MarketWebPresenceRootURL struct {
	// The locale that the storefront loads in.
	Locale string `json:"locale"`
	// The URL.
	URL string `json:"url"`
}

// The input fields used to update a web presence for a market.
type MarketWebPresenceUpdateInput struct {
	// The web presence's domain ID. This field must be null if `subfolderSuffix` is not null.
	//
	DomainID *string `json:"domainId,omitempty,omitempty"`
	// The default locale for the market’s web presence.
	//
	DefaultLocale *string `json:"defaultLocale,omitempty,omitempty"`
	// The alternate locales for the market’s web presence.
	//
	AlternateLocales []string `json:"alternateLocales,omitempty,omitempty"`
	// The market-specific suffix of the subfolders defined by the web presence.
	// Example: in `/en-us` the subfolder suffix is `us`.
	// Only ASCII characters are allowed. This field must be null if `domainId` is not null.
	//
	SubfolderSuffix *string `json:"subfolderSuffix,omitempty,omitempty"`
}

// Return type for `marketWebPresenceUpdate` mutation.
type MarketWebPresenceUpdatePayload struct {
	// The market object.
	Market *Market `json:"market,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketUserError `json:"userErrors,omitempty"`
}

// The marketing activity resource represents marketing that a
// merchant created through an app.
type MarketingActivity struct {
	// The URL of the marketing activity listing page in the marketing section.
	ActivityListURL *string `json:"activityListUrl,omitempty,omitempty"`
	// The amount spent on the marketing activity.
	AdSpend *MoneyV2 `json:"adSpend,omitempty,omitempty"`
	// The app which created this marketing activity.
	App *App `json:"app,omitempty"`
	// The errors generated when an app publishes the marketing activity.
	AppErrors *MarketingActivityExtensionAppErrors `json:"appErrors,omitempty,omitempty"`
	// The allocated budget for the marketing activity.
	Budget *MarketingBudget `json:"budget,omitempty,omitempty"`
	// The date and time when the marketing activity was created.
	CreatedAt string `json:"createdAt"`
	// The completed content in the marketing activity creation form.
	FormData *string `json:"formData,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Whether the marketing activity is in the main workflow version of
	// the marketing automation.
	InMainWorkflowVersion bool `json:"inMainWorkflowVersion"`
	// The available marketing channels for a marketing activity.
	MarketingChannel MarketingChannel `json:"marketingChannel"`
	// Associated marketing event of this marketing activity.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty,omitempty"`
	// A contextual description of the marketing activity based on the platform and tactic used.
	SourceAndMedium string `json:"sourceAndMedium"`
	// The current state of the marketing activity.
	Status MarketingActivityStatus `json:"status"`
	// The severity of the marketing activity's status.
	StatusBadgeType *MarketingActivityStatusBadgeType `json:"statusBadgeType,omitempty,omitempty"`
	// The severity of the marketing activity's status.
	StatusBadgeTypeV2 *BadgeType `json:"statusBadgeTypeV2,omitempty,omitempty"`
	// The rendered status of the marketing activity.
	StatusLabel string `json:"statusLabel"`
	// The [date and time](
	// https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
	// ) when the activity's status last changed.
	StatusTransitionedAt *string `json:"statusTransitionedAt,omitempty,omitempty"`
	// The method of marketing used for this marketing activity.
	Tactic MarketingTactic `json:"tactic"`
	// The status to which the marketing activity is currently transitioning.
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty,omitempty"`
	// The marketing activity's title, which is rendered on the marketing listing page.
	Title string `json:"title"`
	// The date and time when the marketing activity was updated.
	UpdatedAt string `json:"updatedAt"`
	// The set of [Urchin Tracking Module](
	// https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
	// ) used in the URL for tracking this marketing activity.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty,omitempty"`
}

func (MarketingActivity) IsNode() {}

// A globally-unique ID.
func (this MarketingActivity) GetID() string { return this.ID }

// The input fields combining budget amount and its marketing budget type.
type MarketingActivityBudgetInput struct {
	// Budget type for marketing activity.
	BudgetType *MarketingBudgetBudgetType `json:"budgetType,omitempty,omitempty"`
	// Amount of budget for the marketing activity.
	Total *MoneyInput `json:"total,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple MarketingActivities.
type MarketingActivityConnection struct {
	// A list of edges.
	Edges []MarketingActivityEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketingActivityEdge.
	Nodes []MarketingActivity `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for creating an externally-managed marketing activity.
type MarketingActivityCreateExternalInput struct {
	// The title of the marketing activity.
	Title string `json:"title"`
	// The
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. `UTMInput` is required for all
	// marketing tactics except for the Storefront app marketing tactic.
	//
	Utm *UTMInput `json:"utm,omitempty"`
	// The budget for this marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty,omitempty"`
	// The amount spent on the marketing activity.
	AdSpend *MoneyInput `json:"adSpend,omitempty,omitempty"`
	// The ID of an activity that's hosted outside of Shopify.
	RemoteID *string `json:"remoteId,omitempty,omitempty"`
	// URL for viewing and/or managing the activity outside of Shopify.
	RemoteURL string `json:"remoteUrl"`
	// The URL for a preview image that's used for the marketing activity.
	RemotePreviewImageURL *string `json:"remotePreviewImageUrl,omitempty,omitempty"`
	// Specifies the settings for the marketing platform and the ad format.
	// The marketing tactic determines which default fields are included
	// in the marketing activity.
	//
	Tactic MarketingTactic `json:"tactic"`
	// The channel of your marketing event.
	Channel MarketingChannel `json:"channel"`
	// The referring domain.
	ReferringDomain *string `json:"referringDomain,omitempty,omitempty"`
	// When the activity is scheduled to start.
	ScheduledStart *string `json:"scheduledStart,omitempty,omitempty"`
	// When the activity is scheduled to end.
	ScheduledEnd *string `json:"scheduledEnd,omitempty,omitempty"`
	// When the activity started.
	Start *string `json:"start,omitempty,omitempty"`
	// When the activity ended.
	End *string `json:"end,omitempty,omitempty"`
}

// Return type for `marketingActivityCreateExternal` mutation.
type MarketingActivityCreateExternalPayload struct {
	// The external marketing activity that was created.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketingActivityUserError `json:"userErrors,omitempty"`
}

// The input fields required to create a marketing activity.
type MarketingActivityCreateInput struct {
	// The title of the marketing activity.
	MarketingActivityTitle *string `json:"marketingActivityTitle,omitempty,omitempty"`
	// The form data in JSON serialized as a string.
	FormData *string `json:"formData,omitempty,omitempty"`
	// The ID of the marketing activity extension.
	MarketingActivityExtensionID string `json:"marketingActivityExtensionId"`
	// Encoded context containing marketing campaign id.
	Context *string `json:"context,omitempty,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App.
	//
	Utm *UTMInput `json:"utm,omitempty,omitempty"`
	// The current state of the marketing activity.
	Status MarketingActivityStatus `json:"status"`
	// The budget for this marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty,omitempty"`
}

// Return type for `marketingActivityCreate` mutation.
type MarketingActivityCreatePayload struct {
	// The created marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty,omitempty"`
	// The path to return back to shopify admin from embedded editor.
	RedirectPath *string `json:"redirectPath,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MarketingActivity and a cursor during pagination.
type MarketingActivityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketingActivityEdge.
	Node *MarketingActivity `json:"node,omitempty"`
}

// Represents errors returned from apps when using the marketing activity extension.
type MarketingActivityExtensionAppErrors struct {
	// The app error type.
	Code MarketingActivityExtensionAppErrorCode `json:"code"`
	// The list of errors returned by the app.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields required to update an externally managed marketing activity.
type MarketingActivityUpdateExternalInput struct {
	// The title of the marketing activity.
	Title *string `json:"title,omitempty,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all marketing
	// tactics except the storefront app.
	//
	Utm *UTMInput `json:"utm,omitempty,omitempty"`
	// The budget for the marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty,omitempty"`
	// The amount spent on the marketing activity.
	AdSpend *MoneyInput `json:"adSpend,omitempty,omitempty"`
	// The URL for managing the activity outside of Shopify.
	RemoteURL *string `json:"remoteUrl,omitempty,omitempty"`
	// The preview image URL for the marketing activity.
	RemotePreviewImageURL *string `json:"remotePreviewImageUrl,omitempty,omitempty"`
	// The settings for the marketing platform and ad format.
	// The selection of the marketing tactic also determines which default fields are included
	// in the marketing activity.
	//
	Tactic *MarketingTactic `json:"tactic,omitempty,omitempty"`
	// The channel that your marketing event will use.
	Channel *MarketingChannel `json:"channel,omitempty,omitempty"`
	// The referring domain.
	ReferringDomain *string `json:"referringDomain,omitempty,omitempty"`
	// The date and time when the activity is scheduled to start.
	ScheduledStart *string `json:"scheduledStart,omitempty,omitempty"`
	// The date and time when the activity is scheduled to end.
	ScheduledEnd *string `json:"scheduledEnd,omitempty,omitempty"`
	// The date and time when the activity started.
	Start *string `json:"start,omitempty,omitempty"`
	// The date and time when the activity ended.
	End *string `json:"end,omitempty,omitempty"`
}

// Return type for `marketingActivityUpdateExternal` mutation.
type MarketingActivityUpdateExternalPayload struct {
	// The updated marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MarketingActivityUserError `json:"userErrors,omitempty"`
}

// The input fields required to update a marketing activity.
type MarketingActivityUpdateInput struct {
	// The ID of the marketing activity.
	ID string `json:"id"`
	// The ID of the recommendation that the marketing activity was created from, if one exists.
	MarketingRecommendationID *string `json:"marketingRecommendationId,omitempty,omitempty"`
	// The title of the marketing activity.
	Title *string `json:"title,omitempty,omitempty"`
	// The budget for the marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty,omitempty"`
	// The current state of the marketing activity. Learn more about
	// [marketing activities statuses](/api/marketing-activities/statuses).
	//
	Status *MarketingActivityStatus `json:"status,omitempty,omitempty"`
	// The target state that the marketing activity is transitioning to. Learn more about [marketing activities statuses](/api/marketing-activities/statuses).
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty,omitempty"`
	// The form data of the marketing activity. This is only used if the marketing activity is
	// integrated with the external editor.
	FormData *string `json:"formData,omitempty,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App. The utm field can only be set once and never modified.
	//
	Utm *UTMInput `json:"utm,omitempty,omitempty"`
	// A list of the item IDs that were marketed in this marketing activity. Valid types for these items are:
	// * `Product`
	// * `Shop`
	//
	MarketedResources []string `json:"marketedResources,omitempty,omitempty"`
	// The error messages that were generated when the app was trying to complete the activity.
	// Learn more about the
	// [JSON format expected for error messages](/api/marketing-activities/statuses#failed-status).
	//
	Errors *string `json:"errors,omitempty,omitempty"`
}

// Return type for `marketingActivityUpdate` mutation.
type MarketingActivityUpdatePayload struct {
	// The updated marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty,omitempty"`
	// The redirect path from the embedded editor to the Shopify admin.
	RedirectPath *string `json:"redirectPath,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of a Shopify Marketing mutation.
type MarketingActivityUserError struct {
	// The error code.
	Code *MarketingActivityUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MarketingActivityUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MarketingActivityUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MarketingActivityUserError) GetMessage() string { return this.Message }

// This type combines budget amount and its marketing budget type.
type MarketingBudget struct {
	// The budget type for a marketing activity.
	BudgetType MarketingBudgetBudgetType `json:"budgetType"`
	// The amount of budget for marketing activity.
	Total *MoneyV2 `json:"total,omitempty"`
}

// Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.
type MarketingEngagement struct {
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyV2 `json:"adSpend,omitempty,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty,omitempty"`
	// The total number of comments on marketing content for the day.
	CommentsCount *int `json:"commentsCount,omitempty,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty,omitempty"`
	// The total number of fails for the day. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
	FailsCount *int `json:"failsCount,omitempty,omitempty"`
	// The total number of favorites, likes, saves, or bookmarks for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *string `json:"fetchedAt,omitempty,omitempty"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty,omitempty"`
	// The marketing activity object related to this engagement. This corresponds to the marketingActivityId passed in on creation of the engagement.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The date that these engagements occurred on between 12:00 AM to 11:59 PM UTC.
	OccurredOn string `json:"occurredOn"`
	// The total number of marketing emails or messages that were sent for the day.
	SendsCount *int `json:"sendsCount,omitempty,omitempty"`
	// The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels for the day. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
	SharesCount *int `json:"sharesCount,omitempty,omitempty"`
	// The total number of unique clicks on marketing content for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty,omitempty"`
	// The total number of unsubscribes for the day. For social media platforms, this represents the number of unfollows.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *string `json:"utcOffset,omitempty,omitempty"`
	// The total number of views for the day. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
	ViewsCount *int `json:"viewsCount,omitempty,omitempty"`
}

// Return type for `marketingEngagementCreate` mutation.
type MarketingEngagementCreatePayload struct {
	// The marketing engagement that was created.
	MarketingEngagement *MarketingEngagement `json:"marketingEngagement,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for a marketing engagement.
type MarketingEngagementInput struct {
	// The date that these engagements occurred on.
	OccurredOn string `json:"occurredOn"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty,omitempty"`
	// The total number of views for the day. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
	ViewsCount *int `json:"viewsCount,omitempty,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty,omitempty"`
	// The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels for the day. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
	SharesCount *int `json:"sharesCount,omitempty,omitempty"`
	// The total number of favorites, likes, saves, or bookmarks for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty,omitempty"`
	// The total number of comments on marketing content for the day.
	CommentsCount *int `json:"commentsCount,omitempty,omitempty"`
	// The total number of unsubscribes for the day. For social media platforms, this represents the number of unfollows.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty,omitempty"`
	// The total number of fails for the day. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
	FailsCount *int `json:"failsCount,omitempty,omitempty"`
	// The total number of marketing emails or messages that were sent for the day.
	SendsCount *int `json:"sendsCount,omitempty,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty,omitempty"`
	// The total number of unique clicks on marketing content for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty,omitempty"`
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyInput `json:"adSpend,omitempty,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *string `json:"utcOffset,omitempty,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *string `json:"fetchedAt,omitempty,omitempty"`
}

// Represents actions that market a merchant's store or products.
type MarketingEvent struct {
	// The app that the marketing event is attributed to.
	App *App `json:"app,omitempty"`
	// The marketing channel used by the marketing event.
	Channel *MarketingChannel `json:"channel,omitempty,omitempty"`
	// A human-readable description of the marketing event.
	Description *string `json:"description,omitempty,omitempty"`
	// The date and time when the marketing event ended.
	EndedAt *string `json:"endedAt,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The URL where the marketing event can be managed.
	ManageURL *string `json:"manageUrl,omitempty,omitempty"`
	// The URL where the marketing event can be previewed.
	PreviewURL *string `json:"previewUrl,omitempty,omitempty"`
	// An optional ID that helps Shopify validate engagement data.
	RemoteID *string `json:"remoteId,omitempty,omitempty"`
	// The date and time when the marketing event is scheduled to end.
	ScheduledToEndAt *string `json:"scheduledToEndAt,omitempty,omitempty"`
	// Where the `MarketingEvent` occurred and what kind of content was used.
	// Because `utmSource` and `utmMedium` are often used interchangeably, this is
	// based on a combination of `marketingChannel`, `referringDomain`, and `type` to
	// provide a consistent representation for any given piece of marketing
	// regardless of the app that created it.
	//
	SourceAndMedium string `json:"sourceAndMedium"`
	// The date and time when the marketing event started.
	StartedAt string `json:"startedAt"`
	// The display text for the marketing event type.
	TargetTypeDisplayText string `json:"targetTypeDisplayText"`
	// The marketing event type.
	Type MarketingTactic `json:"type"`
	// The name of the marketing campaign.
	UtmCampaign *string `json:"utmCampaign,omitempty,omitempty"`
	// The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
	UtmMedium *string `json:"utmMedium,omitempty,omitempty"`
	// The referrer of the marketing event. Example values: `google`, `newsletter`.
	UtmSource *string `json:"utmSource,omitempty,omitempty"`
}

func (MarketingEvent) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this MarketingEvent) GetLegacyResourceID() string { return this.LegacyResourceID }

func (MarketingEvent) IsNode() {}

// A globally-unique ID.
func (this MarketingEvent) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple MarketingEvents.
type MarketingEventConnection struct {
	// A list of edges.
	Edges []MarketingEventEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MarketingEventEdge.
	Nodes []MarketingEvent `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MarketingEvent and a cursor during pagination.
type MarketingEventEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MarketingEventEdge.
	Node *MarketingEvent `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple Media.
type MediaConnection struct {
	// A list of edges.
	Edges []MediaEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MediaEdge.
	Nodes []Media `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Media and a cursor during pagination.
type MediaEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MediaEdge.
	Node Media `json:"node"`
}

// Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
// Check the media before attempting to upload again.
type MediaError struct {
	// Code representing the type of error.
	Code MediaErrorCode `json:"code"`
	// Additional details regarding the error.
	Details *string `json:"details,omitempty,omitempty"`
	// Translated error message.
	Message string `json:"message"`
}

// An image hosted on Shopify.
type MediaImage struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
	//
	CreatedAt string `json:"createdAt"`
	// Any errors that have occurred on the file.
	FileErrors []FileError `json:"fileErrors,omitempty"`
	// The status of the file.
	FileStatus FileStatus `json:"fileStatus"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The image for the media. Returns `null` until `status` is `READY`.
	Image *Image `json:"image,omitempty,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The MIME type of the image.
	MimeType *string `json:"mimeType,omitempty,omitempty"`
	// The original source of the image.
	OriginalSource *MediaImageOriginalSource `json:"originalSource,omitempty,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (MediaImage) IsFile() {}

// A word or phrase to describe the contents or the function of a file.
func (this MediaImage) GetAlt() *string { return this.Alt }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
func (this MediaImage) GetCreatedAt() string { return this.CreatedAt }

// Any errors that have occurred on the file.
func (this MediaImage) GetFileErrors() []FileError {
	if this.FileErrors == nil {
		return nil
	}
	interfaceSlice := make([]FileError, 0, len(this.FileErrors))
	for _, concrete := range this.FileErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The status of the file.
func (this MediaImage) GetFileStatus() FileStatus { return this.FileStatus }

// A globally-unique ID.
func (this MediaImage) GetID() string { return this.ID }

// The preview image for the media.
func (this MediaImage) GetPreview() *MediaPreviewImage { return this.Preview }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
func (this MediaImage) GetUpdatedAt() string { return this.UpdatedAt }

func (MediaImage) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this MediaImage) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this MediaImage) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this MediaImage) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this MediaImage) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (MediaImage) IsMedia() {}

// A word or phrase to share the nature or contents of a media.

// A globally-unique ID.

// The media content type.
func (this MediaImage) GetMediaContentType() MediaContentType { return this.MediaContentType }

// Any errors which have occurred on the media.
func (this MediaImage) GetMediaErrors() []MediaError {
	if this.MediaErrors == nil {
		return nil
	}
	interfaceSlice := make([]MediaError, 0, len(this.MediaErrors))
	for _, concrete := range this.MediaErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The warnings attached to the media.
func (this MediaImage) GetMediaWarnings() []MediaWarning {
	if this.MediaWarnings == nil {
		return nil
	}
	interfaceSlice := make([]MediaWarning, 0, len(this.MediaWarnings))
	for _, concrete := range this.MediaWarnings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The preview image for the media.

// Current status of the media.
func (this MediaImage) GetStatus() MediaStatus { return this.Status }

func (MediaImage) IsNode() {}

// A globally-unique ID.

func (MediaImage) IsMetafieldReference() {}

// The original source for an image.
type MediaImageOriginalSource struct {
	// The size of the original file in bytes.
	FileSize *int `json:"fileSize,omitempty,omitempty"`
}

// Represents the preview image for a media.
type MediaPreviewImage struct {
	// The preview image for the media. Returns `null` until `status` is `READY`.
	Image *Image `json:"image,omitempty,omitempty"`
	// Current status of the preview image.
	Status MediaPreviewImageStatus `json:"status"`
}

// Represents an error that happens during execution of a Media query or mutation.
type MediaUserError struct {
	// The error code.
	Code *MediaUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MediaUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MediaUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MediaUserError) GetMessage() string { return this.Message }

// Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
// Consider reviewing your media to ensure it is correct and its parameters are as expected.
type MediaWarning struct {
	// The code representing the type of warning.
	Code MediaWarningCode `json:"code"`
	// Translated warning message.
	Message *string `json:"message,omitempty,omitempty"`
}

// Merchant approval for accelerated onboarding to channel integration apps.
type MerchantApprovalSignals struct {
	// Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
	IdentityVerified bool `json:"identityVerified"`
	// Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop is not marked for verification.
	VerifiedByShopify bool `json:"verifiedByShopify"`
	// Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps.
	VerifiedByShopifyTier string `json:"verifiedByShopifyTier"`
}

// Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
// For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
// Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
// Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
type Metafield struct {
	// The date and time when the metafield was created.
	CreatedAt string `json:"createdAt"`
	// The metafield definition that the metafield belongs to, if any.
	Definition *MetafieldDefinition `json:"definition,omitempty,omitempty"`
	// The description of the metafield.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The unique identifier for the metafield within its namespace.
	Key string `json:"key"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The container for a group of metafields that the metafield is associated with.
	//
	Namespace string `json:"namespace"`
	// The resource that the metafield is attached to.
	Owner HasMetafields `json:"owner"`
	// The type of resource that the metafield is attached to.
	//
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// Returns a reference object if the metafield definition's type is a resource reference.
	Reference MetafieldReference `json:"reference,omitempty"`
	// A list of reference objects if the metafield's type is a resource reference list.
	References *MetafieldReferenceConnection `json:"references,omitempty,omitempty"`
	// The type of data that is stored in the metafield.
	// Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Type string `json:"type"`
	// The date and time when the metafield was updated.
	UpdatedAt string `json:"updatedAt"`
	// The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
	//
	Value string `json:"value"`
}

func (Metafield) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Metafield) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Metafield) IsNode() {}

// A globally-unique ID.
func (this Metafield) GetID() string { return this.ID }

// The access settings for this metafield definition.
type MetafieldAccess struct {
	// The admin access setting used for the metafields under this definition.
	Admin *MetafieldAdminAccess `json:"admin,omitempty,omitempty"`
}

// The input fields for the access settings for the metafields under the definition.
type MetafieldAccessInput struct {
	// The admin access setting to use for the metafields under this definition.
	Admin MetafieldAdminAccess `json:"admin"`
}

// An auto-generated type for paginating through multiple Metafields.
type MetafieldConnection struct {
	// A list of edges.
	Edges []MetafieldEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetafieldEdge.
	Nodes []Metafield `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Metafield definitions enable you to define additional validation constraints for metafields, and enable the
// merchant to edit metafield values in context.
type MetafieldDefinition struct {
	// The access settings associated with the metafield definition.
	Access *MetafieldAccess `json:"access,omitempty"`
	// The description of the metafield definition.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The unique identifier for the metafield definition within its namespace.
	Key string `json:"key"`
	// The metafields that belong to the metafield definition.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The count of the metafields that belong to the metafield definition.
	MetafieldsCount int `json:"metafieldsCount"`
	// The human-readable name of the metafield definition.
	Name string `json:"name"`
	// The container for a group of metafields that the metafield definition is associated with.
	Namespace string `json:"namespace"`
	// The resource type that the metafield definition is attached to.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The position of the metafield definition in the pinned list.
	PinnedPosition *int `json:"pinnedPosition,omitempty,omitempty"`
	// The standard metafield definition template associated with the metafield definition.
	StandardTemplate *StandardMetafieldDefinitionTemplate `json:"standardTemplate,omitempty,omitempty"`
	// The type of data that each of the metafields that belong to the metafield definition will store.
	// Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Type *MetafieldDefinitionType `json:"type,omitempty"`
	// Whether the metafield definition can be used as a collection condition.
	UseAsCollectionCondition bool `json:"useAsCollectionCondition"`
	// The validation status for the metafields that belong to the metafield definition.
	ValidationStatus MetafieldDefinitionValidationStatus `json:"validationStatus"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the metafields that belong to the metafield definition. For example, for a metafield definition with the
	// type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
	// store dates after the specified minimum.
	//
	Validations []MetafieldDefinitionValidation `json:"validations,omitempty"`
	// Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
	//
	VisibleToStorefrontAPI bool `json:"visibleToStorefrontApi"`
}

func (MetafieldDefinition) IsNode() {}

// A globally-unique ID.
func (this MetafieldDefinition) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple MetafieldDefinitions.
type MetafieldDefinitionConnection struct {
	// A list of edges.
	Edges []MetafieldDefinitionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetafieldDefinitionEdge.
	Nodes []MetafieldDefinition `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `metafieldDefinitionCreate` mutation.
type MetafieldDefinitionCreatePayload struct {
	// The metafield definition that was created.
	CreatedDefinition *MetafieldDefinition `json:"createdDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionCreate`.
type MetafieldDefinitionCreateUserError struct {
	// The error code.
	Code *MetafieldDefinitionCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldDefinitionCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldDefinitionCreateUserError) GetMessage() string { return this.Message }

// Return type for `metafieldDefinitionDelete` mutation.
type MetafieldDefinitionDeletePayload struct {
	// The ID of the deleted metafield definition.
	DeletedDefinitionID *string `json:"deletedDefinitionId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionDelete`.
type MetafieldDefinitionDeleteUserError struct {
	// The error code.
	Code *MetafieldDefinitionDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldDefinitionDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldDefinitionDeleteUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
type MetafieldDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldDefinitionEdge.
	Node *MetafieldDefinition `json:"node,omitempty"`
}

// The input fields required to create a metafield definition.
type MetafieldDefinitionInput struct {
	// The container for a group of metafields that the metafield definition will be associated with.
	//
	// Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
	//
	Namespace string `json:"namespace"`
	// The unique identifier for the metafield definition within its namespace.
	//
	// Must be 3-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
	//
	Key string `json:"key"`
	// The human-readable name for the metafield definition.
	Name string `json:"name"`
	// The description for the metafield definition.
	Description *string `json:"description,omitempty,omitempty"`
	// The resource type that the metafield definition is attached to.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The type of data that each of the metafields that belong to the metafield definition will store.
	// Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Type string `json:"type"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the metafields that belong to the metafield definition. For example, for a metafield definition with the
	// type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
	// store dates after the specified minimum.
	//
	Validations []MetafieldDefinitionValidationInput `json:"validations,omitempty,omitempty"`
	// Whether metafields for the metafield definition are visible using the Storefront API.
	VisibleToStorefrontAPI *bool `json:"visibleToStorefrontApi,omitempty,omitempty"`
	// Whether the metafield definition can be used as a collection condition.
	UseAsCollectionCondition *bool `json:"useAsCollectionCondition,omitempty,omitempty"`
	// Whether to [pin](https://help.shopify.com/manual/custom-data/metafields/pinning-metafield-definitions)
	// the metafield definition.
	//
	Pin *bool `json:"pin,omitempty,omitempty"`
	// The access settings that apply to each of the metafields that belong to the metafield definition.
	Access *MetafieldAccessInput `json:"access,omitempty,omitempty"`
}

// Return type for `metafieldDefinitionPin` mutation.
type MetafieldDefinitionPinPayload struct {
	// The metafield definition that was pinned.
	PinnedDefinition *MetafieldDefinition `json:"pinnedDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionPinUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionPin`.
type MetafieldDefinitionPinUserError struct {
	// The error code.
	Code *MetafieldDefinitionPinUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionPinUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldDefinitionPinUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldDefinitionPinUserError) GetMessage() string { return this.Message }

// The type and name for the optional validation configuration of a metafield.
//
// For example, a supported validation might consist of a `max` name and a `number_integer` type.
// This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
type MetafieldDefinitionSupportedValidation struct {
	// The name of the metafield definition validation.
	Name string `json:"name"`
	// The type of input for the validation.
	Type string `json:"type"`
}

// A metafield definition type provides basic foundation and validation for a metafield.
type MetafieldDefinitionType struct {
	// The category associated with the metafield definition type.
	Category string `json:"category"`
	// The name of the type for the metafield definition.
	// See the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	Name string `json:"name"`
	// The supported validations for a metafield definition type.
	SupportedValidations []MetafieldDefinitionSupportedValidation `json:"supportedValidations,omitempty"`
	// Whether metafields without a definition can be migrated to a definition of this type.
	SupportsDefinitionMigrations bool `json:"supportsDefinitionMigrations"`
	// The value type for a metafield created with this definition type.
	ValueType MetafieldValueType `json:"valueType"`
}

// Return type for `metafieldDefinitionUnpin` mutation.
type MetafieldDefinitionUnpinPayload struct {
	// The metafield definition that was unpinned.
	UnpinnedDefinition *MetafieldDefinition `json:"unpinnedDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionUnpinUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionUnpin`.
type MetafieldDefinitionUnpinUserError struct {
	// The error code.
	Code *MetafieldDefinitionUnpinUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionUnpinUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldDefinitionUnpinUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldDefinitionUnpinUserError) GetMessage() string { return this.Message }

// The input fields required to update a metafield definition.
type MetafieldDefinitionUpdateInput struct {
	// The container for a group of metafields that the metafield definition is associated with. Used to help identify
	// the metafield definition, but cannot be updated itself.
	//
	Namespace string `json:"namespace"`
	// The unique identifier for the metafield definition within its namespace. Used to help identify the metafield
	// definition, but cannot be updated itself.
	//
	Key string `json:"key"`
	// The human-readable name for the metafield definition.
	Name *string `json:"name,omitempty,omitempty"`
	// The description for the metafield definition.
	Description *string `json:"description,omitempty,omitempty"`
	// The resource type that the metafield definition is attached to. Used to help identify the metafield definition,
	// but cannot be updated itself.
	//
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the metafields that belong to the metafield definition. For example, for a metafield definition with the
	// type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
	// store dates after the specified minimum.
	//
	Validations []MetafieldDefinitionValidationInput `json:"validations,omitempty,omitempty"`
	// Whether to pin the metafield definition.
	Pin *bool `json:"pin,omitempty,omitempty"`
	// Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
	//
	VisibleToStorefrontAPI *bool `json:"visibleToStorefrontApi,omitempty,omitempty"`
	// Whether the metafield definition can be used as a collection condition.
	UseAsCollectionCondition *bool `json:"useAsCollectionCondition,omitempty,omitempty"`
	// The access settings that apply to each of the metafields that belong to the metafield definition.
	Access *MetafieldAccessInput `json:"access,omitempty,omitempty"`
}

// Return type for `metafieldDefinitionUpdate` mutation.
type MetafieldDefinitionUpdatePayload struct {
	// The metafield definition that was updated.
	UpdatedDefinition *MetafieldDefinition `json:"updatedDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldDefinitionUpdateUserError `json:"userErrors,omitempty"`
	// The asynchronous job updating the metafield definition's validation_status.
	ValidationJob *Job `json:"validationJob,omitempty,omitempty"`
}

// An error that occurs during the execution of `MetafieldDefinitionUpdate`.
type MetafieldDefinitionUpdateUserError struct {
	// The error code.
	Code *MetafieldDefinitionUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldDefinitionUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldDefinitionUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldDefinitionUpdateUserError) GetMessage() string { return this.Message }

// A configured metafield definition validation.
//
// For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
// and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
//
// Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
type MetafieldDefinitionValidation struct {
	// The validation name.
	Name string `json:"name"`
	// The name for the metafield type of this validation.
	Type string `json:"type"`
	// The validation value.
	Value *string `json:"value,omitempty,omitempty"`
}

// The name and value for a metafield definition validation.
//
// For example, for a metafield definition of `single_line_text_field` type, you can set a validation with the name `min` and a value of `10`.
// This validation will ensure that the value of the metafield is at least 10 characters.
//
// Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
type MetafieldDefinitionValidationInput struct {
	// The name for the metafield definition validation.
	Name string `json:"name"`
	// The value for the metafield definition validation.
	Value string `json:"value"`
}

// The input fields to delete a metafield.
type MetafieldDeleteInput struct {
	// The ID of the metafield to delete.
	ID string `json:"id"`
}

// Return type for `metafieldDelete` mutation.
type MetafieldDeletePayload struct {
	// The ID of the deleted metafield.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Metafield and a cursor during pagination.
type MetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldEdge.
	Node *Metafield `json:"node,omitempty"`
}

// The input fields to use to create or update a metafield through a mutation on the owning resource.
// An alternative way to create or update a metafield is by using the
// [metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
type MetafieldInput struct {
	// The unique ID of the metafield.
	//
	// Required when updating a metafield, but should not be included when creating as it's created automatically.
	//
	ID *string `json:"id,omitempty,omitempty"`
	// The container for a group of metafields that the metafield is or will be associated with. Used in tandem with
	// `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.
	//
	// Required when creating a metafield, but optional when updating. Used to help identify the metafield when
	// updating, but cannot be updated itself.
	//
	// Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
	//
	Namespace *string `json:"namespace,omitempty,omitempty"`
	// The unique identifier for a metafield within its namespace.
	//
	// Required when creating a metafield, but optional when updating. Used to help identify the metafield when
	// updating, but cannot be updated itself.
	//
	// Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
	//
	Key *string `json:"key,omitempty,omitempty"`
	// The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
	//
	Value *string `json:"value,omitempty,omitempty"`
	// The type of data that is stored in the metafield.
	// Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	// Required when creating a metafield, but optional when updating.
	//
	Type *string `json:"type,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple MetafieldReferences.
type MetafieldReferenceConnection struct {
	// A list of edges.
	Edges []MetafieldReferenceEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetafieldReferenceEdge.
	Nodes []MetafieldReference `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MetafieldReference and a cursor during pagination.
type MetafieldReferenceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldReferenceEdge.
	Node MetafieldReference `json:"node,omitempty"`
}

// Defines a relation between two resources via a reference metafield.
// The referencer owns the joining field with a given namespace and key,
// while the target is referenced by the field.
type MetafieldRelation struct {
	// The key of the field making the reference.
	Key string `json:"key"`
	// The name of the field making the reference.
	Name string `json:"name"`
	// The namespace of the metafield making the reference, or type of the metaobject.
	Namespace string `json:"namespace"`
	// The resource making the reference.
	Referencer MetafieldReferencer `json:"referencer"`
	// The referenced resource.
	Target MetafieldReference `json:"target"`
}

// An auto-generated type for paginating through multiple MetafieldRelations.
type MetafieldRelationConnection struct {
	// A list of edges.
	Edges []MetafieldRelationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetafieldRelationEdge.
	Nodes []MetafieldRelation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
type MetafieldRelationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldRelationEdge.
	Node *MetafieldRelation `json:"node,omitempty"`
}

// By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
// you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
// of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
//
// Learn about [exposing metafields in the Storefront API]
// (https://shopify.dev/custom-storefronts/products-collections/metafields)
// for more details.
type MetafieldStorefrontVisibility struct {
	// The date and time when the metafield was set to visible in the Storefront API.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The key of a metafield to make visible in the Storefront API.
	Key string `json:"key"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The namespace of a metafield to make visible in the Storefront API.
	Namespace string `json:"namespace"`
	// The owner type of a metafield to make visible in the Storefront API.
	OwnerType MetafieldOwnerType `json:"ownerType"`
	// The date and time when the `MetafieldStorefrontVisilibty` record was updated.
	//
	UpdatedAt string `json:"updatedAt"`
}

func (MetafieldStorefrontVisibility) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this MetafieldStorefrontVisibility) GetLegacyResourceID() string { return this.LegacyResourceID }

func (MetafieldStorefrontVisibility) IsNode() {}

// A globally-unique ID.
func (this MetafieldStorefrontVisibility) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
type MetafieldStorefrontVisibilityConnection struct {
	// A list of edges.
	Edges []MetafieldStorefrontVisibilityEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetafieldStorefrontVisibilityEdge.
	Nodes []MetafieldStorefrontVisibility `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityCreate` mutation.
type MetafieldStorefrontVisibilityCreatePayload struct {
	// The `MetafieldStorefrontVisibility` that was created.
	MetafieldStorefrontVisibility *MetafieldStorefrontVisibility `json:"metafieldStorefrontVisibility,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityDelete` mutation.
type MetafieldStorefrontVisibilityDeletePayload struct {
	// The ID of the deleted `MetafieldStorefrontVisibility` record.
	DeletedMetafieldStorefrontVisibilityID *string `json:"deletedMetafieldStorefrontVisibilityId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
type MetafieldStorefrontVisibilityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetafieldStorefrontVisibilityEdge.
	Node *MetafieldStorefrontVisibility `json:"node,omitempty"`
}

// The input fields to create a MetafieldStorefrontVisibility record.
type MetafieldStorefrontVisibilityInput struct {
	// The namespace of a metafield to make visible in the Storefront API.
	Namespace string `json:"namespace"`
	// The key of a metafield to make visible in the Storefront API.
	Key string `json:"key"`
	// The owner type of a metafield to make visible in the Storefront API.
	OwnerType MetafieldOwnerType `json:"ownerType"`
}

// The input fields for a metafield value to set.
type MetafieldsSetInput struct {
	// The unique ID of the resource that the metafield is attached to.
	OwnerID string `json:"ownerId"`
	// The container for a group of metafields that the metafield is or will be associated with. Used in tandem
	// with `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the
	// same `key`.
	//
	// Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
	//
	Namespace string `json:"namespace"`
	// The unique identifier for a metafield within its namespace.
	//
	// Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
	//
	Key string `json:"key"`
	// The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
	//
	Value string `json:"value"`
	// The type of data that is stored in the metafield.
	// The type must be one of the [supported types](https://shopify.dev/apps/metafields/types).
	//
	// Required when there is no corresponding definition for the given `namespace`, `key`, and
	// owner resource type (derived from `ownerId`).
	//
	Type *string `json:"type,omitempty,omitempty"`
}

// Return type for `metafieldsSet` mutation.
type MetafieldsSetPayload struct {
	// The list of metafields that were set.
	Metafields []Metafield `json:"metafields,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetafieldsSetUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `MetafieldsSet`.
type MetafieldsSetUserError struct {
	// The error code.
	Code *MetafieldsSetUserErrorCode `json:"code,omitempty,omitempty"`
	// The index of the array element that's causing the error.
	ElementIndex *int `json:"elementIndex,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetafieldsSetUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetafieldsSetUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetafieldsSetUserError) GetMessage() string { return this.Message }

// Provides an object instance represented by a MetaobjectDefinition.
type Metaobject struct {
	// Metaobject capabilities for this Metaobject.
	Capabilities *MetaobjectCapabilityData `json:"capabilities,omitempty"`
	// The app used to create the object.
	CreatedBy *App `json:"createdBy,omitempty"`
	// The MetaobjectDefinition that models this object type.
	Definition *MetaobjectDefinition `json:"definition,omitempty"`
	// The preferred display name field value of the metaobject.
	DisplayName string `json:"displayName"`
	// The field for an object key, or null if the key has no field definition.
	Field *MetaobjectField `json:"field,omitempty,omitempty"`
	// All ordered fields of the metaobject with their definitions and values.
	Fields []MetaobjectField `json:"fields,omitempty"`
	// The unique handle of the object, useful as a custom ID.
	Handle string `json:"handle"`
	// A globally-unique ID.
	ID string `json:"id"`
	// List of back references metafields that belong to the resource.
	ReferencedBy *MetafieldRelationConnection `json:"referencedBy,omitempty"`
	// The staff member who created the metaobject.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// The type of the metaobject.
	Type string `json:"type"`
	// When the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (Metaobject) IsMetafieldReference() {}

func (Metaobject) IsMetafieldReferencer() {}

func (Metaobject) IsNode() {}

// A globally-unique ID.
func (this Metaobject) GetID() string { return this.ID }

// Provides metaobject definition's access configuration.
type MetaobjectAccess struct {
	// Access configuration for Admin API surface areas, including the GraphQL Admin API.
	//
	Admin MetaobjectAdminAccess `json:"admin"`
	// Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
	//
	Storefront MetaobjectStorefrontAccess `json:"storefront"`
}

// The input fields for configuring metaobject access controls.
type MetaobjectAccessInput struct {
	// Access configuration for Admin API surface areas, including the GraphQL Admin API.
	//
	Admin *MetaobjectAdminAccess `json:"admin,omitempty,omitempty"`
	// Access configuration for Storefront API surface areas, including the GraphQL Storefront API and Liquid.
	//
	Storefront *MetaobjectStorefrontAccess `json:"storefront,omitempty,omitempty"`
}

// Return type for `metaobjectBulkDelete` mutation.
type MetaobjectBulkDeletePayload struct {
	// The asynchronous job that deletes the metaobjects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Specifies the condition by which metaobjects are deleted.
// Exactly one field of input is required.
type MetaobjectBulkDeleteWhereCondition struct {
	// Deletes all metaobjects with the specified `type`.
	Type *string `json:"type,omitempty,omitempty"`
	// A list of metaobjects IDs to delete.
	Ids []string `json:"ids,omitempty,omitempty"`
}

// Provides the capabilities of a metaobject definition.
type MetaobjectCapabilities struct {
	// Indicate whether a metaobject definition is publishable.
	Publishable *MetaobjectCapabilitiesPublishable `json:"publishable,omitempty"`
	// Indicate whether a metaobject definition is translatable.
	Translatable *MetaobjectCapabilitiesTranslatable `json:"translatable,omitempty"`
}

// The publishable capability of a metaobject definition.
type MetaobjectCapabilitiesPublishable struct {
	// Indicates if the capability is enabled.
	Enabled bool `json:"enabled"`
}

// The translatable capability of a metaobject definition.
type MetaobjectCapabilitiesTranslatable struct {
	// Indicates if the capability is enabled.
	Enabled bool `json:"enabled"`
}

// The input fields for creating a metaobject capability.
type MetaobjectCapabilityCreateInput struct {
	// The input for enabling the publishable capability.
	Publishable *MetaobjectCapabilityPublishableInput `json:"publishable,omitempty,omitempty"`
	// The input for enabling the translatable capability.
	Translatable *MetaobjectCapabilityTranslatableInput `json:"translatable,omitempty,omitempty"`
}

// Provides the capabilities of a metaobject.
type MetaobjectCapabilityData struct {
	// The publishable capability for this metaobject.
	Publishable *MetaobjectCapabilityDataPublishable `json:"publishable,omitempty,omitempty"`
}

// The input fields for metaobject capabilities.
type MetaobjectCapabilityDataInput struct {
	// Publishable capability input.
	Publishable *MetaobjectCapabilityDataPublishableInput `json:"publishable,omitempty,omitempty"`
}

// The publishable capability for the parent metaobject.
type MetaobjectCapabilityDataPublishable struct {
	// The visibility status of this metaobject across all channels.
	Status MetaobjectStatus `json:"status"`
}

// The input fields for publishable capability to adjust visibility on channels.
type MetaobjectCapabilityDataPublishableInput struct {
	// The visibility status of this metaobject across all channels.
	Status MetaobjectStatus `json:"status"`
}

// The input fields for enabling and disabling the publishable capability.
type MetaobjectCapabilityPublishableInput struct {
	// Indicates whether the capability should be enabled or disabled.
	Enabled bool `json:"enabled"`
}

// The input fields for enabling and disabling the translatable capability.
type MetaobjectCapabilityTranslatableInput struct {
	// Indicates whether the capability should be enabled or disabled.
	Enabled bool `json:"enabled"`
}

// The input fields for updating a metaobject capability.
type MetaobjectCapabilityUpdateInput struct {
	// The input for updating the publishable capability.
	Publishable *MetaobjectCapabilityPublishableInput `json:"publishable,omitempty,omitempty"`
	// The input for updating the translatable capability.
	Translatable *MetaobjectCapabilityTranslatableInput `json:"translatable,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple Metaobjects.
type MetaobjectConnection struct {
	// A list of edges.
	Edges []MetaobjectEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetaobjectEdge.
	Nodes []Metaobject `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for creating a metaobject.
type MetaobjectCreateInput struct {
	// The type of the metaobject. Must match an existing metaobject definition type.
	Type string `json:"type"`
	// A unique handle for the metaobject. This value is auto-generated when omitted.
	Handle *string `json:"handle,omitempty,omitempty"`
	// Values for fields. These are mapped by key to fields of the metaobject definition.
	Fields []MetaobjectFieldInput `json:"fields,omitempty,omitempty"`
	// Capabilities for the metaobject.
	Capabilities *MetaobjectCapabilityDataInput `json:"capabilities,omitempty,omitempty"`
}

// Return type for `metaobjectCreate` mutation.
type MetaobjectCreatePayload struct {
	// The created metaobject.
	Metaobject *Metaobject `json:"metaobject,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Provides the definition of a generic object structure composed of metafields.
type MetaobjectDefinition struct {
	// Access configuration for the metaobject definition.
	Access *MetaobjectAccess `json:"access,omitempty"`
	// The capabilities of the metaobject definition.
	Capabilities *MetaobjectCapabilities `json:"capabilities,omitempty"`
	// The administrative description.
	Description *string `json:"description,omitempty,omitempty"`
	// The key of a field to reference as the display name for each object.
	DisplayNameKey *string `json:"displayNameKey,omitempty,omitempty"`
	// The fields defined for this object type.
	FieldDefinitions []MetaobjectFieldDefinition `json:"fieldDefinitions,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// A paginated connection to the metaobjects associated with the definition.
	Metaobjects *MetaobjectConnection `json:"metaobjects,omitempty"`
	// The count of metaobjects created for the definition.
	MetaobjectsCount int `json:"metaobjectsCount"`
	// The human-readable name.
	Name string `json:"name"`
	// The type of the object definition. Defines the namespace of associated metafields.
	Type string `json:"type"`
}

func (MetaobjectDefinition) IsNode() {}

// A globally-unique ID.
func (this MetaobjectDefinition) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple MetaobjectDefinitions.
type MetaobjectDefinitionConnection struct {
	// A list of edges.
	Edges []MetaobjectDefinitionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in MetaobjectDefinitionEdge.
	Nodes []MetaobjectDefinition `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for creating a metaobject definition.
type MetaobjectDefinitionCreateInput struct {
	// A human-readable name for the definition. This can be changed at any time.
	Name *string `json:"name,omitempty,omitempty"`
	// An administrative description of the definition.
	Description *string `json:"description,omitempty,omitempty"`
	// The type of the metaobject definition. This cannot be changed.
	//
	// Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
	//
	Type string `json:"type"`
	// A set of field definitions to create on this metaobject definition.
	FieldDefinitions []MetaobjectFieldDefinitionCreateInput `json:"fieldDefinitions,omitempty"`
	// Access configuration for the metaobjects created with this definition.
	Access *MetaobjectAccessInput `json:"access,omitempty,omitempty"`
	// The key of a field to reference as the display name for metaobjects of this type.
	DisplayNameKey *string `json:"displayNameKey,omitempty,omitempty"`
	// The capabilities of the metaobject definition.
	Capabilities *MetaobjectCapabilityCreateInput `json:"capabilities,omitempty,omitempty"`
}

// Return type for `metaobjectDefinitionCreate` mutation.
type MetaobjectDefinitionCreatePayload struct {
	// The created metaobject definition.
	MetaobjectDefinition *MetaobjectDefinition `json:"metaobjectDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Return type for `metaobjectDefinitionDelete` mutation.
type MetaobjectDefinitionDeletePayload struct {
	// The ID of the deleted metaobjects definition.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
type MetaobjectDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetaobjectDefinitionEdge.
	Node *MetaobjectDefinition `json:"node,omitempty"`
}

// The input fields for updating a metaobject definition.
type MetaobjectDefinitionUpdateInput struct {
	// A human-readable name for the definition.
	Name *string `json:"name,omitempty,omitempty"`
	// An administrative description of the definition.
	Description *string `json:"description,omitempty,omitempty"`
	// A set of operations for modifying field definitions.
	FieldDefinitions []MetaobjectFieldDefinitionOperationInput `json:"fieldDefinitions,omitempty,omitempty"`
	// Access configuration for the metaobjects created with this definition.
	Access *MetaobjectAccessInput `json:"access,omitempty,omitempty"`
	// The key of a metafield to reference as the display name for objects of this type.
	DisplayNameKey *string `json:"displayNameKey,omitempty,omitempty"`
	// Whether the field order should be reset while updating.
	// If `true`, then the order is assigned based on submitted fields followed by alphabetized field omissions.
	// If `false`, then no changes are made to the existing field order and new fields are appended at the end.
	//
	ResetFieldOrder *bool `json:"resetFieldOrder,omitempty,omitempty"`
	// The capabilities of the metaobject definition.
	Capabilities *MetaobjectCapabilityUpdateInput `json:"capabilities,omitempty,omitempty"`
}

// Return type for `metaobjectDefinitionUpdate` mutation.
type MetaobjectDefinitionUpdatePayload struct {
	// The updated metaobject definition.
	MetaobjectDefinition *MetaobjectDefinition `json:"metaobjectDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Return type for `metaobjectDelete` mutation.
type MetaobjectDeletePayload struct {
	// The ID of the deleted metaobject.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Metaobject and a cursor during pagination.
type MetaobjectEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of MetaobjectEdge.
	Node *Metaobject `json:"node,omitempty"`
}

// Provides a field definition and the data value assigned to it.
type MetaobjectField struct {
	// The field definition for this object key.
	Definition *MetaobjectFieldDefinition `json:"definition,omitempty"`
	// The object key of this field.
	Key string `json:"key"`
	// For resource reference fields, provides the referenced object.
	Reference MetafieldReference `json:"reference,omitempty"`
	// For resource reference list fields, provides the list of referenced objects.
	References *MetafieldReferenceConnection `json:"references,omitempty,omitempty"`
	// The type of the field.
	Type string `json:"type"`
	// The assigned field value, always stored as a string regardless of the field type.
	Value *string `json:"value,omitempty,omitempty"`
}

// Defines a field for a MetaobjectDefinition with properties
// such as the field's data type and validations.
type MetaobjectFieldDefinition struct {
	// The administrative description.
	Description *string `json:"description,omitempty,omitempty"`
	// A key name used to identify the field within the metaobject composition.
	Key string `json:"key"`
	// The human-readable name.
	Name string `json:"name"`
	// Required status of the field within the metaobject composition.
	Required bool `json:"required"`
	// The type of data that the field stores.
	Type *MetafieldDefinitionType `json:"type,omitempty"`
	// A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
	// the field. For example, a field with the type `date` can set a minimum date requirement.
	//
	Validations []MetafieldDefinitionValidation `json:"validations,omitempty"`
}

// The input fields for creating a metaobject field definition.
type MetaobjectFieldDefinitionCreateInput struct {
	// The key of the new field definition. This cannot be changed.
	//
	// Must be 3-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
	//
	Key string `json:"key"`
	// The metafield type applied to values of the field.
	Type string `json:"type"`
	// A human-readable name for the field. This can be changed at any time.
	Name *string `json:"name,omitempty,omitempty"`
	// An administrative description of the field.
	Description *string `json:"description,omitempty,omitempty"`
	// Whether metaobjects require a saved value for the field.
	Required *bool `json:"required,omitempty,omitempty"`
	// Custom validations that apply to values assigned to the field.
	Validations []MetafieldDefinitionValidationInput `json:"validations,omitempty,omitempty"`
}

// The input fields for deleting a metaobject field definition.
type MetaobjectFieldDefinitionDeleteInput struct {
	// The key of the field definition to delete.
	Key string `json:"key"`
}

// The input fields for possible operations for modifying field definitions. Exactly one option is required.
type MetaobjectFieldDefinitionOperationInput struct {
	// The input fields for creating a metaobject field definition.
	Create *MetaobjectFieldDefinitionCreateInput `json:"create,omitempty,omitempty"`
	// The input fields for updating a metaobject field definition.
	Update *MetaobjectFieldDefinitionUpdateInput `json:"update,omitempty,omitempty"`
	// The input fields for deleting a metaobject field definition.
	Delete *MetaobjectFieldDefinitionDeleteInput `json:"delete,omitempty,omitempty"`
}

// The input fields for updating a metaobject field definition.
type MetaobjectFieldDefinitionUpdateInput struct {
	// The key of the field definition to update.
	Key string `json:"key"`
	// A human-readable name for the field.
	Name *string `json:"name,omitempty,omitempty"`
	// An administrative description of the field.
	Description *string `json:"description,omitempty,omitempty"`
	// Whether metaobjects require a saved value for the field.
	Required *bool `json:"required,omitempty,omitempty"`
	// Custom validations that apply to values assigned to the field.
	Validations []MetafieldDefinitionValidationInput `json:"validations,omitempty,omitempty"`
}

// The input fields for a metaobject field value.
type MetaobjectFieldInput struct {
	// The key of the field.
	Key string `json:"key"`
	// The value of the field.
	Value string `json:"value"`
}

// The input fields for retrieving a metaobject by handle.
type MetaobjectHandleInput struct {
	// The type of the metaobject. Must match an existing metaobject definition type.
	Type string `json:"type"`
	// The handle of the metaobject to create or update.
	Handle string `json:"handle"`
}

// The input fields for updating a metaobject.
type MetaobjectUpdateInput struct {
	// A unique handle for the metaobject.
	Handle *string `json:"handle,omitempty,omitempty"`
	// Values for fields. These are mapped by key to fields of the metaobject definition.
	Fields []MetaobjectFieldInput `json:"fields,omitempty,omitempty"`
	// Capabilities for the metaobject.
	Capabilities *MetaobjectCapabilityDataInput `json:"capabilities,omitempty,omitempty"`
}

// Return type for `metaobjectUpdate` mutation.
type MetaobjectUpdatePayload struct {
	// The updated metaobject.
	Metaobject *Metaobject `json:"metaobject,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// The input fields for upserting a metaobject.
type MetaobjectUpsertInput struct {
	// The handle of the metaobject.
	Handle *string `json:"handle,omitempty,omitempty"`
	// Values for fields. These are mapped by key to fields of the metaobject definition.
	Fields []MetaobjectFieldInput `json:"fields,omitempty,omitempty"`
	// Capabilities for the metaobject.
	Capabilities *MetaobjectCapabilityDataInput `json:"capabilities,omitempty,omitempty"`
}

// Return type for `metaobjectUpsert` mutation.
type MetaobjectUpsertPayload struct {
	// The created or updated metaobject.
	Metaobject *Metaobject `json:"metaobject,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Defines errors encountered while managing metaobject resources.
type MetaobjectUserError struct {
	// The error code.
	Code *MetaobjectUserErrorCode `json:"code,omitempty,omitempty"`
	// The index of the failing list element in an array.
	ElementIndex *int `json:"elementIndex,omitempty,omitempty"`
	// The key of the failing object element.
	ElementKey *string `json:"elementKey,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (MetaobjectUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this MetaobjectUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this MetaobjectUserError) GetMessage() string { return this.Message }

// Represents a Shopify hosted 3D model.
type Model3d struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The 3d model's bounding box information.
	BoundingBox *Model3dBoundingBox `json:"boundingBox,omitempty,omitempty"`
	// The 3d model's filename.
	Filename string `json:"filename"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The 3d model's original source.
	OriginalSource *Model3dSource `json:"originalSource,omitempty,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty,omitempty"`
	// The 3d model's sources.
	Sources []Model3dSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
}

func (Model3d) IsMedia() {}

// A word or phrase to share the nature or contents of a media.
func (this Model3d) GetAlt() *string { return this.Alt }

// A globally-unique ID.
func (this Model3d) GetID() string { return this.ID }

// The media content type.
func (this Model3d) GetMediaContentType() MediaContentType { return this.MediaContentType }

// Any errors which have occurred on the media.
func (this Model3d) GetMediaErrors() []MediaError {
	if this.MediaErrors == nil {
		return nil
	}
	interfaceSlice := make([]MediaError, 0, len(this.MediaErrors))
	for _, concrete := range this.MediaErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The warnings attached to the media.
func (this Model3d) GetMediaWarnings() []MediaWarning {
	if this.MediaWarnings == nil {
		return nil
	}
	interfaceSlice := make([]MediaWarning, 0, len(this.MediaWarnings))
	for _, concrete := range this.MediaWarnings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The preview image for the media.
func (this Model3d) GetPreview() *MediaPreviewImage { return this.Preview }

// Current status of the media.
func (this Model3d) GetStatus() MediaStatus { return this.Status }

func (Model3d) IsNode() {}

// A globally-unique ID.

// Bounding box information of a 3d model.
type Model3dBoundingBox struct {
	// Size in meters of the smallest volume which contains the 3d model.
	//
	Size *Vector3 `json:"size,omitempty"`
}

// A source for a Shopify-hosted 3d model.
//
// Types of sources include GLB and USDZ formatted 3d models, where the former
// is an original 3d model and the latter has been converted from the original.
//
// If the original source is in GLB format and over 15 MBs in size, then both the
// original and the USDZ formatted source are optimized to reduce the file size.
type Model3dSource struct {
	// The 3d model source's filesize.
	Filesize int `json:"filesize"`
	// The 3d model source's format.
	Format string `json:"format"`
	// The 3d model source's MIME type.
	MimeType string `json:"mimeType"`
	// The 3d model source's URL.
	URL string `json:"url"`
}

// A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
// when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
type MoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney *MoneyV2 `json:"presentmentMoney,omitempty"`
	// Amount in shop currency.
	ShopMoney *MoneyV2 `json:"shopMoney,omitempty"`
}

// The input fields for a monetary value with currency.
type MoneyInput struct {
	// Decimal money amount.
	Amount null.String `json:"amount"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// A monetary value with currency.
type MoneyV2 struct {
	// Decimal money amount.
	Amount null.String `json:"amount"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

func (MoneyV2) IsDeliveryConditionCriteria() {}

func (MoneyV2) IsPricingValue() {}

func (MoneyV2) IsSellingPlanCheckoutChargeValue() {}

func (MoneyV2) IsSellingPlanPricingPolicyAdjustmentValue() {}

// The input fields for a single move of an object to a specific position in a set, using a zero-based index.
type MoveInput struct {
	// The ID of the object to be moved.
	ID string `json:"id"`
	// The new position of the object in the set.
	NewPosition string `json:"newPosition"`
}

// A signed upload parameter for uploading an asset to Shopify.
//
// Deprecated in favor of
// [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
// which is used in
// [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
// and returned by the
// [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
type MutationsStagedUploadTargetGenerateUploadParameter struct {
	// The upload parameter name.
	Name string `json:"name"`
	// The upload parameter value.
	Value string `json:"value"`
}

// A navigation item, holding basic link attributes.
type NavigationItem struct {
	// The unique identifier of the navigation item.
	ID string `json:"id"`
	// The name of the navigation item.
	Title string `json:"title"`
	// The URL of the page that the navigation item links to.
	URL string `json:"url"`
}

// The input fields for dimensions of an object.
type ObjectDimensionsInput struct {
	// The length in `unit`s.
	Length float64 `json:"length"`
	// The width in `unit`s.
	Width float64 `json:"width"`
	// The height in `unit`s.
	Height float64 `json:"height"`
	// Unit of measurement for `length`, `width`, and `height`.
	Unit LengthUnit `json:"unit"`
}

// An article in the blogging system. You can query articles from
// [the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
// if you need to access more information about an article. Currently, `OnlineStoreArticle` is
// only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
// the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
type OnlineStoreArticle struct {
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
}

func (OnlineStoreArticle) IsMetafieldReferencer() {}

func (OnlineStoreArticle) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this OnlineStoreArticle) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (OnlineStoreArticle) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this OnlineStoreArticle) GetDefaultCursor() string { return this.DefaultCursor }

func (OnlineStoreArticle) IsNode() {}

// A globally-unique ID.
func (this OnlineStoreArticle) GetID() string { return this.ID }

// Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
// to be used as a type of magazine or newsletter for the shop, with content that changes over time.
type OnlineStoreBlog struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
}

func (OnlineStoreBlog) IsMetafieldReferencer() {}

func (OnlineStoreBlog) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this OnlineStoreBlog) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (OnlineStoreBlog) IsNode() {}

// A globally-unique ID.
func (this OnlineStoreBlog) GetID() string { return this.ID }

// A custom page on the Online Store.
type OnlineStorePage struct {
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
}

func (OnlineStorePage) IsMetafieldReference() {}

func (OnlineStorePage) IsMetafieldReferencer() {}

func (OnlineStorePage) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this OnlineStorePage) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (OnlineStorePage) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this OnlineStorePage) GetDefaultCursor() string { return this.DefaultCursor }

func (OnlineStorePage) IsNode() {}

// A globally-unique ID.
func (this OnlineStorePage) GetID() string { return this.ID }

// An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
// Learn more about
// [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
//
// Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
// then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
// access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
// [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
//
// **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
type Order struct {
	// A list of addtional fees applied to the order.
	AdditionalFees []AdditionalFee `json:"additionalFees,omitempty"`
	// A list of sales agreements associated with the order.
	Agreements *SalesAgreementConnection `json:"agreements,omitempty"`
	// A list of messages that appear on the order page in the Shopify admin.
	//
	Alerts []ResourceAlert `json:"alerts,omitempty"`
	// The application that created the order.
	App *OrderApp `json:"app,omitempty,omitempty"`
	// The billing address of the customer.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty,omitempty"`
	// Whether the billing address matches the shipping address.
	BillingAddressMatchesShippingAddress bool `json:"billingAddressMatchesShippingAddress"`
	// Whether the order can be manually marked as paid.
	CanMarkAsPaid bool `json:"canMarkAsPaid"`
	// Whether a customer email exists for the order.
	CanNotifyCustomer bool `json:"canNotifyCustomer"`
	// The reason provided when the order was canceled.
	// Returns `null` if the order wasn't canceled.
	//
	CancelReason *OrderCancelReason `json:"cancelReason,omitempty,omitempty"`
	// The date and time when the order was canceled.
	// Returns `null` if the order wasn't canceled.
	//
	CancelledAt *string `json:"cancelledAt,omitempty,omitempty"`
	// Whether payment for the order can be captured.
	//
	Capturable bool `json:"capturable"`
	// The total order-level discount amount, before returns, in shop currency.
	CartDiscountAmount *null.String `json:"cartDiscountAmount,omitempty,omitempty"`
	// The total order-level discount amount, before returns, in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty,omitempty"`
	// The channel that created the order.
	Channel *Channel `json:"channel,omitempty,omitempty"`
	// Details about the channel that created the order.
	ChannelInformation *ChannelInformation `json:"channelInformation,omitempty,omitempty"`
	// The IP address of the API client that created the order.
	ClientIP *string `json:"clientIp,omitempty,omitempty"`
	// Whether the order is closed.
	Closed bool `json:"closed"`
	// The date and time when the order was closed.
	// Returns `null` if the order is not closed.
	//
	ClosedAt *string `json:"closedAt,omitempty,omitempty"`
	// A randomly generated alpha-numeric identifier for the order that may be shown to the customer
	// instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
	// This value isn't guaranteed to be unique.
	//
	ConfirmationNumber *string `json:"confirmationNumber,omitempty,omitempty"`
	// Whether inventory has been reserved for the order.
	Confirmed bool `json:"confirmed"`
	// Date and time when the order was created in Shopify.
	CreatedAt string `json:"createdAt"`
	// The shop currency when the order was placed.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The current order-level discount amount after all order updates, in shop and presentment currencies.
	//
	CurrentCartDiscountAmountSet *MoneyBag `json:"currentCartDiscountAmountSet,omitempty"`
	// The sum of the quantities for all line items that contribute to the order's current subtotal price.
	CurrentSubtotalLineItemsQuantity int `json:"currentSubtotalLineItemsQuantity"`
	// The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	CurrentSubtotalPriceSet *MoneyBag `json:"currentSubtotalPriceSet,omitempty"`
	// A list of all tax lines applied to line items on the order, after returns.
	// Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
	//
	CurrentTaxLines []TaxLine `json:"currentTaxLines,omitempty"`
	// The total amount of additional fees after returns, in shop and presentment currencies.
	// Returns `null` if there are no additional fees for the order.
	//
	CurrentTotalAdditionalFeesSet *MoneyBag `json:"currentTotalAdditionalFeesSet,omitempty,omitempty"`
	// The total amount discounted on the order after returns, in shop and presentment currencies.
	// This includes both order and line level discounts.
	//
	CurrentTotalDiscountsSet *MoneyBag `json:"currentTotalDiscountsSet,omitempty"`
	// The total amount of duties after returns, in shop and presentment currencies.
	// Returns `null` if duties aren't applicable.
	//
	CurrentTotalDutiesSet *MoneyBag `json:"currentTotalDutiesSet,omitempty,omitempty"`
	// The total price of the order, after returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	//
	CurrentTotalPriceSet *MoneyBag `json:"currentTotalPriceSet,omitempty"`
	// The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
	//
	CurrentTotalTaxSet *MoneyBag `json:"currentTotalTaxSet,omitempty"`
	// The total weight of the order after returns, in grams.
	CurrentTotalWeight string `json:"currentTotalWeight"`
	// A list of the custom attributes added to the order.
	//
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer that placed the order.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// Whether the customer agreed to receive marketing materials.
	CustomerAcceptsMarketing bool `json:"customerAcceptsMarketing"`
	// The customer's visits and interactions with the online store before placing the order.
	//
	CustomerJourney *CustomerJourney `json:"customerJourney,omitempty,omitempty"`
	// The customer's visits and interactions with the online store before placing the order.
	//
	CustomerJourneySummary *CustomerJourneySummary `json:"customerJourneySummary,omitempty,omitempty"`
	// A two-letter or three-letter language code, optionally followed by a region modifier.
	//
	CustomerLocale *string `json:"customerLocale,omitempty,omitempty"`
	// A list of discounts that are applied to the order, not including order edits and refunds.
	DiscountApplications *DiscountApplicationConnection `json:"discountApplications,omitempty"`
	// The discount code used for the order.
	DiscountCode *string `json:"discountCode,omitempty,omitempty"`
	// The discount codes used for the order.
	DiscountCodes []string `json:"discountCodes,omitempty"`
	// The primary address of the customer.
	// Returns `null` if neither the shipping address nor the billing address was provided.
	//
	DisplayAddress *MailingAddress `json:"displayAddress,omitempty,omitempty"`
	// The financial status of the order that can be shown to the merchant.
	// This field does not capture all the details of an order's financial state. It should only be used for display summary purposes.
	//
	DisplayFinancialStatus *OrderDisplayFinancialStatus `json:"displayFinancialStatus,omitempty,omitempty"`
	// The fulfillment status for the order that can be shown to the merchant.
	// This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
	// For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
	//
	DisplayFulfillmentStatus OrderDisplayFulfillmentStatus `json:"displayFulfillmentStatus"`
	// A list of the disputes associated with the order.
	Disputes []OrderDisputeSummary `json:"disputes,omitempty"`
	// Whether the order has had any edits applied.
	Edited bool `json:"edited"`
	// The email address associated with the customer.
	Email *string `json:"email,omitempty,omitempty"`
	// Whether taxes on the order are estimated.
	// This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
	//
	EstimatedTaxes bool `json:"estimatedTaxes"`
	// A list of events associated with the order.
	Events *EventConnection `json:"events,omitempty"`
	// A list of ExchangeV2s for the order.
	ExchangeV2s *ExchangeV2Connection `json:"exchangeV2s,omitempty"`
	// Whether there are line items that can be fulfilled.
	// This field returns `false` when the order has no fulfillable line items.
	// For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
	//
	Fulfillable bool `json:"fulfillable"`
	// A list of fulfillment orders for a specific order.
	//
	// [FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
	// govern which fulfillments orders are returned.
	// An API client will only receive a subset of the fulfillment orders which belong to an order
	// if they don't have the necessary access scopes to view all of the fulfillment orders.
	// In the case that an API client does not have the access scopes necessary to view
	// any of the fulfillment orders that belong to an order, an empty array will be returned.
	//
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of shipments for the order.
	Fulfillments []Fulfillment `json:"fulfillments,omitempty"`
	// Whether the order has been paid in full.
	FullyPaid bool `json:"fullyPaid"`
	// Whether the merchant added a timeline comment to the order.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The URL of the first page of the online store that the customer visited before they submitted the order.
	LandingPageDisplayText *string `json:"landingPageDisplayText,omitempty,omitempty"`
	// The first page of the online store that the customer visited before they submitted the order.
	LandingPageURL *string `json:"landingPageUrl,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// A list of the order's line items.
	LineItems *LineItemConnection `json:"lineItems,omitempty"`
	// A list of the order's line items.
	LineItemsMutable *LineItemMutableConnection `json:"lineItemsMutable,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// The fulfillment location that was assigned when the order was created.
	// Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
	//
	Location *string `json:"location,omitempty,omitempty"`
	// Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
	MerchantEditable bool `json:"merchantEditable"`
	// A list of reasons why the order can't be edited. For example, "Canceled orders can’t be edited".
	//
	MerchantEditableErrors []string `json:"merchantEditableErrors,omitempty"`
	// The application acting as the Merchant of Record for the order.
	MerchantOfRecordApp *OrderApp `json:"merchantOfRecordApp,omitempty,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
	// For example, "#1001", "EN1001", or "1001-A".
	// This value isn't unique across multiple stores.
	//
	Name string `json:"name"`
	// The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
	//
	NetPayment null.String `json:"netPayment"`
	// The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
	NetPaymentSet *MoneyBag `json:"netPaymentSet,omitempty"`
	// A list of line items that can't be fulfilled.
	// For example, tips and fully refunded line items can't be fulfilled.
	// For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
	//
	NonFulfillableLineItems *LineItemConnection `json:"nonFulfillableLineItems,omitempty"`
	// The contents of the note associated with the order.
	//
	Note *string `json:"note,omitempty,omitempty"`
	// The total amount of additional fees after returns, in shop and presentment currencies.
	// Returns `null` if there are no additional fees for the order.
	//
	OriginalTotalAdditionalFeesSet *MoneyBag `json:"originalTotalAdditionalFeesSet,omitempty,omitempty"`
	// The total amount of duties before returns, in shop and presentment currencies.
	// Returns `null` if duties aren't applicable.
	//
	OriginalTotalDutiesSet *MoneyBag `json:"originalTotalDutiesSet,omitempty,omitempty"`
	// The total price of the order at the time of order creation, in shop and presentment currencies.
	OriginalTotalPriceSet *MoneyBag `json:"originalTotalPriceSet,omitempty"`
	// The payment collection details for the order.
	PaymentCollectionDetails *OrderPaymentCollectionDetails `json:"paymentCollectionDetails,omitempty"`
	// A list of the names of all payment gateways used for the order.
	// For example, "Shopify Payments" and "Cash on Delivery (COD)".
	//
	PaymentGatewayNames []string `json:"paymentGatewayNames,omitempty"`
	// The payment terms associated with the order.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty,omitempty"`
	// The phone number associated with the customer.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The fulfillment location that was assigned when the order was created.
	// Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
	//
	PhysicalLocation *Location `json:"physicalLocation,omitempty,omitempty"`
	// The PO number associated with the order.
	PoNumber *string `json:"poNumber,omitempty,omitempty"`
	// The payment `CurrencyCode` of the customer for the order.
	PresentmentCurrencyCode CurrencyCode `json:"presentmentCurrencyCode"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The date and time when the order was processed.
	// This date and time might not match the date and time when the order was created.
	//
	ProcessedAt string `json:"processedAt"`
	// The publication that the order was created from.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The purchasing entity for the order.
	PurchasingEntity PurchasingEntity `json:"purchasingEntity,omitempty"`
	// The marketing referral code from the link that the customer clicked to visit the store.
	// Supports the following URL attributes: "ref", "source", or "r".
	// For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
	//
	ReferralCode *string `json:"referralCode,omitempty,omitempty"`
	// A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
	//
	ReferrerDisplayText *string `json:"referrerDisplayText,omitempty,omitempty"`
	// The URL of the webpage where the customer clicked a link that sent them to your online store.
	//
	ReferrerURL *string `json:"referrerUrl,omitempty,omitempty"`
	// The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
	RefundDiscrepancySet *MoneyBag `json:"refundDiscrepancySet,omitempty"`
	// Whether the order can be refunded.
	//
	Refundable bool `json:"refundable"`
	// A list of refunds that have been applied to the order.
	Refunds []Refund `json:"refunds,omitempty"`
	// The URL of the source that the order originated from, if found in the domain registry.
	RegisteredSourceURL *string `json:"registeredSourceUrl,omitempty,omitempty"`
	// Whether the order has shipping lines or at least one line item on the order that requires shipping.
	//
	RequiresShipping bool `json:"requiresShipping"`
	// Whether any line item on the order can be restocked.
	//
	Restockable bool `json:"restockable"`
	// The order's aggregated return status for display purposes.
	ReturnStatus OrderReturnStatus `json:"returnStatus"`
	// A list of returns for the order.
	Returns *ReturnConnection `json:"returns,omitempty"`
	// The fraud risk level of the order.
	RiskLevel OrderRiskLevel `json:"riskLevel"`
	// A list of risks associated with the order.
	Risks []OrderRisk `json:"risks,omitempty"`
	// The mailing address of the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty,omitempty"`
	// A summary of all shipping costs on the order.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty,omitempty"`
	// A list of the order's shipping lines.
	ShippingLines *ShippingLineConnection `json:"shippingLines,omitempty"`
	// A unique POS or third party order identifier.
	// For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
	//
	SourceIdentifier *string `json:"sourceIdentifier,omitempty,omitempty"`
	// The sum of the quantities for all line items that contribute to the order's subtotal price.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity"`
	// The sum of the prices for all line items after discounts and before returns, in shop currency.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	SubtotalPrice *null.String `json:"subtotalPrice,omitempty,omitempty"`
	// The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
	// If `taxesIncluded` is `true`, then the subtotal also includes tax.
	//
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty,omitempty"`
	// A suggested refund for the order.
	SuggestedRefund *SuggestedRefund `json:"suggestedRefund,omitempty,omitempty"`
	// A comma separated list of tags associated with the order. Updating `tags` overwrites
	// any existing tags that were previously added to the order. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// Whether taxes are exempt on the order.
	TaxExempt bool `json:"taxExempt"`
	// A list of all tax lines applied to line items on the order, before returns.
	// Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
	//
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Whether taxes are included in the subtotal price of the order.
	TaxesIncluded bool `json:"taxesIncluded"`
	// Whether the order is a test.
	// Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
	// A test order cannot be converted into a real order and vice versa.
	//
	Test bool `json:"test"`
	// The authorized amount that is uncaptured or undercaptured, in shop currency.
	// This amount isn't adjusted for returns.
	//
	TotalCapturable null.String `json:"totalCapturable"`
	// The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
	// This amount isn't adjusted for returns.
	//
	TotalCapturableSet *MoneyBag `json:"totalCapturableSet,omitempty"`
	// The total amount discounted on the order before returns, in shop currency.
	// This includes both order and line level discounts.
	//
	TotalDiscounts *null.String `json:"totalDiscounts,omitempty,omitempty"`
	// The total amount discounted on the order before returns, in shop and presentment currencies.
	// This includes both order and line level discounts.
	//
	TotalDiscountsSet *MoneyBag `json:"totalDiscountsSet,omitempty,omitempty"`
	// The total amount not yet transacted for the order, in shop and presentment currencies.
	// A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
	//
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// The total price of the order, before returns, in shop currency.
	// This includes taxes and discounts.
	//
	TotalPrice null.String `json:"totalPrice"`
	// The total price of the order, before returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	//
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// The total amount received from the customer before returns, in shop currency.
	TotalReceived null.String `json:"totalReceived"`
	// The total amount received from the customer before returns, in shop and presentment currencies.
	TotalReceivedSet *MoneyBag `json:"totalReceivedSet,omitempty"`
	// The total amount that was refunded, in shop currency.
	TotalRefunded null.String `json:"totalRefunded"`
	// The total amount that was refunded, in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// The total amount of shipping that was refunded, in shop and presentment currencies.
	TotalRefundedShippingSet *MoneyBag `json:"totalRefundedShippingSet,omitempty"`
	// The total shipping amount before discounts and returns, in shop currency.
	TotalShippingPrice null.String `json:"totalShippingPrice"`
	// The total shipping amount before discounts and returns, in shop and presentment currencies.
	TotalShippingPriceSet *MoneyBag `json:"totalShippingPriceSet,omitempty"`
	// The total tax amount before returns, in shop currency.
	TotalTax *null.String `json:"totalTax,omitempty,omitempty"`
	// The total tax amount before returns, in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty,omitempty"`
	// The sum of all tip amounts for the order, in shop currency.
	TotalTipReceived *MoneyV2 `json:"totalTipReceived,omitempty"`
	// The sum of all tip amounts for the order, in shop and presentment currencies.
	TotalTipReceivedSet *MoneyBag `json:"totalTipReceivedSet,omitempty"`
	// The total weight of the order before returns, in grams.
	TotalWeight *string `json:"totalWeight,omitempty,omitempty"`
	// A list of transactions associated with the order.
	Transactions []OrderTransaction `json:"transactions,omitempty"`
	// Whether no payments have been made for the order.
	//
	Unpaid bool `json:"unpaid"`
	// The date and time when the order was modified last.
	UpdatedAt string `json:"updatedAt"`
}

func (Order) IsCommentEventEmbed() {}

func (Order) IsMetafieldReferencer() {}

func (Order) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this Order) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this Order) GetID() string { return this.ID }

func (Order) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this Order) GetEvents() *EventConnection { return this.Events }

func (Order) IsHasLocalizationExtensions() {}

// List of localization extensions for the resource.
func (this Order) GetLocalizationExtensions() *LocalizationExtensionConnection {
	return this.LocalizationExtensions
}

func (Order) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Order) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Order) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Order) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Order) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Order) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Order) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

func (Order) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Order) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Order) IsNode() {}

// A globally-unique ID.

// An agreement associated with an order placement.
type OrderAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique ID for the agreement.
	ID string `json:"id"`
	// The order associated with the agreement.
	Order *Order `json:"order,omitempty"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty,omitempty"`
}

func (OrderAgreement) IsSalesAgreement() {}

// The application that created the agreement.
func (this OrderAgreement) GetApp() *App { return this.App }

// The date and time at which the agreement occured.
func (this OrderAgreement) GetHappenedAt() string { return this.HappenedAt }

// The unique ID for the agreement.
func (this OrderAgreement) GetID() string { return this.ID }

// The reason the agremeent was created.
func (this OrderAgreement) GetReason() OrderActionType { return this.Reason }

// The sales associated with the agreement.
func (this OrderAgreement) GetSales() *SaleConnection { return this.Sales }

// The staff member associated with the agreement.
func (this OrderAgreement) GetUser() *StaffMember { return this.User }

// The [application](https://shopify.dev/apps) that created the order.
type OrderApp struct {
	// The application icon.
	Icon *Image `json:"icon,omitempty"`
	// The application ID.
	ID string `json:"id"`
	// The name of the application.
	Name string `json:"name"`
}

// The input fields for the authorized transaction to capture and the total amount to capture from it.
type OrderCaptureInput struct {
	// The ID of the order to capture.
	ID string `json:"id"`
	// The ID of the authorized transaction to capture.
	ParentTransactionID string `json:"parentTransactionId"`
	// The amount to capture. The capture amount can't be greater than the amount of the authorized transaction.
	Amount null.String `json:"amount"`
	// The currency (in ISO format) that is used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty,omitempty"`
}

// Return type for `orderCapture` mutation.
type OrderCapturePayload struct {
	// The created capture transaction.
	Transaction *OrderTransaction `json:"transaction,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for specifying an open order to close.
type OrderCloseInput struct {
	// The ID of the order to close.
	ID string `json:"id"`
}

// Return type for `orderClose` mutation.
type OrderClosePayload struct {
	// The closed order.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Orders.
type OrderConnection struct {
	// A list of edges.
	Edges []OrderEdge `json:"edges,omitempty"`
	// A list of the nodes contained in OrderEdge.
	Nodes []Order `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `orderCreateMandatePayment` mutation.
type OrderCreateMandatePaymentPayload struct {
	// The async job used for charging the payment.
	Job *Job `json:"job,omitempty,omitempty"`
	// The Unique ID for the created payment.
	PaymentReferenceID *string `json:"paymentReferenceId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []OrderCreateMandatePaymentUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `OrderCreateMandatePayment`.
type OrderCreateMandatePaymentUserError struct {
	// The error code.
	Code *OrderCreateMandatePaymentUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (OrderCreateMandatePaymentUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this OrderCreateMandatePaymentUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this OrderCreateMandatePaymentUserError) GetMessage() string { return this.Message }

// A summary of the important details for a dispute on an order.
type OrderDisputeSummary struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The type that the dispute was initiated as.
	InitiatedAs DisputeType `json:"initiatedAs"`
	// The current status of the dispute.
	Status DisputeStatus `json:"status"`
}

func (OrderDisputeSummary) IsNode() {}

// A globally-unique ID.
func (this OrderDisputeSummary) GetID() string { return this.ID }

// An auto-generated type which holds one Order and a cursor during pagination.
type OrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderEdge.
	Node *Order `json:"node,omitempty"`
}

// Return type for `orderEditAddCustomItem` mutation.
type OrderEditAddCustomItemPayload struct {
	// The custom line item that will be added to the order based on the current edits.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddLineItemDiscount` mutation.
type OrderEditAddLineItemDiscountPayload struct {
	// The discount applied to a line item during this order edit.
	AddedDiscountStagedChange *OrderStagedChangeAddLineItemDiscount `json:"addedDiscountStagedChange,omitempty,omitempty"`
	// The line item with the edits applied but not saved.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddVariant` mutation.
type OrderEditAddVariantPayload struct {
	// The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
	// that's added during this order edit.
	//
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty,omitempty"`
	// The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
	// with the edits applied but not saved.
	//
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An agreement associated with an edit to the order.
type OrderEditAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique ID for the agreement.
	ID string `json:"id"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty,omitempty"`
}

func (OrderEditAgreement) IsSalesAgreement() {}

// The application that created the agreement.
func (this OrderEditAgreement) GetApp() *App { return this.App }

// The date and time at which the agreement occured.
func (this OrderEditAgreement) GetHappenedAt() string { return this.HappenedAt }

// The unique ID for the agreement.
func (this OrderEditAgreement) GetID() string { return this.ID }

// The reason the agremeent was created.
func (this OrderEditAgreement) GetReason() OrderActionType { return this.Reason }

// The sales associated with the agreement.
func (this OrderEditAgreement) GetSales() *SaleConnection { return this.Sales }

// The staff member associated with the agreement.
func (this OrderEditAgreement) GetUser() *StaffMember { return this.User }

// The input fields used to add a discount during an order edit.
type OrderEditAppliedDiscountInput struct {
	// The description of the discount.
	Description *string `json:"description,omitempty,omitempty"`
	// The value of the discount as a fixed amount.
	FixedValue *MoneyInput `json:"fixedValue,omitempty,omitempty"`
	// The value of the discount as a percentage.
	PercentValue *float64 `json:"percentValue,omitempty,omitempty"`
}

// Return type for `orderEditBegin` mutation.
type OrderEditBeginPayload struct {
	// The order that will be edited.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditCommit` mutation.
type OrderEditCommitPayload struct {
	// The order with changes applied.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditRemoveLineItemDiscount` mutation.
type OrderEditRemoveLineItemDiscountPayload struct {
	// The calculated line item after removal of the discount.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty,omitempty"`
	// An order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditSetQuantity` mutation.
type OrderEditSetQuantityPayload struct {
	// The calculated line item with the edits applied but not saved.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty,omitempty"`
	// The calculated order with the edits applied but not saved.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for specifying the information to be updated on an order when using the orderUpdate mutation.
type OrderInput struct {
	// The ID of the order to update.
	ID string `json:"id"`
	// A new customer email address for the order. Overwrites the existing email address.
	Email *string `json:"email,omitempty,omitempty"`
	// The new contents for the note associated with the order. Overwrites the existing note.
	Note *string `json:"note,omitempty,omitempty"`
	// A new list of tags for the order. Overwrites the existing tags.
	Tags []string `json:"tags,omitempty,omitempty"`
	// The new shipping address for the order. Overwrites the existing shipping address.
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty,omitempty"`
	// A new list of custom attributes for the order. Overwrites the existing custom attributes.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
	// A list of new metafields to add to the existing metafields for the order.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// A list of new [localization extensions](https://shopify.dev/api/admin-graphql/latest/objects/localizationextension) to add to the existing list of localization extensions for the order.
	LocalizationExtensions []LocalizationExtensionInput `json:"localizationExtensions,omitempty,omitempty"`
	// The new purchase order number for the order.
	PoNumber *string `json:"poNumber,omitempty,omitempty"`
}

// Return type for `orderInvoiceSend` mutation.
type OrderInvoiceSendPayload struct {
	// The order associated with the invoice email.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []OrderInvoiceSendUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `OrderInvoiceSend`.
type OrderInvoiceSendUserError struct {
	// The error code.
	Code *OrderInvoiceSendUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (OrderInvoiceSendUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this OrderInvoiceSendUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this OrderInvoiceSendUserError) GetMessage() string { return this.Message }

// The input fields for specifying the order to mark as paid.
type OrderMarkAsPaidInput struct {
	// The ID of the order to mark as paid.
	ID string `json:"id"`
}

// Return type for `orderMarkAsPaid` mutation.
type OrderMarkAsPaidPayload struct {
	// The order marked as paid.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for specifying a closed order to open.
type OrderOpenInput struct {
	// The ID of the order to open.
	ID string `json:"id"`
}

// Return type for `orderOpen` mutation.
type OrderOpenPayload struct {
	// The opened order.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The payment collection details for an order that requires additional payment following an edit to the order.
type OrderPaymentCollectionDetails struct {
	// The URL to use for collecting an additional payment on the order.
	AdditionalPaymentCollectionURL *string `json:"additionalPaymentCollectionUrl,omitempty,omitempty"`
	// The list of vaulted payment methods for the order with their permissions.
	VaultedPaymentMethods []PaymentMandate `json:"vaultedPaymentMethods,omitempty,omitempty"`
}

// The status of a customer's payment for an order.
type OrderPaymentStatus struct {
	// A message describing an error during the asynchronous processing of a payment.
	ErrorMessage *string `json:"errorMessage,omitempty,omitempty"`
	// The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
	PaymentReferenceID string `json:"paymentReferenceId"`
	// The status of the payment.
	Status OrderPaymentStatusResult `json:"status"`
	// A translated message describing an error during the asynchronous processing of a payment.
	TranslatedErrorMessage *string `json:"translatedErrorMessage,omitempty,omitempty"`
}

// Represents a fraud check on an order.
type OrderRisk struct {
	// Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
	Display bool `json:"display"`
	// The likelihood that an order is fraudulent, based on this order risk.
	//
	// The level can be set by Shopify risk analysis or by an app.
	//
	Level *OrderRiskLevel `json:"level,omitempty,omitempty"`
	// The risk message that's shown to the merchant in the Shopify admin.
	Message *string `json:"message,omitempty,omitempty"`
}

// A change to the order representing the addition of a
// custom line item. For example, you might want to add gift wrapping service
// as a custom line item.
type OrderStagedChangeAddCustomItem struct {
	// The price of an individual item without any discounts applied. This value cannot be negative.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// The quantity of the custom item to add to the order. This value must be greater than zero.
	Quantity int `json:"quantity"`
	// The title of the custom item.
	Title string `json:"title"`
}

func (OrderStagedChangeAddCustomItem) IsOrderStagedChange() {}

// The discount applied to an item that was added during the current order edit.
type OrderStagedChangeAddLineItemDiscount struct {
	// The description of the discount.
	Description string `json:"description"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The pricing value of the discount.
	Value PricingValue `json:"value"`
}

func (OrderStagedChangeAddLineItemDiscount) IsOrderStagedChange() {}

// A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
// added as part of an order edit.
type OrderStagedChangeAddShippingLine struct {
	// The phone number at the shipping address.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The shipping line's title that is shown to the buyer.
	//
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The price that applies to the shipping line.
	Price *MoneyV2 `json:"price,omitempty"`
	// The title of the shipping line.
	Title *string `json:"title,omitempty,omitempty"`
}

func (OrderStagedChangeAddShippingLine) IsOrderStagedChange() {}

// A change to the order representing the addition of an existing product variant.
type OrderStagedChangeAddVariant struct {
	// The quantity of the product variant that was added.
	Quantity int `json:"quantity"`
	// The product variant that was added.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (OrderStagedChangeAddVariant) IsOrderStagedChange() {}

// An auto-generated type for paginating through multiple OrderStagedChanges.
type OrderStagedChangeConnection struct {
	// A list of edges.
	Edges []OrderStagedChangeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in OrderStagedChangeEdge.
	Nodes []OrderStagedChange `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An removal of items from an existing line item on the order.
type OrderStagedChangeDecrementItem struct {
	// The number of items removed.
	Delta int `json:"delta"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The intention to restock the removed items.
	Restock bool `json:"restock"`
}

func (OrderStagedChangeDecrementItem) IsOrderStagedChange() {}

// An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
type OrderStagedChangeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderStagedChangeEdge.
	Node OrderStagedChange `json:"node"`
}

// An addition of items to an existing line item on the order.
type OrderStagedChangeIncrementItem struct {
	// The number of items added.
	Delta int `json:"delta"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
}

func (OrderStagedChangeIncrementItem) IsOrderStagedChange() {}

// A payment transaction in the context of an order.
type OrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *string `json:"accountNumber,omitempty,omitempty"`
	// The amount of money.
	Amount null.String `json:"amount"`
	// The amount and currency of the transaction in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The amount and currency of the transaction.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Authorization code associated with the transaction.
	AuthorizationCode *string `json:"authorizationCode,omitempty,omitempty"`
	// The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
	//
	AuthorizationExpiresAt *string `json:"authorizationExpiresAt,omitempty,omitempty"`
	// Date and time when the transaction was created.
	CreatedAt string `json:"createdAt"`
	// A standardized error code, independent of the payment provider.
	ErrorCode *OrderTransactionErrorCode `json:"errorCode,omitempty,omitempty"`
	// The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
	//
	Fees []TransactionFee `json:"fees,omitempty"`
	// The human-readable payment gateway name used to process the transaction.
	FormattedGateway *string `json:"formattedGateway,omitempty,omitempty"`
	// The payment gateway used to process the transaction.
	Gateway *string `json:"gateway,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind"`
	// Whether the transaction can be manually captured.
	ManuallyCapturable bool `json:"manuallyCapturable"`
	// Specifies the available amount to refund on the gateway.
	// This value is only available for transactions of type `SuggestedRefund`.
	//
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty,omitempty"`
	// Specifies the available amount with currency to refund on the gateway.
	// This value is only available for transactions of type `SuggestedRefund`.
	//
	MaximumRefundableV2 *MoneyV2 `json:"maximumRefundableV2,omitempty,omitempty"`
	// The associated order.
	Order *Order `json:"order,omitempty,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty,omitempty"`
	// The payment details for the transaction.
	PaymentDetails PaymentDetails `json:"paymentDetails,omitempty"`
	// The payment icon to display for the transaction.
	PaymentIcon *Image `json:"paymentIcon,omitempty,omitempty"`
	// The payment ID associated with the transaction.
	PaymentID *string `json:"paymentId,omitempty,omitempty"`
	// The payment method used for the transaction. This value is `null` if the payment method is unknown.
	PaymentMethod *PaymentMethods `json:"paymentMethod,omitempty,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *string `json:"processedAt,omitempty,omitempty"`
	// The transaction receipt that the payment gateway attaches to the transaction.
	// The value of this field depends on which payment gateway processed the transaction.
	//
	Receipt *string `json:"receipt,omitempty,omitempty"`
	// The transaction receipt that the payment gateway attaches to the transaction.
	// The value of this field depends on which payment gateway processed the transaction.
	//
	ReceiptJSON *string `json:"receiptJson,omitempty,omitempty"`
	// The settlement currency.
	SettlementCurrency *CurrencyCode `json:"settlementCurrency,omitempty,omitempty"`
	// The rate used when converting the transaction amount to settlement currency.
	SettlementCurrencyRate *null.String `json:"settlementCurrencyRate,omitempty,omitempty"`
	// Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
	//
	ShopifyPaymentsSet *ShopifyPaymentsTransactionSet `json:"shopifyPaymentsSet,omitempty,omitempty"`
	// The status of this transaction.
	Status OrderTransactionStatus `json:"status"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test"`
	// Specifies the available amount to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettled *null.String `json:"totalUnsettled,omitempty,omitempty"`
	// Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettledSet *MoneyBag `json:"totalUnsettledSet,omitempty,omitempty"`
	// Specifies the available amount with currency to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	//
	TotalUnsettledV2 *MoneyV2 `json:"totalUnsettledV2,omitempty,omitempty"`
	// Staff member who was logged into the Shopify POS device when the transaction was processed.
	User *StaffMember `json:"user,omitempty,omitempty"`
}

func (OrderTransaction) IsNode() {}

// A globally-unique ID.
func (this OrderTransaction) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple OrderTransactions.
type OrderTransactionConnection struct {
	// A list of edges.
	Edges []OrderTransactionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in OrderTransactionEdge.
	Nodes []OrderTransaction `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one OrderTransaction and a cursor during pagination.
type OrderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of OrderTransactionEdge.
	Node *OrderTransaction `json:"node,omitempty"`
}

// The input fields for the information needed to create an order transaction.
type OrderTransactionInput struct {
	// The amount of money for this transaction.
	Amount null.String `json:"amount"`
	// The payment gateway to use for this transaction.
	Gateway string `json:"gateway"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind"`
	// The ID of the order associated with the transaction.
	OrderID string `json:"orderId"`
	// The ID of the optional parent transaction, for example the authorization of a capture.
	ParentID *string `json:"parentId,omitempty,omitempty"`
}

// Return type for `orderUpdate` mutation.
type OrderUpdatePayload struct {
	// The updated order.
	Order *Order `json:"order,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Returns information about pagination in a connection, in accordance with the
// [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
// For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
type PageInfo struct {
	// The cursor corresponding to the last node in edges.
	EndCursor *string `json:"endCursor,omitempty,omitempty"`
	// Whether there are more pages to fetch following the current page.
	HasNextPage bool `json:"hasNextPage"`
	// Whether there are any pages prior to the current page.
	HasPreviousPage bool `json:"hasPreviousPage"`
	// The cursor corresponding to the first node in edges.
	StartCursor *string `json:"startCursor,omitempty,omitempty"`
}

// A ShopifyQL parsing error.
type ParseError struct {
	// An error code for the error.
	Code ParseErrorCode `json:"code"`
	// The description of the parsing error.
	Message string `json:"message"`
	// The start and end range for the error.
	Range *ParseErrorRange `json:"range,omitempty,omitempty"`
}

// A range of ShopifyQL parsing errors.
type ParseErrorRange struct {
	// The ending position of the error.
	End *ErrorPosition `json:"end,omitempty"`
	// The starting position of the error.
	Start *ErrorPosition `json:"start,omitempty"`
}

// A payment customization.
type PaymentCustomization struct {
	// The enabled status of the payment customization.
	Enabled bool `json:"enabled"`
	// The error history on the most recent version of the payment customization.
	ErrorHistory *FunctionsErrorHistory `json:"errorHistory,omitempty,omitempty"`
	// The ID of the Shopify Function implementing the payment customization.
	FunctionID string `json:"functionId"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The Shopify Function implementing the payment customization.
	ShopifyFunction *ShopifyFunction `json:"shopifyFunction,omitempty"`
	// The title of the payment customization.
	Title string `json:"title"`
}

func (PaymentCustomization) IsMetafieldReferencer() {}

func (PaymentCustomization) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this PaymentCustomization) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (PaymentCustomization) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this PaymentCustomization) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this PaymentCustomization) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this PaymentCustomization) GetPrivateMetafield() *PrivateMetafield {
	return this.PrivateMetafield
}

// List of private metafields that belong to the resource.
func (this PaymentCustomization) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (PaymentCustomization) IsNode() {}

// A globally-unique ID.
func (this PaymentCustomization) GetID() string { return this.ID }

// Return type for `paymentCustomizationActivation` mutation.
type PaymentCustomizationActivationPayload struct {
	// The IDs of the updated payment customizations.
	Ids []string `json:"ids,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentCustomizationError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple PaymentCustomizations.
type PaymentCustomizationConnection struct {
	// A list of edges.
	Edges []PaymentCustomizationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PaymentCustomizationEdge.
	Nodes []PaymentCustomization `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `paymentCustomizationCreate` mutation.
type PaymentCustomizationCreatePayload struct {
	// Returns the created payment customization.
	PaymentCustomization *PaymentCustomization `json:"paymentCustomization,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentCustomizationError `json:"userErrors,omitempty"`
}

// Return type for `paymentCustomizationDelete` mutation.
type PaymentCustomizationDeletePayload struct {
	// Returns the deleted payment customization ID.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentCustomizationError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PaymentCustomization and a cursor during pagination.
type PaymentCustomizationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PaymentCustomizationEdge.
	Node *PaymentCustomization `json:"node,omitempty"`
}

// An error that occurs during the execution of a payment customization mutation.
type PaymentCustomizationError struct {
	// The error code.
	Code *PaymentCustomizationErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentCustomizationError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PaymentCustomizationError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PaymentCustomizationError) GetMessage() string { return this.Message }

// The input fields to create and update a payment customization.
type PaymentCustomizationInput struct {
	// The ID of the function providing the payment customization.
	FunctionID *string `json:"functionId,omitempty,omitempty"`
	// The title of the payment customization.
	Title *string `json:"title,omitempty,omitempty"`
	// The enabled status of the payment customization.
	Enabled *bool `json:"enabled,omitempty,omitempty"`
	// Additional metafields to associate to the payment customization.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
}

// Return type for `paymentCustomizationUpdate` mutation.
type PaymentCustomizationUpdatePayload struct {
	// Returns the updated payment customization.
	PaymentCustomization *PaymentCustomization `json:"paymentCustomization,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentCustomizationError `json:"userErrors,omitempty"`
}

// A payment instrument and the permission
// the owner of the instrument gives to the merchant to debit it.
type PaymentMandate struct {
	// The unique ID of a payment mandate.
	ID string `json:"id"`
	// The outputs details of the payment instrument.
	PaymentInstrument PaymentInstrument `json:"paymentInstrument"`
}

func (PaymentMandate) IsNode() {}

// A globally-unique ID.
func (this PaymentMandate) GetID() string { return this.ID }

// Return type for `paymentReminderSend` mutation.
type PaymentReminderSendPayload struct {
	// Whether the payment reminder email was successfully sent.
	Success *bool `json:"success,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentReminderSendUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentReminderSend`.
type PaymentReminderSendUserError struct {
	// The error code.
	Code *PaymentReminderSendUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentReminderSendUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PaymentReminderSendUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PaymentReminderSendUserError) GetMessage() string { return this.Message }

// Represents the payment schedule for a single payment defined in the payment terms.
type PaymentSchedule struct {
	// Amount owed for this payment schedule.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Date and time when the payment schedule is paid or fulfilled.
	CompletedAt *string `json:"completedAt,omitempty,omitempty"`
	// Date and time when the payment schedule is due.
	DueAt *string `json:"dueAt,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Date and time when the invoice is sent.
	IssuedAt *string `json:"issuedAt,omitempty,omitempty"`
	// The payment terms the payment schedule belongs to.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
}

func (PaymentSchedule) IsNode() {}

// A globally-unique ID.
func (this PaymentSchedule) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple PaymentSchedules.
type PaymentScheduleConnection struct {
	// A list of edges.
	Edges []PaymentScheduleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PaymentScheduleEdge.
	Nodes []PaymentSchedule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
type PaymentScheduleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PaymentScheduleEdge.
	Node *PaymentSchedule `json:"node,omitempty"`
}

// The input fields used to create a payment schedule for payment terms.
type PaymentScheduleInput struct {
	// Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms.
	IssuedAt *string `json:"issuedAt,omitempty,omitempty"`
	// Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms.
	DueAt *string `json:"dueAt,omitempty,omitempty"`
}

// Settings related to payments.
type PaymentSettings struct {
	// List of the digital wallets which the shop supports.
	SupportedDigitalWallets []DigitalWallet `json:"supportedDigitalWallets,omitempty"`
}

// Represents the payment terms for an order or draft order.
type PaymentTerms struct {
	// The draft order associated with the payment terms.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// Duration of payment terms in days based on the payment terms template used to create the payment terms.
	//
	DueInDays *int `json:"dueInDays,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The order associated with the payment terms.
	Order *Order `json:"order,omitempty,omitempty"`
	// Whether the payment terms have overdue payment schedules.
	Overdue bool `json:"overdue"`
	// List of schedules for the payment terms.
	PaymentSchedules *PaymentScheduleConnection `json:"paymentSchedules,omitempty"`
	// The name of the payment terms template used to create the payment terms.
	PaymentTermsName string `json:"paymentTermsName"`
	// The payment terms template type used to create the payment terms.
	PaymentTermsType PaymentTermsType `json:"paymentTermsType"`
	// The payment terms name, translated into the shop admin's preferred language.
	TranslatedName string `json:"translatedName"`
}

func (PaymentTerms) IsNode() {}

// A globally-unique ID.
func (this PaymentTerms) GetID() string { return this.ID }

// The input fields used to create a payment terms.
type PaymentTermsCreateInput struct {
	// Specifies the payment terms template ID used to generate payment terms.
	PaymentTermsTemplateID string `json:"paymentTermsTemplateId"`
	// Specifies the payment schedules for the payment terms.
	PaymentSchedules []PaymentScheduleInput `json:"paymentSchedules,omitempty,omitempty"`
}

// Return type for `paymentTermsCreate` mutation.
type PaymentTermsCreatePayload struct {
	// The created payment terms.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsCreate`.
type PaymentTermsCreateUserError struct {
	// The error code.
	Code *PaymentTermsCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PaymentTermsCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PaymentTermsCreateUserError) GetMessage() string { return this.Message }

// The input fields used to delete the payment terms.
type PaymentTermsDeleteInput struct {
	// The ID of the payment terms being deleted.
	PaymentTermsID string `json:"paymentTermsId"`
}

// Return type for `paymentTermsDelete` mutation.
type PaymentTermsDeletePayload struct {
	// The deleted payment terms ID.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsDelete`.
type PaymentTermsDeleteUserError struct {
	// The error code.
	Code *PaymentTermsDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PaymentTermsDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PaymentTermsDeleteUserError) GetMessage() string { return this.Message }

// The input fields used to create a payment terms.
type PaymentTermsInput struct {
	// Specifies the payment terms template ID used to generate payment terms.
	PaymentTermsTemplateID *string `json:"paymentTermsTemplateId,omitempty,omitempty"`
	// Specifies the payment schedules for the payment terms.
	PaymentSchedules []PaymentScheduleInput `json:"paymentSchedules,omitempty,omitempty"`
}

// Represents the payment terms template object.
type PaymentTermsTemplate struct {
	// The description of the payment terms template.
	Description string `json:"description"`
	// The number of days between the issued date and due date if this is the net type of payment terms.
	DueInDays *int `json:"dueInDays,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the payment terms template.
	Name string `json:"name"`
	// The type of the payment terms template.
	PaymentTermsType PaymentTermsType `json:"paymentTermsType"`
	// The translated payment terms template name.
	TranslatedName string `json:"translatedName"`
}

func (PaymentTermsTemplate) IsNode() {}

// A globally-unique ID.
func (this PaymentTermsTemplate) GetID() string { return this.ID }

// The input fields used to update the payment terms.
type PaymentTermsUpdateInput struct {
	// The ID of the payment terms being updated.
	PaymentTermsID string `json:"paymentTermsId"`
	// The attributes used to update the payment terms.
	PaymentTermsAttributes *PaymentTermsInput `json:"paymentTermsAttributes,omitempty"`
}

// Return type for `paymentTermsUpdate` mutation.
type PaymentTermsUpdatePayload struct {
	// The updated payment terms.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PaymentTermsUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `PaymentTermsUpdate`.
type PaymentTermsUpdateUserError struct {
	// The error code.
	Code *PaymentTermsUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PaymentTermsUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PaymentTermsUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PaymentTermsUpdateUserError) GetMessage() string { return this.Message }

// A PolarisViz data point structure for ShopifyQL query.
type PolarisVizDataPoint struct {
	// The data key. Typically a category, dimension, or other qualitative data.
	Key string `json:"key"`
	// The data value is numeric and quantitative.
	Value *string `json:"value,omitempty,omitempty"`
}

// The data series used for PolarisViz visualization.
type PolarisVizDataSeries struct {
	// An array of data points.
	Data []PolarisVizDataPoint `json:"data,omitempty"`
	// Whether the series represents comparison data.
	IsComparison bool `json:"isComparison"`
	// The name of the series.
	Name string `json:"name"`
}

// A PolarisViz response to a ShopifyQL query.
type PolarisVizResponse struct {
	// The PolarisViz visualization of data.
	Data []PolarisVizDataSeries `json:"data,omitempty"`
	// A list of parse errors, if parsing fails.
	ParseErrors []ParseError `json:"parseErrors,omitempty,omitempty"`
	// The result in a tabular format with schema and row data.
	// It's always present even if query has a `VISUALIZE` keyword.
	TableData *TableData `json:"tableData,omitempty,omitempty"`
	// The type of visualization. For example, a line chart.
	VizType VisualizationType `json:"vizType"`
}

func (PolarisVizResponse) IsShopifyqlResponse() {}

// A list of parse errors, if parsing fails.
func (this PolarisVizResponse) GetParseErrors() []ParseError {
	if this.ParseErrors == nil {
		return nil
	}
	interfaceSlice := make([]ParseError, 0, len(this.ParseErrors))
	for _, concrete := range this.ParseErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The result in a tabular format with schema and row data.
// To be used as a raw 2-dimensional response of the query.
// It's always present even if query has a `VISUALIZE` keyword.
func (this PolarisVizResponse) GetTableData() *TableData { return this.TableData }

// The input fields used to include the line items of a specified fulfillment order that should be marked as prepared for pickup by a customer.
type PreparedFulfillmentOrderLineItemsInput struct {
	// The ID of the fulfillment order.
	FulfillmentOrderID string `json:"fulfillmentOrderId"`
}

// The input fields for updating the price of a parent product variant.
type PriceInput struct {
	// The specific type of calculation done to determine the price of the parent variant.
	// The price is calculated during Bundle creation. Updating a component variant will not recalculate the price.
	//
	Calculation *PriceCalculationType `json:"calculation,omitempty,omitempty"`
	// The price of the parent product variant. This will be be used if calcualtion is set to 'FIXED'.
	Price *null.String `json:"price,omitempty,omitempty"`
}

// Represents a price list, including information about related prices and eligibility rules.
// You can use price lists to specify either fixed prices or adjusted relative prices that
// override initial product variant prices. Price lists are applied to customers
// using context rules, which determine price list eligibility.
//
//	For more information on price lists, refer to
//	[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
type PriceList struct {
	// The catalog that the price list is associated with.
	Catalog Catalog `json:"catalog,omitempty"`
	// The currency for fixed prices associated with this price list.
	Currency CurrencyCode `json:"currency"`
	// The number of fixed prices on the price list.
	FixedPricesCount int `json:"fixedPricesCount"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The unique name of the price list, used as a human-readable identifier.
	Name string `json:"name"`
	// Relative adjustments to other prices.
	Parent *PriceListParent `json:"parent,omitempty,omitempty"`
	// A list of prices associated with the price list.
	Prices *PriceListPriceConnection `json:"prices,omitempty"`
	// A list of quantity rules associated with the price list, ordered by product variants.
	QuantityRules *QuantityRuleConnection `json:"quantityRules,omitempty"`
}

func (PriceList) IsNode() {}

// A globally-unique ID.
func (this PriceList) GetID() string { return this.ID }

// The type and value of a price list adjustment.
//
// For more information on price lists, refer to
// [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
type PriceListAdjustment struct {
	// The type of price adjustment, such as percentage increase or decrease.
	Type PriceListAdjustmentType `json:"type"`
	// The value of price adjustment, where positive numbers reduce the prices and negative numbers
	// increase them.
	//
	Value float64 `json:"value"`
}

// The input fields to set a price list adjustment.
type PriceListAdjustmentInput struct {
	// The value of the price adjustment as specified by the `type`.
	Value float64 `json:"value"`
	// The type of price adjustment, such as percentage increase or decrease.
	Type PriceListAdjustmentType `json:"type"`
}

// Represents the settings of price list adjustments.
type PriceListAdjustmentSettings struct {
	// The type of price list adjustment setting for compare at price.
	CompareAtMode PriceListCompareAtMode `json:"compareAtMode"`
}

// The input fields to set a price list's adjustment settings.
type PriceListAdjustmentSettingsInput struct {
	// Determines how adjustments are applied to compare at prices.
	CompareAtMode PriceListCompareAtMode `json:"compareAtMode"`
}

// An auto-generated type for paginating through multiple PriceLists.
type PriceListConnection struct {
	// A list of edges.
	Edges []PriceListEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PriceListEdge.
	Nodes []PriceList `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields to create a price list.
type PriceListCreateInput struct {
	// The unique name of the price list, used as a human-readable identifier.
	Name string `json:"name"`
	// Three letter currency code for fixed prices associated with this price list.
	Currency CurrencyCode `json:"currency"`
	// Relative adjustments to other prices.
	Parent *PriceListParentCreateInput `json:"parent,omitempty"`
	// The ID of the catalog to associate with this price list.If the catalog was already associated with another price list then it will be unlinked.
	CatalogID *string `json:"catalogId,omitempty,omitempty"`
}

// Return type for `priceListCreate` mutation.
type PriceListCreatePayload struct {
	// The newly created price list.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// Return type for `priceListDelete` mutation.
type PriceListDeletePayload struct {
	// The ID of the deleted price list.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceList and a cursor during pagination.
type PriceListEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceListEdge.
	Node *PriceList `json:"node,omitempty"`
}

// Return type for `priceListFixedPricesAdd` mutation.
type PriceListFixedPricesAddPayload struct {
	// The list of fixed prices that were added to or updated in the price list.
	Prices []PriceListPrice `json:"prices,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListPriceUserError `json:"userErrors,omitempty"`
}

// Error codes for failed price list fixed prices by product bulk update operations.
type PriceListFixedPricesByProductBulkUpdateUserError struct {
	// The error code.
	Code *PriceListFixedPricesByProductBulkUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceListFixedPricesByProductBulkUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PriceListFixedPricesByProductBulkUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PriceListFixedPricesByProductBulkUpdateUserError) GetMessage() string { return this.Message }

// Return type for `priceListFixedPricesByProductUpdate` mutation.
type PriceListFixedPricesByProductUpdatePayload struct {
	// The price list for which the fixed prices were modified.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// The product for which the fixed prices were added.
	PricesToAddProducts []Product `json:"pricesToAddProducts,omitempty,omitempty"`
	// The product for which the fixed prices were deleted.
	PricesToDeleteProducts []Product `json:"pricesToDeleteProducts,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListFixedPricesByProductBulkUpdateUserError `json:"userErrors,omitempty"`
}

// Return type for `priceListFixedPricesDelete` mutation.
type PriceListFixedPricesDeletePayload struct {
	// A list of product variant IDs whose fixed prices were removed from the price list.
	DeletedFixedPriceVariantIds []string `json:"deletedFixedPriceVariantIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListPriceUserError `json:"userErrors,omitempty"`
}

// Return type for `priceListFixedPricesUpdate` mutation.
type PriceListFixedPricesUpdatePayload struct {
	// A list of deleted variant IDs for prices.
	DeletedFixedPriceVariantIds []string `json:"deletedFixedPriceVariantIds,omitempty,omitempty"`
	// The price list for which the fixed prices were modified.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// The prices that were added to the price list.
	PricesAdded []PriceListPrice `json:"pricesAdded,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListPriceUserError `json:"userErrors,omitempty"`
}

// Represents relative adjustments from one price list to other prices.
//
//	You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
//	adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
//
//	[Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
//	support both percentage increases and decreases.
type PriceListParent struct {
	// A price list adjustment.
	Adjustment *PriceListAdjustment `json:"adjustment,omitempty"`
	// A price list's settings for adjustment.
	Settings *PriceListAdjustmentSettings `json:"settings,omitempty"`
}

// The input fields to create a price list adjustment.
type PriceListParentCreateInput struct {
	// The relative adjustments to other prices.
	Adjustment *PriceListAdjustmentInput `json:"adjustment,omitempty"`
	// The price list adjustment settings.
	Settings *PriceListAdjustmentSettingsInput `json:"settings,omitempty,omitempty"`
}

// The input fields used to update a price list's adjustment.
type PriceListParentUpdateInput struct {
	// The relative adjustments to other prices..
	Adjustment *PriceListAdjustmentInput `json:"adjustment,omitempty"`
	// The price list adjustment settings.
	Settings *PriceListAdjustmentSettingsInput `json:"settings,omitempty,omitempty"`
}

// Represents information about pricing for a product variant
// as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
type PriceListPrice struct {
	// The compare-at price of the product variant on this price list.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty,omitempty"`
	// The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
	//
	OriginType PriceListPriceOriginType `json:"originType"`
	// The price of the product variant on this price list.
	Price *MoneyV2 `json:"price,omitempty"`
	// The product variant associated with this price.
	Variant *ProductVariant `json:"variant,omitempty"`
}

// An auto-generated type for paginating through multiple PriceListPrices.
type PriceListPriceConnection struct {
	// A list of edges.
	Edges []PriceListPriceEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PriceListPriceEdge.
	Nodes []PriceListPrice `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one PriceListPrice and a cursor during pagination.
type PriceListPriceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceListPriceEdge.
	Node *PriceListPrice `json:"node,omitempty"`
}

// The input fields for providing the fields and values to use when creating or updating a fixed price list price.
type PriceListPriceInput struct {
	// The product variant ID associated with the price list price.
	VariantID string `json:"variantId"`
	// The price of the product variant on this price list.
	Price *MoneyInput `json:"price,omitempty"`
	// The compare-at price of the product variant on this price list.
	CompareAtPrice *MoneyInput `json:"compareAtPrice,omitempty,omitempty"`
}

// An error for a failed price list price operation.
type PriceListPriceUserError struct {
	// The error code.
	Code *PriceListPriceUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceListPriceUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PriceListPriceUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PriceListPriceUserError) GetMessage() string { return this.Message }

// The input fields representing the price for all variants of a product.
type PriceListProductPriceInput struct {
	// Specifies the ID of the product to update its variants for.
	ProductID string `json:"productId"`
	// The price of the product to use for all variants with its currency.
	Price *MoneyInput `json:"price,omitempty"`
}

// The input fields used to update a price list.
type PriceListUpdateInput struct {
	// The unique name of the price list, used as a human-readable identifier.
	Name *string `json:"name,omitempty,omitempty"`
	// The three-letter currency code for fixed prices associated with this price list.
	Currency *CurrencyCode `json:"currency,omitempty,omitempty"`
	// Relative adjustments to other prices.
	Parent *PriceListParentUpdateInput `json:"parent,omitempty,omitempty"`
	// The ID of the catalog to associate with this price list.
	CatalogID *string `json:"catalogId,omitempty,omitempty"`
}

// Return type for `priceListUpdate` mutation.
type PriceListUpdatePayload struct {
	// The updated price list.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PriceListUserError `json:"userErrors,omitempty"`
}

// Error codes for failed contextual pricing operations.
type PriceListUserError struct {
	// The error code.
	Code *PriceListUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceListUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PriceListUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PriceListUserError) GetMessage() string { return this.Message }

// Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
//
// We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
type PriceRule struct {
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod PriceRuleAllocationMethod `json:"allocationMethod"`
	// The application that created the price rule.
	App *App `json:"app,omitempty,omitempty"`
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWith `json:"combinesWith,omitempty"`
	// The date and time when the price rule was created.
	CreatedAt string `json:"createdAt"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelection `json:"customerSelection,omitempty"`
	// The class of the discount for combining purposes.
	DiscountClass DiscountClass `json:"discountClass"`
	// List of the price rule's discount codes.
	DiscountCodes *PriceRuleDiscountCodeConnection `json:"discountCodes,omitempty"`
	// How many discount codes associated with the price rule.
	DiscountCodesCount int `json:"discountCodesCount"`
	// The date and time when the price rule ends. For open-ended price rules, use `null`.
	EndsAt *string `json:"endsAt,omitempty,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	EntitlementToPrerequisiteQuantityRatio *PriceRuleEntitlementToPrerequisiteQuantityRatio `json:"entitlementToPrerequisiteQuantityRatio,omitempty,omitempty"`
	// The paginated list of events associated with the price rule.
	Events *EventConnection `json:"events,omitempty"`
	// A list of the price rule's features.
	Features []PriceRuleFeature `json:"features,omitempty"`
	// Indicates whether there are any timeline comments on the price rule.
	HasTimelineComment bool `json:"hasTimelineComment"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlements `json:"itemEntitlements,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleLineItemPrerequisites `json:"itemPrerequisites,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer bool `json:"oncePerCustomer"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRange `json:"prerequisiteQuantityRange,omitempty,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRange `json:"prerequisiteShippingPriceRange,omitempty,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRange `json:"prerequisiteSubtotalRange,omitempty,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatio `json:"prerequisiteToEntitlementQuantityRatio,omitempty,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []PriceRuleShareableURL `json:"shareableUrls,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingLineEntitlements `json:"shippingEntitlements,omitempty"`
	// The date and time when the price rule starts.
	StartsAt string `json:"startsAt"`
	// The status of the price rule.
	Status PriceRuleStatus `json:"status"`
	// A detailed summary of the price rule.
	Summary *string `json:"summary,omitempty,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target PriceRuleTarget `json:"target"`
	// The title of the price rule.
	Title string `json:"title"`
	// The total sales from orders where the price rule was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty,omitempty"`
	// A list of the price rule's features.
	Traits []PriceRuleTrait `json:"traits,omitempty"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// A time period during which a price rule is applicable.
	ValidityPeriod *PriceRuleValidityPeriod `json:"validityPeriod,omitempty"`
	// The value of the price rule.
	Value PriceRuleValue `json:"value"`
	// The value of the price rule.
	ValueV2 PricingValue `json:"valueV2"`
}

func (PriceRule) IsCommentEventSubject() {}

// Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
func (this PriceRule) GetHasTimelineComment() bool { return this.HasTimelineComment }

// A globally-unique ID.
func (this PriceRule) GetID() string { return this.ID }

func (PriceRule) IsHasEvents() {}

// The paginated list of events associated with the host subject.
func (this PriceRule) GetEvents() *EventConnection { return this.Events }

func (PriceRule) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this PriceRule) GetLegacyResourceID() string { return this.LegacyResourceID }

func (PriceRule) IsNode() {}

// A globally-unique ID.

// Return type for `priceRuleActivate` mutation.
type PriceRuleActivatePayload struct {
	// The activated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple PriceRules.
type PriceRuleConnection struct {
	// A list of edges.
	Edges []PriceRuleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PriceRuleEdge.
	Nodes []PriceRule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleCreate` mutation.
type PriceRuleCreatePayload struct {
	// The newly created price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A selection of customers for whom the price rule applies.
type PriceRuleCustomerSelection struct {
	// List of customers to whom the price rule applies.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// Whether the price rule applies to all customers.
	ForAllCustomers bool `json:"forAllCustomers"`
	// A list of customer segments that contain the customers who can use the price rule.
	Segments []Segment `json:"segments,omitempty"`
}

// The input fields to update a price rule customer selection.
type PriceRuleCustomerSelectionInput struct {
	// Whether the price rule applies to all customers.
	ForAllCustomers *bool `json:"forAllCustomers,omitempty,omitempty"`
	// List of customer segments that contain the customers to whom the price rule applies. No single customer IDs may be present.
	SegmentIds []string `json:"segmentIds,omitempty,omitempty"`
	// List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
	CustomerIdsToAdd []string `json:"customerIdsToAdd,omitempty,omitempty"`
	// A list of customers to remove from the current list of customers to whom the price rule applies.
	CustomerIdsToRemove []string `json:"customerIdsToRemove,omitempty,omitempty"`
}

// Return type for `priceRuleDeactivate` mutation.
type PriceRuleDeactivatePayload struct {
	// The deactivated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `priceRuleDelete` mutation.
type PriceRuleDeletePayload struct {
	// The ID price of the deleted price rule.
	DeletedPriceRuleID *string `json:"deletedPriceRuleId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The shop of the deleted price rule.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A discount code of a price rule.
type PriceRuleDiscountCode struct {
	// The application that created the discount code.
	App *App `json:"app,omitempty,omitempty"`
	// The code to apply the discount.
	Code string `json:"code"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount"`
}

func (PriceRuleDiscountCode) IsNode() {}

// A globally-unique ID.
func (this PriceRuleDiscountCode) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
type PriceRuleDiscountCodeConnection struct {
	// A list of edges.
	Edges []PriceRuleDiscountCodeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PriceRuleDiscountCodeEdge.
	Nodes []PriceRuleDiscountCode `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleDiscountCodeCreate` mutation.
type PriceRuleDiscountCodeCreatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
type PriceRuleDiscountCodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceRuleDiscountCodeEdge.
	Node *PriceRuleDiscountCode `json:"node,omitempty"`
}

// The input fields to manipulate a discount code.
type PriceRuleDiscountCodeInput struct {
	// The code to use the discount.
	Code *string `json:"code,omitempty,omitempty"`
}

// Return type for `priceRuleDiscountCodeUpdate` mutation.
type PriceRuleDiscountCodeUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRule and a cursor during pagination.
type PriceRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PriceRuleEdge.
	Node *PriceRule `json:"node,omitempty"`
}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatio struct {
	// The quantity of entitled items in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity"`
	// The quantity of prerequisite items in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatioInput struct {
	// The quantity of entitled items in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty,omitempty"`
	// The quantity of prerequisite items in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty,omitempty"`
}

// The value of a fixed amount price rule.
type PriceRuleFixedAmountValue struct {
	// The monetary value of the price rule.
	Amount null.String `json:"amount"`
}

func (PriceRuleFixedAmountValue) IsPriceRuleValue() {}

// The input fields to manipulate a price rule.
type PriceRuleInput struct {
	// Determines which discount classes the discount can combine with.
	CombinesWith *DiscountCombinesWithInput `json:"combinesWith,omitempty,omitempty"`
	// PriceRuleValidityPeriod for the price rule.
	ValidityPeriod *PriceRuleValidityPeriodInput `json:"validityPeriod,omitempty,omitempty"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer *bool `json:"oncePerCustomer,omitempty,omitempty"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelectionInput `json:"customerSelection,omitempty,omitempty"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty,omitempty"`
	// Title of the price rule.
	Title *string `json:"title,omitempty,omitempty"`
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod *PriceRuleAllocationMethod `json:"allocationMethod,omitempty,omitempty"`
	// The value of the price rule.
	Value *PriceRuleValueInput `json:"value,omitempty,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target *PriceRuleTarget `json:"target,omitempty,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRangeInput `json:"prerequisiteSubtotalRange,omitempty,omitempty"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRangeInput `json:"prerequisiteQuantityRange,omitempty,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRangeInput `json:"prerequisiteShippingPriceRange,omitempty,omitempty"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlementsInput `json:"itemEntitlements,omitempty,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleItemPrerequisitesInput `json:"itemPrerequisites,omitempty,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingEntitlementsInput `json:"shippingEntitlements,omitempty,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatioInput `json:"prerequisiteToEntitlementQuantityRatio,omitempty,omitempty"`
}

// The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
type PriceRuleItemEntitlements struct {
	// The collections to which the price rule applies.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products to which the price rule applies.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether the price rule applies to all line items.
	TargetAllLineItems bool `json:"targetAllLineItems"`
}

// The input fields to update a price rule line item entitlement.
type PriceRuleItemEntitlementsInput struct {
	// Whether the price rule applies to all items.
	TargetAllLineItems *bool `json:"targetAllLineItems,omitempty,omitempty"`
	// The products to which the price rule applies.
	ProductIds []string `json:"productIds,omitempty,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariantIds []string `json:"productVariantIds,omitempty,omitempty"`
	// The collections to which the price rule applies.
	CollectionIds []string `json:"collectionIds,omitempty,omitempty"`
}

// The input fields to update a price rule's item prerequisites.
type PriceRuleItemPrerequisitesInput struct {
	// The products needed for the price rule to be applied.
	ProductIds []string `json:"productIds,omitempty,omitempty"`
	// The product variants needed for the price rule to be applied.
	ProductVariantIds []string `json:"productVariantIds,omitempty,omitempty"`
	// The collections needed for the price rule to be applied.
	CollectionIds []string `json:"collectionIds,omitempty,omitempty"`
}

// Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
type PriceRuleLineItemPrerequisites struct {
	// The collections required for the price rule to be applicable.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants required for the price rule to be applicable.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products required for the price rule to be applicable.
	Products *ProductConnection `json:"products,omitempty"`
}

// A money range within which the price rule is applicable.
type PriceRuleMoneyRange struct {
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty,omitempty"`
	// The lower bound or equal of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty,omitempty"`
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty,omitempty"`
	// The upper bound or equal of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty,omitempty"`
}

// The input fields to update the money range within which the price rule is applicable.
type PriceRuleMoneyRangeInput struct {
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty,omitempty"`
	// The upper or equal bound of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty,omitempty"`
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty,omitempty"`
	// The lower or equal bound of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty,omitempty"`
}

// The value of a percent price rule.
type PriceRulePercentValue struct {
	// The percent value of the price rule.
	Percentage float64 `json:"percentage"`
}

func (PriceRulePercentValue) IsPriceRuleValue() {}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatio struct {
	// The quantity of entitled items in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity"`
	// The quantity of prerequisite items in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatioInput struct {
	// The quantity of entitled items in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty,omitempty"`
	// The quantity of prerequisite items in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty,omitempty"`
}

// A quantity range within which the price rule is applicable.
type PriceRuleQuantityRange struct {
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty,omitempty"`
	// The lower bound or equal of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty,omitempty"`
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty,omitempty"`
	// The upper bound or equal of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty,omitempty"`
}

// The input fields to update the quantity range within which the price rule is applicable.
type PriceRuleQuantityRangeInput struct {
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty,omitempty"`
	// The upper or equal bound of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty,omitempty"`
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty,omitempty"`
	// The lower or equal bound of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty,omitempty"`
}

// Shareable URL for the discount code associated with the price rule.
type PriceRuleShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty,omitempty"`
	// The type of page that's associated with the URL.
	TargetType PriceRuleShareableURLTargetType `json:"targetType"`
	// The title of the page that's associated with the URL.
	Title string `json:"title"`
	// The URL for the discount code.
	URL string `json:"url"`
}

// The input fields to update a price rule shipping entitlement.
type PriceRuleShippingEntitlementsInput struct {
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines *bool `json:"targetAllShippingLines,omitempty,omitempty"`
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty,omitempty"`
}

// The shipping lines to which the price rule applies to.
type PriceRuleShippingLineEntitlements struct {
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld"`
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines bool `json:"targetAllShippingLines"`
}

// Return type for `priceRuleUpdate` mutation.
type PriceRuleUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	PriceRuleUserErrors []PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a price rule mutation.
type PriceRuleUserError struct {
	// Error code to uniquely identify the error.
	Code *PriceRuleErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PriceRuleUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PriceRuleUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PriceRuleUserError) GetMessage() string { return this.Message }

// A time period during which a price rule is applicable.
type PriceRuleValidityPeriod struct {
	// The time after which the price rule becomes invalid.
	End *string `json:"end,omitempty,omitempty"`
	// The time after which the price rule is valid.
	Start string `json:"start"`
}

// The input fields to update the validity period of a price rule.
type PriceRuleValidityPeriodInput struct {
	// The time after which the price rule is valid.
	Start string `json:"start"`
	// The time after which the price rule becomes invalid.
	End *string `json:"end,omitempty,omitempty"`
}

// The input fields to update a price rule.
type PriceRuleValueInput struct {
	// The percentage value of the price rule.
	PercentageValue *float64 `json:"percentageValue,omitempty,omitempty"`
	// The fixed amount value of the price rule.
	FixedAmountValue *null.String `json:"fixedAmountValue,omitempty,omitempty"`
}

// One type of value given to a customer when a discount is applied to an order.
// The application of a discount with this value gives the customer the specified percentage off a specified item.
type PricingPercentageValue struct {
	// The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
	//
	Percentage float64 `json:"percentage"`
}

func (PricingPercentageValue) IsPricingValue() {}

// Private metafields represent custom metadata that is attached to a resource.
// Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
//
// An application can create a maximum of 10 private metafields per shop resource.
type PrivateMetafield struct {
	// The date and time when the private metafield was created.
	CreatedAt string `json:"createdAt"`
	// The ID of the private metafield.
	ID string `json:"id"`
	// The key name of the private metafield.
	Key string `json:"key"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The date and time when the private metafield was updated.
	UpdatedAt string `json:"updatedAt"`
	// The value of a private metafield.
	Value string `json:"value"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType"`
}

func (PrivateMetafield) IsNode() {}

// A globally-unique ID.
func (this PrivateMetafield) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple PrivateMetafields.
type PrivateMetafieldConnection struct {
	// A list of edges.
	Edges []PrivateMetafieldEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PrivateMetafieldEdge.
	Nodes []PrivateMetafield `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for the private metafield to delete.
type PrivateMetafieldDeleteInput struct {
	// The ID of the resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
	Owner *string `json:"owner,omitempty,omitempty"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The key of the private metafield.
	Key string `json:"key"`
}

// Return type for `privateMetafieldDelete` mutation.
type PrivateMetafieldDeletePayload struct {
	// The ID of private metafield that was deleted.
	DeletedPrivateMetafieldID *string `json:"deletedPrivateMetafieldId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
type PrivateMetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PrivateMetafieldEdge.
	Node *PrivateMetafield `json:"node,omitempty"`
}

// The input fields for a private metafield.
type PrivateMetafieldInput struct {
	// The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
	Owner *string `json:"owner,omitempty,omitempty"`
	// The namespace of the private metafield.
	Namespace string `json:"namespace"`
	// The key of the private metafield.
	Key string `json:"key"`
	// The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
	ValueInput *PrivateMetafieldValueInput `json:"valueInput,omitempty"`
}

// Return type for `privateMetafieldUpsert` mutation.
type PrivateMetafieldUpsertPayload struct {
	// The private metafield that was created or updated.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for the value and value type of the private metafield.
type PrivateMetafieldValueInput struct {
	// The value of a private metafield.
	Value string `json:"value"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType"`
}

// The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
type Product struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount"`
	// The description of the product, complete with HTML formatting.
	BodyHTML *string `json:"bodyHtml,omitempty,omitempty"`
	// A list of the collections that include the product.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The pricing that applies for a customer in a given context.
	ContextualPricing *ProductContextualPricing `json:"contextualPricing,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
	//
	CreatedAt string `json:"createdAt"`
	// The custom product type specified by the merchant.
	CustomProductType *string `json:"customProductType,omitempty,omitempty"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// A stripped description of the product, single line with HTML tags removed.
	Description string `json:"description"`
	// The description of the product, complete with HTML formatting.
	DescriptionHTML string `json:"descriptionHtml"`
	// Stripped description of the product, single line with HTML tags removed.
	// Truncated to 60 characters.
	//
	DescriptionPlainSummary string `json:"descriptionPlainSummary"`
	// The featured image for the product.
	FeaturedImage *Image `json:"featuredImage,omitempty,omitempty"`
	// The featured media for the product.
	FeaturedMedia Media `json:"featuredMedia,omitempty"`
	// Information about the product that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *string `json:"giftCardTemplateSuffix,omitempty,omitempty"`
	// A unique human-friendly string of the product's title.
	Handle string `json:"handle"`
	// Whether the product has only a single variant with the default option and value.
	HasOnlyDefaultVariant bool `json:"hasOnlyDefaultVariant"`
	// Whether the product has out of stock variants.
	HasOutOfStockVariants bool `json:"hasOutOfStockVariants"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The images associated with the product.
	Images *ImageConnection `json:"images,omitempty"`
	// Whether the product is in a given collection.
	InCollection bool `json:"inCollection"`
	// Whether the product is a gift card.
	IsGiftCard bool `json:"isGiftCard"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The media associated with the product. This can include images, 3D models, or videos.
	Media *MediaConnection `json:"media,omitempty"`
	// Total count of media belonging to a product.
	MediaCount int `json:"mediaCount"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The online store preview URL.
	OnlineStorePreviewURL *string `json:"onlineStorePreviewUrl,omitempty,omitempty"`
	// The online store URL for the product.
	// A value of `null` indicates that the product is not published to the Online Store sales channel.
	//
	OnlineStoreURL *string `json:"onlineStoreUrl,omitempty,omitempty"`
	// A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
	Options []ProductOption `json:"options,omitempty"`
	// The price range of the product.
	PriceRange *ProductPriceRange `json:"priceRange,omitempty"`
	// The price range of the product with prices formatted as decimals.
	PriceRangeV2 *ProductPriceRangeV2 `json:"priceRangeV2,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The product category specified by the merchant.
	ProductCategory *ProductCategory `json:"productCategory,omitempty,omitempty"`
	// A list of the channels where the product is published.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product type specified by the merchant.
	ProductType string `json:"productType"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount"`
	// A list of the channels where the product is published.
	Publications *ProductPublicationConnection `json:"publications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
	//
	PublishedAt *string `json:"publishedAt,omitempty,omitempty"`
	// Whether or not the product is published for a customer in the given context.
	PublishedInContext bool `json:"publishedInContext"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication"`
	// Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
	RequiresSellingPlan bool `json:"requiresSellingPlan"`
	// The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
	ResourcePublicationOnCurrentPublication *ResourcePublicationV2 `json:"resourcePublicationOnCurrentPublication,omitempty,omitempty"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// Count of selling plan groups associated with the product.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount"`
	// A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// SEO information of the product.
	Seo *Seo `json:"seo,omitempty"`
	// The standardized product type in the Shopify product taxonomy.
	StandardizedProductType *StandardizedProductType `json:"standardizedProductType,omitempty,omitempty"`
	// The product status. This controls visibility across all channels.
	Status ProductStatus `json:"status"`
	// The Storefront GraphQL API ID of the `Product`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// A comma separated list of tags associated with the product. Updating `tags` overwrites
	// any existing tags that were previously added to the product. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	//
	Tags []string `json:"tags,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
	// The title of the product.
	Title string `json:"title"`
	// The quantity of inventory in stock.
	TotalInventory int `json:"totalInventory"`
	// The number of variants that are associated with the product.
	TotalVariants int `json:"totalVariants"`
	// Whether inventory tracking has been enabled for the product.
	TracksInventory bool `json:"tracksInventory"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time when the product was last modified.
	// A product's `updatedAt` value can change for different reasons. For example, if an order
	// is placed for a product that has inventory tracking set up, then the inventory adjustment
	// is counted as an update.
	//
	UpdatedAt string `json:"updatedAt"`
	// A list of variants associated with the product.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
	// The name of the product's vendor.
	Vendor string `json:"vendor"`
}

func (Product) IsCommentEventEmbed() {}

func (Product) IsMetafieldReference() {}

func (Product) IsMetafieldReferencer() {}

func (Product) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this Product) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (Product) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Product) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Product) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Product) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Product) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

func (Product) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this Product) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (Product) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Product) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Product) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this Product) GetDefaultCursor() string { return this.DefaultCursor }

func (Product) IsNode() {}

// A globally-unique ID.
func (this Product) GetID() string { return this.ID }

func (Product) IsOnlineStorePreviewable() {}

// The online store preview URL.
func (this Product) GetOnlineStorePreviewURL() *string { return this.OnlineStorePreviewURL }

func (Product) IsPublishable() {}

// The number of publications a resource is published to without feedback errors.
func (this Product) GetAvailablePublicationCount() int { return this.AvailablePublicationCount }

// The number of publications a resource is published on.
func (this Product) GetPublicationCount() int { return this.PublicationCount }

// Check to see whether the resource is published to a given channel.
func (this Product) GetPublishedOnChannel() bool { return this.PublishedOnChannel }

// Check to see whether the resource is published to the calling app's channel.
func (this Product) GetPublishedOnCurrentChannel() bool { return this.PublishedOnCurrentChannel }

// Check to see whether the resource is published to the calling app's publication.
func (this Product) GetPublishedOnCurrentPublication() bool {
	return this.PublishedOnCurrentPublication
}

// Check to see whether the resource is published to a given publication.
func (this Product) GetPublishedOnPublication() bool { return this.PublishedOnPublication }

// The list of resources that are published to a publication.
func (this Product) GetResourcePublications() *ResourcePublicationConnection {
	return this.ResourcePublications
}

// The list of resources that are either published or staged to be published to a publication.
func (this Product) GetResourcePublicationsV2() *ResourcePublicationV2Connection {
	return this.ResourcePublicationsV2
}

// The list of channels that the resource is not published to.
func (this Product) GetUnpublishedChannels() *ChannelConnection { return this.UnpublishedChannels }

// The list of publications that the resource is not published to.
func (this Product) GetUnpublishedPublications() *PublicationConnection {
	return this.UnpublishedPublications
}

// The input fields for specifying product images to append.
type ProductAppendImagesInput struct {
	// The ID of the product.
	ID string `json:"id"`
	// A list of images to be appended to the product.
	Images []ImageInput `json:"images,omitempty"`
}

// Return type for `productAppendImages` mutation.
type ProductAppendImagesPayload struct {
	// List of new images appended to the product.
	NewImages []Image `json:"newImages,omitempty,omitempty"`
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
type ProductCategory struct {
	// The product taxonomy node associated with the product category.
	ProductTaxonomyNode *ProductTaxonomyNode `json:"productTaxonomyNode,omitempty,omitempty"`
}

// The input fields to use when adding a product category to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
type ProductCategoryInput struct {
	// The ID of the node in the Shopify taxonomy that represents the product category.
	ProductTaxonomyNodeID string `json:"productTaxonomyNodeId"`
}

// Return type for `productChangeStatus` mutation.
type ProductChangeStatusPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductChangeStatusUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductChangeStatus`.
type ProductChangeStatusUserError struct {
	// The error code.
	Code *ProductChangeStatusUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductChangeStatusUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductChangeStatusUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductChangeStatusUserError) GetMessage() string { return this.Message }

// An auto-generated type for paginating through multiple Products.
type ProductConnection struct {
	// A list of edges.
	Edges []ProductEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductEdge.
	Nodes []Product `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The price of a product in a specific country.
// Prices vary between countries.
type ProductContextualPricing struct {
	// The number of fixed quantity rules for the product's variants on the price list.
	FixedQuantityRulesCount int `json:"fixedQuantityRulesCount"`
	// The pricing of the variant with the highest price in the given context.
	MaxVariantPricing *ProductVariantContextualPricing `json:"maxVariantPricing,omitempty,omitempty"`
	// The pricing of the variant with the lowest price in the given context.
	MinVariantPricing *ProductVariantContextualPricing `json:"minVariantPricing,omitempty,omitempty"`
	// The price range of the product with prices formatted as decimals.
	PriceRange *ProductPriceRangeV2 `json:"priceRange,omitempty"`
}

// Return type for `productCreateMedia` mutation.
type ProductCreateMediaPayload struct {
	// The newly created media.
	Media []Media `json:"media,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product associated with the media.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productCreate` mutation.
type ProductCreatePayload struct {
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productDeleteAsync` mutation.
type ProductDeleteAsyncPayload struct {
	// The ID of the product that was requested to be deleted.
	DeleteProductID *string `json:"deleteProductId,omitempty,omitempty"`
	// The background job that will delete the product and its associated variants and media.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductDeleteUserError `json:"userErrors,omitempty"`
}

// Return type for `productDeleteImages` mutation.
type ProductDeleteImagesPayload struct {
	// The array of image IDs to delete.
	DeletedImageIds []string `json:"deletedImageIds,omitempty"`
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for specifying the product to delete.
type ProductDeleteInput struct {
	// The ID of the product.
	ID string `json:"id"`
}

// Return type for `productDeleteMedia` mutation.
type ProductDeleteMediaPayload struct {
	// List of media IDs which were deleted.
	DeletedMediaIds []string `json:"deletedMediaIds,omitempty,omitempty"`
	// List of product image IDs which were deleted.
	DeletedProductImageIds []string `json:"deletedProductImageIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product associated with the deleted media.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productDelete` mutation.
type ProductDeletePayload struct {
	// The ID of the deleted product.
	DeletedProductID *string `json:"deletedProductId,omitempty,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An error that occurred while setting the activation status of an inventory item.
type ProductDeleteUserError struct {
	// The error code.
	Code *ProductDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductDeleteUserError) GetMessage() string { return this.Message }

// The input fields for the product async duplicate mutation.
type ProductDuplicateAsyncInput struct {
	// The ID of the product to be duplicated.
	ProductID string `json:"productId"`
	// The new title of the product.
	NewTitle string `json:"newTitle"`
	// The new status of the product. If no value is provided the status will be inherited from the original product.
	NewStatus *ProductStatus `json:"newStatus,omitempty,omitempty"`
	// Specifies whether or not to duplicate images.
	IncludeImages *bool `json:"includeImages,omitempty,omitempty"`
}

// Return type for `productDuplicateAsync` mutation.
type ProductDuplicateAsyncPayload struct {
	// The duplicated product ID.
	DuplicatedProductID *string `json:"duplicatedProductId,omitempty,omitempty"`
	// The asynchronous job for duplicating the products.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductDuplicateUserError `json:"userErrors,omitempty"`
}

// Return type for `productDuplicateAsyncV2` mutation.
type ProductDuplicateAsyncV2Payload struct {
	// The duplicated product ID.
	DuplicatedProductID *string `json:"duplicatedProductId,omitempty,omitempty"`
	// The asynchronous job for duplicating the product.
	ProductDuplicateJobID *string `json:"productDuplicateJobId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductDuplicateUserError `json:"userErrors,omitempty"`
}

// Represents a product duplication job.
type ProductDuplicateJob struct {
	// This indicates if the job is still queued or has been run.
	Done bool `json:"done"`
	// A globally-unique ID that's returned when running an asynchronous mutation.
	ID string `json:"id"`
}

// Return type for `productDuplicate` mutation.
type ProductDuplicatePayload struct {
	// The asynchronous job that duplicates the product images.
	ImageJob *Job `json:"imageJob,omitempty,omitempty"`
	// The duplicated product.
	NewProduct *Product `json:"newProduct,omitempty,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An error that occurred while duplicating the product.
type ProductDuplicateUserError struct {
	// The error code.
	Code *ProductDuplicateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductDuplicateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductDuplicateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductDuplicateUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one Product and a cursor during pagination.
type ProductEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductEdge.
	Node *Product `json:"node,omitempty"`
}

// A product feed.
type ProductFeed struct {
	// The country of the product feed.
	Country *CountryCode `json:"country,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The language of the product feed.
	Language *LanguageCode `json:"language,omitempty,omitempty"`
	// The status of the product feed.
	Status ProductFeedStatus `json:"status"`
}

func (ProductFeed) IsNode() {}

// A globally-unique ID.
func (this ProductFeed) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ProductFeeds.
type ProductFeedConnection struct {
	// A list of edges.
	Edges []ProductFeedEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductFeedEdge.
	Nodes []ProductFeed `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `productFeedCreate` mutation.
type ProductFeedCreatePayload struct {
	// The newly created product feed.
	ProductFeed *ProductFeed `json:"productFeed,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductFeedCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductFeedCreate`.
type ProductFeedCreateUserError struct {
	// The error code.
	Code *ProductFeedCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductFeedCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductFeedCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductFeedCreateUserError) GetMessage() string { return this.Message }

// Return type for `productFeedDelete` mutation.
type ProductFeedDeletePayload struct {
	// The ID of the product feed that was deleted.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductFeedDeleteUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductFeedDelete`.
type ProductFeedDeleteUserError struct {
	// The error code.
	Code *ProductFeedDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductFeedDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductFeedDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductFeedDeleteUserError) GetMessage() string { return this.Message }

// An auto-generated type which holds one ProductFeed and a cursor during pagination.
type ProductFeedEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductFeedEdge.
	Node *ProductFeed `json:"node,omitempty"`
}

// The input fields required to create a product feed.
type ProductFeedInput struct {
	// The language of the product feed.
	Language LanguageCode `json:"language"`
	// The country of the product feed.
	Country CountryCode `json:"country"`
}

// Return type for `productFullSync` mutation.
type ProductFullSyncPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductFullSyncUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductFullSync`.
type ProductFullSyncUserError struct {
	// The error code.
	Code *ProductFullSyncUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductFullSyncUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductFullSyncUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductFullSyncUserError) GetMessage() string { return this.Message }

// Return type for `productImageUpdate` mutation.
type ProductImageUpdatePayload struct {
	// The image that has been updated.
	Image *Image `json:"image,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields required to create a product.
type ProductInput struct {
	// The description of the product, complete with HTML formatting.
	DescriptionHTML *string `json:"descriptionHtml,omitempty,omitempty"`
	// A unique, human-friendly string for the product.
	// Automatically generated from the product's title unless otherwise specified.
	//
	Handle *string `json:"handle,omitempty,omitempty"`
	// Whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	//
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty,omitempty"`
	// The SEO information associated with the product.
	Seo *SEOInput `json:"seo,omitempty,omitempty"`
	// The product type specified by the merchant.
	ProductType *string `json:"productType,omitempty,omitempty"`
	// The standardized product type in the Shopify product taxonomy.
	StandardizedProductType *StandardizedProductTypeInput `json:"standardizedProductType,omitempty,omitempty"`
	// The product category in the Shopify product taxonomy.
	ProductCategory *ProductCategoryInput `json:"productCategory,omitempty,omitempty"`
	// The custom product type specified by the merchant.
	CustomProductType *string `json:"customProductType,omitempty,omitempty"`
	// A comma separated list of tags that have been added to the product.
	Tags []string `json:"tags,omitempty,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *string `json:"templateSuffix,omitempty,omitempty"`
	// Whether the product is a gift card.
	GiftCard *bool `json:"giftCard,omitempty,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *string `json:"giftCardTemplateSuffix,omitempty,omitempty"`
	// The title of the product.
	Title *string `json:"title,omitempty,omitempty"`
	// The name of the product's vendor.
	Vendor *string `json:"vendor,omitempty,omitempty"`
	// The IDs of the collections that this product will be added to.
	CollectionsToJoin []string `json:"collectionsToJoin,omitempty,omitempty"`
	// The IDs of collections that will no longer include the existing product.
	CollectionsToLeave []string `json:"collectionsToLeave,omitempty,omitempty"`
	// Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
	ID *string `json:"id,omitempty,omitempty"`
	// The metafields to associate with this product.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// List of custom product options (maximum of 3 per product).
	Options []string `json:"options,omitempty,omitempty"`
	// A list of variants associated with the product.
	//
	Variants []ProductVariantInput `json:"variants,omitempty,omitempty"`
	// The status of the product.
	Status *ProductStatus `json:"status,omitempty,omitempty"`
	// Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
	RequiresSellingPlan *bool `json:"requiresSellingPlan,omitempty,omitempty"`
}

// Return type for `productJoinSellingPlanGroups` mutation.
type ProductJoinSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productLeaveSellingPlanGroups` mutation.
type ProductLeaveSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// The product property names. For example, "Size", "Color", and "Material".
// Variants are selected based on permutations of these options.
// The limit for each product property name is 255 characters.
type ProductOption struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The product option’s name.
	Name string `json:"name"`
	// The product option's position.
	Position int `json:"position"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The corresponding value to the product option name.
	Values []string `json:"values,omitempty"`
}

func (ProductOption) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this ProductOption) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (ProductOption) IsNode() {}

// A globally-unique ID.
func (this ProductOption) GetID() string { return this.ID }

// The price range of the product.
type ProductPriceRange struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// The price range of the product.
type ProductPriceRangeV2 struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// Represents the channels where a product is published.
type ProductPublication struct {
	// The channel where the product was or is published.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished"`
	// The product that was or is going to be published on the channel.
	Product *Product `json:"product,omitempty"`
	// The date that the product was or is going to be published on the channel.
	PublishDate *string `json:"publishDate,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple ProductPublications.
type ProductPublicationConnection struct {
	// A list of edges.
	Edges []ProductPublicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductPublicationEdge.
	Nodes []ProductPublication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductPublication and a cursor during pagination.
type ProductPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductPublicationEdge.
	Node *ProductPublication `json:"node,omitempty"`
}

// The input fields for specifying a publication to which a product will be published.
type ProductPublicationInput struct {
	// ID of the publication.
	PublicationID *string `json:"publicationId,omitempty,omitempty"`
	// The date and time that the product was (or will be) published.
	PublishDate *string `json:"publishDate,omitempty,omitempty"`
}

// The input fields for specifying a product to publish and the channels to publish it to.
type ProductPublishInput struct {
	// The product to create or update publications for.
	ID string `json:"id"`
	// The publication that the product is published to.
	ProductPublications []ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productPublish` mutation.
type ProductPublishPayload struct {
	// The product that has been published.
	Product *Product `json:"product,omitempty,omitempty"`
	// The channels where the product is published.
	ProductPublications []ProductPublication `json:"productPublications,omitempty,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderImages` mutation.
type ProductReorderImagesPayload struct {
	// The asynchronous job which reorders the images.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderMedia` mutation.
type ProductReorderMediaPayload struct {
	// The asynchronous job which reorders the media.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Reports the status of product for a Sales Channel or Storefront API.
// This might include why a product is not available in a Sales Channel
// and how a merchant might fix this.
type ProductResourceFeedback struct {
	// The time when the feedback was generated. Used to help determine whether
	// incoming feedback is outdated compared to existing feedback.
	//
	FeedbackGeneratedAt string `json:"feedbackGeneratedAt"`
	// The feedback messages presented to the merchant.
	Messages []string `json:"messages,omitempty"`
	// The ID of the product associated with the feedback.
	ProductID string `json:"productId"`
	// The timestamp of the product associated with the feedback.
	ProductUpdatedAt string `json:"productUpdatedAt"`
	// Conveys the state of the feedback and whether it requires merchant action or not.
	State ResourceFeedbackState `json:"state"`
}

// The input fields used to create a product feedback.
type ProductResourceFeedbackInput struct {
	// The ID of the product that the feedback was created on.
	ProductID string `json:"productId"`
	// Whether the merchant needs to take action on the product.
	State ResourceFeedbackState `json:"state"`
	// The date and time when the payload is constructed.
	// Used to help determine whether incoming feedback is outdated compared to feedback already received, and if it should be ignored upon arrival.
	//
	FeedbackGeneratedAt string `json:"feedbackGeneratedAt"`
	// The timestamp of the product associated with the feedback.
	ProductUpdatedAt string `json:"productUpdatedAt"`
	// A concise set of copy strings to be displayed to merchants. Used to guide merchants in resolving problems that your app encounters when trying to make use of their products.
	// You can specify up to four messages. Each message is limited to 100 characters.
	//
	Messages []string `json:"messages,omitempty,omitempty"`
}

// A sale associated with a product.
type ProductSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (ProductSale) IsSale() {}

// The type of order action that the sale represents.
func (this ProductSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this ProductSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this ProductSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this ProductSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this ProductSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this ProductSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this ProductSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this ProductSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this ProductSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
type ProductTaxonomyNode struct {
	// The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
	FullName string `json:"fullName"`
	// The ID of the product taxonomy node.
	ID string `json:"id"`
	// Whether the node is a leaf node.
	IsLeaf bool `json:"isLeaf"`
	// Whether the node is a root node.
	IsRoot bool `json:"isRoot"`
	// The name of the product taxonomy node. For example, Dog Beds.
	Name string `json:"name"`
}

func (ProductTaxonomyNode) IsNode() {}

// A globally-unique ID.
func (this ProductTaxonomyNode) GetID() string { return this.ID }

// The input fields for specifying a product to unpublish from a channel and the sales channels to unpublish it from.
type ProductUnpublishInput struct {
	// The ID of the product to create or update publications for.
	ID string `json:"id"`
	// The channels to unpublish the product from.
	ProductPublications []ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productUnpublish` mutation.
type ProductUnpublishPayload struct {
	// The product that has been unpublished.
	Product *Product `json:"product,omitempty,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdateMedia` mutation.
type ProductUpdateMediaPayload struct {
	// The updated media object.
	Media []Media `json:"media,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	MediaUserErrors []MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product on which media was updated.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdate` mutation.
type ProductUpdatePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a product variant.
type ProductVariant struct {
	// Whether the product variant is available for sale.
	AvailableForSale bool `json:"availableForSale"`
	// The value of the barcode associated with the product.
	Barcode *string `json:"barcode,omitempty,omitempty"`
	// The compare-at price of the variant in the default shop currency.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty,omitempty"`
	// The pricing that applies for a customer in a given context.
	ContextualPricing *ProductVariantContextualPricing `json:"contextualPricing,omitempty"`
	// The date and time when the variant was created.
	CreatedAt string `json:"createdAt"`
	// A default cursor that returns the single next record, sorted ascending by ID.
	//
	DefaultCursor string `json:"defaultCursor"`
	// The delivery profile for the variant.
	DeliveryProfile *DeliveryProfile `json:"deliveryProfile,omitempty,omitempty"`
	// Display name of the variant, based on product's title + variant's title.
	DisplayName string `json:"displayName"`
	// The fulfillment service that stocks a product variant.
	//
	// This is a third-party fulfillment service if the following conditions are met:
	// - The product variant is stocked by a single fulfillment service.
	// - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
	// - The fulfillment service has not [opted into SKU sharing](/api/admin-graphql/latest/objects/FulfillmentService#field-fulfillmentservice-permitsskusharing).
	//
	// If the conditions aren't met, then the fulfillment service has the `manual` handle.
	//
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// Whether changes to the fulfillment service for the product variant are allowed.
	FulfillmentServiceEditable *EditableProperty `json:"fulfillmentServiceEditable,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The featured image for the variant.
	Image *Image `json:"image,omitempty,omitempty"`
	// The inventory item, which is used to query for inventory information.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// The fulfillment service that tracks the number of items in stock for the product variant.
	InventoryManagement ProductVariantInventoryManagement `json:"inventoryManagement"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy ProductVariantInventoryPolicy `json:"inventoryPolicy"`
	// The total sellable quantity of the variant.
	InventoryQuantity *int `json:"inventoryQuantity,omitempty,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The media associated with the product variant.
	Media *MediaConnection `json:"media,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	//
	Position int `json:"position"`
	// List of prices and compare-at prices in the presentment currencies for this shop.
	PresentmentPrices *ProductVariantPricePairConnection `json:"presentmentPrices,omitempty"`
	// The price of the product variant in the default shop currency.
	Price null.String `json:"price"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The product that this variant belongs to.
	Product *Product `json:"product,omitempty"`
	// A list of the product variant components.
	ProductVariantComponents *ProductVariantComponentConnection `json:"productVariantComponents,omitempty"`
	// Whether a product variant requires components. The default value is `false`.
	// If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
	// from channels that don't support bundles.
	//
	RequiresComponents bool `json:"requiresComponents"`
	// Whether a customer needs to provide a shipping address when placing an order for the product variant.
	//
	RequiresShipping bool `json:"requiresShipping"`
	// List of product options applied to the variant.
	SelectedOptions []SelectedOption `json:"selectedOptions,omitempty"`
	// The total sellable quantity of the variant for online channels.
	// This doesn't represent the total available inventory or capture
	// [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
	//
	SellableOnlineQuantity int `json:"sellableOnlineQuantity"`
	// Count of selling plan groups associated with the product variant.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount"`
	// A list of all selling plan groups defined in the current shop associated with the product variant.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// A case-sensitive identifier for the product variant in the shop.
	// Required in order to connect to a fulfillment service.
	//
	Sku *string `json:"sku,omitempty,omitempty"`
	// The Storefront GraphQL API ID of the `ProductVariant`.
	//
	// As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
	//
	StorefrontID string `json:"storefrontId"`
	// The tax code for the product variant.
	TaxCode *string `json:"taxCode,omitempty,omitempty"`
	// Whether a tax is charged when the product variant is sold.
	Taxable bool `json:"taxable"`
	// The title of the product variant.
	Title string `json:"title"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The date and time (ISO 8601 format) when the product variant was last modified.
	//
	UpdatedAt string `json:"updatedAt"`
	// The weight of the product variant in the unit system specified with weight_unit.
	Weight *float64 `json:"weight,omitempty,omitempty"`
	// The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
	//
	WeightUnit WeightUnit `json:"weightUnit"`
}

func (ProductVariant) IsCommentEventEmbed() {}

func (ProductVariant) IsMetafieldReference() {}

func (ProductVariant) IsMetafieldReferencer() {}

func (ProductVariant) IsHasMetafieldDefinitions() {}

// List of metafield definitions.
func (this ProductVariant) GetMetafieldDefinitions() *MetafieldDefinitionConnection {
	return this.MetafieldDefinitions
}

func (ProductVariant) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this ProductVariant) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this ProductVariant) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this ProductVariant) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this ProductVariant) GetPrivateMetafields() *PrivateMetafieldConnection {
	return this.PrivateMetafields
}

func (ProductVariant) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this ProductVariant) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (ProductVariant) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this ProductVariant) GetLegacyResourceID() string { return this.LegacyResourceID }

func (ProductVariant) IsNavigable() {}

// A default cursor that returns the single next record, sorted ascending by ID.
func (this ProductVariant) GetDefaultCursor() string { return this.DefaultCursor }

func (ProductVariant) IsNode() {}

// A globally-unique ID.
func (this ProductVariant) GetID() string { return this.ID }

// The input fields required to append media to a single variant.
type ProductVariantAppendMediaInput struct {
	// Specifies the variant to which media will be appended.
	VariantID string `json:"variantId"`
	// Specifies the media to append to the variant.
	MediaIds []string `json:"mediaIds,omitempty"`
}

// Return type for `productVariantAppendMedia` mutation.
type ProductVariantAppendMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty,omitempty"`
	// The product variants that were updated.
	ProductVariants []ProductVariant `json:"productVariants,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MediaUserError `json:"userErrors,omitempty"`
}

// A product variant component associated with a product variant.
type ProductVariantComponent struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The product variant associated with the component.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// The required quantity of the component.
	Quantity int `json:"quantity"`
}

func (ProductVariantComponent) IsNode() {}

// A globally-unique ID.
func (this ProductVariantComponent) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ProductVariantComponents.
type ProductVariantComponentConnection struct {
	// A list of edges.
	Edges []ProductVariantComponentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductVariantComponentEdge.
	Nodes []ProductVariantComponent `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
type ProductVariantComponentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductVariantComponentEdge.
	Node *ProductVariantComponent `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariants.
type ProductVariantConnection struct {
	// A list of edges.
	Edges []ProductVariantEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductVariantEdge.
	Nodes []ProductVariant `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The price of a product variant in a specific country.
// Prices vary between countries.
type ProductVariantContextualPricing struct {
	// The final compare-at price after all adjustments are applied.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty,omitempty"`
	// The final price after all adjustments are applied.
	Price *MoneyV2 `json:"price,omitempty"`
	// The quantity rule applied for a given context.
	QuantityRule *QuantityRule `json:"quantityRule,omitempty"`
}

// Return type for `productVariantCreate` mutation.
type ProductVariantCreatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty,omitempty"`
	// The successfully created variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantDelete` mutation.
type ProductVariantDeletePayload struct {
	// The ID of the deleted product variant.
	DeletedProductVariantID *string `json:"deletedProductVariantId,omitempty,omitempty"`
	// The product associated with the deleted product variant.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields required to detach media from a single variant.
type ProductVariantDetachMediaInput struct {
	// Specifies the variant from which media will be detached.
	VariantID string `json:"variantId"`
	// Specifies the media to detach from the variant.
	MediaIds []string `json:"mediaIds,omitempty"`
}

// Return type for `productVariantDetachMedia` mutation.
type ProductVariantDetachMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty,omitempty"`
	// The product variants that were updated.
	ProductVariants []ProductVariant `json:"productVariants,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MediaUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ProductVariant and a cursor during pagination.
type ProductVariantEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductVariantEdge.
	Node *ProductVariant `json:"node,omitempty"`
}

// The input fields for the bundle components for core.
type ProductVariantGroupRelationshipInput struct {
	// The ID of the product variant that is a component of the bundle.
	ID string `json:"id"`
	// The number of units of the product variant required to construct one unit of the bundle.
	Quantity int `json:"quantity"`
}

// The input fields for specifying a product variant to create or update.
type ProductVariantInput struct {
	// Whether a product variant requires components. The default value is `false`.
	// If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
	// from channels that don't support bundles.
	//
	RequiresComponents *bool `json:"requiresComponents,omitempty,omitempty"`
	// The value of the barcode associated with the product.
	Barcode *string `json:"barcode,omitempty,omitempty"`
	// The compare-at price of the variant.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty,omitempty"`
	// The Harmonized System code (or HS Tariff code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// Specifies the product variant to update or create a new variant if absent.
	ID *string `json:"id,omitempty,omitempty"`
	// The ID of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the IDs being created on the product. This field only accepts one value.
	MediaID *string `json:"mediaId,omitempty,omitempty"`
	// The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
	MediaSrc []string `json:"mediaSrc,omitempty,omitempty"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy *ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty,omitempty"`
	// The inventory quantities at each location where the variant is stocked. Used as input only to the `productVariantCreate` mutation.
	InventoryQuantities []InventoryLevelInput `json:"inventoryQuantities,omitempty,omitempty"`
	// The inventory item associated with the variant. Used for unit cost.
	InventoryItem *InventoryItemInput `json:"inventoryItem,omitempty,omitempty"`
	// Additional customizable information about the product variant.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// The custom properties that a shop owner uses to define product variants.
	Options []string `json:"options,omitempty,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	//
	Position *int `json:"position,omitempty,omitempty"`
	// The price of the variant.
	Price *null.String `json:"price,omitempty,omitempty"`
	// The product to create the variant for. Used as input only to the `productVariantCreate` mutation.
	ProductID *string `json:"productId,omitempty,omitempty"`
	// Whether the variant requires shipping.
	RequiresShipping *bool `json:"requiresShipping,omitempty,omitempty"`
	// The SKU for the variant. Case-sensitive string.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether the variant is taxable.
	Taxable *bool `json:"taxable,omitempty,omitempty"`
	// The tax code associated with the variant.
	TaxCode *string `json:"taxCode,omitempty,omitempty"`
	// The weight of the variant.
	Weight *float64 `json:"weight,omitempty,omitempty"`
	// The unit of weight that's used to measure the variant.
	WeightUnit *WeightUnit `json:"weightUnit,omitempty,omitempty"`
}

// Return type for `productVariantJoinSellingPlanGroups` mutation.
type ProductVariantJoinSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantLeaveSellingPlanGroups` mutation.
type ProductVariantLeaveSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// The input fields representing a product variant position.
type ProductVariantPositionInput struct {
	// Specifies the ID of the product variant to update.
	ID string `json:"id"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	Position int `json:"position"`
}

// The compare-at price and price of a variant sharing a currency.
type ProductVariantPricePair struct {
	// The compare-at price of the variant with associated currency.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty,omitempty"`
	// The price of the variant with associated currency.
	Price *MoneyV2 `json:"price,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariantPricePairs.
type ProductVariantPricePairConnection struct {
	// A list of edges.
	Edges []ProductVariantPricePairEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ProductVariantPricePairEdge.
	Nodes []ProductVariantPricePair `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
type ProductVariantPricePairEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ProductVariantPricePairEdge.
	Node *ProductVariantPricePair `json:"node,omitempty"`
}

// Return type for `productVariantRelationshipBulkUpdate` mutation.
type ProductVariantRelationshipBulkUpdatePayload struct {
	// The product variants with successfully updated product variant relationships.
	ParentProductVariants []ProductVariant `json:"parentProductVariants,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantRelationshipBulkUpdateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`.
type ProductVariantRelationshipBulkUpdateUserError struct {
	// The error code.
	Code *ProductVariantRelationshipBulkUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantRelationshipBulkUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductVariantRelationshipBulkUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductVariantRelationshipBulkUpdateUserError) GetMessage() string { return this.Message }

// The input fields for updating a composite product variant.
type ProductVariantRelationshipUpdateInput struct {
	// The product variant ID representing that which contains the relationships with other variants.
	ParentProductVariantID *string `json:"parentProductVariantId,omitempty,omitempty"`
	// A product ID which contains product variants that have relationships with other variants.
	ParentProductID *string `json:"parentProductId,omitempty,omitempty"`
	// The product variants and associated quantitites to add to the product variant.
	ProductVariantRelationshipsToCreate []ProductVariantGroupRelationshipInput `json:"productVariantRelationshipsToCreate,omitempty,omitempty"`
	// The product variants and associated quantitites to update in specified product variant.
	ProductVariantRelationshipsToUpdate []ProductVariantGroupRelationshipInput `json:"productVariantRelationshipsToUpdate,omitempty,omitempty"`
	// The bundle component product variants to be removed from the product variant.
	ProductVariantRelationshipsToRemove []string `json:"productVariantRelationshipsToRemove,omitempty,omitempty"`
	// Whether to remove all components from the product variant. The default value is `false`.
	RemoveAllProductVariantRelationships *bool `json:"removeAllProductVariantRelationships,omitempty,omitempty"`
	// Method in which to update the price of the parent product variant.
	PriceInput *PriceInput `json:"priceInput,omitempty,omitempty"`
}

// Return type for `productVariantUpdate` mutation.
type ProductVariantUpdatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty,omitempty"`
	// The updated variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantsBulkCreate` mutation.
type ProductVariantsBulkCreatePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The newly created variants.
	ProductVariants []ProductVariant `json:"productVariants,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkCreateUserError `json:"userErrors,omitempty"`
}

// Error codes for failed product variant bulk create mutations.
type ProductVariantsBulkCreateUserError struct {
	// The error code.
	Code *ProductVariantsBulkCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductVariantsBulkCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductVariantsBulkCreateUserError) GetMessage() string { return this.Message }

// Return type for `productVariantsBulkDelete` mutation.
type ProductVariantsBulkDeletePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkDeleteUserError `json:"userErrors,omitempty"`
}

// Error codes for failed bulk variant delete mutations.
type ProductVariantsBulkDeleteUserError struct {
	// The error code.
	Code *ProductVariantsBulkDeleteUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkDeleteUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductVariantsBulkDeleteUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductVariantsBulkDeleteUserError) GetMessage() string { return this.Message }

// The input fields for specifying a product variant to create as part of a variant bulk mutation.
type ProductVariantsBulkInput struct {
	// The value of the barcode associated with the product variant.
	Barcode *string `json:"barcode,omitempty,omitempty"`
	// The compare-at price of the variant.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty,omitempty"`
	// The Harmonized System code (or HS Tariff code) for the variant.
	HarmonizedSystemCode *string `json:"harmonizedSystemCode,omitempty,omitempty"`
	// Specifies the product variant to update or delete.
	ID *string `json:"id,omitempty,omitempty"`
	// The URL of the media to associate with the variant.
	MediaSrc []string `json:"mediaSrc,omitempty,omitempty"`
	// Whether customers are allowed to place an order for the variant when it's out of stock.
	InventoryPolicy *ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty,omitempty"`
	// The inventory quantities at each location where the variant is stocked. The number of elements
	// in the array of inventory quantities cannot exceed 10 and the amount specified for the plan. Used as input only to the `productVariantCreate` mutation.
	//
	InventoryQuantities []InventoryLevelInput `json:"inventoryQuantities,omitempty,omitempty"`
	// The inventory item associated with the variant, used for unit cost.
	InventoryItem *InventoryItemInput `json:"inventoryItem,omitempty,omitempty"`
	// The ID of the media that's associated with the variant.
	MediaID *string `json:"mediaId,omitempty,omitempty"`
	// The additional customizable information about the product variant.
	Metafields []MetafieldInput `json:"metafields,omitempty,omitempty"`
	// The custom properties that a shop owner uses to define product variants.
	Options []string `json:"options,omitempty,omitempty"`
	// The price of the variant.
	Price *null.String `json:"price,omitempty,omitempty"`
	// Whether the variant requires shipping.
	RequiresShipping *bool `json:"requiresShipping,omitempty,omitempty"`
	// The SKU for the variant.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether the variant is taxable.
	Taxable *bool `json:"taxable,omitempty,omitempty"`
	// The tax code associated with the variant.
	TaxCode *string `json:"taxCode,omitempty,omitempty"`
	// The weight of the variant.
	Weight *float64 `json:"weight,omitempty,omitempty"`
	// The unit of weight that's used to measure the variant.
	WeightUnit *WeightUnit `json:"weightUnit,omitempty,omitempty"`
}

// Return type for `productVariantsBulkReorder` mutation.
type ProductVariantsBulkReorderPayload struct {
	// The updated product.
	Product *Product `json:"product,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkReorderUserError `json:"userErrors,omitempty"`
}

// Error codes for failed bulk product variants reorder operation.
type ProductVariantsBulkReorderUserError struct {
	// The error code.
	Code *ProductVariantsBulkReorderUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkReorderUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductVariantsBulkReorderUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductVariantsBulkReorderUserError) GetMessage() string { return this.Message }

// Return type for `productVariantsBulkUpdate` mutation.
type ProductVariantsBulkUpdatePayload struct {
	// The updated product object.
	Product *Product `json:"product,omitempty,omitempty"`
	// The updated variants.
	ProductVariants []ProductVariant `json:"productVariants,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ProductVariantsBulkUpdateUserError `json:"userErrors,omitempty"`
}

// Error codes for failed variant bulk update mutations.
type ProductVariantsBulkUpdateUserError struct {
	// The error code.
	Code *ProductVariantsBulkUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ProductVariantsBulkUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ProductVariantsBulkUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ProductVariantsBulkUpdateUserError) GetMessage() string { return this.Message }

// Return type for `pubSubServerPixelUpdate` mutation.
type PubSubServerPixelUpdatePayload struct {
	// The server pixel as configured by the mutation.
	ServerPixel *ServerPixel `json:"serverPixel,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsServerPixelUserError `json:"userErrors,omitempty"`
}

// Return type for `pubSubWebhookSubscriptionCreate` mutation.
type PubSubWebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []PubSubWebhookSubscriptionCreateUserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
type PubSubWebhookSubscriptionCreateUserError struct {
	// The error code.
	Code *PubSubWebhookSubscriptionCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PubSubWebhookSubscriptionCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PubSubWebhookSubscriptionCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PubSubWebhookSubscriptionCreateUserError) GetMessage() string { return this.Message }

// The input fields for a PubSub webhook subscription.
type PubSubWebhookSubscriptionInput struct {
	// The Pub/Sub project ID.
	PubSubProject string `json:"pubSubProject"`
	// The Pub/Sub topic ID.
	PubSubTopic string `json:"pubSubTopic"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty,omitempty"`
}

// Return type for `pubSubWebhookSubscriptionUpdate` mutation.
type PubSubWebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []PubSubWebhookSubscriptionUpdateUserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
type PubSubWebhookSubscriptionUpdateUserError struct {
	// The error code.
	Code *PubSubWebhookSubscriptionUpdateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PubSubWebhookSubscriptionUpdateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PubSubWebhookSubscriptionUpdateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PubSubWebhookSubscriptionUpdateUserError) GetMessage() string { return this.Message }

// A publication is a group of products and collections that is published to an app.
type Publication struct {
	// The app associated with the publication.
	App *App `json:"app,omitempty"`
	// Whether new products are automatically published to this publication.
	AutoPublish bool `json:"autoPublish"`
	// The catalog associated with the publication.
	Catalog Catalog `json:"catalog,omitempty"`
	// The collection publications for the list of collections published to the publication.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the publication.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Whether the collection is available to the publication.
	HasCollection bool `json:"hasCollection"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Name of the publication.
	Name string `json:"name"`
	// A background operation associated with this publication.
	Operation PublicationOperation `json:"operation,omitempty"`
	// The product publications for the list of products published to the publication.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the publication.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether the publication supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing"`
}

func (Publication) IsNode() {}

// A globally-unique ID.
func (this Publication) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple Publications.
type PublicationConnection struct {
	// A list of edges.
	Edges []PublicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in PublicationEdge.
	Nodes []Publication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields for creating a publication.
type PublicationCreateInput struct {
	// The ID of the catalog.
	CatalogID *string `json:"catalogId,omitempty,omitempty"`
	// Whether to create an empty publication or prepopulate it with all products.
	DefaultState *PublicationCreateInputPublicationDefaultState `json:"defaultState,omitempty,omitempty"`
	// Whether to automatically add newly created products to this publication.
	AutoPublish *bool `json:"autoPublish,omitempty,omitempty"`
}

// Return type for `publicationCreate` mutation.
type PublicationCreatePayload struct {
	// The publication that's been created.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PublicationUserError `json:"userErrors,omitempty"`
}

// Return type for `publicationDelete` mutation.
type PublicationDeletePayload struct {
	// The ID of the publication that was deleted.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PublicationUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Publication and a cursor during pagination.
type PublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of PublicationEdge.
	Node *Publication `json:"node,omitempty"`
}

// The input fields required to publish a resource.
type PublicationInput struct {
	// ID of the publication.
	PublicationID *string `json:"publicationId,omitempty,omitempty"`
	// The date and time that the resource was published. Setting this to a date in the future will schedule the resource to be published. Only online store channels support future publishing. This field has no effect if you include it in the `publishableUnpublish` mutation.
	//
	PublishDate *string `json:"publishDate,omitempty,omitempty"`
}

// A bulk update operation on a publication.
type PublicationResourceOperation struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The count of processed rows, summing imported, failed, and skipped rows.
	ProcessedRowCount *int `json:"processedRowCount,omitempty,omitempty"`
	// Represents a rows objects within this background operation.
	RowCount *RowCount `json:"rowCount,omitempty,omitempty"`
	// The status of this operation.
	Status ResourceOperationStatus `json:"status"`
}

func (PublicationResourceOperation) IsPublicationOperation() {}

func (PublicationResourceOperation) IsNode() {}

// A globally-unique ID.
func (this PublicationResourceOperation) GetID() string { return this.ID }

func (PublicationResourceOperation) IsResourceOperation() {}

// A globally-unique ID.

// The count of processed rows, summing imported, failed, and skipped rows.
func (this PublicationResourceOperation) GetProcessedRowCount() *int { return this.ProcessedRowCount }

// Represents a rows objects within this background operation.
func (this PublicationResourceOperation) GetRowCount() *RowCount { return this.RowCount }

// The status of this operation.
func (this PublicationResourceOperation) GetStatus() ResourceOperationStatus { return this.Status }

// The input fields for updating a publication.
type PublicationUpdateInput struct {
	// A list of publishable IDs to add. The maximum number of publishables to update simultaneously is 50.
	PublishablesToAdd []string `json:"publishablesToAdd,omitempty,omitempty"`
	// A list of publishable IDs to remove. The maximum number of publishables to update simultaneously is 50.
	PublishablesToRemove []string `json:"publishablesToRemove,omitempty,omitempty"`
	// Whether new products should be automatically published to the publication.
	AutoPublish *bool `json:"autoPublish,omitempty,omitempty"`
}

// Return type for `publicationUpdate` mutation.
type PublicationUpdatePayload struct {
	// The publication that's been updated.
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []PublicationUserError `json:"userErrors,omitempty"`
}

// Defines errors encountered while managing a publication.
type PublicationUserError struct {
	// The error code.
	Code *PublicationUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (PublicationUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this PublicationUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this PublicationUserError) GetMessage() string { return this.Message }

// Return type for `publishablePublish` mutation.
type PublishablePublishPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishablePublishToCurrentChannel` mutation.
type PublishablePublishToCurrentChannelPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublish` mutation.
type PublishableUnpublishPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublishToCurrentChannel` mutation.
type PublishableUnpublishToCurrentChannelPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents information about the purchasing company for the order or draft order.
type PurchasingCompany struct {
	// The company associated to the order or draft order.
	Company *Company `json:"company,omitempty"`
	// The company contact associated to the order or draft order.
	Contact *CompanyContact `json:"contact,omitempty,omitempty"`
	// The company location associated to the order or draft order.
	Location *CompanyLocation `json:"location,omitempty"`
}

func (PurchasingCompany) IsPurchasingEntity() {}

// The input fields for a purchasing company, which is a combination of company, company contact, and company location.
type PurchasingCompanyInput struct {
	// ID of the company.
	CompanyID string `json:"companyId"`
	// ID of the company contact.
	CompanyContactID string `json:"companyContactId"`
	// ID of the company location.
	CompanyLocationID string `json:"companyLocationId"`
}

// The input fields for a purchasing entity. Can either be a customer or a purchasing company.
type PurchasingEntityInput struct {
	// Represents a customer. Null if there is a purchasing company.
	CustomerID *string `json:"customerId,omitempty,omitempty"`
	// Represents a purchasing company. Null if there is a customer.
	PurchasingCompany *PurchasingCompanyInput `json:"purchasingCompany,omitempty,omitempty"`
}

// The quantity rule for the product variant in a given context.
type QuantityRule struct {
	// The value that specifies the quantity increment between minimum and maximum of the rule.
	// Only quantities divisible by this value will be considered valid.
	//
	// The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
	// must be divisible by this value.
	//
	Increment int `json:"increment"`
	// Whether the quantity rule fields match one increment, one minimum and no maximum.
	IsDefault bool `json:"isDefault"`
	// An optional value that defines the highest allowed quantity purchased by the customer.
	// If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
	//
	Maximum *int `json:"maximum,omitempty,omitempty"`
	// The value that defines the lowest allowed quantity purchased by the customer.
	// The minimum must be a multiple of the quantity rule's increment.
	//
	Minimum int `json:"minimum"`
	// Whether the values of the quantity rule were explicitly set.
	OriginType QuantityRuleOriginType `json:"originType"`
	// The product variant for which the quantity rule is applied.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
}

// An auto-generated type for paginating through multiple QuantityRules.
type QuantityRuleConnection struct {
	// A list of edges.
	Edges []QuantityRuleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in QuantityRuleEdge.
	Nodes []QuantityRule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// The total count of QuantityRules. Note: The maximum count limit is 10000.
	TotalCount string `json:"totalCount"`
}

// An auto-generated type which holds one QuantityRule and a cursor during pagination.
type QuantityRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of QuantityRuleEdge.
	Node *QuantityRule `json:"node,omitempty"`
}

// The input fields for the per-order quantity rule to be applied on the product variant.
type QuantityRuleInput struct {
	// The quantity increment.
	Increment int `json:"increment"`
	// The maximum quantity.
	Maximum *int `json:"maximum,omitempty,omitempty"`
	// The minimum quantity.
	Minimum int `json:"minimum"`
	// Product variant on which to apply the quantity rule.
	VariantID string `json:"variantId"`
}

// An error for a failed quantity rule operation.
type QuantityRuleUserError struct {
	// The error code.
	Code *QuantityRuleUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (QuantityRuleUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this QuantityRuleUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this QuantityRuleUserError) GetMessage() string { return this.Message }

// Return type for `quantityRulesAdd` mutation.
type QuantityRulesAddPayload struct {
	// The list of quantity rules that were added to or updated in the price list.
	QuantityRules []QuantityRule `json:"quantityRules,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []QuantityRuleUserError `json:"userErrors,omitempty"`
}

// Return type for `quantityRulesDelete` mutation.
type QuantityRulesDeletePayload struct {
	// A list of product variant IDs whose quantity rules were removed from the price list.
	//
	DeletedQuantityRulesVariantIds []string `json:"deletedQuantityRulesVariantIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []QuantityRuleUserError `json:"userErrors,omitempty"`
}

// The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
type QueryRoot struct {
	// Returns an abandonment by ID.
	Abandonment *Abandonment `json:"abandonment,omitempty,omitempty"`
	// Returns an Abandonment by the Abandoned Checkout ID.
	AbandonmentByAbandonedCheckoutID *Abandonment `json:"abandonmentByAbandonedCheckoutId,omitempty,omitempty"`
	// Lookup an App by ID or return the currently authenticated App.
	App *App `json:"app,omitempty,omitempty"`
	// Fetches app by handle.
	// Returns null if the app doesn't exist.
	//
	AppByHandle *App `json:"appByHandle,omitempty,omitempty"`
	// Fetches an app by its client ID.
	// Returns null if the app doesn't exist.
	//
	AppByKey *App `json:"appByKey,omitempty,omitempty"`
	// An app discount type.
	//
	AppDiscountType *AppDiscountType `json:"appDiscountType,omitempty,omitempty"`
	// A list of app discount types installed by apps.
	//
	AppDiscountTypes []AppDiscountType `json:"appDiscountTypes,omitempty"`
	// Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
	AppInstallation *AppInstallation `json:"appInstallation,omitempty,omitempty"`
	// List of app installations.
	AppInstallations *AppInstallationConnection `json:"appInstallations,omitempty"`
	// Returns an automatic discount resource by ID.
	AutomaticDiscount DiscountAutomatic `json:"automaticDiscount,omitempty"`
	// Returns an automatic discount resource by ID.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty,omitempty"`
	// List of automatic discounts.
	AutomaticDiscountNodes *DiscountAutomaticNodeConnection `json:"automaticDiscountNodes,omitempty"`
	// List of the shop's automatic discount saved searches.
	AutomaticDiscountSavedSearches *SavedSearchConnection `json:"automaticDiscountSavedSearches,omitempty"`
	// List of automatic discounts.
	AutomaticDiscounts *DiscountAutomaticConnection `json:"automaticDiscounts,omitempty"`
	// Returns a list of activated carrier services and associated shop locations that support them.
	AvailableCarrierServices []DeliveryCarrierServiceAndLocations `json:"availableCarrierServices,omitempty"`
	// A list of available locales.
	AvailableLocales []Locale `json:"availableLocales,omitempty"`
	// Returns a `DeliveryCarrierService` object by ID.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty,omitempty"`
	// List of Cart transform objects owned by the current API client.
	CartTransforms *CartTransformConnection `json:"cartTransforms,omitempty"`
	// Returns a Catalog resource by ID.
	Catalog Catalog `json:"catalog,omitempty"`
	// Returns the most recent catalog operations for the shop.
	CatalogOperations []ResourceOperation `json:"catalogOperations,omitempty"`
	// The catalogs belonging to the shop.
	Catalogs *CatalogConnection `json:"catalogs,omitempty"`
	// Lookup a channel by ID.
	Channel *Channel `json:"channel,omitempty,omitempty"`
	// List of the active sales channels.
	Channels *ChannelConnection `json:"channels,omitempty"`
	// A checkout profile on a shop.
	CheckoutProfile *CheckoutProfile `json:"checkoutProfile,omitempty,omitempty"`
	// List of checkout profiles on a shop.
	CheckoutProfiles *CheckoutProfileConnection `json:"checkoutProfiles,omitempty"`
	// Returns a code discount resource by ID.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty,omitempty"`
	// Returns a code discount identified by its discount code.
	CodeDiscountNodeByCode *DiscountCodeNode `json:"codeDiscountNodeByCode,omitempty,omitempty"`
	// List of code discounts. Special fields for query params:
	// * status: active, expired, scheduled
	// * discount_type: bogo, fixed_amount, free_shipping, percentage.
	CodeDiscountNodes *DiscountCodeNodeConnection `json:"codeDiscountNodes,omitempty"`
	// List of the shop's code discount saved searches.
	CodeDiscountSavedSearches *SavedSearchConnection `json:"codeDiscountSavedSearches,omitempty"`
	// Returns a Collection resource by ID.
	Collection *Collection `json:"collection,omitempty,omitempty"`
	// Return a collection by its handle.
	//
	CollectionByHandle *Collection `json:"collectionByHandle,omitempty,omitempty"`
	// Lists all rules that can be used to create smart collections.
	CollectionRulesConditions []CollectionRuleConditions `json:"collectionRulesConditions,omitempty"`
	// Returns a list of the shop's collection saved searches.
	CollectionSavedSearches *SavedSearchConnection `json:"collectionSavedSearches,omitempty"`
	// Returns a list of collections.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Returns the list of companies in the shop.
	Companies *CompanyConnection `json:"companies,omitempty"`
	// Returns a `Company` object by ID.
	Company *Company `json:"company,omitempty,omitempty"`
	// Returns a `CompanyContact` object by ID.
	CompanyContact *CompanyContact `json:"companyContact,omitempty,omitempty"`
	// Returns a `CompanyContactRole` object by ID.
	CompanyContactRole *CompanyContactRole `json:"companyContactRole,omitempty,omitempty"`
	// The number of companies for a shop.
	CompanyCount int `json:"companyCount"`
	// Returns a `CompanyLocation` object by ID.
	CompanyLocation *CompanyLocation `json:"companyLocation,omitempty,omitempty"`
	// Returns the list of company locations in the shop.
	CompanyLocations *CompanyLocationConnection `json:"companyLocations,omitempty"`
	// Return the AppInstallation for the currently authenticated App.
	CurrentAppInstallation *AppInstallation `json:"currentAppInstallation,omitempty"`
	// Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
	CurrentBulkOperation *BulkOperation `json:"currentBulkOperation,omitempty,omitempty"`
	// Returns a Customer resource by ID.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// Returns the status of a customer merge request job.
	CustomerMergeJobStatus *CustomerMergeRequest `json:"customerMergeJobStatus,omitempty,omitempty"`
	// Returns a preview of a customer merge request.
	CustomerMergePreview *CustomerMergePreview `json:"customerMergePreview,omitempty"`
	// Returns a CustomerPaymentMethod resource by its ID.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The list of members, such as customers, that's associated with an individual segment.
	CustomerSegmentMembers *CustomerSegmentMemberConnection `json:"customerSegmentMembers,omitempty"`
	// Returns a segment members query resource by ID.
	CustomerSegmentMembersQuery *CustomerSegmentMembersQuery `json:"customerSegmentMembersQuery,omitempty,omitempty"`
	// Whether a member, which is a customer, belongs to a segment.
	CustomerSegmentMembership *SegmentMembershipResponse `json:"customerSegmentMembership,omitempty"`
	// List of customers.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// The paginated list of deletion events.
	DeletionEvents *DeletionEventConnection `json:"deletionEvents,omitempty"`
	// The delivery customization.
	DeliveryCustomization *DeliveryCustomization `json:"deliveryCustomization,omitempty,omitempty"`
	// The delivery customizations.
	DeliveryCustomizations *DeliveryCustomizationConnection `json:"deliveryCustomizations,omitempty"`
	// Returns a Delivery Profile resource by ID.
	DeliveryProfile *DeliveryProfile `json:"deliveryProfile,omitempty,omitempty"`
	// Returns a list of saved delivery profiles.
	DeliveryProfiles *DeliveryProfileConnection `json:"deliveryProfiles,omitempty"`
	// Returns the shop-wide shipping settings.
	DeliverySettings *DeliverySetting `json:"deliverySettings,omitempty,omitempty"`
	// The total number of discount codes for the shop.
	DiscountCodeCount int `json:"discountCodeCount"`
	// Returns a discount resource by ID.
	DiscountNode *DiscountNode `json:"discountNode,omitempty,omitempty"`
	// List of discounts.
	DiscountNodes *DiscountNodeConnection `json:"discountNodes,omitempty"`
	// Returns a bulk code creation resource by ID.
	DiscountRedeemCodeBulkCreation *DiscountRedeemCodeBulkCreation `json:"discountRedeemCodeBulkCreation,omitempty,omitempty"`
	// List of the shop's redeemed discount code saved searches.
	DiscountRedeemCodeSavedSearches *SavedSearchConnection `json:"discountRedeemCodeSavedSearches,omitempty"`
	// Returns dispute details based on ID.
	Dispute *ShopifyPaymentsDispute `json:"dispute,omitempty,omitempty"`
	// Returns dispute evidence details based on ID.
	DisputeEvidence *ShopifyPaymentsDisputeEvidence `json:"disputeEvidence,omitempty,omitempty"`
	// Lookup a Domain by ID.
	Domain *Domain `json:"domain,omitempty,omitempty"`
	// Returns a DraftOrder resource by ID.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty,omitempty"`
	// List of the shop's draft order saved searches.
	DraftOrderSavedSearches *SavedSearchConnection `json:"draftOrderSavedSearches,omitempty"`
	// Returns a DraftOrderTag resource by ID.
	DraftOrderTag *DraftOrderTag `json:"draftOrderTag,omitempty,omitempty"`
	// List of saved draft orders.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// A list of the shop's file saved searches.
	FileSavedSearches *SavedSearchConnection `json:"fileSavedSearches,omitempty"`
	// Returns a paginated list of files that have been uploaded to Shopify.
	Files *FileConnection `json:"files,omitempty"`
	// Returns a Fulfillment resource by ID.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty,omitempty"`
	// Returns a Fulfillment order resource by ID.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty,omitempty"`
	// The paginated list of all fulfillment orders.
	// The returned fulfillment orders are filtered according to the
	// [fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
	// granted to the app.
	//
	// Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
	// third-party fulfillment service locations, or all kinds of locations together.
	//
	// For fetching only the fulfillment orders assigned to the app's locations, use the
	// [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
	// connection.
	//
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// Returns a FulfillmentService resource by ID.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty,omitempty"`
	// Returns a gift card resource by ID.
	GiftCard *GiftCard `json:"giftCard,omitempty,omitempty"`
	// Returns a list of gift cards.
	GiftCards *GiftCardConnection `json:"giftCards,omitempty"`
	// The total number of gift cards issued for the shop.
	GiftCardsCount string `json:"giftCardsCount"`
	// Returns an `InventoryItem` object by ID.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty,omitempty"`
	// Returns a list of inventory items.
	InventoryItems *InventoryItemConnection `json:"inventoryItems,omitempty"`
	// Returns an `InventoryLevel` object by ID.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty,omitempty"`
	// General inventory properties for the shop.
	InventoryProperties *InventoryProperties `json:"inventoryProperties,omitempty"`
	// Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
	//
	Job *Job `json:"job,omitempty,omitempty"`
	// Returns an inventory Location resource by ID.
	Location *Location `json:"location,omitempty,omitempty"`
	// Returns a list of active inventory locations.
	Locations *LocationConnection `json:"locations,omitempty"`
	// Returns a list of all origin locations available for a delivery profile.
	LocationsAvailableForDeliveryProfiles []Location `json:"locationsAvailableForDeliveryProfiles,omitempty,omitempty"`
	// Returns a list of all origin locations available for a delivery profile.
	LocationsAvailableForDeliveryProfilesConnection *LocationConnection `json:"locationsAvailableForDeliveryProfilesConnection,omitempty"`
	// Returns a list of fulfillment orders that are on hold.
	ManualHoldsFulfillmentOrders *FulfillmentOrderConnection `json:"manualHoldsFulfillmentOrders,omitempty"`
	// Returns a market resource by ID.
	Market *Market `json:"market,omitempty,omitempty"`
	// Returns the applicable market for a customer based on where they are in the world.
	MarketByGeography *Market `json:"marketByGeography,omitempty,omitempty"`
	// A resource that can have localized values for different markets.
	MarketLocalizableResource *MarketLocalizableResource `json:"marketLocalizableResource,omitempty,omitempty"`
	// Resources that can have localized values for different markets.
	MarketLocalizableResources *MarketLocalizableResourceConnection `json:"marketLocalizableResources,omitempty"`
	// Resources that can have localized values for different markets.
	MarketLocalizableResourcesByIds *MarketLocalizableResourceConnection `json:"marketLocalizableResourcesByIds,omitempty"`
	// A list of marketing activities associated with the marketing app.
	MarketingActivities *MarketingActivityConnection `json:"marketingActivities,omitempty"`
	// Returns a MarketingActivity resource by ID.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty,omitempty"`
	// Returns a MarketingEvent resource by ID.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty,omitempty"`
	// A list of marketing events associated with the marketing app.
	MarketingEvents *MarketingEventConnection `json:"marketingEvents,omitempty"`
	// The markets configured for the shop.
	Markets *MarketConnection `json:"markets,omitempty"`
	// Returns a metafield by ID.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// Returns a metafield definition by ID.
	MetafieldDefinition *MetafieldDefinition `json:"metafieldDefinition,omitempty,omitempty"`
	// Each metafield definition has a type, which defines the type of information that it can store.
	// This type is enforced across every instance of the resource that owns the metafield definition.
	//
	// Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
	//
	MetafieldDefinitionTypes []MetafieldDefinitionType `json:"metafieldDefinitionTypes,omitempty"`
	// List of metafield definitions.
	MetafieldDefinitions *MetafieldDefinitionConnection `json:"metafieldDefinitions,omitempty"`
	// List of the `MetafieldStorefrontVisibility` records.
	MetafieldStorefrontVisibilities *MetafieldStorefrontVisibilityConnection `json:"metafieldStorefrontVisibilities,omitempty"`
	// Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
	// metafields to make visible in the Storefront API.
	//
	MetafieldStorefrontVisibility *MetafieldStorefrontVisibility `json:"metafieldStorefrontVisibility,omitempty,omitempty"`
	// Retrieves a metaobject by ID.
	Metaobject *Metaobject `json:"metaobject,omitempty,omitempty"`
	// Retrieves a metaobject by handle.
	MetaobjectByHandle *Metaobject `json:"metaobjectByHandle,omitempty,omitempty"`
	// Retrieves a metaobject definition by ID.
	MetaobjectDefinition *MetaobjectDefinition `json:"metaobjectDefinition,omitempty,omitempty"`
	// Finds a metaobject definition by type.
	MetaobjectDefinitionByType *MetaobjectDefinition `json:"metaobjectDefinitionByType,omitempty,omitempty"`
	// All metaobject definitions.
	MetaobjectDefinitions *MetaobjectDefinitionConnection `json:"metaobjectDefinitions,omitempty"`
	// All metaobjects for the shop.
	Metaobjects *MetaobjectConnection `json:"metaobjects,omitempty"`
	// Returns a specific node (any object that implements the
	// [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
	// interface) by ID, in accordance with the
	// [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
	// This field is commonly used for refetching an object.
	//
	Node Node `json:"node,omitempty"`
	// Returns the list of nodes (any objects that implement the
	// [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
	// interface) with the given IDs, in accordance with the
	// [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
	//
	Nodes []Node `json:"nodes,omitempty"`
	// Returns an Order resource by ID.
	Order *Order `json:"order,omitempty,omitempty"`
	// Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
	OrderPaymentStatus *OrderPaymentStatus `json:"orderPaymentStatus,omitempty,omitempty"`
	// List of the shop's order saved searches.
	OrderSavedSearches *SavedSearchConnection `json:"orderSavedSearches,omitempty"`
	// Returns a list of orders placed.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The payment customization.
	PaymentCustomization *PaymentCustomization `json:"paymentCustomization,omitempty,omitempty"`
	// The payment customizations.
	PaymentCustomizations *PaymentCustomizationConnection `json:"paymentCustomizations,omitempty"`
	// The list of payment terms templates eligible for all shops and users.
	PaymentTermsTemplates []PaymentTermsTemplate `json:"paymentTermsTemplates,omitempty"`
	// Returns a price list resource by ID.
	PriceList *PriceList `json:"priceList,omitempty,omitempty"`
	// All price lists for a shop.
	PriceLists *PriceListConnection `json:"priceLists,omitempty"`
	// Returns a code price rule resource by ID.
	PriceRule *PriceRule `json:"priceRule,omitempty,omitempty"`
	// List of the shop's price rule saved searches.
	PriceRuleSavedSearches *SavedSearchConnection `json:"priceRuleSavedSearches,omitempty"`
	// Returns a list of price rule resources that have at least one associated discount code.
	PriceRules *PriceRuleConnection `json:"priceRules,omitempty"`
	// The primary market of the shop.
	PrimaryMarket *Market `json:"primaryMarket,omitempty"`
	// Returns a private metafield by ID.
	// Private metafields are accessible only by the application that created them.
	//
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// Returns a list of private metafields associated to a resource.
	//
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Returns a Product resource by ID.
	Product *Product `json:"product,omitempty,omitempty"`
	// Return a product by its handle.
	//
	ProductByHandle *Product `json:"productByHandle,omitempty,omitempty"`
	// Returns the product duplicate job.
	ProductDuplicateJob *ProductDuplicateJob `json:"productDuplicateJob,omitempty"`
	// Returns a ProductFeed resource by ID.
	ProductFeed *ProductFeed `json:"productFeed,omitempty,omitempty"`
	// The product feeds for the shop.
	ProductFeeds *ProductFeedConnection `json:"productFeeds,omitempty"`
	// Returns the product resource feedback for the currently authenticated app.
	//
	ProductResourceFeedback *ProductResourceFeedback `json:"productResourceFeedback,omitempty,omitempty"`
	// Returns a list of the shop's product saved searches.
	ProductSavedSearches *SavedSearchConnection `json:"productSavedSearches,omitempty"`
	// Returns a ProductVariant resource by ID.
	ProductVariant *ProductVariant `json:"productVariant,omitempty,omitempty"`
	// List of the product variants.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// List of products.
	Products *ProductConnection `json:"products,omitempty"`
	// The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
	PublicAPIVersions []APIVersion `json:"publicApiVersions,omitempty"`
	// Lookup a publication by ID.
	//
	Publication *Publication `json:"publication,omitempty,omitempty"`
	// List of publications.
	Publications *PublicationConnection `json:"publications,omitempty"`
	// Returns a Refund resource by ID.
	Refund *Refund `json:"refund,omitempty,omitempty"`
	// Returns a Return resource by ID.
	Return *Return `json:"return,omitempty,omitempty"`
	// Lookup a returnable fulfillment by ID.
	ReturnableFulfillment *ReturnableFulfillment `json:"returnableFulfillment,omitempty,omitempty"`
	// List of returnable fulfillments.
	ReturnableFulfillments *ReturnableFulfillmentConnection `json:"returnableFulfillments,omitempty"`
	// Lookup a reverse delivery by ID.
	ReverseDelivery *ReverseDelivery `json:"reverseDelivery,omitempty,omitempty"`
	// Lookup a reverse fulfillment order by ID.
	ReverseFulfillmentOrder *ReverseFulfillmentOrder `json:"reverseFulfillmentOrder,omitempty,omitempty"`
	// <div class="note"><h4>Theme app extensions</h4>
	//   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
	//
	//
	// Lookup a script tag resource by ID.
	//
	ScriptTag *ScriptTag `json:"scriptTag,omitempty,omitempty"`
	// <div class="note"><h4>Theme app extensions</h4>
	//   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
	//
	//
	// A list of script tags.
	//
	ScriptTags *ScriptTagConnection `json:"scriptTags,omitempty"`
	// The Customer Segment.
	Segment *Segment `json:"segment,omitempty,omitempty"`
	// The number of segments for a shop.
	SegmentCount int `json:"segmentCount"`
	// A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
	SegmentFilterSuggestions *SegmentFilterConnection `json:"segmentFilterSuggestions,omitempty"`
	// A list of filters.
	SegmentFilters *SegmentFilterConnection `json:"segmentFilters,omitempty"`
	// A list of a shop's segment migrations.
	SegmentMigrations *SegmentMigrationConnection `json:"segmentMigrations,omitempty"`
	// The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.
	SegmentValueSuggestions *SegmentValueConnection `json:"segmentValueSuggestions,omitempty"`
	// A list of a shop's segments.
	Segments *SegmentConnection `json:"segments,omitempty"`
	// Returns a Selling Plan Group resource by ID.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty,omitempty"`
	// List Selling Plan Groups.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// The server pixel configured by the app.
	ServerPixel *ServerPixel `json:"serverPixel,omitempty,omitempty"`
	// Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
	// business and store management settings for the shop.
	//
	Shop *Shop `json:"shop,omitempty"`
	// The shop's billing preferences.
	ShopBillingPreferences *ShopBillingPreferences `json:"shopBillingPreferences,omitempty"`
	// A list of locales available on a shop.
	ShopLocales []ShopLocale `json:"shopLocales,omitempty"`
	// The Shopify Function.
	ShopifyFunction *ShopifyFunction `json:"shopifyFunction,omitempty,omitempty"`
	// Returns the Shopify Functions for apps installed on the shop.
	ShopifyFunctions *ShopifyFunctionConnection `json:"shopifyFunctions,omitempty"`
	// Shopify Payments account information, including balances and payouts.
	ShopifyPaymentsAccount *ShopifyPaymentsAccount `json:"shopifyPaymentsAccount,omitempty,omitempty"`
	// Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information.
	ShopifyqlQuery ShopifyqlResponse `json:"shopifyqlQuery,omitempty"`
	// The StaffMember resource, by ID.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
	//
	// Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
	//
	StandardMetafieldDefinitionTemplates *StandardMetafieldDefinitionTemplateConnection `json:"standardMetafieldDefinitionTemplates,omitempty"`
	// Returns a SubscriptionBillingAttempt by ID.
	SubscriptionBillingAttempt *SubscriptionBillingAttempt `json:"subscriptionBillingAttempt,omitempty,omitempty"`
	// Returns subscription billing attempts on a store.
	SubscriptionBillingAttempts *SubscriptionBillingAttemptConnection `json:"subscriptionBillingAttempts,omitempty"`
	// Returns a subscription billing cycle found either by cycle index or date.
	SubscriptionBillingCycle *SubscriptionBillingCycle `json:"subscriptionBillingCycle,omitempty,omitempty"`
	// Returns subscription billing cycles for a contract ID.
	SubscriptionBillingCycles *SubscriptionBillingCycleConnection `json:"subscriptionBillingCycles,omitempty"`
	// Returns a Subscription Contract resource by ID.
	SubscriptionContract *SubscriptionContract `json:"subscriptionContract,omitempty,omitempty"`
	// List Subscription Contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
	// Returns a Subscription Draft resource by ID.
	SubscriptionDraft *SubscriptionDraft `json:"subscriptionDraft,omitempty,omitempty"`
	// Returns a list of TenderTransactions associated with the shop.
	TenderTransactions *TenderTransactionConnection `json:"tenderTransactions,omitempty"`
	// A resource that can have localized values for different languages.
	TranslatableResource *TranslatableResource `json:"translatableResource,omitempty,omitempty"`
	// Resources that can have localized values for different languages.
	TranslatableResources *TranslatableResourceConnection `json:"translatableResources,omitempty"`
	// Resources that can have localized values for different languages.
	TranslatableResourcesByIds *TranslatableResourceConnection `json:"translatableResourcesByIds,omitempty"`
	// Returns a redirect resource by ID.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty,omitempty"`
	// Returns a redirect import resource by ID.
	URLRedirectImport *URLRedirectImport `json:"urlRedirectImport,omitempty,omitempty"`
	// A list of the shop's URL redirect saved searches.
	URLRedirectSavedSearches *SavedSearchConnection `json:"urlRedirectSavedSearches,omitempty"`
	// A list of redirects for a shop.
	URLRedirects *URLRedirectConnection `json:"urlRedirects,omitempty"`
	// The web pixel configured by the app.
	WebPixel *WebPixel `json:"webPixel,omitempty,omitempty"`
	// Returns a webhook subscription by ID.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
	// Returns a list of webhook subscriptions.
	WebhookSubscriptions *WebhookSubscriptionConnection `json:"webhookSubscriptions,omitempty"`
}

// The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
type Refund struct {
	// The date and time when the refund was created.
	CreatedAt *string `json:"createdAt,omitempty,omitempty"`
	// A list of the refunded duties as part of this refund.
	Duties []RefundDuty `json:"duties,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The optional note associated with the refund.
	Note *string `json:"note,omitempty,omitempty"`
	// The order associated with the refund.
	Order *Order `json:"order,omitempty"`
	// The `RefundLineItem` resources attached to the refund.
	RefundLineItems *RefundLineItemConnection `json:"refundLineItems,omitempty"`
	// The return associated with the refund.
	Return *Return `json:"return,omitempty,omitempty"`
	// The staff member who created the refund.
	StaffMember *StaffMember `json:"staffMember,omitempty,omitempty"`
	// The total amount across all transactions for the refund.
	TotalRefunded *MoneyV2 `json:"totalRefunded,omitempty"`
	// The total amount across all transactions for the refund, in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// The transactions associated with the refund.
	Transactions *OrderTransactionConnection `json:"transactions,omitempty"`
	// The date and time when the refund was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (Refund) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this Refund) GetLegacyResourceID() string { return this.LegacyResourceID }

func (Refund) IsNode() {}

// A globally-unique ID.
func (this Refund) GetID() string { return this.ID }

// An agreement between the merchant and customer to refund all or a portion of the order.
type RefundAgreement struct {
	// The application that created the agreement.
	App *App `json:"app,omitempty,omitempty"`
	// The date and time at which the agreement occured.
	HappenedAt string `json:"happenedAt"`
	// The unique ID for the agreement.
	ID string `json:"id"`
	// The reason the agremeent was created.
	Reason OrderActionType `json:"reason"`
	// The refund associated with the agreement.
	Refund *Refund `json:"refund,omitempty"`
	// The sales associated with the agreement.
	Sales *SaleConnection `json:"sales,omitempty"`
	// The staff member associated with the agreement.
	User *StaffMember `json:"user,omitempty,omitempty"`
}

func (RefundAgreement) IsSalesAgreement() {}

// The application that created the agreement.
func (this RefundAgreement) GetApp() *App { return this.App }

// The date and time at which the agreement occured.
func (this RefundAgreement) GetHappenedAt() string { return this.HappenedAt }

// The unique ID for the agreement.
func (this RefundAgreement) GetID() string { return this.ID }

// The reason the agremeent was created.
func (this RefundAgreement) GetReason() OrderActionType { return this.Reason }

// The sales associated with the agreement.
func (this RefundAgreement) GetSales() *SaleConnection { return this.Sales }

// The staff member associated with the agreement.
func (this RefundAgreement) GetUser() *StaffMember { return this.User }

// An auto-generated type for paginating through multiple Refunds.
type RefundConnection struct {
	// A list of edges.
	Edges []RefundEdge `json:"edges,omitempty"`
	// A list of the nodes contained in RefundEdge.
	Nodes []Refund `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `refundCreate` mutation.
type RefundCreatePayload struct {
	// The order associated with the created refund.
	Order *Order `json:"order,omitempty,omitempty"`
	// The created refund.
	Refund *Refund `json:"refund,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Represents a refunded duty.
type RefundDuty struct {
	// The amount of a refunded duty in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The duty associated with this refunded duty.
	OriginalDuty *Duty `json:"originalDuty,omitempty,omitempty"`
}

// The input fields required to reimburse duties on a refund.
type RefundDutyInput struct {
	// The ID of the duty in the refund.
	DutyID string `json:"dutyId"`
	// The type of refund for this duty.
	RefundType *RefundDutyRefundType `json:"refundType,omitempty,omitempty"`
}

// An auto-generated type which holds one Refund and a cursor during pagination.
type RefundEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of RefundEdge.
	Node *Refund `json:"node,omitempty"`
}

// The input fields to create a refund.
type RefundInput struct {
	// The currency that is used to refund the order. This must be the presentment currency, which is the currency used by the customer. This is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty,omitempty"`
	// The ID of the order that is being refunded.
	OrderID string `json:"orderId"`
	// An optional note that is attached to the refund.
	Note *string `json:"note,omitempty,omitempty"`
	// Whether to send a refund notification to the customer.
	Notify *bool `json:"notify,omitempty,omitempty"`
	// The input fields that are required to reimburse shipping costs.
	Shipping *ShippingRefundInput `json:"shipping,omitempty,omitempty"`
	// A list of line items to refund.
	RefundLineItems []RefundLineItemInput `json:"refundLineItems,omitempty,omitempty"`
	// A list of duties to refund.
	RefundDuties []RefundDutyInput `json:"refundDuties,omitempty,omitempty"`
	// A list of transactions involved in the refund.
	Transactions []OrderTransactionInput `json:"transactions,omitempty,omitempty"`
}

// A line item that's included in a refund.
type RefundLineItem struct {
	// The `LineItem` resource associated to the refunded line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The inventory restock location.
	Location *Location `json:"location,omitempty,omitempty"`
	// The price of a refunded line item.
	Price null.String `json:"price"`
	// The price of a refunded line item in shop and presentment currencies.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// The quantity of a refunded line item.
	Quantity int `json:"quantity"`
	// The type of restock for the refunded line item.
	RestockType RefundLineItemRestockType `json:"restockType"`
	// Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
	Restocked bool `json:"restocked"`
	// The subtotal price of a refunded line item.
	Subtotal null.String `json:"subtotal"`
	// The subtotal price of a refunded line item in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// The total tax charged on a refunded line item.
	TotalTax null.String `json:"totalTax"`
	// The total tax charged on a refunded line item in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
}

// An auto-generated type for paginating through multiple RefundLineItems.
type RefundLineItemConnection struct {
	// A list of edges.
	Edges []RefundLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in RefundLineItemEdge.
	Nodes []RefundLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one RefundLineItem and a cursor during pagination.
type RefundLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of RefundLineItemEdge.
	Node *RefundLineItem `json:"node,omitempty"`
}

// The input fields required to reimburse line items on a refund.
type RefundLineItemInput struct {
	// The ID of the line item in the refund.
	LineItemID string `json:"lineItemId"`
	// The quantity of the associated line item to be refunded.
	Quantity int `json:"quantity"`
	// The type of restock for this line item.
	RestockType *RefundLineItemRestockType `json:"restockType,omitempty,omitempty"`
	// The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
	LocationID *string `json:"locationId,omitempty,omitempty"`
}

// The input fields for the shipping cost to refund.
type RefundShippingInput struct {
	// The input fields required to refund shipping cost, in the presentment currency of the order.
	// This overrides the `fullRefund` argument.
	//
	ShippingRefundAmount *MoneyInput `json:"shippingRefundAmount,omitempty,omitempty"`
	// Whether to refund the full shipping amount.
	FullRefund *bool `json:"fullRefund,omitempty,omitempty"`
}

// The input fields for a remote Authorize.net customer payment profile.
type RemoteAuthorizeNetCustomerPaymentProfileInput struct {
	// The customerProfileId value from the Authorize.net API.
	//
	CustomerProfileID string `json:"customerProfileId"`
	// The customerPaymentProfileId value from the Authorize.net API.
	//
	CustomerPaymentProfileID *string `json:"customerPaymentProfileId,omitempty,omitempty"`
}

// The input fields for a remote Braintree customer payment profile.
type RemoteBraintreePaymentMethodInput struct {
	// The `customer_id` value from the Braintree API.
	//
	CustomerID string `json:"customerId"`
	// The `payment_method_token` value from the Braintree API.
	//
	PaymentMethodToken *string `json:"paymentMethodToken,omitempty,omitempty"`
}

// The input fields for a remote stripe payment method.
type RemoteStripePaymentMethodInput struct {
	// The customer_id value from the Stripe API.
	//
	CustomerID string `json:"customerId"`
	// The payment_method_id value from the Stripe API.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty,omitempty"`
}

// An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
// They can optionally have a specific icon and be dismissed by merchants.
type ResourceAlert struct {
	// Buttons in the alert that link to related information.
	// For example, _Edit variants_.
	//
	Actions []ResourceAlertAction `json:"actions,omitempty"`
	// The secondary text in the alert that includes further information or instructions about how to solve a problem.
	//
	Content string `json:"content"`
	// Unique identifier that appears when an alert is manually closed by the merchant.
	// Most alerts cannot be manually closed.
	//
	DismissibleHandle *string `json:"dismissibleHandle,omitempty,omitempty"`
	// An icon that is optionally displayed with the alert.
	Icon *ResourceAlertIcon `json:"icon,omitempty,omitempty"`
	// Indication of how important the alert is.
	Severity ResourceAlertSeverity `json:"severity"`
	// The primary text in the alert that includes information or describes the problem.
	Title string `json:"title"`
}

// An action associated to a resource alert, such as editing variants.
type ResourceAlertAction struct {
	// Whether the action appears as a button or as a link.
	Primary bool `json:"primary"`
	// Resource for the action to show.
	Show *string `json:"show,omitempty,omitempty"`
	// The text for the button in the alert. For example, _Edit variants_.
	Title string `json:"title"`
	// The target URL that the button links to.
	URL string `json:"url"`
}

// Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
type ResourceFeedback struct {
	// Feedback from an app about the steps a merchant needs to take to set up the app on their store.
	AppFeedback []AppFeedback `json:"appFeedback,omitempty"`
	// List of AppFeedback detailing issues regarding a resource.
	Details []AppFeedback `json:"details,omitempty"`
	// Summary of resource feedback pertaining to the resource.
	Summary string `json:"summary"`
}

// The input fields for a resource feedback object.
type ResourceFeedbackCreateInput struct {
	// The date and time when the feedback was generated. Used to help determine whether
	// incoming feedback is outdated compared to existing feedback.
	//
	FeedbackGeneratedAt string `json:"feedbackGeneratedAt"`
	// If the feedback state is `requires_action`, then you can send a string message that communicates the action to be taken by the merchant.
	// The string must be a single message up to 100 characters long and must end with a period.
	// You need to adhere to the message formatting rules or your requests will fail:
	// - `[Explanation of the problem]. [Suggested action].`
	//
	// **Examples:**
	// - `[Your app name]` is not connected. Connect your account to use this sales channel. `[Learn more]`
	// - `[Your app name]` is not configured. Agree to the terms and conditions to use this app. `[Learn more]`
	// Both `Your app name` and `Learn more` (a button which directs merchants to your app) are automatically populated in the Shopify admin.
	//
	Messages []string `json:"messages,omitempty,omitempty"`
	// The state of the feedback and whether it requires merchant action.
	State ResourceFeedbackState `json:"state"`
}

// A resource limit represents the limits that the resource has.
type ResourceLimit struct {
	// Whether the resource is available.
	Available bool `json:"available"`
	// Quantity available. If null the quantity available is unlimited.
	QuantityAvailable *int `json:"quantityAvailable,omitempty,omitempty"`
	// Quantity limit of the resource. If null the quantity is unlimited.
	QuantityLimit *int `json:"quantityLimit,omitempty,omitempty"`
	// Quantity used of the resource. If null the quantity used cannot be retrieved.
	QuantityUsed *int `json:"quantityUsed,omitempty,omitempty"`
}

// A resource publication represents information about the publication of a resource.
// An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
//
// See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
type ResourcePublication struct {
	// The channel the resource publication is published to.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
	// If false, then the resource publication is neither published nor scheduled to be published.
	//
	IsPublished bool `json:"isPublished"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	// If the product isn't published, then this field returns an epoch timestamp.
	//
	PublishDate string `json:"publishDate"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable"`
}

// An auto-generated type for paginating through multiple ResourcePublications.
type ResourcePublicationConnection struct {
	// A list of edges.
	Edges []ResourcePublicationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ResourcePublicationEdge.
	Nodes []ResourcePublication `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublication and a cursor during pagination.
type ResourcePublicationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ResourcePublicationEdge.
	Node *ResourcePublication `json:"node,omitempty"`
}

// A resource publication represents information about the publication of a resource.
// Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
//
// See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
type ResourcePublicationV2 struct {
	// Whether the resource publication is published. If true, then the resource publication is published to the publication.
	// If false, then the resource publication is staged to be published to the publication.
	//
	IsPublished bool `json:"isPublished"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	PublishDate *string `json:"publishDate,omitempty,omitempty"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable"`
}

// An auto-generated type for paginating through multiple ResourcePublicationV2s.
type ResourcePublicationV2Connection struct {
	// A list of edges.
	Edges []ResourcePublicationV2Edge `json:"edges,omitempty"`
	// A list of the nodes contained in ResourcePublicationV2Edge.
	Nodes []ResourcePublicationV2 `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
type ResourcePublicationV2Edge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ResourcePublicationV2Edge.
	Node *ResourcePublicationV2 `json:"node,omitempty"`
}

// Represents a return.
type Return struct {
	// Additional information about the declined return.
	Decline *ReturnDecline `json:"decline,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the return.
	Name string `json:"name"`
	// The order that the return belongs to.
	Order *Order `json:"order,omitempty"`
	// The list of refunds associated with the return.
	Refunds *RefundConnection `json:"refunds,omitempty"`
	// The return line items attached to the return.
	ReturnLineItems *ReturnLineItemConnection `json:"returnLineItems,omitempty"`
	// The list of reverse fulfillment orders for the return.
	ReverseFulfillmentOrders *ReverseFulfillmentOrderConnection `json:"reverseFulfillmentOrders,omitempty"`
	// The status of the return.
	Status ReturnStatus `json:"status"`
	// A suggested refund for the return.
	SuggestedRefund *SuggestedReturnRefund `json:"suggestedRefund,omitempty,omitempty"`
	// The sum of all line item quantities for the return.
	TotalQuantity int `json:"totalQuantity"`
}

func (Return) IsNode() {}

// A globally-unique ID.
func (this Return) GetID() string { return this.ID }

// The input fields for approving a customer's return request.
type ReturnApproveRequestInput struct {
	// The ID of the return that's being approved.
	ID string `json:"id"`
}

// Return type for `returnApproveRequest` mutation.
type ReturnApproveRequestPayload struct {
	// The approved return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// Return type for `returnCancel` mutation.
type ReturnCancelPayload struct {
	// The canceled return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// Return type for `returnClose` mutation.
type ReturnClosePayload struct {
	// The closed return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Returns.
type ReturnConnection struct {
	// A list of edges.
	Edges []ReturnEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReturnEdge.
	Nodes []Return `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `returnCreate` mutation.
type ReturnCreatePayload struct {
	// The created return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// Additional information about why a merchant declined the customer's return request.
type ReturnDecline struct {
	// The notification message sent to the customer about their declined return request.
	// Maximum length: 500 characters.
	//
	Note *string `json:"note,omitempty,omitempty"`
	// The reason the customer's return request was declined.
	Reason ReturnDeclineReason `json:"reason"`
}

// The input fields for declining a customer's return request.
type ReturnDeclineRequestInput struct {
	// The ID of the return that's being declined.
	ID string `json:"id"`
	// The reason why the merchant declined the customer's return request.
	DeclineReason ReturnDeclineReason `json:"declineReason"`
}

// Return type for `returnDeclineRequest` mutation.
type ReturnDeclineRequestPayload struct {
	// The declined return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Return and a cursor during pagination.
type ReturnEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReturnEdge.
	Node *Return `json:"node,omitempty"`
}

// The input fields for a return.
type ReturnInput struct {
	// The ID of the order to be returned.
	OrderID string `json:"orderId"`
	// The return line items list to be handled.
	ReturnLineItems []ReturnLineItemInput `json:"returnLineItems,omitempty"`
	// When `true` the customer will receive a notification if there is an `Order.email` present.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty,omitempty"`
	// The UTC date and time when the return was first solicited by the customer.
	RequestedAt *string `json:"requestedAt,omitempty,omitempty"`
}

// A return line item.
type ReturnLineItem struct {
	// A note from the customer that describes the item to be returned. Maximum length: 300 characters.
	CustomerNote *string `json:"customerNote,omitempty,omitempty"`
	// The fulfillment line item from which items are returned.
	FulfillmentLineItem *FulfillmentLineItem `json:"fulfillmentLineItem,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The quantity being returned.
	Quantity int `json:"quantity"`
	// The quantity that can be refunded.
	RefundableQuantity int `json:"refundableQuantity"`
	// The quantity that was refunded.
	RefundedQuantity int `json:"refundedQuantity"`
	// The reason for returning the item.
	ReturnReason ReturnReason `json:"returnReason"`
	// Additional information about the reason for the return. Maximum length: 255 characters.
	ReturnReasonNote string `json:"returnReasonNote"`
	// The total weight of the item.
	TotalWeight *Weight `json:"totalWeight,omitempty,omitempty"`
	// The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied.
	WithCodeDiscountedTotalPriceSet *MoneyBag `json:"withCodeDiscountedTotalPriceSet,omitempty"`
}

func (ReturnLineItem) IsNode() {}

// A globally-unique ID.
func (this ReturnLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReturnLineItems.
type ReturnLineItemConnection struct {
	// A list of edges.
	Edges []ReturnLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReturnLineItemEdge.
	Nodes []ReturnLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ReturnLineItem and a cursor during pagination.
type ReturnLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReturnLineItemEdge.
	Node *ReturnLineItem `json:"node,omitempty"`
}

// The input fields for a return line item.
type ReturnLineItemInput struct {
	// The ID of the fulfillment line item to be returned.
	// Specifically, this field expects a `FulfillmentLineItem.id`.
	//
	FulfillmentLineItemID string `json:"fulfillmentLineItemId"`
	// The quantity of the item to be returned.
	Quantity int `json:"quantity"`
	// The reason for the item to be returned.
	ReturnReason ReturnReason `json:"returnReason"`
	// A note about the reason that the item is being returned.
	// A note can be provided only if the return reason is `OTHER`.
	// Maximum length: 255 characters.
	//
	ReturnReasonNote *string `json:"returnReasonNote,omitempty,omitempty"`
}

// The input fields to refund a return.
type ReturnRefundInput struct {
	// The ID of the return.
	ReturnID string `json:"returnId"`
	// A list of return line items to refund.
	ReturnRefundLineItems []ReturnRefundLineItemInput `json:"returnRefundLineItems,omitempty"`
	// The shipping amount to refund.
	RefundShipping *RefundShippingInput `json:"refundShipping,omitempty,omitempty"`
	// A list of duties to refund.
	RefundDuties []RefundDutyInput `json:"refundDuties,omitempty,omitempty"`
	// A list of transactions involved in refunding the return.
	OrderTransactions []ReturnRefundOrderTransactionInput `json:"orderTransactions,omitempty,omitempty"`
	// Whether to send a refund notification to the customer.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty,omitempty"`
}

// The input fields for a return refund line item.
type ReturnRefundLineItemInput struct {
	// The ID of the return line item to be refunded.
	ReturnLineItemID string `json:"returnLineItemId"`
	// The quantity of the return line item to be refunded.
	Quantity int `json:"quantity"`
}

// The input fields to create order transactions when refunding a return.
type ReturnRefundOrderTransactionInput struct {
	// The amount of money for the transaction in the presentment currency of the order.
	TransactionAmount *MoneyInput `json:"transactionAmount,omitempty"`
	// The ID of the parent order transaction. The transaction must be of kind `CAPTURE` or a `SALE`.
	ParentID string `json:"parentId"`
}

// Return type for `returnRefund` mutation.
type ReturnRefundPayload struct {
	// The created refund.
	Refund *Refund `json:"refund,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// Return type for `returnReopen` mutation.
type ReturnReopenPayload struct {
	// The reopened return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// The input fields for requesting a return.
type ReturnRequestInput struct {
	// The ID of the order that's being returned.
	OrderID string `json:"orderId"`
	// The line items that are being handled in the return.
	ReturnLineItems []ReturnRequestLineItemInput `json:"returnLineItems,omitempty"`
}

// The input fields for a return line item.
type ReturnRequestLineItemInput struct {
	// The ID of the fulfillment line item to be returned.
	// Specifically, this field expects a `FulfillmentLineItem.id`.
	//
	FulfillmentLineItemID string `json:"fulfillmentLineItemId"`
	// The quantity of the item that's being returned.
	Quantity int `json:"quantity"`
	// The reason why the line item is being returned.
	ReturnReason ReturnReason `json:"returnReason"`
	// A note from the customer that describes the item to be returned.
	// For example, the note can communicate issues with the item to the merchant.
	// Maximum length: 300 characters.
	//
	CustomerNote *string `json:"customerNote,omitempty,omitempty"`
}

// Return type for `returnRequest` mutation.
type ReturnRequestPayload struct {
	// The requested return.
	Return *Return `json:"return,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of a return mutation.
type ReturnUserError struct {
	// The error code.
	Code *ReturnErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ReturnUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ReturnUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ReturnUserError) GetMessage() string { return this.Message }

// A returnable fulfillment, which is an order that has been delivered
// and is eligible to be returned to the merchant.
type ReturnableFulfillment struct {
	// The fulfillment that the returnable fulfillment refers to.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The unique ID of the Returnable Fulfillment.
	ID string `json:"id"`
	// The list of returnable fulfillment line items.
	ReturnableFulfillmentLineItems *ReturnableFulfillmentLineItemConnection `json:"returnableFulfillmentLineItems,omitempty"`
}

func (ReturnableFulfillment) IsNode() {}

// A globally-unique ID.
func (this ReturnableFulfillment) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReturnableFulfillments.
type ReturnableFulfillmentConnection struct {
	// A list of edges.
	Edges []ReturnableFulfillmentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReturnableFulfillmentEdge.
	Nodes []ReturnableFulfillment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
type ReturnableFulfillmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReturnableFulfillmentEdge.
	Node *ReturnableFulfillment `json:"node,omitempty"`
}

// A returnable fulfillment line item.
type ReturnableFulfillmentLineItem struct {
	// The fulfillment line item that can be returned.
	FulfillmentLineItem *FulfillmentLineItem `json:"fulfillmentLineItem,omitempty"`
	// The quantity available to be returned.
	Quantity int `json:"quantity"`
}

// An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
type ReturnableFulfillmentLineItemConnection struct {
	// A list of edges.
	Edges []ReturnableFulfillmentLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReturnableFulfillmentLineItemEdge.
	Nodes []ReturnableFulfillmentLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
type ReturnableFulfillmentLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReturnableFulfillmentLineItemEdge.
	Node *ReturnableFulfillmentLineItem `json:"node,omitempty"`
}

// A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
// For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
// The reverse delivery contains the context of the items sent back, how they're being sent back
// (for example, a shipping label), and the current state of the delivery (tracking information).
type ReverseDelivery struct {
	// The deliverable associated with the reverse delivery.
	Deliverable ReverseDeliveryDeliverable `json:"deliverable,omitempty"`
	// The ID of the reverse delivery.
	ID string `json:"id"`
	// The reverse delivery line items attached to the reverse delivery.
	ReverseDeliveryLineItems *ReverseDeliveryLineItemConnection `json:"reverseDeliveryLineItems,omitempty"`
	// The `ReverseFulfillmentOrder` associated with the reverse delivery.
	ReverseFulfillmentOrder *ReverseFulfillmentOrder `json:"reverseFulfillmentOrder,omitempty"`
}

func (ReverseDelivery) IsNode() {}

// A globally-unique ID.
func (this ReverseDelivery) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReverseDeliveries.
type ReverseDeliveryConnection struct {
	// A list of edges.
	Edges []ReverseDeliveryEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReverseDeliveryEdge.
	Nodes []ReverseDelivery `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `reverseDeliveryCreateWithShipping` mutation.
type ReverseDeliveryCreateWithShippingPayload struct {
	// The created reverse delivery.
	ReverseDelivery *ReverseDelivery `json:"reverseDelivery,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// The input fields to dispose a reverse delivery line item.
type ReverseDeliveryDisposeInput struct {
	// The ID of the reverse delivery line item.
	ReverseDeliveryLineItemID string `json:"reverseDeliveryLineItemId"`
	// The quantity of the reverse delivery line item to dispose.
	Quantity int `json:"quantity"`
	// The final arrangement for the reverse delivery line item.
	DispositionType ReverseFulfillmentOrderDispositionType `json:"dispositionType"`
	// The ID of the location where the reverse delivery line item is to be disposed. This is required
	// when the disposition type is RESTOCKED.
	LocationID *string `json:"locationId,omitempty,omitempty"`
}

// Return type for `reverseDeliveryDispose` mutation.
type ReverseDeliveryDisposePayload struct {
	// The disposed reverse delivery line items.
	ReverseDeliveryLineItems []ReverseDeliveryLineItem `json:"reverseDeliveryLineItems,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
type ReverseDeliveryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReverseDeliveryEdge.
	Node *ReverseDelivery `json:"node,omitempty"`
}

// The input fields for a reverse label.
type ReverseDeliveryLabelInput struct {
	// The URL of the label file. If a label file was uploaded to be attached to the delivery, then provide the temporary staged URL.
	FileURL string `json:"fileUrl"`
}

// The return label file information for a reverse delivery.
type ReverseDeliveryLabelV2 struct {
	// The date and time when the reverse delivery label was created.
	CreatedAt string `json:"createdAt"`
	// A public link that can be used to download the label image.
	PublicFileURL *string `json:"publicFileUrl,omitempty,omitempty"`
	// The date and time when the reverse delivery label was updated.
	UpdatedAt string `json:"updatedAt"`
}

// The details about a reverse delivery line item.
type ReverseDeliveryLineItem struct {
	// The dispositions of the item.
	Dispositions []ReverseFulfillmentOrderDisposition `json:"dispositions,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The expected number of units.
	Quantity int `json:"quantity"`
	// The corresponding reverse fulfillment order line item.
	ReverseFulfillmentOrderLineItem *ReverseFulfillmentOrderLineItem `json:"reverseFulfillmentOrderLineItem,omitempty"`
}

func (ReverseDeliveryLineItem) IsNode() {}

// A globally-unique ID.
func (this ReverseDeliveryLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
type ReverseDeliveryLineItemConnection struct {
	// A list of edges.
	Edges []ReverseDeliveryLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReverseDeliveryLineItemEdge.
	Nodes []ReverseDeliveryLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
type ReverseDeliveryLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReverseDeliveryLineItemEdge.
	Node *ReverseDeliveryLineItem `json:"node,omitempty"`
}

// The input fields for a reverse delivery line item.
type ReverseDeliveryLineItemInput struct {
	// The ID of the related reverse fulfillment order line item.
	ReverseFulfillmentOrderLineItemID string `json:"reverseFulfillmentOrderLineItemId"`
	// The quantity of the item to be included in the delivery.
	Quantity int `json:"quantity"`
}

// A reverse shipping deliverable that may include a label and tracking information.
type ReverseDeliveryShippingDeliverable struct {
	// The return label attached to the reverse delivery.
	Label *ReverseDeliveryLabelV2 `json:"label,omitempty,omitempty"`
	// The information to track the reverse delivery.
	Tracking *ReverseDeliveryTrackingV2 `json:"tracking,omitempty,omitempty"`
}

func (ReverseDeliveryShippingDeliverable) IsReverseDeliveryDeliverable() {}

// Return type for `reverseDeliveryShippingUpdate` mutation.
type ReverseDeliveryShippingUpdatePayload struct {
	// The updated reverse delivery.
	ReverseDelivery *ReverseDelivery `json:"reverseDelivery,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// The input fields for tracking information about a return delivery.
type ReverseDeliveryTrackingInput struct {
	// The tracking number for the label.
	Number *string `json:"number,omitempty,omitempty"`
	// The tracking URL for the carrier. If the carrier isn't supported by Shopify, then provide the tracking URL of the delivery.
	URL *string `json:"url,omitempty,omitempty"`
}

// Represents the information used to track a reverse delivery.
type ReverseDeliveryTrackingV2 struct {
	// The provider of the tracking information, in a human-readable format for display purposes.
	CarrierName *string `json:"carrierName,omitempty,omitempty"`
	// The identifier used by the courier to identify the shipment.
	Number *string `json:"number,omitempty,omitempty"`
	// The URL to track a shipment.
	URL *string `json:"url,omitempty,omitempty"`
}

// A group of one or more items in a return that will be processed at a fulfillment service.
// There can be more than one reverse fulfillment order for a return at a given location.
type ReverseFulfillmentOrder struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The list of reverse fulfillment order line items for the reverse fulfillment order.
	LineItems *ReverseFulfillmentOrderLineItemConnection `json:"lineItems,omitempty"`
	// The order associated with the reverse fulfillment order.
	Order *Order `json:"order,omitempty"`
	// The list of reverse deliveries for the reverse fulfillment order.
	ReverseDeliveries *ReverseDeliveryConnection `json:"reverseDeliveries,omitempty"`
	// The status of the reverse fulfillment order.
	Status ReverseFulfillmentOrderStatus `json:"status"`
	// The current confirmation for the reverse fulfillment order from a third-party logistics service.
	// If no third-party service is involved, then this value is `nil`.
	//
	ThirdPartyConfirmation *ReverseFulfillmentOrderThirdPartyConfirmation `json:"thirdPartyConfirmation,omitempty,omitempty"`
}

func (ReverseFulfillmentOrder) IsNode() {}

// A globally-unique ID.
func (this ReverseFulfillmentOrder) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
type ReverseFulfillmentOrderConnection struct {
	// A list of edges.
	Edges []ReverseFulfillmentOrderEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReverseFulfillmentOrderEdge.
	Nodes []ReverseFulfillmentOrder `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields to dispose a reverse fulfillment order line item.
type ReverseFulfillmentOrderDisposeInput struct {
	// The ID of the reverse fulfillment order line item.
	ReverseFulfillmentOrderLineItemID string `json:"reverseFulfillmentOrderLineItemId"`
	// The quantity of the reverse fulfillment order line item to dispose.
	Quantity int `json:"quantity"`
	// The ID of the location where the reverse fulfillment order line item is to be disposed.
	// This is required when the disposition type is RESTOCKED.
	LocationID *string `json:"locationId,omitempty,omitempty"`
	// The final arrangement for the reverse fulfillment order line item.
	DispositionType ReverseFulfillmentOrderDispositionType `json:"dispositionType"`
}

// Return type for `reverseFulfillmentOrderDispose` mutation.
type ReverseFulfillmentOrderDisposePayload struct {
	// The disposed reverse fulfillment order line items.
	ReverseFulfillmentOrderLineItems []ReverseFulfillmentOrderLineItem `json:"reverseFulfillmentOrderLineItems,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ReturnUserError `json:"userErrors,omitempty"`
}

// The details of the arrangement of an item.
type ReverseFulfillmentOrderDisposition struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The location where the disposition occurred.
	Location *Location `json:"location,omitempty,omitempty"`
	// The number of disposed units.
	Quantity int `json:"quantity"`
	// The final arrangement of an item.
	Type ReverseFulfillmentOrderDispositionType `json:"type"`
}

func (ReverseFulfillmentOrderDisposition) IsNode() {}

// A globally-unique ID.
func (this ReverseFulfillmentOrderDisposition) GetID() string { return this.ID }

// An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
type ReverseFulfillmentOrderEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReverseFulfillmentOrderEdge.
	Node *ReverseFulfillmentOrder `json:"node,omitempty"`
}

// The details about a reverse fulfillment order line item.
type ReverseFulfillmentOrderLineItem struct {
	// The dispositions of the item.
	Dispositions []ReverseFulfillmentOrderDisposition `json:"dispositions,omitempty"`
	// The corresponding fulfillment line item for a reverse fulfillment order line item.
	FulfillmentLineItem *FulfillmentLineItem `json:"fulfillmentLineItem,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The total number of units to be processed.
	TotalQuantity int `json:"totalQuantity"`
}

func (ReverseFulfillmentOrderLineItem) IsNode() {}

// A globally-unique ID.
func (this ReverseFulfillmentOrderLineItem) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
type ReverseFulfillmentOrderLineItemConnection struct {
	// A list of edges.
	Edges []ReverseFulfillmentOrderLineItemEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge.
	Nodes []ReverseFulfillmentOrderLineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
type ReverseFulfillmentOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ReverseFulfillmentOrderLineItemEdge.
	Node *ReverseFulfillmentOrderLineItem `json:"node,omitempty"`
}

// The third-party confirmation of a reverse fulfillment order.
type ReverseFulfillmentOrderThirdPartyConfirmation struct {
	// The status of the reverse fulfillment order third-party confirmation.
	Status ReverseFulfillmentOrderThirdPartyConfirmationStatus `json:"status"`
}

// A row count represents rows on background operation.
type RowCount struct {
	// Estimated number of rows contained within this background operation.
	Count int `json:"count"`
	// Whether the operation exceeds max number of reportable rows.
	ExceedsMax bool `json:"exceedsMax"`
}

// SEO information.
type Seo struct {
	// SEO Description.
	Description *string `json:"description,omitempty,omitempty"`
	// SEO Title.
	Title *string `json:"title,omitempty,omitempty"`
}

// The input fields for SEO information.
type SEOInput struct {
	// SEO title of the product.
	Title *string `json:"title,omitempty,omitempty"`
	// SEO description of the product.
	Description *string `json:"description,omitempty,omitempty"`
}

// The additional fee details for a line item.
type SaleAdditionalFee struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The name of the additional fee.
	Name string `json:"name"`
	// The price of the additional fee.
	Price *MoneyBag `json:"price,omitempty"`
	// A list of taxes charged on the additional fee.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
}

func (SaleAdditionalFee) IsNode() {}

// A globally-unique ID.
func (this SaleAdditionalFee) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple Sales.
type SaleConnection struct {
	// A list of edges.
	Edges []SaleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SaleEdge.
	Nodes []Sale `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Sale and a cursor during pagination.
type SaleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SaleEdge.
	Node Sale `json:"node"`
}

// The tax allocated to a sale from a single tax line.
type SaleTax struct {
	// The portion of the total tax amount on the related sale that comes from the associated tax line.
	Amount *MoneyBag `json:"amount,omitempty"`
	// The unique ID for the sale tax.
	ID string `json:"id"`
	// The tax line associated with the sale.
	TaxLine *TaxLine `json:"taxLine,omitempty"`
}

// An auto-generated type for paginating through multiple SalesAgreements.
type SalesAgreementConnection struct {
	// A list of edges.
	Edges []SalesAgreementEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SalesAgreementEdge.
	Nodes []SalesAgreement `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SalesAgreement and a cursor during pagination.
type SalesAgreementEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SalesAgreementEdge.
	Node SalesAgreement `json:"node"`
}

// A saved search is a representation of a search query saved in the admin.
type SavedSearch struct {
	// The filters of a saved search.
	Filters []SearchFilter `json:"filters,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The name of a saved search.
	Name string `json:"name"`
	// The query string of a saved search. This includes search terms and filters.
	Query string `json:"query"`
	// The type of resource this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType"`
	// The search terms of a saved search.
	SearchTerms string `json:"searchTerms"`
}

func (SavedSearch) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this SavedSearch) GetLegacyResourceID() string { return this.LegacyResourceID }

func (SavedSearch) IsNode() {}

// A globally-unique ID.
func (this SavedSearch) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple SavedSearches.
type SavedSearchConnection struct {
	// A list of edges.
	Edges []SavedSearchEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SavedSearchEdge.
	Nodes []SavedSearch `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields to create a saved search.
type SavedSearchCreateInput struct {
	// The type of resource this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType"`
	// A descriptive name of the saved search.
	Name string `json:"name"`
	// The query string of a saved search. This includes search terms and filters.
	Query string `json:"query"`
}

// Return type for `savedSearchCreate` mutation.
type SavedSearchCreatePayload struct {
	// The saved search that was created.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields to delete a saved search.
type SavedSearchDeleteInput struct {
	// ID of the saved search to delete.
	ID string `json:"id"`
}

// Return type for `savedSearchDelete` mutation.
type SavedSearchDeletePayload struct {
	// The ID of the saved search that was deleted.
	DeletedSavedSearchID *string `json:"deletedSavedSearchId,omitempty,omitempty"`
	// The shop of the saved search that was deleted.
	Shop *Shop `json:"shop,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SavedSearch and a cursor during pagination.
type SavedSearchEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SavedSearchEdge.
	Node *SavedSearch `json:"node,omitempty"`
}

// The input fields to update a saved search.
type SavedSearchUpdateInput struct {
	// ID of the saved search to update.
	ID string `json:"id"`
	// A descriptive name of the saved search.
	Name *string `json:"name,omitempty,omitempty"`
	// The query string of a saved search. This included search terms and filters.
	Query *string `json:"query,omitempty,omitempty"`
}

// Return type for `savedSearchUpdate` mutation.
type SavedSearchUpdatePayload struct {
	// The saved search that was updated.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Script discount applications capture the intentions of a discount that
// was created by a Shopify Script for an order's line item or shipping line.
//
// Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
type ScriptDiscountApplication struct {
	// The method by which the discount's value is applied to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod"`
	// The description of the application as defined by the Script.
	Description string `json:"description"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	//
	Index int `json:"index"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType"`
	// The title of the application as defined by the Script.
	Title string `json:"title"`
	// The value of the discount application.
	Value PricingValue `json:"value"`
}

func (ScriptDiscountApplication) IsDiscountApplication() {}

// The method by which the discount's value is applied to its entitled items.
func (this ScriptDiscountApplication) GetAllocationMethod() DiscountApplicationAllocationMethod {
	return this.AllocationMethod
}

// An ordered index that can be used to identify the discount application and indicate the precedence
// of the discount application for calculations.
func (this ScriptDiscountApplication) GetIndex() int { return this.Index }

// How the discount amount is distributed on the discounted lines.
func (this ScriptDiscountApplication) GetTargetSelection() DiscountApplicationTargetSelection {
	return this.TargetSelection
}

// Whether the discount is applied on line items or shipping lines.
func (this ScriptDiscountApplication) GetTargetType() DiscountApplicationTargetType {
	return this.TargetType
}

// The value of the discount application.
func (this ScriptDiscountApplication) GetValue() PricingValue { return this.Value }

// <div class="note"><h4>Theme app extensions</h4>
//
//	<p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
//
// A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the order status page of checkout.
type ScriptTag struct {
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script will be served as is.
	//
	Cache bool `json:"cache"`
	// The date and time when the script tag was created.
	CreatedAt string `json:"createdAt"`
	// The page or pages on the online store that the script should be included.
	DisplayScope ScriptTagDisplayScope `json:"displayScope"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The URL to the remote script.
	Src string `json:"src"`
	// The date and time when the script tag was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ScriptTag) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this ScriptTag) GetLegacyResourceID() string { return this.LegacyResourceID }

func (ScriptTag) IsNode() {}

// A globally-unique ID.
func (this ScriptTag) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ScriptTags.
type ScriptTagConnection struct {
	// A list of edges.
	Edges []ScriptTagEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ScriptTagEdge.
	Nodes []ScriptTag `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `scriptTagCreate` mutation.
type ScriptTagCreatePayload struct {
	// The script tag that was created.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `scriptTagDelete` mutation.
type ScriptTagDeletePayload struct {
	// The ID of the deleted script tag.
	DeletedScriptTagID *string `json:"deletedScriptTagId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ScriptTag and a cursor during pagination.
type ScriptTagEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ScriptTagEdge.
	Node *ScriptTag `json:"node,omitempty"`
}

// The input fields for a script tag. This input object is used when creating or updating
// a script tag to specify its URL, where it should be included, and how it will be cached.
type ScriptTagInput struct {
	// The URL of the remote script. For example: `https://example.com/path/to/script.js`.
	Src *string `json:"src,omitempty,omitempty"`
	// The page or pages on the online store where the script should be included.
	DisplayScope *ScriptTagDisplayScope `json:"displayScope,omitempty,omitempty"`
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script is served as is.
	// The default value is `false`.
	//
	Cache *bool `json:"cache,omitempty,omitempty"`
}

// Return type for `scriptTagUpdate` mutation.
type ScriptTagUpdatePayload struct {
	// The script tag that was updated.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A filter in a search query represented by a key value pair.
type SearchFilter struct {
	// The key of the search filter.
	Key string `json:"key"`
	// The value of the search filter.
	Value string `json:"value"`
}

// A list of search filters along with their specific options in value and label pair for filtering.
type SearchFilterOptions struct {
	// A list of options that can be use to filter product availability.
	ProductAvailability []FilterOption `json:"productAvailability,omitempty"`
}

// Represents an individual result returned from a search.
type SearchResult struct {
	// Returns the search result description text.
	Description *string `json:"description,omitempty,omitempty"`
	// Returns the Image resource presented to accompany a search result.
	Image *Image `json:"image,omitempty,omitempty"`
	// Returns the ID of the resource returned in the search result.
	Reference Node `json:"reference"`
	// Returns the resource title.
	Title string `json:"title"`
	// Returns the absolute URL to the resource in the search result.
	URL string `json:"url"`
}

// The connection type for SearchResult.
type SearchResultConnection struct {
	// A list of edges.
	Edges []SearchResultEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// Information to aid in pagination.
	ResultsAfterCount int `json:"resultsAfterCount"`
}

// An auto-generated type which holds one SearchResult and a cursor during pagination.
type SearchResultEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SearchResultEdge.
	Node *SearchResult `json:"node,omitempty"`
}

// A dynamic collection of customers based on specific criteria.
type Segment struct {
	// The date and time when the segment was added to the store.
	CreationDate string `json:"creationDate"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The date and time when the segment was last updated.
	LastEditDate string `json:"lastEditDate"`
	// The name of the segment.
	Name string `json:"name"`
	// A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
	Query string `json:"query"`
}

func (Segment) IsNode() {}

// A globally-unique ID.
func (this Segment) GetID() string { return this.ID }

// A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
type SegmentAssociationFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentAssociationFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentAssociationFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentAssociationFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentAssociationFilter) GetQueryName() string { return this.QueryName }

// The statistics of a given attribute.
type SegmentAttributeStatistics struct {
	// The average of a given attribute.
	Average float64 `json:"average"`
	// The sum of a given attribute.
	Sum float64 `json:"sum"`
}

// A filter with a Boolean value that's been added to a segment query.
type SegmentBooleanFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentBooleanFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentBooleanFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentBooleanFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentBooleanFilter) GetQueryName() string { return this.QueryName }

// An auto-generated type for paginating through multiple Segments.
type SegmentConnection struct {
	// A list of edges.
	Edges []SegmentEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SegmentEdge.
	Nodes []Segment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `segmentCreate` mutation.
type SegmentCreatePayload struct {
	// The newly created segment.
	Segment *Segment `json:"segment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A filter with a date value that's been added to a segment query.
type SegmentDateFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentDateFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentDateFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentDateFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentDateFilter) GetQueryName() string { return this.QueryName }

// Return type for `segmentDelete` mutation.
type SegmentDeletePayload struct {
	// ID of the deleted segment.
	DeletedSegmentID *string `json:"deletedSegmentId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Segment and a cursor during pagination.
type SegmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentEdge.
	Node *Segment `json:"node,omitempty"`
}

// A filter with a set of possible values that's been added to a segment query.
type SegmentEnumFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentEnumFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentEnumFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentEnumFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentEnumFilter) GetQueryName() string { return this.QueryName }

// A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
type SegmentEventFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The parameters for an event segment filter.
	Parameters []SegmentEventFilterParameter `json:"parameters,omitempty"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
	// The return value type for an event segment filter.
	ReturnValueType string `json:"returnValueType"`
}

func (SegmentEventFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentEventFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentEventFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentEventFilter) GetQueryName() string { return this.QueryName }

// The parameters for an event segment filter.
type SegmentEventFilterParameter struct {
	// Whether the parameter accepts a list of values.
	AcceptsMultipleValues bool `json:"acceptsMultipleValues"`
	// The localized description of the parameter.
	LocalizedDescription string `json:"localizedDescription"`
	// The localized name of the parameter.
	LocalizedName string `json:"localizedName"`
	// Whether the parameter is optional.
	Optional bool `json:"optional"`
	// The type of the parameter.
	ParameterType string `json:"parameterType"`
	// The query name of the parameter.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple SegmentFilters.
type SegmentFilterConnection struct {
	// A list of edges.
	Edges []SegmentFilterEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SegmentFilterEdge.
	Nodes []SegmentFilter `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentFilter and a cursor during pagination.
type SegmentFilterEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentFilterEdge.
	Node SegmentFilter `json:"node"`
}

// A filter with a double-precision, floating-point value that's been added to a segment query.
type SegmentFloatFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentFloatFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentFloatFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentFloatFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentFloatFilter) GetQueryName() string { return this.QueryName }

// A filter with an integer that's been added to a segment query.
type SegmentIntegerFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentIntegerFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentIntegerFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentIntegerFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentIntegerFilter) GetQueryName() string { return this.QueryName }

// The response type for the `segmentMembership` object.
type SegmentMembership struct {
	// A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
	IsMember bool `json:"isMember"`
	// A `segmentId` that is used for testing membership.
	SegmentID string `json:"segmentId"`
}

// A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
type SegmentMembershipResponse struct {
	// The membership status for the given list of segments.
	Memberships []SegmentMembership `json:"memberships,omitempty"`
}

// A segment and its corresponding saved search.
// For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
type SegmentMigration struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The ID of the saved search.
	SavedSearchID string `json:"savedSearchId"`
	// The ID of the segment.
	SegmentID *string `json:"segmentId,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple SegmentMigrations.
type SegmentMigrationConnection struct {
	// A list of edges.
	Edges []SegmentMigrationEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SegmentMigrationEdge.
	Nodes []SegmentMigration `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentMigration and a cursor during pagination.
type SegmentMigrationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentMigrationEdge.
	Node *SegmentMigration `json:"node,omitempty"`
}

// The statistics of a given segment.
type SegmentStatistics struct {
	// The statistics of a given attribute.
	AttributeStatistics *SegmentAttributeStatistics `json:"attributeStatistics,omitempty"`
}

// A filter with a string that's been added to a segment query.
type SegmentStringFilter struct {
	// The localized name of the filter.
	LocalizedName string `json:"localizedName"`
	// Whether a file can have multiple values for a single customer.
	MultiValue bool `json:"multiValue"`
	// The query name of the filter.
	QueryName string `json:"queryName"`
}

func (SegmentStringFilter) IsSegmentFilter() {}

// The localized name of the filter.
func (this SegmentStringFilter) GetLocalizedName() string { return this.LocalizedName }

// Whether a file can have multiple values for a single customer.
func (this SegmentStringFilter) GetMultiValue() bool { return this.MultiValue }

// The query name of the filter.
func (this SegmentStringFilter) GetQueryName() string { return this.QueryName }

// Return type for `segmentUpdate` mutation.
type SegmentUpdatePayload struct {
	// The updated segment.
	Segment *Segment `json:"segment,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A list of suggested values associated with an individual segment. A
// segment is a group of members, such as customers, that meet specific
// criteria.
type SegmentValue struct {
	// The localized version of the value's name. This name is displayed to the merchant.
	LocalizedValue string `json:"localizedValue"`
	// The name of the query associated with the suggestion.
	QueryName string `json:"queryName"`
}

// An auto-generated type for paginating through multiple SegmentValues.
type SegmentValueConnection struct {
	// A list of edges.
	Edges []SegmentValueEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SegmentValueEdge.
	Nodes []SegmentValue `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SegmentValue and a cursor during pagination.
type SegmentValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SegmentValueEdge.
	Node *SegmentValue `json:"node,omitempty"`
}

// Properties used by customers to select a product variant.
// Products can have multiple options, like different sizes or colors.
type SelectedOption struct {
	// The product option’s name.
	Name string `json:"name"`
	// The product option’s value.
	Value string `json:"value"`
}

// Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
// and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
// up these records if you need to restore them later.
//
// For more information on selling plans, refer to
// [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
type SellingPlan struct {
	// A selling plan policy which describes the recurring billing details.
	BillingPolicy SellingPlanBillingPolicy `json:"billingPolicy"`
	// The category used to classify the selling plan for reporting purposes.
	Category *SellingPlanCategory `json:"category,omitempty,omitempty"`
	// The date and time when the selling plan was created.
	CreatedAt string `json:"createdAt"`
	// A selling plan policy which describes the delivery details.
	DeliveryPolicy SellingPlanDeliveryPolicy `json:"deliveryPolicy"`
	// Buyer facing string which describes the selling plan commitment.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// When to reserve inventory for a selling plan.
	InventoryPolicy *SellingPlanInventoryPolicy `json:"inventoryPolicy,omitempty,omitempty"`
	// A customer-facing description of the selling plan.
	//
	// If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
	//
	Name string `json:"name"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// Relative position of the selling plan for display. A lower position will be displayed before a higher position.
	Position *int `json:"position,omitempty,omitempty"`
	// Selling plan pricing details.
	PricingPolicies []SellingPlanPricingPolicy `json:"pricingPolicies,omitempty"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
}

func (SellingPlan) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this SellingPlan) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (SellingPlan) IsNode() {}

// A globally-unique ID.
func (this SellingPlan) GetID() string { return this.ID }

// Represents a selling plan policy anchor.
type SellingPlanAnchor struct {
	// The cutoff day for the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is MONTHDAY, then the value must be between 1-31.
	//
	// If `type` is YEARDAY, then the value must be `null`.
	//
	CutoffDay *int `json:"cutoffDay,omitempty,omitempty"`
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	//
	Day int `json:"day"`
	// The month of the anchor. If type is different than YEARDAY, then the value must
	// be `null` or between 1-12.
	//
	Month *int `json:"month,omitempty,omitempty"`
	// Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
	//
	Type SellingPlanAnchorType `json:"type"`
}

// The input fields required to create or update a selling plan anchor.
type SellingPlanAnchorInput struct {
	// Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY.
	//
	Type *SellingPlanAnchorType `json:"type,omitempty,omitempty"`
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	//
	Day *int `json:"day,omitempty,omitempty"`
	// The month of the anchor. If type is different than YEARDAY, then the value must
	// be `null` or between 1-12.
	//
	Month *int `json:"month,omitempty,omitempty"`
	// The cutoff day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is MONTHDAY, then the value must be between 1-31.
	//
	// If `type` is YEARDAY, then the value must be `null`.
	//
	// This field should only be set if the cutoff field for the delivery policy is `null`.
	//
	CutoffDay *int `json:"cutoffDay,omitempty,omitempty"`
}

// The input fields that are required to create or update a billing policy type.
type SellingPlanBillingPolicyInput struct {
	// The fixed billing policy details.
	Fixed *SellingPlanFixedBillingPolicyInput `json:"fixed,omitempty,omitempty"`
	// The recurring billing policy details.
	Recurring *SellingPlanRecurringBillingPolicyInput `json:"recurring,omitempty,omitempty"`
}

// The amount charged at checkout when the full amount isn't charged at checkout.
type SellingPlanCheckoutCharge struct {
	// The charge type for the checkout charge.
	Type SellingPlanCheckoutChargeType `json:"type"`
	// The charge value for the checkout charge.
	Value SellingPlanCheckoutChargeValue `json:"value"`
}

// The input fields that are required to create or update a checkout charge.
type SellingPlanCheckoutChargeInput struct {
	// The checkout charge type defined by the policy.
	Type *SellingPlanCheckoutChargeType `json:"type,omitempty,omitempty"`
	// The checkout charge value defined by the policy.
	Value *SellingPlanCheckoutChargeValueInput `json:"value,omitempty,omitempty"`
}

// The percentage value of the price used for checkout charge.
type SellingPlanCheckoutChargePercentageValue struct {
	// The percentage value of the price used for checkout charge.
	Percentage float64 `json:"percentage"`
}

func (SellingPlanCheckoutChargePercentageValue) IsSellingPlanCheckoutChargeValue() {}

// The input fields required to create or update an checkout charge value.
type SellingPlanCheckoutChargeValueInput struct {
	// The percentage value.
	Percentage *float64 `json:"percentage,omitempty,omitempty"`
	// The fixed value for an checkout charge.
	FixedValue *null.String `json:"fixedValue,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlans.
type SellingPlanConnection struct {
	// A list of edges.
	Edges []SellingPlanEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SellingPlanEdge.
	Nodes []SellingPlan `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields that are required to create or update a delivery policy.
type SellingPlanDeliveryPolicyInput struct {
	// The fixed delivery policy details.
	Fixed *SellingPlanFixedDeliveryPolicyInput `json:"fixed,omitempty,omitempty"`
	// The recurring delivery policy details.
	Recurring *SellingPlanRecurringDeliveryPolicyInput `json:"recurring,omitempty,omitempty"`
}

// An auto-generated type which holds one SellingPlan and a cursor during pagination.
type SellingPlanEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SellingPlanEdge.
	Node *SellingPlan `json:"node,omitempty"`
}

// The fixed selling plan billing policy.
type SellingPlanFixedBillingPolicy struct {
	// The checkout charge when the full amount isn't charged at checkout.
	CheckoutCharge *SellingPlanCheckoutCharge `json:"checkoutCharge,omitempty"`
	// The exact time when to capture the full payment.
	RemainingBalanceChargeExactTime *string `json:"remainingBalanceChargeExactTime,omitempty,omitempty"`
	// The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
	//
	RemainingBalanceChargeTimeAfterCheckout *string `json:"remainingBalanceChargeTimeAfterCheckout,omitempty,omitempty"`
	// When to capture payment for amount due.
	RemainingBalanceChargeTrigger SellingPlanRemainingBalanceChargeTrigger `json:"remainingBalanceChargeTrigger"`
}

func (SellingPlanFixedBillingPolicy) IsSellingPlanBillingPolicy() {}

// The input fields required to create or update a fixed billing policy.
type SellingPlanFixedBillingPolicyInput struct {
	// When to capture the payment for the amount due.
	RemainingBalanceChargeTrigger *SellingPlanRemainingBalanceChargeTrigger `json:"remainingBalanceChargeTrigger,omitempty,omitempty"`
	// The date and time to capture the full payment.
	RemainingBalanceChargeExactTime *string `json:"remainingBalanceChargeExactTime,omitempty,omitempty"`
	// The period after capturing the payment for the amount due (`remainingBalanceChargeTrigger`), and before capturing the full payment. Expressed as an ISO8601 duration.
	RemainingBalanceChargeTimeAfterCheckout *string `json:"remainingBalanceChargeTimeAfterCheckout,omitempty,omitempty"`
	// The checkout charge policy for the selling plan.
	CheckoutCharge *SellingPlanCheckoutChargeInput `json:"checkoutCharge,omitempty,omitempty"`
}

// Represents a fixed selling plan delivery policy.
type SellingPlanFixedDeliveryPolicy struct {
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// A buffer period for orders to be included in next fulfillment anchor.
	Cutoff *int `json:"cutoff,omitempty,omitempty"`
	// The date and time when the fulfillment should trigger.
	FulfillmentExactTime *string `json:"fulfillmentExactTime,omitempty,omitempty"`
	// What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
	FulfillmentTrigger SellingPlanFulfillmentTrigger `json:"fulfillmentTrigger"`
	// Whether the delivery policy is merchant or buyer-centric.
	// Buyer-centric delivery policies state the time when the buyer will receive the goods.
	// Merchant-centric delivery policies state the time when the fulfillment should be started.
	// Currently, only merchant-centric delivery policies are supported.
	//
	Intent SellingPlanFixedDeliveryPolicyIntent `json:"intent"`
	// The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
	PreAnchorBehavior SellingPlanFixedDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior"`
}

func (SellingPlanFixedDeliveryPolicy) IsSellingPlanDeliveryPolicy() {}

// The input fields required to create or update a fixed delivery policy.
type SellingPlanFixedDeliveryPolicyInput struct {
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty,omitempty"`
	// What triggers the fulfillment.
	FulfillmentTrigger *SellingPlanFulfillmentTrigger `json:"fulfillmentTrigger,omitempty,omitempty"`
	// The date and time when the fulfillment should trigger.
	FulfillmentExactTime *string `json:"fulfillmentExactTime,omitempty,omitempty"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty,omitempty"`
	// Whether the delivery policy is merchant or buyer-centric.
	Intent *SellingPlanFixedDeliveryPolicyIntent `json:"intent,omitempty,omitempty"`
	// The pre-anchor behavior.
	PreAnchorBehavior *SellingPlanFixedDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior,omitempty,omitempty"`
}

// Represents a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// The date and time when the fixed selling plan pricing policy was created.
	CreatedAt string `json:"createdAt"`
}

func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicyBase() {}

// The price adjustment type.
func (this SellingPlanFixedPricingPolicy) GetAdjustmentType() SellingPlanPricingPolicyAdjustmentType {
	return this.AdjustmentType
}

// The price adjustment value.
func (this SellingPlanFixedPricingPolicy) GetAdjustmentValue() SellingPlanPricingPolicyAdjustmentValue {
	return this.AdjustmentValue
}

func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicy() {}

// The input fields required to create or update a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *string `json:"id,omitempty,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty,omitempty"`
}

// Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
// and associated records (selling plans and policies) are deleted 48 hours after a merchant
// uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
type SellingPlanGroup struct {
	// The ID for app, exposed in Liquid and product JSON.
	AppID *string `json:"appId,omitempty,omitempty"`
	// Whether the given product is directly associated to the selling plan group.
	AppliesToProduct bool `json:"appliesToProduct"`
	// Whether the given product variant is directly associated to the selling plan group.
	AppliesToProductVariant bool `json:"appliesToProductVariant"`
	// Whether any of the product variants of the given product are associated to the selling plan group.
	//
	AppliesToProductVariants bool `json:"appliesToProductVariants"`
	// The date and time when the selling plan group was created.
	CreatedAt string `json:"createdAt"`
	// The merchant-facing description of the selling plan group.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The merchant-facing label of the selling plan group.
	MerchantCode string `json:"merchantCode"`
	// The buyer-facing label of the selling plan group.
	Name string `json:"name"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty"`
	// The relative position of the selling plan group for display.
	Position *int `json:"position,omitempty,omitempty"`
	// A count of products associated to the selling plan group.
	ProductCount int `json:"productCount"`
	// A count of product variants associated to the selling plan group.
	ProductVariantCount int `json:"productVariantCount"`
	// Product variants associated to the selling plan group.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// Products associated to the selling plan group.
	Products *ProductConnection `json:"products,omitempty"`
	// Selling plans associated to the selling plan group.
	SellingPlans *SellingPlanConnection `json:"sellingPlans,omitempty"`
	// A summary of the policies associated to the selling plan group.
	Summary *string `json:"summary,omitempty,omitempty"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
}

func (SellingPlanGroup) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this SellingPlanGroup) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (SellingPlanGroup) IsNode() {}

// A globally-unique ID.
func (this SellingPlanGroup) GetID() string { return this.ID }

// Return type for `sellingPlanGroupAddProductVariants` mutation.
type SellingPlanGroupAddProductVariantsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupAddProducts` mutation.
type SellingPlanGroupAddProductsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlanGroups.
type SellingPlanGroupConnection struct {
	// A list of edges.
	Edges []SellingPlanGroupEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SellingPlanGroupEdge.
	Nodes []SellingPlanGroup `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `sellingPlanGroupCreate` mutation.
type SellingPlanGroupCreatePayload struct {
	// The created selling plan group object.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupDelete` mutation.
type SellingPlanGroupDeletePayload struct {
	// The ID of the deleted selling plan group object.
	DeletedSellingPlanGroupID *string `json:"deletedSellingPlanGroupId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
type SellingPlanGroupEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SellingPlanGroupEdge.
	Node *SellingPlanGroup `json:"node,omitempty"`
}

// The input fields required to create or update a selling plan group.
type SellingPlanGroupInput struct {
	// Buyer facing label of the selling plan group.
	Name *string `json:"name,omitempty,omitempty"`
	// ID for app, exposed in Liquid and product JSON.
	AppID *string `json:"appId,omitempty,omitempty"`
	// Merchant facing label of the selling plan group.
	MerchantCode *string `json:"merchantCode,omitempty,omitempty"`
	// Merchant facing description of the selling plan group.
	Description *string `json:"description,omitempty,omitempty"`
	// List of selling plans to create.
	SellingPlansToCreate []SellingPlanInput `json:"sellingPlansToCreate,omitempty,omitempty"`
	// List of selling plans to update.
	SellingPlansToUpdate []SellingPlanInput `json:"sellingPlansToUpdate,omitempty,omitempty"`
	// List of selling plans ids to delete.
	SellingPlansToDelete []string `json:"sellingPlansToDelete,omitempty,omitempty"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty,omitempty"`
	// Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProductVariants` mutation.
type SellingPlanGroupRemoveProductVariantsPayload struct {
	// The removed product variant ids.
	RemovedProductVariantIds []string `json:"removedProductVariantIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProducts` mutation.
type SellingPlanGroupRemoveProductsPayload struct {
	// The removed product ids.
	RemovedProductIds []string `json:"removedProductIds,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// The input fields for resource association with a Selling Plan Group.
type SellingPlanGroupResourceInput struct {
	// The IDs of the Variants to add to the Selling Plan Group.
	ProductVariantIds []string `json:"productVariantIds,omitempty,omitempty"`
	// The IDs of the Products to add to the Selling Plan Group.
	ProductIds []string `json:"productIds,omitempty,omitempty"`
}

// Return type for `sellingPlanGroupUpdate` mutation.
type SellingPlanGroupUpdatePayload struct {
	// The IDs of the deleted Subscription Plans.
	DeletedSellingPlanIds []string `json:"deletedSellingPlanIds,omitempty,omitempty"`
	// The updated Selling Plan Group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Represents a selling plan group custom error.
type SellingPlanGroupUserError struct {
	// The error code.
	Code *SellingPlanGroupUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SellingPlanGroupUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this SellingPlanGroupUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this SellingPlanGroupUserError) GetMessage() string { return this.Message }

// The input fields to create or update a selling plan.
type SellingPlanInput struct {
	// ID of the selling plan.
	ID *string `json:"id,omitempty,omitempty"`
	// Buyer facing string which describes the selling plan content.
	Name *string `json:"name,omitempty,omitempty"`
	// Buyer facing string which describes the selling plan commitment.
	Description *string `json:"description,omitempty,omitempty"`
	// Selling plan policy which describes the billing details.
	BillingPolicy *SellingPlanBillingPolicyInput `json:"billingPolicy,omitempty,omitempty"`
	// A selling plan policy which describes the delivery details.
	DeliveryPolicy *SellingPlanDeliveryPolicyInput `json:"deliveryPolicy,omitempty,omitempty"`
	// A selling plan policy which describes the inventory details.
	InventoryPolicy *SellingPlanInventoryPolicyInput `json:"inventoryPolicy,omitempty,omitempty"`
	// The pricing policies which describe the pricing details. Each selling plan
	// can only contain a maximum of 2 pricing policies.
	//
	PricingPolicies []SellingPlanPricingPolicyInput `json:"pricingPolicies,omitempty,omitempty"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []string `json:"options,omitempty,omitempty"`
	// Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty,omitempty"`
	// The category used to classify this selling plan for reporting purposes.
	Category *SellingPlanCategory `json:"category,omitempty,omitempty"`
}

// The selling plan inventory policy.
type SellingPlanInventoryPolicy struct {
	// When to reserve inventory for the order.
	Reserve SellingPlanReserve `json:"reserve"`
}

// The input fields required to create or update an inventory policy.
type SellingPlanInventoryPolicyInput struct {
	// When to reserve inventory for the order. The value must be ON_FULFILLMENT or ON_SALE.
	Reserve *SellingPlanReserve `json:"reserve,omitempty,omitempty"`
}

// The input fields required to create or update a selling plan pricing policy.
type SellingPlanPricingPolicyInput struct {
	// Recurring pricing policy details.
	Recurring *SellingPlanRecurringPricingPolicyInput `json:"recurring,omitempty,omitempty"`
	// Fixed pricing policy details.
	Fixed *SellingPlanFixedPricingPolicyInput `json:"fixed,omitempty,omitempty"`
}

// The percentage value of a selling plan pricing policy percentage type.
type SellingPlanPricingPolicyPercentageValue struct {
	// The percentage value.
	Percentage float64 `json:"percentage"`
}

func (SellingPlanPricingPolicyPercentageValue) IsSellingPlanPricingPolicyAdjustmentValue() {}

// The input fields required to create or update a pricing policy adjustment value.
type SellingPlanPricingPolicyValueInput struct {
	// The percentage value.
	Percentage *float64 `json:"percentage,omitempty,omitempty"`
	// The fixed value for an fixed amount off or a new policy price.
	FixedValue *null.String `json:"fixedValue,omitempty,omitempty"`
}

// Represents a recurring selling plan billing policy.
type SellingPlanRecurringBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan billing policy was created.
	CreatedAt string `json:"createdAt"`
	// The billing frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval"`
	// The number of intervals between billings.
	IntervalCount int `json:"intervalCount"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty,omitempty"`
}

func (SellingPlanRecurringBillingPolicy) IsSellingPlanBillingPolicy() {}

// The input fields required to create or update a recurring billing policy.
type SellingPlanRecurringBillingPolicyInput struct {
	// The billing frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty,omitempty"`
	// The number of intervals between billings.
	IntervalCount *int `json:"intervalCount,omitempty,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty,omitempty"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty,omitempty"`
}

// Represents a recurring selling plan delivery policy.
type SellingPlanRecurringDeliveryPolicy struct {
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan delivery policy was created.
	CreatedAt string `json:"createdAt"`
	// Number of days which represent a buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty,omitempty"`
	// Whether the delivery policy is merchant or buyer-centric.
	// Buyer-centric delivery policies state the time when the buyer will receive the goods.
	// Merchant-centric delivery policies state the time when the fulfillment should be started.
	// Currently, only merchant-centric delivery policies are supported.
	//
	Intent SellingPlanRecurringDeliveryPolicyIntent `json:"intent"`
	// The delivery frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval"`
	// The number of intervals between deliveries.
	IntervalCount int `json:"intervalCount"`
	// The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
	PreAnchorBehavior SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior"`
}

func (SellingPlanRecurringDeliveryPolicy) IsSellingPlanDeliveryPolicy() {}

// The input fields to create or update a recurring delivery policy.
type SellingPlanRecurringDeliveryPolicyInput struct {
	// The delivery frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty,omitempty"`
	// The number of intervals between deliveries.
	IntervalCount *int `json:"intervalCount,omitempty,omitempty"`
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty,omitempty"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty,omitempty"`
	// Intention of this delivery policy, it can be either: delivery or fulfillment.
	Intent *SellingPlanRecurringDeliveryPolicyIntent `json:"intent,omitempty,omitempty"`
	// The pre-anchor behavior. It can be either: asap or next.
	PreAnchorBehavior *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior,omitempty,omitempty"`
}

// Represents a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// Cycle after which this pricing policy applies.
	AfterCycle *int `json:"afterCycle,omitempty,omitempty"`
	// The date and time when the recurring selling plan pricing policy was created.
	CreatedAt string `json:"createdAt"`
}

func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicy() {}

func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicyBase() {}

// The price adjustment type.
func (this SellingPlanRecurringPricingPolicy) GetAdjustmentType() SellingPlanPricingPolicyAdjustmentType {
	return this.AdjustmentType
}

// The price adjustment value.
func (this SellingPlanRecurringPricingPolicy) GetAdjustmentValue() SellingPlanPricingPolicyAdjustmentValue {
	return this.AdjustmentValue
}

// The input fields required to create or update a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *string `json:"id,omitempty,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty,omitempty"`
	// Cycle after which the pricing policy applies.
	AfterCycle int `json:"afterCycle"`
}

// A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.
type ServerPixel struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The current state of this server pixel.
	Status *ServerPixelStatus `json:"status,omitempty,omitempty"`
	// Address of the EventBridge or PubSub endpoint.
	WebhookEndpointAddress *string `json:"webhookEndpointAddress,omitempty,omitempty"`
}

func (ServerPixel) IsNode() {}

// A globally-unique ID.
func (this ServerPixel) GetID() string { return this.ID }

// Return type for `serverPixelCreate` mutation.
type ServerPixelCreatePayload struct {
	// The new server pixel.
	ServerPixel *ServerPixel `json:"serverPixel,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsServerPixelUserError `json:"userErrors,omitempty"`
}

// Return type for `serverPixelDelete` mutation.
type ServerPixelDeletePayload struct {
	// The ID of the server pixel that was deleted, if one was deleted.
	DeletedServerPixelID *string `json:"deletedServerPixelId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsServerPixelUserError `json:"userErrors,omitempty"`
}

// Represents the shipping details that the customer chose for their order.
type ShippingLine struct {
	// A reference to the carrier service that provided the rate.
	// Present when the rate was computed by a third-party carrier service.
	//
	CarrierIdentifier *string `json:"carrierIdentifier,omitempty,omitempty"`
	// A reference to the shipping method.
	Code *string `json:"code,omitempty,omitempty"`
	// Whether the shipping line is custom or not.
	Custom bool `json:"custom"`
	// The general classification of the delivery method.
	DeliveryCategory *string `json:"deliveryCategory,omitempty,omitempty"`
	// The discounts that have been allocated to the shipping line.
	//
	DiscountAllocations []DiscountAllocation `json:"discountAllocations,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPrice *MoneyV2 `json:"discountedPrice,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPriceSet *MoneyBag `json:"discountedPriceSet,omitempty"`
	// A globally-unique ID.
	ID *string `json:"id,omitempty,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPrice *MoneyV2 `json:"originalPrice,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPriceSet *MoneyBag `json:"originalPriceSet,omitempty"`
	// The phone number at the shipping address.
	Phone *string `json:"phone,omitempty,omitempty"`
	// Returns the price of the shipping line.
	Price null.String `json:"price"`
	// The fulfillment service requested for the shipping method.
	// Present if the shipping method requires processing by a third party fulfillment service.
	//
	RequestedFulfillmentService *FulfillmentService `json:"requestedFulfillmentService,omitempty,omitempty"`
	// A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
	ShippingRateHandle *string `json:"shippingRateHandle,omitempty,omitempty"`
	// Returns the rate source for the shipping line.
	Source *string `json:"source,omitempty,omitempty"`
	// The TaxLine objects connected to this shipping line.
	TaxLines []TaxLine `json:"taxLines,omitempty"`
	// Returns the title of the shipping line.
	Title string `json:"title"`
}

// An auto-generated type for paginating through multiple ShippingLines.
type ShippingLineConnection struct {
	// A list of edges.
	Edges []ShippingLineEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ShippingLineEdge.
	Nodes []ShippingLine `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShippingLine and a cursor during pagination.
type ShippingLineEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShippingLineEdge.
	Node *ShippingLine `json:"node,omitempty"`
}

// The input fields for specifying the shipping details for the order.
type ShippingLineInput struct {
	// Price of the shipping rate.
	Price *null.String `json:"price,omitempty,omitempty"`
	// A unique identifier for the shipping rate.
	ShippingRateHandle *string `json:"shippingRateHandle,omitempty,omitempty"`
	// Title of the shipping rate.
	Title *string `json:"title,omitempty,omitempty"`
}

// A sale associated with a shipping charge.
type ShippingLineSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (ShippingLineSale) IsSale() {}

// The type of order action that the sale represents.
func (this ShippingLineSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this ShippingLineSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this ShippingLineSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this ShippingLineSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this ShippingLineSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this ShippingLineSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this ShippingLineSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this ShippingLineSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this ShippingLineSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
type ShippingMethod struct {
	// A unique code associated with the rate. For example: `expedited_mail`
	Code string `json:"code"`
	// A description of the rate, which customers will see at checkout.
	// For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
	//
	Label string `json:"label"`
}

// Return type for `shippingPackageDelete` mutation.
type ShippingPackageDeletePayload struct {
	// The ID of the deleted shipping package.
	DeletedID *string `json:"deletedId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageMakeDefault` mutation.
type ShippingPackageMakeDefaultPayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageUpdate` mutation.
type ShippingPackageUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// A shipping rate is an additional cost added to the cost of the products that were ordered.
type ShippingRate struct {
	// Human-readable unique identifier for this shipping rate.
	Handle string `json:"handle"`
	// The cost associated with the shipping rate.
	Price *MoneyV2 `json:"price,omitempty"`
	// The name of the shipping rate.
	Title string `json:"title"`
}

// Represents the shipping costs refunded on the Refund.
type ShippingRefund struct {
	// The monetary value of the shipping fees to be refunded.
	Amount null.String `json:"amount"`
	// The monetary value of the shipping fees to be refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The maximum amount of shipping fees currently refundable.
	MaximumRefundable null.String `json:"maximumRefundable"`
	// The maximum amount of shipping fees currently refundable in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// The monetary value of the tax allocated to shipping fees to be refunded.
	Tax null.String `json:"tax"`
	// The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
	TaxSet *MoneyBag `json:"taxSet,omitempty"`
}

// The input fields that are required to reimburse shipping costs.
type ShippingRefundInput struct {
	// The monetary value of the shipping fees to be reimbursed.
	Amount *null.String `json:"amount,omitempty,omitempty"`
	// Whether a full refund is provided.
	FullRefund *bool `json:"fullRefund,omitempty,omitempty"`
}

// Represents a collection of general settings and information about the shop.
type Shop struct {
	// A list of the shop's active alert messages that appear in the Shopify admin.
	Alerts []ShopAlert `json:"alerts,omitempty"`
	// A list of the shop's product categories. Limit: 1000 product categories.
	AllProductCategories []ProductCategory `json:"allProductCategories,omitempty"`
	// The token required to query the shop's reports or dashboards.
	AnalyticsToken string `json:"analyticsToken"`
	// The paginated list of fulfillment orders assigned to the shop locations owned by the app.
	//
	// Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
	// managed by
	// [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
	// that are registered by the app.
	// One app (api_client) can host multiple fulfillment services on a shop.
	// Each fulfillment service manages a dedicated location on a shop.
	// Assigned fulfillment orders can have associated
	// [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
	// or might currently not be requested to be fulfilled.
	//
	// The app must have `read_assigned_fulfillment_orders`
	// [access scope](https://shopify.dev/docs/api/usage/access-scopes)
	// to be able to retrieve fulfillment orders assigned to its locations.
	//
	// All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
	// Perform filtering with the `assignmentStatus` argument
	// to receive only fulfillment orders that have been requested to be fulfilled.
	//
	AssignedFulfillmentOrders *FulfillmentOrderConnection `json:"assignedFulfillmentOrders,omitempty"`
	// The list of sales channels not currently installed on the shop.
	AvailableChannelApps *AppConnection `json:"availableChannelApps,omitempty"`
	// The shop's billing address information.
	BillingAddress *ShopAddress `json:"billingAddress,omitempty"`
	// Exposes the number of channels.
	ChannelCount int `json:"channelCount"`
	// List of all channel definitions associated with a shop.
	ChannelDefinitionsForInstalledChannels []AvailableChannelDefinitionsByChannel `json:"channelDefinitionsForInstalledChannels,omitempty"`
	// List of the shop's active sales channels.
	Channels *ChannelConnection `json:"channels,omitempty"`
	// Specifies whether the shop supports checkouts via Checkout API.
	CheckoutAPISupported bool `json:"checkoutApiSupported"`
	// Return a collection by its handle.
	CollectionByHandle *Collection `json:"collectionByHandle,omitempty,omitempty"`
	// List of the shop's collection saved searches.
	CollectionSavedSearches *SavedSearchConnection `json:"collectionSavedSearches,omitempty"`
	// List of the shop's collections.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The public-facing contact email address for the shop.
	// Customers will use this email to communicate with the shop owner.
	//
	ContactEmail string `json:"contactEmail"`
	// Countries that have been defined in shipping zones for the shop.
	CountriesInShippingZones *CountriesInShippingZones `json:"countriesInShippingZones,omitempty"`
	// The three letter code for the currency that the shop sells in.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// How currencies are displayed on your store.
	CurrencyFormats *CurrencyFormats `json:"currencyFormats,omitempty"`
	// The presentment currency settings for the shop excluding the shop's own currency.
	CurrencySettings *CurrencySettingConnection `json:"currencySettings,omitempty"`
	// Whether customer accounts are required, optional, or disabled for the shop.
	CustomerAccounts ShopCustomerAccountsSetting `json:"customerAccounts"`
	// List of the shop's customer saved searches.
	CustomerSavedSearches *SavedSearchConnection `json:"customerSavedSearches,omitempty"`
	// A list of tags that have been added to customer accounts.
	CustomerTags *StringConnection `json:"customerTags,omitempty"`
	// Customer accounts associated to the shop.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// The shop's meta description used in search engine results.
	Description *string `json:"description,omitempty,omitempty"`
	// The domains configured for the shop.
	Domains []Domain `json:"domains,omitempty"`
	// List of the shop's draft order saved searches.
	DraftOrderSavedSearches *SavedSearchConnection `json:"draftOrderSavedSearches,omitempty"`
	// A list of tags that have been added to draft orders.
	DraftOrderTags *StringConnection `json:"draftOrderTags,omitempty"`
	// List of saved draft orders on the shop.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The shop owner's email address.
	// Shopify will use this email address to communicate with the shop owner.
	//
	Email string `json:"email"`
	// The presentment currencies enabled for the shop.
	EnabledPresentmentCurrencies []CurrencyCode `json:"enabledPresentmentCurrencies,omitempty"`
	// The set of features enabled for the shop.
	Features *ShopFeatures `json:"features,omitempty"`
	// The paginated list of merchant-managed and third-party fulfillment orders.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of the shop's installed fulfillment services.
	FulfillmentServices []FulfillmentService `json:"fulfillmentServices,omitempty"`
	// The shop's time zone as defined by the IANA.
	IanaTimezone string `json:"ianaTimezone"`
	// A globally-unique ID.
	ID string `json:"id"`
	// List of the shop's inventory items.
	InventoryItems *InventoryItemConnection `json:"inventoryItems,omitempty"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	//
	LimitedPendingOrderCount *LimitedPendingOrderCount `json:"limitedPendingOrderCount,omitempty"`
	// List of active locations of the shop.
	Locations *LocationConnection `json:"locations,omitempty"`
	// List of a shop's marketing events.
	MarketingEvents *MarketingEventConnection `json:"marketingEvents,omitempty"`
	// The approval signals for a shop to support onboarding to channel apps.
	MerchantApprovalSignals *MerchantApprovalSignals `json:"merchantApprovalSignals,omitempty,omitempty"`
	// Returns a metafield by namespace and key that belongs to the resource.
	Metafield *Metafield `json:"metafield,omitempty,omitempty"`
	// List of metafields that belong to the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The shop's .myshopify.com domain name.
	MyshopifyDomain string `json:"myshopifyDomain"`
	// The shop's name.
	Name string `json:"name"`
	// The shop's settings related to navigation.
	NavigationSettings []NavigationItem `json:"navigationSettings,omitempty"`
	// The prefix that appears before order numbers.
	OrderNumberFormatPrefix string `json:"orderNumberFormatPrefix"`
	// The suffix that appears after order numbers.
	OrderNumberFormatSuffix string `json:"orderNumberFormatSuffix"`
	// List of the shop's order saved searches.
	OrderSavedSearches *SavedSearchConnection `json:"orderSavedSearches,omitempty"`
	// A list of tags that have been added to orders.
	OrderTags *StringConnection `json:"orderTags,omitempty"`
	// A list of the shop's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The shop's settings related to payments.
	PaymentSettings *PaymentSettings `json:"paymentSettings,omitempty"`
	// Number of pending orders on the shop.
	PendingOrderCount int `json:"pendingOrderCount"`
	// The shop's billing plan.
	Plan *ShopPlan `json:"plan,omitempty"`
	// List of the shop's price rule saved searches.
	PriceRuleSavedSearches *SavedSearchConnection `json:"priceRuleSavedSearches,omitempty"`
	// List of the shop’s price rules.
	PriceRules *PriceRuleConnection `json:"priceRules,omitempty"`
	// The primary domain of the shop's online store.
	PrimaryDomain *Domain `json:"primaryDomain,omitempty"`
	// Returns a private metafield by namespace and key that belongs to the resource.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty,omitempty"`
	// List of private metafields that belong to the resource.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Return a product by its handle.
	ProductByHandle *Product `json:"productByHandle,omitempty,omitempty"`
	// The list of all images of all products for the shop.
	ProductImages *ImageConnection `json:"productImages,omitempty"`
	// List of the shop's product saved searches.
	ProductSavedSearches *SavedSearchConnection `json:"productSavedSearches,omitempty"`
	// A list of tags that have been added to products.
	ProductTags *StringConnection `json:"productTags,omitempty"`
	// The list of types added to products.
	ProductTypes *StringConnection `json:"productTypes,omitempty"`
	// List of the shop's product variants.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The list of vendors added to products.
	ProductVendors *StringConnection `json:"productVendors,omitempty"`
	// List of the shop's products.
	Products *ProductConnection `json:"products,omitempty"`
	// The number of publications for the shop.
	PublicationCount int `json:"publicationCount"`
	// The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
	ResourceLimits *ShopResourceLimits `json:"resourceLimits,omitempty"`
	// The URL of the rich text editor that can be used for mobile devices.
	RichTextEditorURL string `json:"richTextEditorUrl"`
	// Fetches a list of admin search results by a specified query.
	Search *SearchResultConnection `json:"search,omitempty"`
	// The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
	SearchFilters *SearchFilterOptions `json:"searchFilters,omitempty"`
	// Whether the shop has outstanding setup steps.
	SetupRequired bool `json:"setupRequired"`
	// The list of countries that the shop ships to.
	ShipsToCountries []CountryCode `json:"shipsToCountries,omitempty"`
	// The list of all legal policies associated with a shop.
	ShopPolicies []ShopPolicy `json:"shopPolicies,omitempty"`
	// Shopify Payments account information, including balances and payouts.
	ShopifyPaymentsAccount *ShopifyPaymentsAccount `json:"shopifyPaymentsAccount,omitempty,omitempty"`
	// The paginated list of the shop's staff members.
	StaffMembers *StaffMemberConnection `json:"staffMembers,omitempty"`
	// The storefront access token of a private application. These are scoped per-application.
	StorefrontAccessTokens *StorefrontAccessTokenConnection `json:"storefrontAccessTokens,omitempty"`
	// The URL of the shop's storefront.
	StorefrontURL string `json:"storefrontUrl"`
	// Whether the shop charges taxes for shipping.
	TaxShipping bool `json:"taxShipping"`
	// Whether applicable taxes are included in the shop's product prices.
	TaxesIncluded bool `json:"taxesIncluded"`
	// The shop's time zone abbreviation.
	TimezoneAbbreviation string `json:"timezoneAbbreviation"`
	// The shop's time zone offset.
	TimezoneOffset string `json:"timezoneOffset"`
	// The shop's time zone offset expressed as a number of minutes.
	TimezoneOffsetMinutes int `json:"timezoneOffsetMinutes"`
	// Whether transactional SMS sent by Shopify have been disabled for a shop.
	TransactionalSmsDisabled bool `json:"transactionalSmsDisabled"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The shop's unit system for weights and measures.
	UnitSystem UnitSystem `json:"unitSystem"`
	// Fetches a list of images uploaded to the shop by their IDs.
	UploadedImagesByIds []Image `json:"uploadedImagesByIds,omitempty"`
	// The URL of the shop's online store.
	URL string `json:"url"`
	// The shop's primary unit of weight for products and shipping.
	WeightUnit WeightUnit `json:"weightUnit"`
}

func (Shop) IsMetafieldReferencer() {}

func (Shop) IsHasMetafields() {}

// Returns a metafield by namespace and key that belongs to the resource.
func (this Shop) GetMetafield() *Metafield { return this.Metafield }

// List of metafields that belong to the resource.
func (this Shop) GetMetafields() *MetafieldConnection { return this.Metafields }

// Returns a private metafield by namespace and key that belongs to the resource.
func (this Shop) GetPrivateMetafield() *PrivateMetafield { return this.PrivateMetafield }

// List of private metafields that belong to the resource.
func (this Shop) GetPrivateMetafields() *PrivateMetafieldConnection { return this.PrivateMetafields }

func (Shop) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this Shop) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (Shop) IsNode() {}

// A globally-unique ID.
func (this Shop) GetID() string { return this.ID }

// The shop's billing address.
type ShopAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	//
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	//
	City *string `json:"city,omitempty,omitempty"`
	// The name of the company or organization.
	Company *string `json:"company,omitempty,omitempty"`
	// Whether the address coordinates are valid.
	CoordinatesValidated bool `json:"coordinatesValidated"`
	// The name of the country.
	//
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCode *string `json:"countryCode,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCodeV2 *CountryCode `json:"countryCodeV2,omitempty,omitempty"`
	// The first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// A formatted version of the address, customized by the provided arguments.
	Formatted []string `json:"formatted,omitempty"`
	// A comma-separated list of the values for city, province, and country.
	FormattedArea *string `json:"formattedArea,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The latitude coordinate of the address.
	Latitude *float64 `json:"latitude,omitempty,omitempty"`
	// The longitude coordinate of the address.
	Longitude *float64 `json:"longitude,omitempty,omitempty"`
	// The full name, based on firstName and lastName.
	//
	Name *string `json:"name,omitempty,omitempty"`
	// A phone number associated with the address.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	//
	Phone *string `json:"phone,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

func (ShopAddress) IsNode() {}

// A globally-unique ID.
func (this ShopAddress) GetID() string { return this.ID }

// An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
type ShopAlert struct {
	// The text for the button in the alert that links to related information. For example, _Add credit card_.
	//
	Action *ShopAlertAction `json:"action,omitempty"`
	// A description of the alert and further information, such as whether the merchant will be charged.
	Description string `json:"description"`
}

// An action associated to a shop alert, such as adding a credit card.
type ShopAlertAction struct {
	// The text for the button in the alert. For example, _Add credit card_.
	Title string `json:"title"`
	// The target URL that the button links to.
	URL string `json:"url"`
}

// Billing preferences for the shop.
type ShopBillingPreferences struct {
	// The currency the shop uses to pay for apps and services.
	Currency CurrencyCode `json:"currency"`
}

// Represents the feature set available to the shop.
// Most fields specify whether a feature is enabled for a shop, and some fields return information
// related to specific features.
type ShopFeatures struct {
	// Whether a shop has access to Avalara AvaTax.
	AvalaraAvatax bool `json:"avalaraAvatax"`
	// The branding of the shop, which influences its look and feel in the Shopify admin.
	Branding ShopBranding `json:"branding"`
	// Represents the Bundles feature configuration for the shop.
	Bundles *BundlesFeature `json:"bundles,omitempty"`
	// Whether a shop's online store can have CAPTCHA protection.
	Captcha bool `json:"captcha"`
	// Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
	CaptchaExternalDomains bool `json:"captchaExternalDomains"`
	// Whether the delivery profiles functionality is enabled for this shop.
	DeliveryProfiles bool `json:"deliveryProfiles"`
	// Whether a shop has access to the Google Analytics dynamic remarketing feature.
	DynamicRemarketing bool `json:"dynamicRemarketing"`
	// Whether a shop can be migrated to use Shopify subscriptions.
	EligibleForSubscriptionMigration bool `json:"eligibleForSubscriptionMigration"`
	// Whether a shop is configured properly to sell subscriptions.
	EligibleForSubscriptions bool `json:"eligibleForSubscriptions"`
	// Whether a shop can create gift cards.
	GiftCards bool `json:"giftCards"`
	// Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
	// internationally.
	//
	HarmonizedSystemCode bool `json:"harmonizedSystemCode"`
	// Whether a shop can enable international domains.
	InternationalDomains bool `json:"internationalDomains"`
	// Whether a shop can enable international price overrides.
	InternationalPriceOverrides bool `json:"internationalPriceOverrides"`
	// Whether a shop can enable international price rules.
	InternationalPriceRules bool `json:"internationalPriceRules"`
	// Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
	LegacySubscriptionGatewayEnabled bool `json:"legacySubscriptionGatewayEnabled"`
	// Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
	// or don't have a storefront.
	//
	LiveView bool `json:"liveView"`
	// Whether a shop has multi-location functionality.
	MultiLocation bool `json:"multiLocation"`
	// Whether a shop has access to the onboarding visual.
	OnboardingVisual bool `json:"onboardingVisual"`
	// Whether a shop is configured to sell subscriptions with PayPal Express.
	PaypalExpressSubscriptionGatewayStatus PaypalExpressSubscriptionsGatewayStatus `json:"paypalExpressSubscriptionGatewayStatus"`
	// Whether a shop has access to all reporting features.
	Reports bool `json:"reports"`
	// Whether a shop has ever had subscription products.
	SellsSubscriptions bool `json:"sellsSubscriptions"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus"`
	// Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
	//
	ShowMetrics bool `json:"showMetrics"`
	// Whether a shop has an online store.
	Storefront bool `json:"storefront"`
	// Whether a shop is using Shopify Balance.
	UsingShopifyBalance bool `json:"usingShopifyBalance"`
}

// A locale that's been enabled on a shop.
type ShopLocale struct {
	// The locale ISO code.
	Locale string `json:"locale"`
	// The market web presences that use the locale.
	MarketWebPresences []MarketWebPresence `json:"marketWebPresences,omitempty"`
	// The human-readable locale name.
	Name string `json:"name"`
	// Whether the locale is the default locale for the shop.
	Primary bool `json:"primary"`
	// Whether the locale is visible to buyers.
	Published bool `json:"published"`
}

// Return type for `shopLocaleDisable` mutation.
type ShopLocaleDisablePayload struct {
	// ISO code of the locale that was deleted.
	Locale *string `json:"locale,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `shopLocaleEnable` mutation.
type ShopLocaleEnablePayload struct {
	// ISO code of the locale that was enabled.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields for a shop locale.
type ShopLocaleInput struct {
	// Whether the locale is published. Only published locales are visible to the buyer.
	Published *bool `json:"published,omitempty,omitempty"`
	// The market web presences on which the locale should be enabled. Pass in an empty array to remove the locale across all market web presences.
	MarketWebPresenceIds []string `json:"marketWebPresenceIds,omitempty,omitempty"`
}

// Return type for `shopLocaleUpdate` mutation.
type ShopLocaleUpdatePayload struct {
	// The locale that was updated.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The billing plan of the shop.
type ShopPlan struct {
	// The name of the shop's billing plan.
	DisplayName string `json:"displayName"`
	// Whether the shop is a partner development shop for testing purposes.
	PartnerDevelopment bool `json:"partnerDevelopment"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus"`
}

// Policy that a merchant has configured for their store, such as their refund or privacy policy.
type ShopPolicy struct {
	// The text of the policy. The maximum size is 512kb.
	Body string `json:"body"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The translations associated with the resource.
	Translations []Translation `json:"translations,omitempty"`
	// The shop policy type.
	Type ShopPolicyType `json:"type"`
	// The public URL of the policy.
	URL string `json:"url"`
}

func (ShopPolicy) IsHasPublishedTranslations() {}

// The translations associated with the resource.
func (this ShopPolicy) GetTranslations() []Translation {
	if this.Translations == nil {
		return nil
	}
	interfaceSlice := make([]Translation, 0, len(this.Translations))
	for _, concrete := range this.Translations {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (ShopPolicy) IsNode() {}

// A globally-unique ID.
func (this ShopPolicy) GetID() string { return this.ID }

// The input fields required to update a policy.
type ShopPolicyInput struct {
	// The shop policy type.
	Type ShopPolicyType `json:"type"`
	// Policy text, maximum size of 512kb.
	Body string `json:"body"`
}

// Return type for `shopPolicyUpdate` mutation.
type ShopPolicyUpdatePayload struct {
	// The shop policy that has been updated.
	ShopPolicy *ShopPolicy `json:"shopPolicy,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ShopPolicyUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of a shop policy mutation.
type ShopPolicyUserError struct {
	// The error code.
	Code *ShopPolicyErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ShopPolicyUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ShopPolicyUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ShopPolicyUserError) GetMessage() string { return this.Message }

// Return type for `shopResourceFeedbackCreate` mutation.
type ShopResourceFeedbackCreatePayload struct {
	// The shop feedback that's created.
	Feedback *AppFeedback `json:"feedback,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ShopResourceFeedbackCreateUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `ShopResourceFeedbackCreate`.
type ShopResourceFeedbackCreateUserError struct {
	// The error code.
	Code *ShopResourceFeedbackCreateUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (ShopResourceFeedbackCreateUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this ShopResourceFeedbackCreateUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this ShopResourceFeedbackCreateUserError) GetMessage() string { return this.Message }

// Resource limits of a shop.
type ShopResourceLimits struct {
	// Maximum number of locations allowed.
	LocationLimit int `json:"locationLimit"`
	// Maximum number of product options allowed.
	MaxProductOptions int `json:"maxProductOptions"`
	// The maximum number of variants allowed per product.
	MaxProductVariants int `json:"maxProductVariants"`
	// Whether the shop has reached the limit of the number of URL redirects it can make for resources.
	RedirectLimitReached bool `json:"redirectLimitReached"`
	// The maximum number of variants allowed per shop. If the shop has unlimited SKUs, then the quantity used cannot be retrieved.
	SkuResourceLimits *ResourceLimit `json:"skuResourceLimits,omitempty"`
}

// A Shopify Function.
type ShopifyFunction struct {
	// The API type of the Shopify Function.
	APIType string `json:"apiType"`
	// The API version of the Shopify Function.
	APIVersion string `json:"apiVersion"`
	// The app that owns the Shopify Function.
	App *App `json:"app,omitempty"`
	// The App Bridge information for the Shopify Function.
	AppBridge *FunctionsAppBridge `json:"appBridge,omitempty"`
	// The client ID of the app that owns the Shopify Function.
	AppKey string `json:"appKey"`
	// The description of the Shopify Function.
	Description *string `json:"description,omitempty,omitempty"`
	// The ID of the Shopify Function.
	ID string `json:"id"`
	// The input query of the Shopify Function.
	InputQuery *string `json:"inputQuery,omitempty,omitempty"`
	// The title of the Shopify Function.
	Title string `json:"title"`
	// If the Shopify Function uses the creation UI in the Admin.
	UseCreationUI bool `json:"useCreationUi"`
}

// An auto-generated type for paginating through multiple ShopifyFunctions.
type ShopifyFunctionConnection struct {
	// A list of edges.
	Edges []ShopifyFunctionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ShopifyFunctionEdge.
	Nodes []ShopifyFunction `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyFunction and a cursor during pagination.
type ShopifyFunctionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyFunctionEdge.
	Node *ShopifyFunction `json:"node,omitempty"`
}

// Balance and payout information for a
// [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
// account. Balance includes all balances for the currencies supported by the shop.
// You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
type ShopifyPaymentsAccount struct {
	// Whether the Shopify Payments setup is completed.
	Activated bool `json:"activated"`
	// Current balances in all currencies for the account.
	Balance []MoneyV2 `json:"balance,omitempty"`
	// All bank accounts configured for the Shopify Payments account.
	BankAccounts *ShopifyPaymentsBankAccountConnection `json:"bankAccounts,omitempty"`
	// The statement descriptor used for charges.
	//
	// The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
	//
	ChargeStatementDescriptor *string `json:"chargeStatementDescriptor,omitempty,omitempty"`
	// The statement descriptors used for charges.
	//
	// These descriptors appear on a customer's credit card or bank statement when they make a purchase.
	//
	ChargeStatementDescriptors ShopifyPaymentsChargeStatementDescriptor `json:"chargeStatementDescriptors,omitempty"`
	// The Shopify Payments account country.
	Country string `json:"country"`
	// The default payout currency for the Shopify Payments account.
	DefaultCurrency CurrencyCode `json:"defaultCurrency"`
	// All disputes related to the Shopify Payments account.
	Disputes *ShopifyPaymentsDisputeConnection `json:"disputes,omitempty"`
	// The fraud settings of the Shopify Payments account.
	FraudSettings *ShopifyPaymentsFraudSettings `json:"fraudSettings,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The notifications settings for the account.
	NotificationSettings *ShopifyPaymentsNotificationSettings `json:"notificationSettings,omitempty"`
	// Whether the Shopify Payments account can be onboarded.
	Onboardable bool `json:"onboardable"`
	// The payout schedule for the account.
	PayoutSchedule *ShopifyPaymentsPayoutSchedule `json:"payoutSchedule,omitempty"`
	// The descriptor used for payouts.
	//
	// The descriptor appears on a merchant's bank statement when they receive a payout.
	//
	PayoutStatementDescriptor *string `json:"payoutStatementDescriptor,omitempty,omitempty"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The permitted documents for identity verification.
	PermittedVerificationDocuments []ShopifyPaymentsVerificationDocument `json:"permittedVerificationDocuments,omitempty"`
	// The verifications necessary for this account.
	Verifications []ShopifyPaymentsVerification `json:"verifications,omitempty"`
}

func (ShopifyPaymentsAccount) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsAccount) GetID() string { return this.ID }

// A bank account that can receive payouts.
type ShopifyPaymentsBankAccount struct {
	// The account number of the bank account.
	AccountNumber string `json:"accountNumber"`
	// The last digits of the account number (the rest is redacted).
	AccountNumberLastDigits string `json:"accountNumberLastDigits"`
	// The name of the bank.
	//
	BankName *string `json:"bankName,omitempty,omitempty"`
	// The country of the bank.
	//
	Country CountryCode `json:"country"`
	// The date that the bank account was created.
	CreatedAt string `json:"createdAt"`
	// The currency of the bank account.
	//
	Currency CurrencyCode `json:"currency"`
	// A globally-unique ID.
	ID string `json:"id"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The routing number of the bank account.
	RoutingNumber string `json:"routingNumber"`
	// The status of the bank account.
	//
	Status ShopifyPaymentsBankAccountStatus `json:"status"`
}

func (ShopifyPaymentsBankAccount) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsBankAccount) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
type ShopifyPaymentsBankAccountConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsBankAccountEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ShopifyPaymentsBankAccountEdge.
	Nodes []ShopifyPaymentsBankAccount `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
type ShopifyPaymentsBankAccountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsBankAccountEdge.
	Node *ShopifyPaymentsBankAccount `json:"node,omitempty"`
}

// The charge descriptors for a payments account.
type ShopifyPaymentsDefaultChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *string `json:"default,omitempty,omitempty"`
	// The prefix of the statement descriptor.
	Prefix string `json:"prefix"`
}

func (ShopifyPaymentsDefaultChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// The default charge statement descriptor.
func (this ShopifyPaymentsDefaultChargeStatementDescriptor) GetDefault() *string { return this.Default }

// The prefix of the statement descriptor.
func (this ShopifyPaymentsDefaultChargeStatementDescriptor) GetPrefix() string { return this.Prefix }

// A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
type ShopifyPaymentsDispute struct {
	// The total amount disputed by the cardholder.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The deadline for evidence submission.
	EvidenceDueBy *string `json:"evidenceDueBy,omitempty,omitempty"`
	// The date when evidence was sent. Returns null if evidence has not yet been sent.
	EvidenceSentOn *string `json:"evidenceSentOn,omitempty,omitempty"`
	// The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
	FinalizedOn *string `json:"finalizedOn,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The date when this dispute was initiated.
	InitiatedAt string `json:"initiatedAt"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The order that contains the charge that is under dispute.
	Order *Order `json:"order,omitempty,omitempty"`
	// The reason of the dispute.
	ReasonDetails *ShopifyPaymentsDisputeReasonDetails `json:"reasonDetails,omitempty"`
	// The current state of the dispute.
	Status DisputeStatus `json:"status"`
	// Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
	Type DisputeType `json:"type"`
}

func (ShopifyPaymentsDispute) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this ShopifyPaymentsDispute) GetLegacyResourceID() string { return this.LegacyResourceID }

func (ShopifyPaymentsDispute) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsDispute) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
type ShopifyPaymentsDisputeConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsDisputeEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ShopifyPaymentsDisputeEdge.
	Nodes []ShopifyPaymentsDispute `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
type ShopifyPaymentsDisputeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsDisputeEdge.
	Node *ShopifyPaymentsDispute `json:"node,omitempty"`
}

// The evidence associated with the dispute.
type ShopifyPaymentsDisputeEvidence struct {
	// The activity logs associated with the dispute evidence.
	AccessActivityLog *string `json:"accessActivityLog,omitempty,omitempty"`
	// The billing address that is provided by the customer.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty,omitempty"`
	// The cancellation policy disclosure associated with the dispute evidence.
	CancellationPolicyDisclosure *string `json:"cancellationPolicyDisclosure,omitempty,omitempty"`
	// The cancellation policy file associated with the dispute evidence.
	CancellationPolicyFile *ShopifyPaymentsDisputeFileUpload `json:"cancellationPolicyFile,omitempty,omitempty"`
	// The cancellation rebuttal associated with the dispute evidence.
	CancellationRebuttal *string `json:"cancellationRebuttal,omitempty,omitempty"`
	// The customer communication file associated with the dispute evidence.
	CustomerCommunicationFile *ShopifyPaymentsDisputeFileUpload `json:"customerCommunicationFile,omitempty,omitempty"`
	// The customer's email address.
	CustomerEmailAddress *string `json:"customerEmailAddress,omitempty,omitempty"`
	// The customer's first name.
	CustomerFirstName *string `json:"customerFirstName,omitempty,omitempty"`
	// The customer's last name.
	CustomerLastName *string `json:"customerLastName,omitempty,omitempty"`
	// The customer purchase ip for this dispute evidence.
	CustomerPurchaseIP *string `json:"customerPurchaseIp,omitempty,omitempty"`
	// The dispute associated with the evidence.
	Dispute *ShopifyPaymentsDispute `json:"dispute,omitempty"`
	// The file uploads associated with the dispute evidence.
	DisputeFileUploads []ShopifyPaymentsDisputeFileUpload `json:"disputeFileUploads,omitempty"`
	// The fulfillments associated with the dispute evidence.
	Fulfillments []ShopifyPaymentsDisputeFulfillment `json:"fulfillments,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The product description for this dispute evidence.
	ProductDescription *string `json:"productDescription,omitempty,omitempty"`
	// The refund policy disclosure associated with the dispute evidence.
	RefundPolicyDisclosure *string `json:"refundPolicyDisclosure,omitempty,omitempty"`
	// The refund policy file associated with the dispute evidence.
	RefundPolicyFile *ShopifyPaymentsDisputeFileUpload `json:"refundPolicyFile,omitempty,omitempty"`
	// The refund refusal explanation associated with dispute evidence.
	RefundRefusalExplanation *string `json:"refundRefusalExplanation,omitempty,omitempty"`
	// The service documentation file associated with the dispute evidence.
	ServiceDocumentationFile *ShopifyPaymentsDisputeFileUpload `json:"serviceDocumentationFile,omitempty,omitempty"`
	// The mailing address for shipping that is provided by the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty,omitempty"`
	// The shipping documentation file associated with the dispute evidence.
	ShippingDocumentationFile *ShopifyPaymentsDisputeFileUpload `json:"shippingDocumentationFile,omitempty,omitempty"`
	// Whether the dispute evidence is submitted.
	Submitted bool `json:"submitted"`
	// The uncategorized file associated with the dispute evidence.
	UncategorizedFile *ShopifyPaymentsDisputeFileUpload `json:"uncategorizedFile,omitempty,omitempty"`
	// The uncategorized text for the dispute evidence.
	UncategorizedText *string `json:"uncategorizedText,omitempty,omitempty"`
}

func (ShopifyPaymentsDisputeEvidence) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsDisputeEvidence) GetID() string { return this.ID }

// The input fields required to update a dispute evidence object.
type ShopifyPaymentsDisputeEvidenceUpdateInput struct {
	// Customer email address.
	CustomerEmailAddress *string `json:"customerEmailAddress,omitempty,omitempty"`
	// Customer last name.
	CustomerLastName *string `json:"customerLastName,omitempty,omitempty"`
	// Customer first name.
	CustomerFirstName *string `json:"customerFirstName,omitempty,omitempty"`
	// The shipping address associated with the dispute evidence.
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty,omitempty"`
	// Uncategorized text.
	UncategorizedText *string `json:"uncategorizedText,omitempty,omitempty"`
	// Activity logs.
	AccessActivityLog *string `json:"accessActivityLog,omitempty,omitempty"`
	// Cancellation policy disclosure.
	CancellationPolicyDisclosure *string `json:"cancellationPolicyDisclosure,omitempty,omitempty"`
	// Cancellation rebuttal.
	CancellationRebuttal *string `json:"cancellationRebuttal,omitempty,omitempty"`
	// Refund policy disclosure.
	RefundPolicyDisclosure *string `json:"refundPolicyDisclosure,omitempty,omitempty"`
	// Refund refusal explanation.
	RefundRefusalExplanation *string `json:"refundRefusalExplanation,omitempty,omitempty"`
	// Cancellation policy file.
	CancellationPolicyFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"cancellationPolicyFile,omitempty,omitempty"`
	// Customer communication file.
	CustomerCommunicationFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"customerCommunicationFile,omitempty,omitempty"`
	// Refund policy file.
	RefundPolicyFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"refundPolicyFile,omitempty,omitempty"`
	// Shipping documentation file.
	ShippingDocumentationFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"shippingDocumentationFile,omitempty,omitempty"`
	// Uncategorized file.
	UncategorizedFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"uncategorizedFile,omitempty,omitempty"`
	// Service documentation file.
	ServiceDocumentationFile *ShopifyPaymentsDisputeFileUploadUpdateInput `json:"serviceDocumentationFile,omitempty,omitempty"`
	// Whether to submit the evidence.
	SubmitEvidence *bool `json:"submitEvidence,omitempty,omitempty"`
}

// The file upload associated with the dispute evidence.
type ShopifyPaymentsDisputeFileUpload struct {
	// The type of the file for the dispute evidence.
	DisputeEvidenceType *ShopifyPaymentsDisputeEvidenceFileType `json:"disputeEvidenceType,omitempty,omitempty"`
	// The file size.
	FileSize int `json:"fileSize"`
	// The file type.
	FileType string `json:"fileType"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The original file name.
	OriginalFileName *string `json:"originalFileName,omitempty,omitempty"`
	// The URL for accessing the file.
	URL string `json:"url"`
}

func (ShopifyPaymentsDisputeFileUpload) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsDisputeFileUpload) GetID() string { return this.ID }

// The input fields required to update a dispute file upload object.
type ShopifyPaymentsDisputeFileUploadUpdateInput struct {
	// The ID of the file upload to be updated.
	ID string `json:"id"`
	// Whether to delete this file upload.
	Destroy *bool `json:"destroy,omitempty,omitempty"`
}

// The fulfillment associated with dispute evidence.
type ShopifyPaymentsDisputeFulfillment struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The shipping carrier for this fulfillment.
	ShippingCarrier *string `json:"shippingCarrier,omitempty,omitempty"`
	// The shipping date for this fulfillment.
	ShippingDate *string `json:"shippingDate,omitempty,omitempty"`
	// The shipping tracking number for this fulfillment.
	ShippingTrackingNumber *string `json:"shippingTrackingNumber,omitempty,omitempty"`
}

func (ShopifyPaymentsDisputeFulfillment) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsDisputeFulfillment) GetID() string { return this.ID }

// Details regarding a dispute reason.
type ShopifyPaymentsDisputeReasonDetails struct {
	// The raw code provided by the payment network.
	NetworkReasonCode *string `json:"networkReasonCode,omitempty,omitempty"`
	// The reason for the dispute provided by the cardholder's banks.
	Reason ShopifyPaymentsDisputeReason `json:"reason"`
}

// Presents all Shopify Payments information related to an extended authorization.
type ShopifyPaymentsExtendedAuthorization struct {
	// The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
	//
	ExtendedAuthorizationExpiresAt string `json:"extendedAuthorizationExpiresAt"`
	// The time after which capture will incur an additional fee.
	//
	StandardAuthorizationExpiresAt string `json:"standardAuthorizationExpiresAt"`
}

// The fraud settings of a payments account.
type ShopifyPaymentsFraudSettings struct {
	// Decline a charge if there is an AVS failure.
	DeclineChargeOnAvsFailure bool `json:"declineChargeOnAvsFailure"`
	// Decline a charge if there is an CVC failure.
	DeclineChargeOnCvcFailure bool `json:"declineChargeOnCvcFailure"`
}

// The charge descriptors for a Japanese payments account.
type ShopifyPaymentsJpChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *string `json:"default,omitempty,omitempty"`
	// The charge statement descriptor in kana.
	Kana *string `json:"kana,omitempty,omitempty"`
	// The charge statement descriptor in kanji.
	Kanji *string `json:"kanji,omitempty,omitempty"`
	// The prefix of the statement descriptor.
	Prefix string `json:"prefix"`
}

func (ShopifyPaymentsJpChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// The default charge statement descriptor.
func (this ShopifyPaymentsJpChargeStatementDescriptor) GetDefault() *string { return this.Default }

// The prefix of the statement descriptor.
func (this ShopifyPaymentsJpChargeStatementDescriptor) GetPrefix() string { return this.Prefix }

// The notification settings for the account.
type ShopifyPaymentsNotificationSettings struct {
	// Receive email notifications when new payouts are sent or payouts fail.
	Payouts bool `json:"payouts"`
}

// Payouts represent the movement of money between a merchant's Shopify
// Payments balance and their bank account.
type ShopifyPaymentsPayout struct {
	// The bank account for the payout.
	BankAccount *ShopifyPaymentsBankAccount `json:"bankAccount,omitempty,omitempty"`
	// The total amount and currency of the payout.
	Gross *MoneyV2 `json:"gross,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The exact time when the payout was issued. The payout only contains
	// balance transactions that were available at this time.
	//
	IssuedAt string `json:"issuedAt"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The total amount and currency of the payout.
	Net *MoneyV2 `json:"net,omitempty"`
	// The transfer status of the payout.
	Status ShopifyPaymentsPayoutStatus `json:"status"`
	// The summary of the payout.
	Summary *ShopifyPaymentsPayoutSummary `json:"summary,omitempty"`
	// The direction of the payout.
	TransactionType ShopifyPaymentsPayoutTransactionType `json:"transactionType"`
}

func (ShopifyPaymentsPayout) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this ShopifyPaymentsPayout) GetLegacyResourceID() string { return this.LegacyResourceID }

func (ShopifyPaymentsPayout) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsPayout) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
type ShopifyPaymentsPayoutConnection struct {
	// A list of edges.
	Edges []ShopifyPaymentsPayoutEdge `json:"edges,omitempty"`
	// A list of the nodes contained in ShopifyPaymentsPayoutEdge.
	Nodes []ShopifyPaymentsPayout `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
type ShopifyPaymentsPayoutEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of ShopifyPaymentsPayoutEdge.
	Node *ShopifyPaymentsPayout `json:"node,omitempty"`
}

// The payment schedule for a payments account.
type ShopifyPaymentsPayoutSchedule struct {
	// The interval at which payouts are sent to the connected bank account.
	Interval ShopifyPaymentsPayoutInterval `json:"interval"`
	// The day of the month funds will be paid out.
	//
	// The value can be any day of the month from the 1st to the 31st.
	// If the payment interval is set to monthly, this value will be used.
	// Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
	//
	MonthlyAnchor *int `json:"monthlyAnchor,omitempty,omitempty"`
	// The day of the week funds will be paid out.
	//
	// The value can be any weekday from Monday to Friday.
	// If the payment interval is set to weekly, this value will be used.
	//
	WeeklyAnchor *DayOfTheWeek `json:"weeklyAnchor,omitempty,omitempty"`
}

// Breakdown of the total fees and gross of each of the different types of transactions associated
// with the payout.
type ShopifyPaymentsPayoutSummary struct {
	// Total fees for all adjustments including disputes.
	AdjustmentsFee *MoneyV2 `json:"adjustmentsFee,omitempty"`
	// Total gross amount for all adjustments including disputes.
	AdjustmentsGross *MoneyV2 `json:"adjustmentsGross,omitempty"`
	// Total fees for all charges.
	ChargesFee *MoneyV2 `json:"chargesFee,omitempty"`
	// Total gross amount for all charges.
	ChargesGross *MoneyV2 `json:"chargesGross,omitempty"`
	// Total fees for all refunds.
	RefundsFee *MoneyV2 `json:"refundsFee,omitempty"`
	// Total gross amount for all refunds.
	RefundsFeeGross *MoneyV2 `json:"refundsFeeGross,omitempty"`
	// Total fees for all reserved funds.
	ReservedFundsFee *MoneyV2 `json:"reservedFundsFee,omitempty"`
	// Total gross amount for all reserved funds.
	ReservedFundsGross *MoneyV2 `json:"reservedFundsGross,omitempty"`
	// Total fees for all retried payouts.
	RetriedPayoutsFee *MoneyV2 `json:"retriedPayoutsFee,omitempty"`
	// Total gross amount for all retried payouts.
	RetriedPayoutsGross *MoneyV2 `json:"retriedPayoutsGross,omitempty"`
}

// Presents all Shopify Payments specific information related to an order refund.
type ShopifyPaymentsRefundSet struct {
	// The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
	//
	AcquirerReferenceNumber *string `json:"acquirerReferenceNumber,omitempty,omitempty"`
}

// Presents all Shopify Payments specific information related to an order transaction.
type ShopifyPaymentsTransactionSet struct {
	// Contains all fields related to an extended authorization.
	//
	ExtendedAuthorizationSet *ShopifyPaymentsExtendedAuthorization `json:"extendedAuthorizationSet,omitempty,omitempty"`
	// Contains all fields related to a refund.
	//
	RefundSet *ShopifyPaymentsRefundSet `json:"refundSet,omitempty,omitempty"`
}

// Each subject (individual) of an account has a verification object giving
//
//	information about the verification state.
type ShopifyPaymentsVerification struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The status of the verification.
	Status ShopifyPaymentsVerificationStatus `json:"status"`
	// The subject/individual who has to be verified.
	Subject *ShopifyPaymentsVerificationSubject `json:"subject,omitempty"`
}

func (ShopifyPaymentsVerification) IsNode() {}

// A globally-unique ID.
func (this ShopifyPaymentsVerification) GetID() string { return this.ID }

// A document which can be used to verify an individual.
type ShopifyPaymentsVerificationDocument struct {
	// True if the back side of the document is required.
	BackRequired bool `json:"backRequired"`
	// True if the front side of the document is required.
	FrontRequired bool `json:"frontRequired"`
	// The type of the document which can be used for verification.
	Type ShopifyPaymentsVerificationDocumentType `json:"type"`
}

// The verification subject represents an individual that has to be verified.
type ShopifyPaymentsVerificationSubject struct {
	// The family name of the individual to verify.
	FamilyName string `json:"familyName"`
	// The given name of the individual to verify.
	GivenName string `json:"givenName"`
}

// Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
type StaffMember struct {
	// Whether the staff member is active.
	Active bool `json:"active"`
	// The image used as the staff member's avatar in the Shopify admin.
	Avatar *Image `json:"avatar,omitempty"`
	// The staff member's email address.
	Email string `json:"email"`
	// Whether the staff member's account exists.
	Exists bool `json:"exists"`
	// The staff member's first name.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The staff member's initials, if available.
	Initials []string `json:"initials,omitempty,omitempty"`
	// Whether the staff member is the shop owner.
	IsShopOwner bool `json:"isShopOwner"`
	// The staff member's last name.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
	Locale string `json:"locale"`
	// The staff member's full name.
	Name string `json:"name"`
	// The staff member's phone number.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The data used to customize the Shopify admin experience for the staff member.
	PrivateData *StaffMemberPrivateData `json:"privateData,omitempty"`
}

func (StaffMember) IsNode() {}

// A globally-unique ID.
func (this StaffMember) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple StaffMembers.
type StaffMemberConnection struct {
	// A list of edges.
	Edges []StaffMemberEdge `json:"edges,omitempty"`
	// A list of the nodes contained in StaffMemberEdge.
	Nodes []StaffMember `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one StaffMember and a cursor during pagination.
type StaffMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StaffMemberEdge.
	Node *StaffMember `json:"node,omitempty"`
}

// Represents the data used to customize the Shopify admin experience for a logged-in staff member.
type StaffMemberPrivateData struct {
	// The URL to the staff member's account settings page.
	AccountSettingsURL string `json:"accountSettingsUrl"`
	// The date and time when the staff member was created.
	CreatedAt string `json:"createdAt"`
	// Access permissions for the staff member.
	Permissions []StaffMemberPermission `json:"permissions,omitempty"`
}

// An image to be uploaded.
//
// Deprecated in favor of
// [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
// which is used by the
// [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
type StageImageInput struct {
	// The image resource.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// The image filename.
	Filename string `json:"filename"`
	// The image MIME type.
	MimeType string `json:"mimeType"`
	// HTTP method to be used by the staged upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty,omitempty"`
}

// Information about a staged upload target, which should be used to send a request to upload
// the file.
//
// For more information on the upload process, refer to
// [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
type StagedMediaUploadTarget struct {
	// Parameters needed to authenticate a request to upload the file.
	Parameters []StagedUploadParameter `json:"parameters,omitempty"`
	// The URL to be passed as `originalSource` in
	// [CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
	// and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
	// for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
	// and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
	// mutations.
	//
	ResourceURL *string `json:"resourceUrl,omitempty,omitempty"`
	// The URL to use when sending an request to upload the file. Should be used in conjunction with
	// the parameters field.
	//
	URL *string `json:"url,omitempty,omitempty"`
}

// The input fields for generating staged upload targets.
type StagedUploadInput struct {
	// The file's intended Shopify resource type.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// The file's name and extension.
	Filename string `json:"filename"`
	// The file's MIME type.
	MimeType string `json:"mimeType"`
	// The HTTP method to be used when sending a request to upload the file using the returned staged
	// upload target.
	//
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty,omitempty"`
	// The size of the file to upload, in bytes. This is required when the request's resource property is set to
	// [VIDEO](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-video)
	// or [MODEL_3D](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-model3d).
	//
	FileSize *string `json:"fileSize,omitempty,omitempty"`
}

// The parameters required to authenticate a file upload request using a
// [StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).
//
// For more information on the upload process, refer to
// [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
type StagedUploadParameter struct {
	// The parameter's name.
	Name string `json:"name"`
	// The parameter's value.
	Value string `json:"value"`
}

// Information about the staged target.
//
// Deprecated in favor of
// [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
// which is returned by the
// [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
type StagedUploadTarget struct {
	// The parameters of an image to be uploaded.
	Parameters []ImageUploadParameter `json:"parameters,omitempty"`
	// The image URL.
	URL string `json:"url"`
}

// The required fields and parameters to generate the URL upload an"
// asset to Shopify.
//
// Deprecated in favor of
// [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
// which is used by the
// [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
type StagedUploadTargetGenerateInput struct {
	// The resource type being uploaded.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource"`
	// The filename of the asset being uploaded.
	Filename string `json:"filename"`
	// The MIME type of the asset being uploaded.
	MimeType string `json:"mimeType"`
	// The HTTP method to be used by the staged upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty,omitempty"`
	// The size of the file to upload, in bytes.
	FileSize *string `json:"fileSize,omitempty,omitempty"`
}

// Return type for `stagedUploadTargetGenerate` mutation.
type StagedUploadTargetGeneratePayload struct {
	// The signed parameters that can be used to upload the asset.
	Parameters []MutationsStagedUploadTargetGenerateUploadParameter `json:"parameters,omitempty"`
	// The signed URL where the asset can be uploaded.
	URL string `json:"url"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadTargetsGenerate` mutation.
type StagedUploadTargetsGeneratePayload struct {
	// The staged upload targets that were generated.
	Urls []StagedUploadTarget `json:"urls,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadsCreate` mutation.
type StagedUploadsCreatePayload struct {
	// The staged upload targets that were generated.
	StagedTargets []StagedMediaUploadTarget `json:"stagedTargets,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `standardMetafieldDefinitionEnable` mutation.
type StandardMetafieldDefinitionEnablePayload struct {
	// The metafield definition that was created.
	CreatedDefinition *MetafieldDefinition `json:"createdDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []StandardMetafieldDefinitionEnableUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
type StandardMetafieldDefinitionEnableUserError struct {
	// The error code.
	Code *StandardMetafieldDefinitionEnableUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (StandardMetafieldDefinitionEnableUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this StandardMetafieldDefinitionEnableUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this StandardMetafieldDefinitionEnableUserError) GetMessage() string { return this.Message }

// Standard metafield definition templates provide preset configurations to create metafield definitions.
// Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
//
// Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
type StandardMetafieldDefinitionTemplate struct {
	// The description of the standard metafield definition.
	Description *string `json:"description,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The key owned by the definition after the definition has been activated.
	Key string `json:"key"`
	// The human-readable name for the standard metafield definition.
	Name string `json:"name"`
	// The namespace owned by the definition after the definition has been activated.
	Namespace string `json:"namespace"`
	// The list of resource types that the standard metafield definition can be applied to.
	OwnerTypes []MetafieldOwnerType `json:"ownerTypes,omitempty"`
	// The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
	Type *MetafieldDefinitionType `json:"type,omitempty"`
	// The configured validations for the standard metafield definition.
	Validations []MetafieldDefinitionValidation `json:"validations,omitempty"`
	// Whether metafields for the definition are by default visible using the Storefront API.
	//
	VisibleToStorefrontAPI bool `json:"visibleToStorefrontApi"`
}

func (StandardMetafieldDefinitionTemplate) IsNode() {}

// A globally-unique ID.
func (this StandardMetafieldDefinitionTemplate) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
type StandardMetafieldDefinitionTemplateConnection struct {
	// A list of edges.
	Edges []StandardMetafieldDefinitionTemplateEdge `json:"edges,omitempty"`
	// A list of the nodes contained in StandardMetafieldDefinitionTemplateEdge.
	Nodes []StandardMetafieldDefinitionTemplate `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
type StandardMetafieldDefinitionTemplateEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StandardMetafieldDefinitionTemplateEdge.
	Node *StandardMetafieldDefinitionTemplate `json:"node,omitempty"`
}

// Return type for `standardMetaobjectDefinitionEnable` mutation.
type StandardMetaobjectDefinitionEnablePayload struct {
	// The metaobject definition that was enabled using the standard template.
	MetaobjectDefinition *MetaobjectDefinition `json:"metaobjectDefinition,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []MetaobjectUserError `json:"userErrors,omitempty"`
}

// Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
type StandardizedProductType struct {
	// The product taxonomy node associated with the standardized product type.
	ProductTaxonomyNode *ProductTaxonomyNode `json:"productTaxonomyNode,omitempty,omitempty"`
}

// Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
type StandardizedProductTypeInput struct {
	// The ID of the node in the Shopify taxonomy that represents the product type.
	ProductTaxonomyNodeID string `json:"productTaxonomyNodeId"`
}

// A token that's used to delegate unauthenticated access scopes to clients that need to access
// the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
// tokens for each shop.
type StorefrontAccessToken struct {
	// List of permissions associated with the token.
	AccessScopes []AccessScope `json:"accessScopes,omitempty"`
	// The issued public access token.
	AccessToken string `json:"accessToken"`
	// The date and time when the public access token was created.
	CreatedAt string `json:"createdAt"`
	// A globally-unique ID.
	ID string `json:"id"`
	// An arbitrary title for each token determined by the developer, used for reference         purposes.
	Title string `json:"title"`
	// The date and time when the storefront access token was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (StorefrontAccessToken) IsNode() {}

// A globally-unique ID.
func (this StorefrontAccessToken) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple StorefrontAccessTokens.
type StorefrontAccessTokenConnection struct {
	// A list of edges.
	Edges []StorefrontAccessTokenEdge `json:"edges,omitempty"`
	// A list of the nodes contained in StorefrontAccessTokenEdge.
	Nodes []StorefrontAccessToken `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `storefrontAccessTokenCreate` mutation.
type StorefrontAccessTokenCreatePayload struct {
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The storefront access token.
	StorefrontAccessToken *StorefrontAccessToken `json:"storefrontAccessToken,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// The input fields to delete a storefront access token.
type StorefrontAccessTokenDeleteInput struct {
	// The ID of the storefront access token to delete.
	ID string `json:"id"`
}

// Return type for `storefrontAccessTokenDelete` mutation.
type StorefrontAccessTokenDeletePayload struct {
	// The ID of the deleted storefront access token.
	DeletedStorefrontAccessTokenID *string `json:"deletedStorefrontAccessTokenId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
type StorefrontAccessTokenEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StorefrontAccessTokenEdge.
	Node *StorefrontAccessToken `json:"node,omitempty"`
}

// The input fields for a storefront access token.
type StorefrontAccessTokenInput struct {
	// A title for the storefront access token.
	Title string `json:"title"`
}

// An auto-generated type for paginating through a list of Strings.
type StringConnection struct {
	// A list of edges.
	Edges []StringEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one String and a cursor during pagination.
type StringEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of StringEdge.
	Node string `json:"node"`
}

// Represents an applied code discount.
type SubscriptionAppliedCodeDiscount struct {
	// The unique ID.
	ID string `json:"id"`
	// The redeem code of the discount that applies on the subscription.
	RedeemCode string `json:"redeemCode"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty,omitempty"`
}

func (SubscriptionAppliedCodeDiscount) IsSubscriptionDiscount() {}

// The input fields for mapping a subscription line to a discount.
type SubscriptionAtomicLineInput struct {
	// The new subscription line.
	Line *SubscriptionLineInput `json:"line,omitempty"`
	// The discount to be added to the subscription line.
	Discounts []SubscriptionAtomicManualDiscountInput `json:"discounts,omitempty,omitempty"`
}

// The input fields for mapping a subscription line to a discount.
type SubscriptionAtomicManualDiscountInput struct {
	// The title associated with the subscription discount.
	Title *string `json:"title,omitempty,omitempty"`
	// Percentage or fixed amount value of the discount.
	Value *SubscriptionManualDiscountValueInput `json:"value,omitempty,omitempty"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
}

// A record of an execution of the subscription billing process. Billing attempts use
// idempotency keys to avoid duplicate order creation. A successful billing attempt
// will create an order.
type SubscriptionBillingAttempt struct {
	// The date and time when the billing attempt was completed.
	CompletedAt *string `json:"completedAt,omitempty,omitempty"`
	// The date and time when the billing attempt was created.
	CreatedAt string `json:"createdAt"`
	// A code corresponding to a payment error during processing.
	ErrorCode *SubscriptionBillingAttemptErrorCode `json:"errorCode,omitempty,omitempty"`
	// A message describing a payment error during processing.
	ErrorMessage *string `json:"errorMessage,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// A unique key generated by the client to avoid duplicate payments.
	IdempotencyKey string `json:"idempotencyKey"`
	// The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
	//
	NextActionURL *string `json:"nextActionUrl,omitempty,omitempty"`
	// The result of this billing attempt if completed successfully.
	Order *Order `json:"order,omitempty,omitempty"`
	// The date and time used to calculate fulfillment intervals for a billing attempt that
	// successfully completed after the current anchor date. To prevent fulfillment from being
	// pushed to the next anchor date, this field can override the billing attempt date.
	//
	OriginTime *string `json:"originTime,omitempty,omitempty"`
	// Whether the billing attempt is still processing.
	Ready bool `json:"ready"`
	// The subscription contract.
	SubscriptionContract *SubscriptionContract `json:"subscriptionContract,omitempty"`
}

func (SubscriptionBillingAttempt) IsNode() {}

// A globally-unique ID.
func (this SubscriptionBillingAttempt) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
type SubscriptionBillingAttemptConnection struct {
	// A list of edges.
	Edges []SubscriptionBillingAttemptEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionBillingAttemptEdge.
	Nodes []SubscriptionBillingAttempt `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `subscriptionBillingAttemptCreate` mutation.
type SubscriptionBillingAttemptCreatePayload struct {
	// The subscription billing attempt.
	SubscriptionBillingAttempt *SubscriptionBillingAttempt `json:"subscriptionBillingAttempt,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []BillingAttemptUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
type SubscriptionBillingAttemptEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionBillingAttemptEdge.
	Node *SubscriptionBillingAttempt `json:"node,omitempty"`
}

// The input fields required to complete a subscription billing attempt.
type SubscriptionBillingAttemptInput struct {
	// A unique key generated by the client to avoid duplicate payments. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
	IdempotencyKey string `json:"idempotencyKey"`
	// The date and time used to calculate fulfillment intervals for a billing attempt that
	// successfully completed after the current anchor date. To prevent fulfillment from being
	// pushed to the next anchor date, this field can override the billing attempt date.
	//
	OriginTime *string `json:"originTime,omitempty,omitempty"`
	// Select the specific billing cycle to be billed.
	// Default to bill the current billing cycle if not specified.
	//
	BillingCycleSelector *SubscriptionBillingCycleSelector `json:"billingCycleSelector,omitempty,omitempty"`
}

// A subscription billing cycle.
type SubscriptionBillingCycle struct {
	// The date on which the billing attempt is expected to be made.
	BillingAttemptExpectedDate string `json:"billingAttemptExpectedDate"`
	// The list of billing attempts associated with the billing cycle.
	BillingAttempts *SubscriptionBillingAttemptConnection `json:"billingAttempts,omitempty"`
	// The end date of the billing cycle.
	CycleEndAt string `json:"cycleEndAt"`
	// The index of the billing cycle.
	CycleIndex int `json:"cycleIndex"`
	// The start date of the billing cycle.
	CycleStartAt string `json:"cycleStartAt"`
	// Whether this billing cycle was edited.
	Edited bool `json:"edited"`
	// The active edited contract for the billing cycle.
	EditedContract *SubscriptionBillingCycleEditedContract `json:"editedContract,omitempty,omitempty"`
	// Whether this billing cycle was skipped.
	Skipped bool `json:"skipped"`
	// The subscription contract that the billing cycle belongs to.
	SourceContract *SubscriptionContract `json:"sourceContract,omitempty"`
	// The status of the billing cycle.
	Status SubscriptionBillingCycleBillingCycleStatus `json:"status"`
}

// An auto-generated type for paginating through multiple SubscriptionBillingCycles.
type SubscriptionBillingCycleConnection struct {
	// A list of edges.
	Edges []SubscriptionBillingCycleEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionBillingCycleEdge.
	Nodes []SubscriptionBillingCycle `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `subscriptionBillingCycleContractDraftCommit` mutation.
type SubscriptionBillingCycleContractDraftCommitPayload struct {
	// The committed Subscription Billing Cycle Edited Contract object.
	Contract *SubscriptionBillingCycleEditedContract `json:"contract,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation.
type SubscriptionBillingCycleContractDraftConcatenatePayload struct {
	// The Subscription Draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionBillingCycleContractEdit` mutation.
type SubscriptionBillingCycleContractEditPayload struct {
	// The draft subscription contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
type SubscriptionBillingCycleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionBillingCycleEdge.
	Node *SubscriptionBillingCycle `json:"node,omitempty"`
}

// Return type for `subscriptionBillingCycleEditDelete` mutation.
type SubscriptionBillingCycleEditDeletePayload struct {
	// The list of updated billing cycles.
	BillingCycles []SubscriptionBillingCycle `json:"billingCycles,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionBillingCycleUserError `json:"userErrors,omitempty"`
}

// Represents a subscription contract with billing cycles.
type SubscriptionBillingCycleEditedContract struct {
	// The subscription app that the subscription contract is registered to.
	App *App `json:"app,omitempty,omitempty"`
	// The URL of the subscription contract page on the subscription app.
	AppAdminURL *string `json:"appAdminUrl,omitempty,omitempty"`
	// The billing cycles that the edited contract belongs to.
	BillingCycles *SubscriptionBillingCycleConnection `json:"billingCycles,omitempty"`
	// The date and time when the subscription contract was created.
	CreatedAt string `json:"createdAt"`
	// The currency that's used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// A list of the custom attributes to be added to the generated orders.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The customer payment method that's used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod,omitempty"`
	// The delivery price for each billing of the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts associated with the subscription contract.
	Discounts *SubscriptionManualDiscountConnection `json:"discounts,omitempty"`
	// The number of lines associated with the subscription contract.
	LineCount int `json:"lineCount"`
	// The list of subscription lines associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty,omitempty"`
	// A list of the subscription contract's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The date and time when the subscription contract was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SubscriptionBillingCycleEditedContract) IsSubscriptionContractBase() {}

// The subscription app that the subscription contract is registered to.
func (this SubscriptionBillingCycleEditedContract) GetApp() *App { return this.App }

// The URL of the subscription contract page on the subscription app.
func (this SubscriptionBillingCycleEditedContract) GetAppAdminURL() *string { return this.AppAdminURL }

// The currency that's used for the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetCurrencyCode() CurrencyCode {
	return this.CurrencyCode
}

// A list of the custom attributes to be added to the generated orders.
func (this SubscriptionBillingCycleEditedContract) GetCustomAttributes() []Attribute {
	if this.CustomAttributes == nil {
		return nil
	}
	interfaceSlice := make([]Attribute, 0, len(this.CustomAttributes))
	for _, concrete := range this.CustomAttributes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The customer to whom the subscription contract belongs.
func (this SubscriptionBillingCycleEditedContract) GetCustomer() *Customer { return this.Customer }

// The customer payment method that's used for the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetCustomerPaymentMethod() *CustomerPaymentMethod {
	return this.CustomerPaymentMethod
}

// The delivery method for each billing of the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetDeliveryMethod() SubscriptionDeliveryMethod {
	return this.DeliveryMethod
}

// The delivery price for each billing of the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetDeliveryPrice() *MoneyV2 {
	return this.DeliveryPrice
}

// The list of subscription discounts associated with the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetDiscounts() *SubscriptionManualDiscountConnection {
	return this.Discounts
}

// The number of lines associated with the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetLineCount() int { return this.LineCount }

// The list of subscription lines associated with the subscription contract.
func (this SubscriptionBillingCycleEditedContract) GetLines() *SubscriptionLineConnection {
	return this.Lines
}

// The note field that will be applied to the generated orders.
func (this SubscriptionBillingCycleEditedContract) GetNote() *string { return this.Note }

// A list of the subscription contract's orders.
func (this SubscriptionBillingCycleEditedContract) GetOrders() *OrderConnection { return this.Orders }

// The date and time when the subscription contract was updated.
func (this SubscriptionBillingCycleEditedContract) GetUpdatedAt() string { return this.UpdatedAt }

// Return type for `subscriptionBillingCycleEditsDelete` mutation.
type SubscriptionBillingCycleEditsDeletePayload struct {
	// The list of updated billing cycles.
	BillingCycles []SubscriptionBillingCycle `json:"billingCycles,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionBillingCycleUserError `json:"userErrors,omitempty"`
}

// The input fields for specifying the subscription contract and selecting the associated billing cycle.
type SubscriptionBillingCycleInput struct {
	// The ID of the subscription contract associated with the billing cycle.
	ContractID string `json:"contractId"`
	// Selects the billing cycle by date or index.
	Selector *SubscriptionBillingCycleSelector `json:"selector,omitempty"`
}

// The input fields for parameters to modify the schedule of a specific billing cycle.
type SubscriptionBillingCycleScheduleEditInput struct {
	// Sets the skip status for the billing cycle.
	Skip *bool `json:"skip,omitempty,omitempty"`
	// Sets the expected billing date for the billing cycle.
	BillingDate *string `json:"billingDate,omitempty,omitempty"`
	// The reason for editing.
	Reason SubscriptionBillingCycleScheduleEditInputScheduleEditReason `json:"reason"`
}

// Return type for `subscriptionBillingCycleScheduleEdit` mutation.
type SubscriptionBillingCycleScheduleEditPayload struct {
	// The updated billing cycle.
	BillingCycle *SubscriptionBillingCycle `json:"billingCycle,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionBillingCycleUserError `json:"userErrors,omitempty"`
}

// The input fields to select SubscriptionBillingCycle by either date or index.
type SubscriptionBillingCycleSelector struct {
	// Returns a billing cycle by index.
	Index *int `json:"index,omitempty,omitempty"`
	// Returns a billing cycle by date.
	Date *string `json:"date,omitempty,omitempty"`
}

// The possible errors for a subscription billing cycle.
type SubscriptionBillingCycleUserError struct {
	// The error code.
	Code *SubscriptionBillingCycleErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SubscriptionBillingCycleUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this SubscriptionBillingCycleUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this SubscriptionBillingCycleUserError) GetMessage() string { return this.Message }

// The input fields to select a subset of subscription billing cycles within a date range.
type SubscriptionBillingCyclesDateRangeSelector struct {
	// The start date and time for the range.
	StartDate string `json:"startDate"`
	// The end date and time for the range.
	EndDate string `json:"endDate"`
}

// The input fields to select a subset of subscription billing cycles within an index range.
type SubscriptionBillingCyclesIndexRangeSelector struct {
	// The start index for the range.
	StartIndex int `json:"startIndex"`
	// The end index for the range.
	EndIndex int `json:"endIndex"`
}

// Represents a Subscription Billing Policy.
type SubscriptionBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// Maximum amount of cycles after which the subscription ends.
	MaxCycles *int `json:"maxCycles,omitempty,omitempty"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty,omitempty"`
}

// The input fields for a Subscription Billing Policy.
type SubscriptionBillingPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty,omitempty"`
	// Maximum amount of cycles required in the subscription.
	MaxCycles *int `json:"maxCycles,omitempty,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty,omitempty"`
}

// Represents a Subscription Contract.
type SubscriptionContract struct {
	// The subscription app that the subscription contract is registered to.
	App *App `json:"app,omitempty,omitempty"`
	// The URL of the subscription contract page on the subscription app.
	AppAdminURL *string `json:"appAdminUrl,omitempty,omitempty"`
	// The list of billing attempts associated with the subscription contract.
	BillingAttempts *SubscriptionBillingAttemptConnection `json:"billingAttempts,omitempty"`
	// The billing policy associated with the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The date and time when the subscription contract was created.
	CreatedAt string `json:"createdAt"`
	// The currency that's used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// A list of the custom attributes to be added to the generated orders.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty,omitempty"`
	// The customer payment method that's used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod,omitempty"`
	// The delivery policy associated with the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing of the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts associated with the subscription contract.
	Discounts *SubscriptionManualDiscountConnection `json:"discounts,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The current status of the last payment.
	LastPaymentStatus *SubscriptionContractLastPaymentStatus `json:"lastPaymentStatus,omitempty,omitempty"`
	// The number of lines associated with the subscription contract.
	LineCount int `json:"lineCount"`
	// The list of subscription lines associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty,omitempty"`
	// A list of the subscription contract's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The order from which this contract originated.
	OriginOrder *Order `json:"originOrder,omitempty,omitempty"`
	// The revision id of the contract.
	RevisionID string `json:"revisionId"`
	// The current status of the subscription contract.
	Status SubscriptionContractSubscriptionStatus `json:"status"`
	// The date and time when the subscription contract was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SubscriptionContract) IsNode() {}

// A globally-unique ID.
func (this SubscriptionContract) GetID() string { return this.ID }

func (SubscriptionContract) IsSubscriptionContractBase() {}

// The subscription app that the subscription contract is registered to.
func (this SubscriptionContract) GetApp() *App { return this.App }

// The URL of the subscription contract page on the subscription app.
func (this SubscriptionContract) GetAppAdminURL() *string { return this.AppAdminURL }

// The currency that's used for the subscription contract.
func (this SubscriptionContract) GetCurrencyCode() CurrencyCode { return this.CurrencyCode }

// A list of the custom attributes to be added to the generated orders.
func (this SubscriptionContract) GetCustomAttributes() []Attribute {
	if this.CustomAttributes == nil {
		return nil
	}
	interfaceSlice := make([]Attribute, 0, len(this.CustomAttributes))
	for _, concrete := range this.CustomAttributes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The customer to whom the subscription contract belongs.
func (this SubscriptionContract) GetCustomer() *Customer { return this.Customer }

// The customer payment method that's used for the subscription contract.
func (this SubscriptionContract) GetCustomerPaymentMethod() *CustomerPaymentMethod {
	return this.CustomerPaymentMethod
}

// The delivery method for each billing of the subscription contract.
func (this SubscriptionContract) GetDeliveryMethod() SubscriptionDeliveryMethod {
	return this.DeliveryMethod
}

// The delivery price for each billing of the subscription contract.
func (this SubscriptionContract) GetDeliveryPrice() *MoneyV2 { return this.DeliveryPrice }

// The list of subscription discounts associated with the subscription contract.
func (this SubscriptionContract) GetDiscounts() *SubscriptionManualDiscountConnection {
	return this.Discounts
}

// The number of lines associated with the subscription contract.
func (this SubscriptionContract) GetLineCount() int { return this.LineCount }

// The list of subscription lines associated with the subscription contract.
func (this SubscriptionContract) GetLines() *SubscriptionLineConnection { return this.Lines }

// The note field that will be applied to the generated orders.
func (this SubscriptionContract) GetNote() *string { return this.Note }

// A list of the subscription contract's orders.
func (this SubscriptionContract) GetOrders() *OrderConnection { return this.Orders }

// The date and time when the subscription contract was updated.
func (this SubscriptionContract) GetUpdatedAt() string { return this.UpdatedAt }

// The input fields required to create a Subscription Contract.
type SubscriptionContractAtomicCreateInput struct {
	// The ID of the customer to associate with the subscription contract.
	CustomerID string `json:"customerId"`
	// The next billing date for the subscription contract.
	NextBillingDate string `json:"nextBillingDate"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The attributes used as input for the Subscription Draft.
	Contract *SubscriptionDraftInput `json:"contract,omitempty"`
	// A list of new Subscription Lines.
	Lines []SubscriptionAtomicLineInput `json:"lines,omitempty"`
	// A list of discount redeem codes to apply to the subscription contract.
	DiscountCodes []string `json:"discountCodes,omitempty,omitempty"`
}

// Return type for `subscriptionContractAtomicCreate` mutation.
type SubscriptionContractAtomicCreatePayload struct {
	// The new Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple SubscriptionContracts.
type SubscriptionContractConnection struct {
	// A list of edges.
	Edges []SubscriptionContractEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionContractEdge.
	Nodes []SubscriptionContract `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// The input fields required to create a Subscription Contract.
type SubscriptionContractCreateInput struct {
	// The ID of the customer to associate with the subscription contract.
	CustomerID string `json:"customerId"`
	// The next billing date for the subscription contract.
	NextBillingDate string `json:"nextBillingDate"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// The attributes used as input for the Subscription Draft.
	Contract *SubscriptionDraftInput `json:"contract,omitempty"`
}

// Return type for `subscriptionContractCreate` mutation.
type SubscriptionContractCreatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
type SubscriptionContractEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionContractEdge.
	Node *SubscriptionContract `json:"node,omitempty"`
}

// The input fields required to create a Subscription Contract.
type SubscriptionContractProductChangeInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID *string `json:"productVariantId,omitempty,omitempty"`
	// The price of the product.
	CurrentPrice *null.String `json:"currentPrice,omitempty,omitempty"`
}

// Return type for `subscriptionContractProductChange` mutation.
type SubscriptionContractProductChangePayload struct {
	// The new Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty,omitempty"`
	// The updated Subscription Line.
	LineUpdated *SubscriptionLine `json:"lineUpdated,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionContractSetNextBillingDate` mutation.
type SubscriptionContractSetNextBillingDatePayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionContractUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionContractUpdate` mutation.
type SubscriptionContractUpdatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Contract error.
type SubscriptionContractUserError struct {
	// The error code.
	Code *SubscriptionContractErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SubscriptionContractUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this SubscriptionContractUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this SubscriptionContractUserError) GetMessage() string { return this.Message }

// Represents a Subscription Line Pricing Cycle Adjustment.
type SubscriptionCyclePriceAdjustment struct {
	// Price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// Price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue"`
	// The number of cycles required before this pricing policy applies.
	AfterCycle int `json:"afterCycle"`
	// The computed price after the adjustments applied.
	ComputedPrice *MoneyV2 `json:"computedPrice,omitempty"`
}

// Specifies delivery method fields for a subscription draft.
// This is an input union: one, and only one, field can be provided.
// The field provided will determine which delivery method is to be used.
type SubscriptionDeliveryMethodInput struct {
	// The input fields for the shipping delivery method.
	Shipping *SubscriptionDeliveryMethodShippingInput `json:"shipping,omitempty,omitempty"`
	// The input fields for the local delivery method.
	LocalDelivery *SubscriptionDeliveryMethodLocalDeliveryInput `json:"localDelivery,omitempty,omitempty"`
	// The input fields for the pickup delivery method.
	Pickup *SubscriptionDeliveryMethodPickupInput `json:"pickup,omitempty,omitempty"`
}

// A local delivery method, which includes a mailing address and a local delivery option.
type SubscriptionDeliveryMethodLocalDelivery struct {
	// The address to deliver to.
	Address *SubscriptionMailingAddress `json:"address,omitempty"`
	// The details of the local delivery method to use.
	LocalDeliveryOption *SubscriptionDeliveryMethodLocalDeliveryOption `json:"localDeliveryOption,omitempty"`
}

func (SubscriptionDeliveryMethodLocalDelivery) IsSubscriptionDeliveryMethod() {}

// The input fields for a local delivery method.
//
// This input accepts partial input. When a field is not provided,
// its prior value is left unchanged.
type SubscriptionDeliveryMethodLocalDeliveryInput struct {
	// The address to deliver to.
	Address *MailingAddressInput `json:"address,omitempty,omitempty"`
	// The details of the local delivery method to use.
	LocalDeliveryOption *SubscriptionDeliveryMethodLocalDeliveryOptionInput `json:"localDeliveryOption,omitempty,omitempty"`
}

// The selected delivery option on a subscription contract.
type SubscriptionDeliveryMethodLocalDeliveryOption struct {
	// A custom reference to the delivery method for use with automations.
	Code *string `json:"code,omitempty,omitempty"`
	// The details displayed to the customer to describe the local delivery option.
	Description *string `json:"description,omitempty,omitempty"`
	// The delivery instructions that the customer can provide to the merchant.
	Instructions *string `json:"instructions,omitempty,omitempty"`
	// The phone number that the customer provided to the merchant.
	// Formatted using E.164 standard. For example, `+16135551111`.
	//
	Phone string `json:"phone"`
	// The presentment title of the local delivery option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The title of the local delivery option.
	Title *string `json:"title,omitempty,omitempty"`
}

// The input fields for local delivery option.
type SubscriptionDeliveryMethodLocalDeliveryOptionInput struct {
	// The title of the local delivery option.
	Title *string `json:"title,omitempty,omitempty"`
	// The presentment title of the local delivery option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The details displayed to the customer to describe the local delivery option.
	Description *string `json:"description,omitempty,omitempty"`
	// A custom reference to the delivery method for use with automations.
	Code *string `json:"code,omitempty,omitempty"`
	// The phone number that the customer must provide to the merchant.
	// Formatted using E.164 standard. For example, `+16135551111`.
	//
	Phone string `json:"phone"`
	// The delivery instructions that the customer can provide to the merchant.
	Instructions *string `json:"instructions,omitempty,omitempty"`
}

// A delivery method with a pickup option.
type SubscriptionDeliveryMethodPickup struct {
	// The details of the pickup delivery method to use.
	PickupOption *SubscriptionDeliveryMethodPickupOption `json:"pickupOption,omitempty"`
}

func (SubscriptionDeliveryMethodPickup) IsSubscriptionDeliveryMethod() {}

// The input fields for a pickup delivery method.
//
// This input accepts partial input. When a field is not provided,
// its prior value is left unchanged.
type SubscriptionDeliveryMethodPickupInput struct {
	// The details of the pickup method to use.
	PickupOption *SubscriptionDeliveryMethodPickupOptionInput `json:"pickupOption,omitempty,omitempty"`
}

// Represents the selected pickup option on a subscription contract.
type SubscriptionDeliveryMethodPickupOption struct {
	// A custom reference to the delivery method for use with automations.
	Code *string `json:"code,omitempty,omitempty"`
	// The details displayed to the customer to describe the pickup option.
	Description *string `json:"description,omitempty,omitempty"`
	// The location where the customer will pickup the merchandise.
	Location *Location `json:"location,omitempty"`
	// The presentment title of the pickup option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The title of the pickup option.
	Title *string `json:"title,omitempty,omitempty"`
}

// The input fields for pickup option.
type SubscriptionDeliveryMethodPickupOptionInput struct {
	// The title of the pickup option.
	Title *string `json:"title,omitempty,omitempty"`
	// The presentment title of the pickup option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The details displayed to the customer to describe the pickup option.
	Description *string `json:"description,omitempty,omitempty"`
	// A custom reference to the delivery method for use with automations.
	Code *string `json:"code,omitempty,omitempty"`
	// The ID of the pickup location.
	LocationID string `json:"locationId"`
}

// Represents a shipping delivery method: a mailing address and a shipping option.
type SubscriptionDeliveryMethodShipping struct {
	// The address to ship to.
	Address *SubscriptionMailingAddress `json:"address,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOption `json:"shippingOption,omitempty"`
}

func (SubscriptionDeliveryMethodShipping) IsSubscriptionDeliveryMethod() {}

// Specifies shipping delivery method fields.
//
// This input accepts partial input. When a field is not provided,
// its prior value is left unchanged.
type SubscriptionDeliveryMethodShippingInput struct {
	// The address to ship to.
	Address *MailingAddressInput `json:"address,omitempty,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOptionInput `json:"shippingOption,omitempty,omitempty"`
}

// Represents the selected shipping option on a subscription contract.
type SubscriptionDeliveryMethodShippingOption struct {
	// The carrier service that is providing this shipping option.
	// This field isn't currently supported and returns null.
	//
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty,omitempty"`
	// The code of the shipping option.
	Code *string `json:"code,omitempty,omitempty"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The title of the shipping option.
	Title *string `json:"title,omitempty,omitempty"`
}

// The input fields for shipping option.
type SubscriptionDeliveryMethodShippingOptionInput struct {
	// The title of the shipping option.
	Title *string `json:"title,omitempty,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty,omitempty"`
	// The code of the shipping option.
	Code *string `json:"code,omitempty,omitempty"`
	// The carrier service ID of the shipping option.
	CarrierServiceID *string `json:"carrierServiceId,omitempty,omitempty"`
}

// A failure to find the available delivery options for a subscription contract.
type SubscriptionDeliveryOptionResultFailure struct {
	// The reason for the failure.
	Message *string `json:"message,omitempty,omitempty"`
}

func (SubscriptionDeliveryOptionResultFailure) IsSubscriptionDeliveryOptionResult() {}

// The delivery option for a subscription contract.
type SubscriptionDeliveryOptionResultSuccess struct {
	// The available delivery options.
	DeliveryOptions []SubscriptionDeliveryOption `json:"deliveryOptions,omitempty"`
}

func (SubscriptionDeliveryOptionResultSuccess) IsSubscriptionDeliveryOptionResult() {}

// Represents a Subscription Delivery Policy.
type SubscriptionDeliveryPolicy struct {
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of delivery intervals between deliveries.
	IntervalCount int `json:"intervalCount"`
}

// The input fields for a Subscription Delivery Policy.
type SubscriptionDeliveryPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount"`
	// The specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []SellingPlanAnchorInput `json:"anchors,omitempty,omitempty"`
}

// Represents what a particular discount reduces from a line price.
type SubscriptionDiscountAllocation struct {
	// Allocation amount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Discount that created the allocation.
	Discount SubscriptionDiscount `json:"discount"`
}

// An auto-generated type for paginating through multiple SubscriptionDiscounts.
type SubscriptionDiscountConnection struct {
	// A list of edges.
	Edges []SubscriptionDiscountEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionDiscountEdge.
	Nodes []SubscriptionDiscount `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
type SubscriptionDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionDiscountEdge.
	Node SubscriptionDiscount `json:"node"`
}

// Represents the subscription lines the discount applies on.
type SubscriptionDiscountEntitledLines struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All bool `json:"all"`
	// The list of subscription lines associated with the subscription discount.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountFixedAmountValue struct {
	// The fixed amount value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Whether the amount is applied per item.
	AppliesOnEachItem bool `json:"appliesOnEachItem"`
}

func (SubscriptionDiscountFixedAmountValue) IsSubscriptionDiscountValue() {}

// The percentage value of the discount.
type SubscriptionDiscountPercentageValue struct {
	// The percentage value of the discount.
	Percentage int `json:"percentage"`
}

func (SubscriptionDiscountPercentageValue) IsSubscriptionDiscountValue() {}

// Represents a Subscription Draft.
type SubscriptionDraft struct {
	// The billing cycle that the subscription contract will be associated with.
	BillingCycle *SubscriptionBillingCycle `json:"billingCycle,omitempty,omitempty"`
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The billing cycles of the contracts that will be concatenated to the subscription contract.
	ConcatenatedBillingCycles *SubscriptionBillingCycleConnection `json:"concatenatedBillingCycles,omitempty"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode"`
	// A list of the custom attributes to be added to the generated orders.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The customer payment method used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod,omitempty"`
	// The available delivery options for a given delivery address. Returns `null` for pending requests.
	//
	DeliveryOptions SubscriptionDeliveryOptionResult `json:"deliveryOptions,omitempty"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty,omitempty"`
	// The list of subscription discounts which will be associated with the subscription contract.
	Discounts *SubscriptionDiscountConnection `json:"discounts,omitempty"`
	// The list of subscription discounts to be added to the subscription contract.
	DiscountsAdded *SubscriptionDiscountConnection `json:"discountsAdded,omitempty"`
	// The list of subscription discounts to be removed from the subscription contract.
	DiscountsRemoved *SubscriptionDiscountConnection `json:"discountsRemoved,omitempty"`
	// The list of subscription discounts to be updated on the subscription contract.
	DiscountsUpdated *SubscriptionDiscountConnection `json:"discountsUpdated,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The list of subscription lines which will be associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The list of subscription lines to be added to the subscription contract.
	LinesAdded *SubscriptionLineConnection `json:"linesAdded,omitempty"`
	// The list of subscription lines to be removed from the subscription contract.
	LinesRemoved *SubscriptionLineConnection `json:"linesRemoved,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty,omitempty"`
	// The original subscription contract.
	OriginalContract *SubscriptionContract `json:"originalContract,omitempty,omitempty"`
	// Available Shipping Options for a given delivery address. Returns NULL for pending requests.
	//
	ShippingOptions SubscriptionShippingOptionResult `json:"shippingOptions,omitempty"`
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty,omitempty"`
}

func (SubscriptionDraft) IsNode() {}

// A globally-unique ID.
func (this SubscriptionDraft) GetID() string { return this.ID }

// Return type for `subscriptionDraftCommit` mutation.
type SubscriptionDraftCommitPayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountAdd` mutation.
type SubscriptionDraftDiscountAddPayload struct {
	// The added Subscription Discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountCodeApply` mutation.
type SubscriptionDraftDiscountCodeApplyPayload struct {
	// The added subscription discount.
	AppliedDiscount *SubscriptionAppliedCodeDiscount `json:"appliedDiscount,omitempty,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountRemove` mutation.
type SubscriptionDraftDiscountRemovePayload struct {
	// The removed subscription draft discount.
	DiscountRemoved SubscriptionDiscount `json:"discountRemoved,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountUpdate` mutation.
type SubscriptionDraftDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
type SubscriptionDraftFreeShippingDiscountAddPayload struct {
	// The added subscription free shipping discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
type SubscriptionDraftFreeShippingDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// The input fields required to create a Subscription Draft.
type SubscriptionDraftInput struct {
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty,omitempty"`
	// The ID of the payment method to be used for the subscription contract.
	PaymentMethodID *string `json:"paymentMethodId,omitempty,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *string `json:"nextBillingDate,omitempty,omitempty"`
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicyInput `json:"billingPolicy,omitempty,omitempty"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicyInput `json:"deliveryPolicy,omitempty,omitempty"`
	// The shipping price for each renewal the subscription contract.
	DeliveryPrice *null.String `json:"deliveryPrice,omitempty,omitempty"`
	// The delivery method for the subscription contract.
	DeliveryMethod *SubscriptionDeliveryMethodInput `json:"deliveryMethod,omitempty,omitempty"`
	// The note field that will be applied to the generated orders.
	Note *string `json:"note,omitempty,omitempty"`
	// A list of the custom attributes added to the subscription contract.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
}

// Return type for `subscriptionDraftLineAdd` mutation.
type SubscriptionDraftLineAddPayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The added Subscription Line.
	LineAdded *SubscriptionLine `json:"lineAdded,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineRemove` mutation.
type SubscriptionDraftLineRemovePayload struct {
	// The list of updated subscription discounts impacted by the removed line.
	DiscountsUpdated []SubscriptionManualDiscount `json:"discountsUpdated,omitempty,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The removed Subscription Line.
	LineRemoved *SubscriptionLine `json:"lineRemoved,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineUpdate` mutation.
type SubscriptionDraftLineUpdatePayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The updated Subscription Line.
	LineUpdated *SubscriptionLine `json:"lineUpdated,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftUpdate` mutation.
type SubscriptionDraftUpdatePayload struct {
	// The Subscription Draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Draft error.
type SubscriptionDraftUserError struct {
	// The error code.
	Code *SubscriptionDraftErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (SubscriptionDraftUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this SubscriptionDraftUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this SubscriptionDraftUserError) GetMessage() string { return this.Message }

// The input fields for a subscription free shipping discount on a contract.
type SubscriptionFreeShippingDiscountInput struct {
	// The title associated with the subscription free shipping discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The maximum number of times the subscription free shipping discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
}

// Represents a Subscription Line.
type SubscriptionLine struct {
	// The price per unit for the subscription line in the contract's currency.
	CurrentPrice *MoneyV2 `json:"currentPrice,omitempty"`
	// List of custom attributes associated to the line item.
	CustomAttributes []Attribute `json:"customAttributes,omitempty"`
	// Discount allocations.
	DiscountAllocations []SubscriptionDiscountAllocation `json:"discountAllocations,omitempty"`
	// The unique ID.
	ID string `json:"id"`
	// Total line price including all discounts.
	LineDiscountedPrice *MoneyV2 `json:"lineDiscountedPrice,omitempty"`
	// Describe the price changes of the line over time.
	PricingPolicy *SubscriptionPricingPolicy `json:"pricingPolicy,omitempty,omitempty"`
	// The product ID associated with the subscription line.
	ProductID *string `json:"productId,omitempty,omitempty"`
	// The quantity of the unit selected for the subscription line.
	Quantity int `json:"quantity"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The selling plan ID associated to the line.
	//
	// Indicates which selling plan was used to create this
	// contract line initially. The selling plan ID is also used to
	// find the associated delivery profile.
	//
	// The subscription contract, subscription line, or selling plan might have
	// changed. As a result, the selling plan's attributes might not
	// match the information on the contract.
	//
	SellingPlanID *string `json:"sellingPlanId,omitempty,omitempty"`
	// The selling plan name associated to the line. This name describes
	// the order line items created from this subscription line
	// for both merchants and customers.
	//
	// The value can be different from the selling plan's name, because both
	// the selling plan's name and the subscription line's selling_plan_name
	// attribute can be updated independently.
	//
	SellingPlanName *string `json:"sellingPlanName,omitempty,omitempty"`
	// Variant SKU number of the item associated with the subscription line.
	Sku *string `json:"sku,omitempty,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable"`
	// Product title of the item associated with the subscription line.
	Title string `json:"title"`
	// The product variant ID associated with the subscription line.
	VariantID *string `json:"variantId,omitempty,omitempty"`
	// The image associated with the line item's variant or product.
	VariantImage *Image `json:"variantImage,omitempty,omitempty"`
	// Product variant title of the item associated with the subscription line.
	VariantTitle *string `json:"variantTitle,omitempty,omitempty"`
}

// An auto-generated type for paginating through multiple SubscriptionLines.
type SubscriptionLineConnection struct {
	// A list of edges.
	Edges []SubscriptionLineEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionLineEdge.
	Nodes []SubscriptionLine `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
type SubscriptionLineEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionLineEdge.
	Node *SubscriptionLine `json:"node,omitempty"`
}

// The input fields required to add a new subscription line to a contract.
type SubscriptionLineInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID string `json:"productVariantId"`
	// The quantity of the product.
	Quantity int `json:"quantity"`
	// The price of the product.
	CurrentPrice null.String `json:"currentPrice"`
	// The custom attributes for this subscription line.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *string `json:"sellingPlanId,omitempty,omitempty"`
	// The selling plan name for the subscription line.
	//
	// Defaults to using the selling plan's current name when not specified.
	//
	SellingPlanName *string `json:"sellingPlanName,omitempty,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty,omitempty"`
}

// The input fields required to update a subscription line on a contract.
type SubscriptionLineUpdateInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID *string `json:"productVariantId,omitempty,omitempty"`
	// The quantity of the product.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *string `json:"sellingPlanId,omitempty,omitempty"`
	// The selling plan name for the subscription line.
	SellingPlanName *string `json:"sellingPlanName,omitempty,omitempty"`
	// The price of the product.
	CurrentPrice *null.String `json:"currentPrice,omitempty,omitempty"`
	// The custom attributes for this subscription line.
	CustomAttributes []AttributeInput `json:"customAttributes,omitempty,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty,omitempty"`
}

// A local delivery option for a subscription contract.
type SubscriptionLocalDeliveryOption struct {
	// The code of the local delivery option.
	Code string `json:"code"`
	// The description of the local delivery option.
	Description *string `json:"description,omitempty,omitempty"`
	// Whether a phone number is required for the local delivery option.
	PhoneRequired bool `json:"phoneRequired"`
	// The presentment title of the local delivery option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The price of the local delivery option.
	Price *MoneyV2 `json:"price,omitempty,omitempty"`
	// The title of the local delivery option.
	Title string `json:"title"`
}

func (SubscriptionLocalDeliveryOption) IsSubscriptionDeliveryOption() {}

// Represents a Mailing Address on a Subscription.
type SubscriptionMailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *string `json:"address1,omitempty,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *string `json:"address2,omitempty,omitempty"`
	// The name of the city, district, village, or town.
	City *string `json:"city,omitempty,omitempty"`
	// The name of the customer's company or organization.
	Company *string `json:"company,omitempty,omitempty"`
	// The name of the country.
	Country *string `json:"country,omitempty,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	//
	CountryCode *CountryCode `json:"countryCode,omitempty,omitempty"`
	// The first name of the customer.
	FirstName *string `json:"firstName,omitempty,omitempty"`
	// The last name of the customer.
	LastName *string `json:"lastName,omitempty,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	Name *string `json:"name,omitempty,omitempty"`
	// A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
	Phone *string `json:"phone,omitempty,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *string `json:"province,omitempty,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	//
	ProvinceCode *string `json:"provinceCode,omitempty,omitempty"`
	// The zip or postal code of the address.
	Zip *string `json:"zip,omitempty,omitempty"`
}

// Custom subscription discount.
type SubscriptionManualDiscount struct {
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionDiscountEntitledLines `json:"entitledLines,omitempty"`
	// The unique ID.
	ID string `json:"id"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty,omitempty"`
	// Type of line the discount applies on.
	TargetType DiscountTargetType `json:"targetType"`
	// The title associated with the subscription discount.
	Title *string `json:"title,omitempty,omitempty"`
	// The type of the subscription discount.
	Type DiscountType `json:"type"`
	// The number of times the discount was applied.
	UsageCount int `json:"usageCount"`
	// The value of the subscription discount.
	Value SubscriptionDiscountValue `json:"value"`
}

func (SubscriptionManualDiscount) IsSubscriptionDiscount() {}

// An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
type SubscriptionManualDiscountConnection struct {
	// A list of edges.
	Edges []SubscriptionManualDiscountEdge `json:"edges,omitempty"`
	// A list of the nodes contained in SubscriptionManualDiscountEdge.
	Nodes []SubscriptionManualDiscount `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
type SubscriptionManualDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of SubscriptionManualDiscountEdge.
	Node *SubscriptionManualDiscount `json:"node,omitempty"`
}

// The input fields for the subscription lines the discount applies on.
type SubscriptionManualDiscountEntitledLinesInput struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All *bool `json:"all,omitempty,omitempty"`
	// The ID of the lines to add to or remove from the subscription discount.
	Lines *SubscriptionManualDiscountLinesInput `json:"lines,omitempty,omitempty"`
}

// The input fields for the fixed amount value of the discount and distribution on the lines.
type SubscriptionManualDiscountFixedAmountInput struct {
	// Fixed amount value.
	Amount *float64 `json:"amount,omitempty,omitempty"`
	// Whether the amount is intended per line item or once per subscription.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty,omitempty"`
}

// The input fields for a subscription discount on a contract.
type SubscriptionManualDiscountInput struct {
	// The title associated with the subscription discount.
	Title *string `json:"title,omitempty,omitempty"`
	// Percentage or fixed amount value of the discount.
	Value *SubscriptionManualDiscountValueInput `json:"value,omitempty,omitempty"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty,omitempty"`
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionManualDiscountEntitledLinesInput `json:"entitledLines,omitempty,omitempty"`
}

// The input fields for line items that the discount refers to.
type SubscriptionManualDiscountLinesInput struct {
	// The ID of the lines to add to the subscription discount.
	Add []string `json:"add,omitempty,omitempty"`
	// The ID of the lines to remove from the subscription discount.
	Remove []string `json:"remove,omitempty,omitempty"`
}

// The input fields for the discount value and its distribution.
type SubscriptionManualDiscountValueInput struct {
	// The percentage value of the discount. Value must be between 0 - 100.
	Percentage *int `json:"percentage,omitempty,omitempty"`
	// Fixed amount input in the currency defined by the subscription.
	FixedAmount *SubscriptionManualDiscountFixedAmountInput `json:"fixedAmount,omitempty,omitempty"`
}

// A pickup option to deliver a subscription contract.
type SubscriptionPickupOption struct {
	// The code of the pickup option.
	Code string `json:"code"`
	// The description of the pickup option.
	Description *string `json:"description,omitempty,omitempty"`
	// The pickup location.
	Location *Location `json:"location,omitempty"`
	// Whether a phone number is required for the pickup option.
	PhoneRequired bool `json:"phoneRequired"`
	// The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
	PickupTime string `json:"pickupTime"`
	// The presentment title of the pickup option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The price of the pickup option.
	Price *MoneyV2 `json:"price,omitempty,omitempty"`
	// The title of the pickup option.
	Title string `json:"title"`
}

func (SubscriptionPickupOption) IsSubscriptionDeliveryOption() {}

// Represents a Subscription Line Pricing Policy.
type SubscriptionPricingPolicy struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice *MoneyV2 `json:"basePrice,omitempty"`
	// The adjustments per cycle for the subscription line.
	CycleDiscounts []SubscriptionCyclePriceAdjustment `json:"cycleDiscounts,omitempty"`
}

// The input fields for an array containing all pricing changes for each billing cycle.
type SubscriptionPricingPolicyCycleDiscountsInput struct {
	// The cycle after which the pricing policy applies.
	AfterCycle int `json:"afterCycle"`
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType"`
	// The price adjustment value.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
	// The computed price after the adjustments are applied.
	ComputedPrice null.String `json:"computedPrice"`
}

// The input fields for expected price changes of the subscription line over time.
type SubscriptionPricingPolicyInput struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice null.String `json:"basePrice"`
	// An array containing all pricing changes for each billing cycle.
	CycleDiscounts []SubscriptionPricingPolicyCycleDiscountsInput `json:"cycleDiscounts,omitempty"`
}

// A shipping option to deliver a subscription contract.
type SubscriptionShippingOption struct {
	// The carrier service that is providing this shipping option.
	// This field isn't currently supported and returns null.
	//
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty,omitempty"`
	// The code of the shipping option.
	Code string `json:"code"`
	// The description of the shipping option.
	Description *string `json:"description,omitempty,omitempty"`
	// If a phone number is required for the shipping option.
	PhoneRequired *bool `json:"phoneRequired,omitempty,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *string `json:"presentmentTitle,omitempty,omitempty"`
	// The price of the shipping option.
	Price *MoneyV2 `json:"price,omitempty,omitempty"`
	// The title of the shipping option.
	Title string `json:"title"`
}

func (SubscriptionShippingOption) IsSubscriptionDeliveryOption() {}

// Failure determining available shipping options for delivery of a subscription contract.
type SubscriptionShippingOptionResultFailure struct {
	// Failure reason.
	Message *string `json:"message,omitempty,omitempty"`
}

func (SubscriptionShippingOptionResultFailure) IsSubscriptionShippingOptionResult() {}

// A shipping option for delivery of a subscription contract.
type SubscriptionShippingOptionResultSuccess struct {
	// Available shipping options.
	ShippingOptions []SubscriptionShippingOption `json:"shippingOptions,omitempty"`
}

func (SubscriptionShippingOptionResultSuccess) IsSubscriptionShippingOptionResult() {}

// A suggested transaction. Suggested transaction are usually used in the context of refunds
// and exchanges.
type SuggestedOrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *string `json:"accountNumber,omitempty,omitempty"`
	// The amount of the transaction.
	Amount null.String `json:"amount"`
	// The amount and currency of the suggested order transaction in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The human-readable payment gateway name suggested to process the transaction.
	FormattedGateway *string `json:"formattedGateway,omitempty,omitempty"`
	// The suggested payment gateway used to process the transaction.
	Gateway *string `json:"gateway,omitempty,omitempty"`
	// Specifies the kind of the suggested order transaction.
	Kind SuggestedOrderTransactionKind `json:"kind"`
	// Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty,omitempty"`
	// Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty,omitempty"`
}

// Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
type SuggestedRefund struct {
	// The total monetary value to be refunded.
	Amount null.String `json:"amount"`
	// The total monetary value to be refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The sum of all the discounted prices of the line items being refunded.
	DiscountedSubtotalSet *MoneyBag `json:"discountedSubtotalSet,omitempty"`
	// The total monetary value available to refund.
	MaximumRefundable null.String `json:"maximumRefundable"`
	// The total monetary value available to refund in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// A list of duties to be refunded from the order.
	RefundDuties []RefundDuty `json:"refundDuties,omitempty"`
	// A list of line items to be refunded, along with restock instructions.
	RefundLineItems []RefundLineItem `json:"refundLineItems,omitempty"`
	// The shipping costs to be refunded from the order.
	Shipping *ShippingRefund `json:"shipping,omitempty"`
	// The sum of all the prices of the line items being refunded.
	Subtotal null.String `json:"subtotal"`
	// The sum of all the prices of the line items being refunded in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// A list of suggested order transactions.
	SuggestedTransactions []SuggestedOrderTransaction `json:"suggestedTransactions,omitempty"`
	// The total cart discount amount that was applied to all line items in this refund.
	TotalCartDiscountAmountSet *MoneyBag `json:"totalCartDiscountAmountSet,omitempty"`
	// The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalDutiesSet *MoneyBag `json:"totalDutiesSet,omitempty"`
	// The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// The sum of the taxes being refunded from the order. The value must be positive.
	TotalTaxes null.String `json:"totalTaxes"`
}

// Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.
type SuggestedReturnRefund struct {
	// The total monetary value to be refunded in shop and presentment currencies.
	Amount *MoneyBag `json:"amount,omitempty"`
	// The sum of all the discounted prices of the line items being refunded.
	DiscountedSubtotal *MoneyBag `json:"discountedSubtotal,omitempty"`
	// The total monetary value available to refund in shop and presentment currencies.
	MaximumRefundable *MoneyBag `json:"maximumRefundable,omitempty"`
	// A list of duties to be refunded from the order.
	RefundDuties []RefundDuty `json:"refundDuties,omitempty"`
	// The shipping costs to be refunded from the order.
	Shipping *ShippingRefund `json:"shipping,omitempty"`
	// The sum of all the prices of the line items being refunded in shop and presentment currencies.
	Subtotal *MoneyBag `json:"subtotal,omitempty"`
	// A list of suggested order transactions.
	SuggestedTransactions []SuggestedOrderTransaction `json:"suggestedTransactions,omitempty"`
	// The total cart discount amount that was applied to all line items in this refund.
	TotalCartDiscountAmount *MoneyBag `json:"totalCartDiscountAmount,omitempty"`
	// The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
	TotalDuties *MoneyBag `json:"totalDuties,omitempty"`
	// The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
	TotalTax *MoneyBag `json:"totalTax,omitempty"`
}

// The result in a tabular format with schema information and formatted and unformatted row data.
type TableData struct {
	// The data table columns.
	Columns []TableDataColumn `json:"columns,omitempty"`
	// The formatted data values.
	RowData [][]string `json:"rowData,omitempty"`
	// The unformatted data values.
	UnformattedData string `json:"unformattedData"`
}

// A nested array representation of the data. An index in an array represents a row number.
type TableDataColumn struct {
	// For comparison columns, indicates the column to compare to.
	ComparedTo string `json:"comparedTo"`
	// The data type of the column value.
	DataType string `json:"dataType"`
	// The display name of the column in the data model.
	DisplayName string `json:"displayName"`
	// The name of the column in the data model.
	Name string `json:"name"`
}

// The default table response structure for a ShopifyQL query.
type TableResponse struct {
	// A list of parse errors, if parsing fails.
	ParseErrors []ParseError `json:"parseErrors,omitempty,omitempty"`
	// The result in a tabular format with schema and row data.
	TableData *TableData `json:"tableData,omitempty,omitempty"`
}

func (TableResponse) IsShopifyqlResponse() {}

// A list of parse errors, if parsing fails.
func (this TableResponse) GetParseErrors() []ParseError {
	if this.ParseErrors == nil {
		return nil
	}
	interfaceSlice := make([]ParseError, 0, len(this.ParseErrors))
	for _, concrete := range this.ParseErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The result in a tabular format with schema and row data.
// To be used as a raw 2-dimensional response of the query.
// It's always present even if query has a `VISUALIZE` keyword.
func (this TableResponse) GetTableData() *TableData { return this.TableData }

// Return type for `tagsAdd` mutation.
type TagsAddPayload struct {
	// The object that was updated.
	Node Node `json:"node,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `tagsRemove` mutation.
type TagsRemovePayload struct {
	// The object that was updated.
	Node Node `json:"node,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Tax app configuration of a merchant.
type TaxAppConfiguration struct {
	// State of the tax app configuration.
	State TaxPartnerState `json:"state"`
}

// Return type for `taxAppConfigure` mutation.
type TaxAppConfigurePayload struct {
	// The updated tax app configuration.
	TaxAppConfiguration *TaxAppConfiguration `json:"taxAppConfiguration,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TaxAppConfigureUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `TaxAppConfigure`.
type TaxAppConfigureUserError struct {
	// The error code.
	Code *TaxAppConfigureUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (TaxAppConfigureUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this TaxAppConfigureUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this TaxAppConfigureUserError) GetMessage() string { return this.Message }

// Represents a single tax applied to the associated line item.
type TaxLine struct {
	// Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
	ChannelLiable *bool `json:"channelLiable,omitempty,omitempty"`
	// The amount of tax, in shop currency, after discounts and before returns.
	Price null.String `json:"price"`
	// The amount of tax, in shop and presentment currencies, after discounts and before returns.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// The proportion of the line item price that the tax represents as a decimal.
	Rate *float64 `json:"rate,omitempty,omitempty"`
	// The proportion of the line item price that the tax represents as a percentage.
	RatePercentage *float64 `json:"ratePercentage,omitempty,omitempty"`
	// The name of the tax.
	Title string `json:"title"`
}

// A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
// represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
// for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
type TenderTransaction struct {
	// The amount and currency of the tender transaction.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Information about the payment method used for the transaction.
	PaymentMethod *string `json:"paymentMethod,omitempty,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *string `json:"processedAt,omitempty,omitempty"`
	// The remote gateway reference associated with the tender transaction.
	RemoteReference *string `json:"remoteReference,omitempty,omitempty"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test"`
	// Information about the payment instrument used for the transaction.
	TransactionDetails TenderTransactionDetails `json:"transactionDetails,omitempty"`
	// The staff member who performed the transaction.
	User *StaffMember `json:"user,omitempty,omitempty"`
}

func (TenderTransaction) IsNode() {}

// A globally-unique ID.
func (this TenderTransaction) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple TenderTransactions.
type TenderTransactionConnection struct {
	// A list of edges.
	Edges []TenderTransactionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in TenderTransactionEdge.
	Nodes []TenderTransaction `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Information about the credit card used for this transaction.
type TenderTransactionCreditCardDetails struct {
	// The name of the company that issued the customer's credit card. Example: `Visa`.
	CreditCardCompany *string `json:"creditCardCompany,omitempty,omitempty"`
	// The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
	CreditCardNumber *string `json:"creditCardNumber,omitempty,omitempty"`
}

func (TenderTransactionCreditCardDetails) IsTenderTransactionDetails() {}

// An auto-generated type which holds one TenderTransaction and a cursor during pagination.
type TenderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of TenderTransactionEdge.
	Node *TenderTransaction `json:"node,omitempty"`
}

// A sale associated with a tip.
type TipSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line item for the associated sale.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (TipSale) IsSale() {}

// The type of order action that the sale represents.
func (this TipSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this TipSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this TipSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this TipSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this TipSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this TipSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this TipSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this TipSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this TipSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// Transaction fee related to an order transaction.
type TransactionFee struct {
	// Amount of the fee.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Flat rate charge for a transaction.
	FlatFee *MoneyV2 `json:"flatFee,omitempty"`
	// Name of the credit card flat fee.
	FlatFeeName *string `json:"flatFeeName,omitempty,omitempty"`
	// A globally-unique ID.
	ID string `json:"id"`
	// Percentage charge.
	Rate null.String `json:"rate"`
	// Name of the credit card rate.
	RateName *string `json:"rateName,omitempty,omitempty"`
	// Tax amount charged on the fee.
	TaxAmount *MoneyV2 `json:"taxAmount,omitempty"`
	// Name of the type of fee.
	Type string `json:"type"`
}

func (TransactionFee) IsNode() {}

// A globally-unique ID.
func (this TransactionFee) GetID() string { return this.ID }

// Translatable content of a resource's field.
type TranslatableContent struct {
	// Hash digest representation of the content value.
	Digest *string `json:"digest,omitempty,omitempty"`
	// The resource field that is being translated.
	Key string `json:"key"`
	// Locale of the content.
	Locale string `json:"locale"`
	// Type of the translatable content.
	Type LocalizableContentType `json:"type"`
	// Content value.
	Value *string `json:"value,omitempty,omitempty"`
}

// A resource that has translatable fields.
type TranslatableResource struct {
	// GID of the resource.
	ResourceID string `json:"resourceId"`
	// Translatable content.
	TranslatableContent []TranslatableContent `json:"translatableContent,omitempty"`
	// Translatable content translations.
	Translations []Translation `json:"translations,omitempty"`
}

// An auto-generated type for paginating through multiple TranslatableResources.
type TranslatableResourceConnection struct {
	// A list of edges.
	Edges []TranslatableResourceEdge `json:"edges,omitempty"`
	// A list of the nodes contained in TranslatableResourceEdge.
	Nodes []TranslatableResource `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one TranslatableResource and a cursor during pagination.
type TranslatableResourceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of TranslatableResourceEdge.
	Node *TranslatableResource `json:"node,omitempty"`
}

// Translation of a field of a resource.
type Translation struct {
	// On the resource that this translation belongs to, the reference to the value being translated.
	Key string `json:"key"`
	// ISO code of the translation locale.
	Locale string `json:"locale"`
	// The market that the translation is specific to. Null value means the translation is available in all markets.
	Market *Market `json:"market,omitempty,omitempty"`
	// Whether the original content has changed since this translation was updated.
	Outdated bool `json:"outdated"`
	// The date and time when the translation was updated.
	UpdatedAt *string `json:"updatedAt,omitempty,omitempty"`
	// Translation value.
	Value *string `json:"value,omitempty,omitempty"`
}

// The input fields and values for creating or updating a translation.
type TranslationInput struct {
	// ISO code of the locale being translated into. Only locales returned in `shopLocales` are valid.
	Locale string `json:"locale"`
	// On the resource that this translation belongs to, the reference to the value being translated.
	Key string `json:"key"`
	// The value of the translation.
	Value string `json:"value"`
	// Hash digest representation of the content being translated.
	TranslatableContentDigest string `json:"translatableContentDigest"`
	// The ID of the market that the translation is specific to. Not specifying this field means that the translation will be available in all markets.
	MarketID *string `json:"marketId,omitempty,omitempty"`
}

// Represents an error that happens during the execution of a translation mutation.
type TranslationUserError struct {
	// The error code.
	Code *TranslationErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (TranslationUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this TranslationUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this TranslationUserError) GetMessage() string { return this.Message }

// Return type for `translationsRegister` mutation.
type TranslationsRegisterPayload struct {
	// The translations that were created or updated.
	Translations []Translation `json:"translations,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// Return type for `translationsRemove` mutation.
type TranslationsRemovePayload struct {
	// The translations that were deleted.
	Translations []Translation `json:"translations,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TranslationUserError `json:"userErrors,omitempty"`
}

// Represents a typed custom attribute.
type TypedAttribute struct {
	// Key or name of the attribute.
	Key string `json:"key"`
	// Value of the attribute.
	Value string `json:"value"`
}

// Specifies the
// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
// that are associated with a related marketing campaign.
type UTMInput struct {
	// The name of the UTM campaign.
	Campaign string `json:"campaign"`
	// The name of the website or application where the referral link exists.
	Source string `json:"source"`
	// The UTM campaign medium.
	Medium string `json:"medium"`
}

// Represents a set of UTM parameters.
type UTMParameters struct {
	// The name of a marketing campaign.
	Campaign *string `json:"campaign,omitempty,omitempty"`
	// Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
	Content *string `json:"content,omitempty,omitempty"`
	// The medium of a marketing campaign, such as a banner or email newsletter.
	Medium *string `json:"medium,omitempty,omitempty"`
	// The source of traffic to the merchant's store, such as Google or an email newsletter.
	Source *string `json:"source,omitempty,omitempty"`
	// Paid search terms used by a marketing campaign.
	Term *string `json:"term,omitempty,omitempty"`
}

// This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.
type UnknownSale struct {
	// The type of order action that the sale represents.
	ActionType SaleActionType `json:"actionType"`
	// The unique ID for the sale.
	ID string `json:"id"`
	// The line type assocated with the sale.
	LineType SaleLineType `json:"lineType"`
	// The number of units either ordered or intended to be returned.
	Quantity *int `json:"quantity,omitempty,omitempty"`
	// All individual taxes associated with the sale.
	Taxes []SaleTax `json:"taxes,omitempty"`
	// The total sale amount after taxes and discounts.
	TotalAmount *MoneyBag `json:"totalAmount,omitempty"`
	// The total discounts allocated to the sale after taxes.
	TotalDiscountAmountAfterTaxes *MoneyBag `json:"totalDiscountAmountAfterTaxes,omitempty"`
	// The total discounts allocated to the sale before taxes.
	TotalDiscountAmountBeforeTaxes *MoneyBag `json:"totalDiscountAmountBeforeTaxes,omitempty"`
	// The total amount of taxes for the sale.
	TotalTaxAmount *MoneyBag `json:"totalTaxAmount,omitempty"`
}

func (UnknownSale) IsSale() {}

// The type of order action that the sale represents.
func (this UnknownSale) GetActionType() SaleActionType { return this.ActionType }

// The unique ID for the sale.
func (this UnknownSale) GetID() string { return this.ID }

// The line type assocated with the sale.
func (this UnknownSale) GetLineType() SaleLineType { return this.LineType }

// The number of units either ordered or intended to be returned.
func (this UnknownSale) GetQuantity() *int { return this.Quantity }

// All individual taxes associated with the sale.
func (this UnknownSale) GetTaxes() []SaleTax {
	if this.Taxes == nil {
		return nil
	}
	interfaceSlice := make([]SaleTax, 0, len(this.Taxes))
	for _, concrete := range this.Taxes {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The total sale amount after taxes and discounts.
func (this UnknownSale) GetTotalAmount() *MoneyBag { return this.TotalAmount }

// The total discounts allocated to the sale after taxes.
func (this UnknownSale) GetTotalDiscountAmountAfterTaxes() *MoneyBag {
	return this.TotalDiscountAmountAfterTaxes
}

// The total discounts allocated to the sale before taxes.
func (this UnknownSale) GetTotalDiscountAmountBeforeTaxes() *MoneyBag {
	return this.TotalDiscountAmountBeforeTaxes
}

// The total amount of taxes for the sale.
func (this UnknownSale) GetTotalTaxAmount() *MoneyBag { return this.TotalTaxAmount }

// The input fields required to update a media object.
type UpdateMediaInput struct {
	// Specifies the media to update.
	ID string `json:"id"`
	// The source from which to update the media preview image. May be an external URL or staged upload URL.
	PreviewImageSource *string `json:"previewImageSource,omitempty,omitempty"`
	// The alt text associated to the media.
	Alt *string `json:"alt,omitempty,omitempty"`
}

// The URL redirect for the online store.
type URLRedirect struct {
	// The ID of the URL redirect.
	ID string `json:"id"`
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path string `json:"path"`
	// The target location where the user will be redirected to.
	Target string `json:"target"`
}

func (URLRedirect) IsNode() {}

// A globally-unique ID.
func (this URLRedirect) GetID() string { return this.ID }

// Return type for `urlRedirectBulkDeleteAll` mutation.
type URLRedirectBulkDeleteAllPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `urlRedirectBulkDeleteByIds` mutation.
type URLRedirectBulkDeleteByIdsPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteByIdsUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
type URLRedirectBulkDeleteByIdsUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteByIdsUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteByIdsUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this URLRedirectBulkDeleteByIdsUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this URLRedirectBulkDeleteByIdsUserError) GetMessage() string { return this.Message }

// Return type for `urlRedirectBulkDeleteBySavedSearch` mutation.
type URLRedirectBulkDeleteBySavedSearchPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteBySavedSearchUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
type URLRedirectBulkDeleteBySavedSearchUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteBySavedSearchUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteBySavedSearchUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this URLRedirectBulkDeleteBySavedSearchUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this URLRedirectBulkDeleteBySavedSearchUserError) GetMessage() string { return this.Message }

// Return type for `urlRedirectBulkDeleteBySearch` mutation.
type URLRedirectBulkDeleteBySearchPayload struct {
	// The asynchronous job removing the redirects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectBulkDeleteBySearchUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
type URLRedirectBulkDeleteBySearchUserError struct {
	// The error code.
	Code *URLRedirectBulkDeleteBySearchUserErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectBulkDeleteBySearchUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this URLRedirectBulkDeleteBySearchUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this URLRedirectBulkDeleteBySearchUserError) GetMessage() string { return this.Message }

// An auto-generated type for paginating through multiple UrlRedirects.
type URLRedirectConnection struct {
	// A list of edges.
	Edges []URLRedirectEdge `json:"edges,omitempty"`
	// A list of the nodes contained in UrlRedirectEdge.
	Nodes []URLRedirect `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `urlRedirectCreate` mutation.
type URLRedirectCreatePayload struct {
	// The created redirect.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// Return type for `urlRedirectDelete` mutation.
type URLRedirectDeletePayload struct {
	// The ID of the deleted redirect.
	DeletedURLRedirectID *string `json:"deletedUrlRedirectId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one UrlRedirect and a cursor during pagination.
type URLRedirectEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of UrlRedirectEdge.
	Node *URLRedirect `json:"node,omitempty"`
}

// A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
// into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
//
// For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
type URLRedirectImport struct {
	// The number of rows in the file.
	Count *int `json:"count,omitempty,omitempty"`
	// The number of redirects created from the import.
	CreatedCount *int `json:"createdCount,omitempty,omitempty"`
	// The number of redirects that failed to be imported.
	FailedCount *int `json:"failedCount,omitempty,omitempty"`
	// Whether the import is finished.
	Finished bool `json:"finished"`
	// The date and time when the import finished.
	FinishedAt *string `json:"finishedAt,omitempty,omitempty"`
	// The ID of the `UrlRedirectImport` object.
	ID string `json:"id"`
	// A list of up to three previews of the URL redirects to be imported.
	PreviewRedirects []URLRedirectImportPreview `json:"previewRedirects,omitempty"`
	// The number of redirects updated during the import.
	UpdatedCount *int `json:"updatedCount,omitempty,omitempty"`
}

func (URLRedirectImport) IsNode() {}

// A globally-unique ID.
func (this URLRedirectImport) GetID() string { return this.ID }

// Return type for `urlRedirectImportCreate` mutation.
type URLRedirectImportCreatePayload struct {
	// The created `URLRedirectImport` object.
	URLRedirectImport *URLRedirectImport `json:"urlRedirectImport,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectImportUserError `json:"userErrors,omitempty"`
}

// A preview of a URL redirect import row.
type URLRedirectImportPreview struct {
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path string `json:"path"`
	// The target location where the user will be redirected to.
	Target string `json:"target"`
}

// Return type for `urlRedirectImportSubmit` mutation.
type URLRedirectImportSubmitPayload struct {
	// The asynchronous job importing the redirects.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectImportUserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a redirect import mutation.
type URLRedirectImportUserError struct {
	// The error code.
	Code *URLRedirectImportErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectImportUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this URLRedirectImportUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this URLRedirectImportUserError) GetMessage() string { return this.Message }

// The input fields to create or update a URL redirect.
type URLRedirectInput struct {
	// The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
	Path *string `json:"path,omitempty,omitempty"`
	// The target location where the user will be redirected to.
	Target *string `json:"target,omitempty,omitempty"`
}

// Return type for `urlRedirectUpdate` mutation.
type URLRedirectUpdatePayload struct {
	// Returns the updated URL redirect.
	URLRedirect *URLRedirect `json:"urlRedirect,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []URLRedirectUserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a redirect mutation.
type URLRedirectUserError struct {
	// The error code.
	Code *URLRedirectErrorCode `json:"code,omitempty,omitempty"`
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (URLRedirectUserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this URLRedirectUserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this URLRedirectUserError) GetMessage() string { return this.Message }

// Represents an error in the input of a mutation.
type UserError struct {
	// The path to the input field that caused the error.
	Field []string `json:"field,omitempty,omitempty"`
	// The error message.
	Message string `json:"message"`
}

func (UserError) IsDisplayableError() {}

// The path to the input field that caused the error.
func (this UserError) GetField() []string {
	if this.Field == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Field))
	for _, concrete := range this.Field {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The error message.
func (this UserError) GetMessage() string { return this.Message }

// Represents a credit card payment instrument.
type VaultCreditCard struct {
	// The billing address of the card.
	BillingAddress *CustomerCreditCardBillingAddress `json:"billingAddress,omitempty,omitempty"`
	// The brand for the card.
	Brand string `json:"brand"`
	// Whether the card has been expired.
	Expired bool `json:"expired"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear"`
	// The last four digits for the card.
	LastDigits string `json:"lastDigits"`
	// The name of the card holder.
	Name string `json:"name"`
}

func (VaultCreditCard) IsPaymentInstrument() {}

// Represents a paypal billing agreement payment instrument.
type VaultPaypalBillingAgreement struct {
	// Whether the paypal billing agreement is inactive.
	Inactive bool `json:"inactive"`
	// The paypal account name.
	Name string `json:"name"`
	// The paypal account email address.
	PaypalAccountEmail string `json:"paypalAccountEmail"`
}

func (VaultPaypalBillingAgreement) IsPaymentInstrument() {}

// Representation of 3d vectors and points. It can represent
// either the coordinates of a point in space, a direction, or
// size. Presented as an object with three floating-point values.
type Vector3 struct {
	// The x coordinate of Vector3.
	X float64 `json:"x"`
	// The y coordinate of Vector3.
	Y float64 `json:"y"`
	// The z coordinate of Vector3.
	Z float64 `json:"z"`
}

// Represents a Shopify hosted video.
type Video struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *string `json:"alt,omitempty,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
	//
	CreatedAt string `json:"createdAt"`
	// The video's duration in milliseconds. This value is `null` unless the video's status field is
	// [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
	//
	Duration *int `json:"duration,omitempty,omitempty"`
	// Any errors that have occurred on the file.
	FileErrors []FileError `json:"fileErrors,omitempty"`
	// The status of the file.
	FileStatus FileStatus `json:"fileStatus"`
	// The video's filename.
	Filename string `json:"filename"`
	// A globally-unique ID.
	ID string `json:"id"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType"`
	// Any errors which have occurred on the media.
	MediaErrors []MediaError `json:"mediaErrors,omitempty"`
	// The warnings attached to the media.
	MediaWarnings []MediaWarning `json:"mediaWarnings,omitempty"`
	// The video's original source. This value is `null` unless the video's status field is
	// [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
	//
	OriginalSource *VideoSource `json:"originalSource,omitempty,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty,omitempty"`
	// The video's sources. This value is empty unless the video's status field is
	// [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
	//
	Sources []VideoSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (Video) IsMetafieldReference() {}

func (Video) IsFile() {}

// A word or phrase to describe the contents or the function of a file.
func (this Video) GetAlt() *string { return this.Alt }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
func (this Video) GetCreatedAt() string { return this.CreatedAt }

// Any errors that have occurred on the file.
func (this Video) GetFileErrors() []FileError {
	if this.FileErrors == nil {
		return nil
	}
	interfaceSlice := make([]FileError, 0, len(this.FileErrors))
	for _, concrete := range this.FileErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The status of the file.
func (this Video) GetFileStatus() FileStatus { return this.FileStatus }

// A globally-unique ID.
func (this Video) GetID() string { return this.ID }

// The preview image for the media.
func (this Video) GetPreview() *MediaPreviewImage { return this.Preview }

// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
func (this Video) GetUpdatedAt() string { return this.UpdatedAt }

func (Video) IsMedia() {}

// A word or phrase to share the nature or contents of a media.

// A globally-unique ID.

// The media content type.
func (this Video) GetMediaContentType() MediaContentType { return this.MediaContentType }

// Any errors which have occurred on the media.
func (this Video) GetMediaErrors() []MediaError {
	if this.MediaErrors == nil {
		return nil
	}
	interfaceSlice := make([]MediaError, 0, len(this.MediaErrors))
	for _, concrete := range this.MediaErrors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The warnings attached to the media.
func (this Video) GetMediaWarnings() []MediaWarning {
	if this.MediaWarnings == nil {
		return nil
	}
	interfaceSlice := make([]MediaWarning, 0, len(this.MediaWarnings))
	for _, concrete := range this.MediaWarnings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The preview image for the media.

// Current status of the media.
func (this Video) GetStatus() MediaStatus { return this.Status }

func (Video) IsNode() {}

// A globally-unique ID.

// Represents a source for a Shopify hosted video.
//
// Types of sources include the original video, lower resolution versions of the original video,
// and an m3u8 playlist file.
//
// Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
// of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
type VideoSource struct {
	// The video source's file size in bytes.
	FileSize *int `json:"fileSize,omitempty,omitempty"`
	// The video source's file format extension.
	Format string `json:"format"`
	// The video source's height.
	Height int `json:"height"`
	// The video source's MIME type.
	MimeType string `json:"mimeType"`
	// The video source's URL.
	URL string `json:"url"`
	// The video source's width.
	Width int `json:"width"`
}

// A web pixel settings.
type WebPixel struct {
	// A globally-unique ID.
	ID string `json:"id"`
	// The settings JSON object for the web pixel.
	Settings string `json:"settings"`
}

func (WebPixel) IsNode() {}

// A globally-unique ID.
func (this WebPixel) GetID() string { return this.ID }

// Return type for `webPixelCreate` mutation.
type WebPixelCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsWebPixelUserError `json:"userErrors,omitempty"`
	// The created web pixel settings.
	WebPixel *WebPixel `json:"webPixel,omitempty,omitempty"`
}

// Return type for `webPixelDelete` mutation.
type WebPixelDeletePayload struct {
	// The ID of the web pixel settings that was deleted.
	DeletedWebPixelID *string `json:"deletedWebPixelId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsWebPixelUserError `json:"userErrors,omitempty"`
}

// The input fields to use to update a web pixel.
type WebPixelInput struct {
	// The web pixel settings in JSON format.
	Settings string `json:"settings"`
}

// Return type for `webPixelUpdate` mutation.
type WebPixelUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []ErrorsWebPixelUserError `json:"userErrors,omitempty"`
	// The updated web pixel settings.
	WebPixel *WebPixel `json:"webPixel,omitempty,omitempty"`
}

// An Amazon EventBridge partner event source to which webhook subscriptions publish events.
type WebhookEventBridgeEndpoint struct {
	// The ARN of this EventBridge partner event source.
	Arn string `json:"arn"`
}

func (WebhookEventBridgeEndpoint) IsWebhookSubscriptionEndpoint() {}

// An HTTPS endpoint to which webhook subscriptions send POST requests.
type WebhookHTTPEndpoint struct {
	// The URL to which the webhooks events are sent.
	CallbackURL string `json:"callbackUrl"`
}

func (WebhookHTTPEndpoint) IsWebhookSubscriptionEndpoint() {}

// A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
type WebhookPubSubEndpoint struct {
	// The Google Cloud Pub/Sub project ID.
	PubSubProject string `json:"pubSubProject"`
	// The Google Cloud Pub/Sub topic ID.
	PubSubTopic string `json:"pubSubTopic"`
}

func (WebhookPubSubEndpoint) IsWebhookSubscriptionEndpoint() {}

// A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
// It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
// When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
// Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
type WebhookSubscription struct {
	// The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.
	APIVersion *APIVersion `json:"apiVersion,omitempty"`
	// The destination URI to which the webhook subscription will send a message when an event occurs.
	CallbackURL string `json:"callbackUrl"`
	// The date and time when the webhook subscription was created.
	CreatedAt string `json:"createdAt"`
	// The endpoint to which the webhook subscription will send events.
	Endpoint WebhookSubscriptionEndpoint `json:"endpoint"`
	// The format in which the webhook subscription should send the data.
	Format WebhookSubscriptionFormat `json:"format"`
	// A globally-unique ID.
	ID string `json:"id"`
	// An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
	IncludeFields []string `json:"includeFields,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID string `json:"legacyResourceId"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty"`
	// The list of namespaces for private metafields that should be included in the webhook subscription.
	PrivateMetafieldNamespaces []string `json:"privateMetafieldNamespaces,omitempty"`
	// The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
	Topic WebhookSubscriptionTopic `json:"topic"`
	// The date and time when the webhook subscription was updated.
	UpdatedAt string `json:"updatedAt"`
}

func (WebhookSubscription) IsLegacyInteroperability() {}

// The ID of the corresponding resource in the REST Admin API.
func (this WebhookSubscription) GetLegacyResourceID() string { return this.LegacyResourceID }

func (WebhookSubscription) IsNode() {}

// A globally-unique ID.
func (this WebhookSubscription) GetID() string { return this.ID }

// An auto-generated type for paginating through multiple WebhookSubscriptions.
type WebhookSubscriptionConnection struct {
	// A list of edges.
	Edges []WebhookSubscriptionEdge `json:"edges,omitempty"`
	// A list of the nodes contained in WebhookSubscriptionEdge.
	Nodes []WebhookSubscription `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `webhookSubscriptionCreate` mutation.
type WebhookSubscriptionCreatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// Return type for `webhookSubscriptionDelete` mutation.
type WebhookSubscriptionDeletePayload struct {
	// The ID of the deleted webhook subscription.
	DeletedWebhookSubscriptionID *string `json:"deletedWebhookSubscriptionId,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
type WebhookSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of WebhookSubscriptionEdge.
	Node *WebhookSubscription `json:"node,omitempty"`
}

// The input fields for a webhook subscription.
type WebhookSubscriptionInput struct {
	// URL where the webhook subscription should send the POST request when the event occurs.
	CallbackURL *string `json:"callbackUrl,omitempty,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []string `json:"includeFields,omitempty,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []string `json:"metafieldNamespaces,omitempty,omitempty"`
}

// Return type for `webhookSubscriptionUpdate` mutation.
type WebhookSubscriptionUpdatePayload struct {
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty,omitempty"`
}

// A weight, which includes a numeric value and a unit of measurement.
type Weight struct {
	// The unit of measurement for `value`.
	Unit WeightUnit `json:"unit"`
	// The weight value using the unit system specified with `unit`.
	Value float64 `json:"value"`
}

func (Weight) IsDeliveryConditionCriteria() {}

// The input fields for the weight unit and value inputs.
type WeightInput struct {
	// The weight value using the unit system specified with `weight_unit`.
	Value float64 `json:"value"`
	// Unit of measurement for `value`.
	Unit WeightUnit `json:"unit"`
}

// Return type for `deliveryProfileCreate` mutation.
type DeliveryProfileCreatePayload struct {
	// The delivery profile that was created.
	Profile *DeliveryProfile `json:"profile,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileRemove` mutation.
type DeliveryProfileRemovePayload struct {
	// The delivery profile deletion job triggered by the mutation.
	Job *Job `json:"job,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileUpdate` mutation.
type DeliveryProfileUpdatePayload struct {
	// The delivery profile that was updated.
	Profile *DeliveryProfile `json:"profile,omitempty,omitempty"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []UserError `json:"userErrors,omitempty"`
}

// Specifies the abandonment type.
type AbandonmentAbandonmentType string

const (
	// The abandonment event is an abandoned browse.
	AbandonmentAbandonmentTypeBrowse AbandonmentAbandonmentType = "BROWSE"
	// The abandonment event is an abandoned cart.
	AbandonmentAbandonmentTypeCart AbandonmentAbandonmentType = "CART"
	// The abandonment event is an abandoned checkout.
	AbandonmentAbandonmentTypeCheckout AbandonmentAbandonmentType = "CHECKOUT"
)

var AllAbandonmentAbandonmentType = []AbandonmentAbandonmentType{
	AbandonmentAbandonmentTypeBrowse,
	AbandonmentAbandonmentTypeCart,
	AbandonmentAbandonmentTypeCheckout,
}

func (e AbandonmentAbandonmentType) IsValid() bool {
	switch e {
	case AbandonmentAbandonmentTypeBrowse, AbandonmentAbandonmentTypeCart, AbandonmentAbandonmentTypeCheckout:
		return true
	}
	return false
}

func (e AbandonmentAbandonmentType) String() string {
	return string(e)
}

func (e *AbandonmentAbandonmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbandonmentAbandonmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbandonmentAbandonmentType", str)
	}
	return nil
}

func (e AbandonmentAbandonmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the delivery state of a marketing activity.
type AbandonmentDeliveryState string

const (
	// The marketing activity action has not yet been sent.
	AbandonmentDeliveryStateNotSent AbandonmentDeliveryState = "NOT_SENT"
	// The marketing activity action has been sent.
	AbandonmentDeliveryStateSent AbandonmentDeliveryState = "SENT"
	// The marketing activity action has been scheduled for later delivery.
	AbandonmentDeliveryStateScheduled AbandonmentDeliveryState = "SCHEDULED"
)

var AllAbandonmentDeliveryState = []AbandonmentDeliveryState{
	AbandonmentDeliveryStateNotSent,
	AbandonmentDeliveryStateSent,
	AbandonmentDeliveryStateScheduled,
}

func (e AbandonmentDeliveryState) IsValid() bool {
	switch e {
	case AbandonmentDeliveryStateNotSent, AbandonmentDeliveryStateSent, AbandonmentDeliveryStateScheduled:
		return true
	}
	return false
}

func (e AbandonmentDeliveryState) String() string {
	return string(e)
}

func (e *AbandonmentDeliveryState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbandonmentDeliveryState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbandonmentDeliveryState", str)
	}
	return nil
}

func (e AbandonmentDeliveryState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the email state.
type AbandonmentEmailState string

const (
	// The email has not yet been sent.
	AbandonmentEmailStateNotSent AbandonmentEmailState = "NOT_SENT"
	// The email has been sent.
	AbandonmentEmailStateSent AbandonmentEmailState = "SENT"
	// The email has been scheduled for later delivery.
	AbandonmentEmailStateScheduled AbandonmentEmailState = "SCHEDULED"
)

var AllAbandonmentEmailState = []AbandonmentEmailState{
	AbandonmentEmailStateNotSent,
	AbandonmentEmailStateSent,
	AbandonmentEmailStateScheduled,
}

func (e AbandonmentEmailState) IsValid() bool {
	switch e {
	case AbandonmentEmailStateNotSent, AbandonmentEmailStateSent, AbandonmentEmailStateScheduled:
		return true
	}
	return false
}

func (e AbandonmentEmailState) String() string {
	return string(e)
}

func (e *AbandonmentEmailState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbandonmentEmailState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbandonmentEmailState", str)
	}
	return nil
}

func (e AbandonmentEmailState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`.
type AbandonmentEmailStateUpdateUserErrorCode string

const (
	// Unable to find an Abandonment for the provided ID.
	AbandonmentEmailStateUpdateUserErrorCodeAbandonmentNotFound AbandonmentEmailStateUpdateUserErrorCode = "ABANDONMENT_NOT_FOUND"
)

var AllAbandonmentEmailStateUpdateUserErrorCode = []AbandonmentEmailStateUpdateUserErrorCode{
	AbandonmentEmailStateUpdateUserErrorCodeAbandonmentNotFound,
}

func (e AbandonmentEmailStateUpdateUserErrorCode) IsValid() bool {
	switch e {
	case AbandonmentEmailStateUpdateUserErrorCodeAbandonmentNotFound:
		return true
	}
	return false
}

func (e AbandonmentEmailStateUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *AbandonmentEmailStateUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbandonmentEmailStateUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbandonmentEmailStateUpdateUserErrorCode", str)
	}
	return nil
}

func (e AbandonmentEmailStateUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AbandonmentUpdateActivitiesDeliveryStatusesUserError`.
type AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode string

const (
	// Unable to find an Abandonment for the provided ID.
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeAbandonmentNotFound AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode = "ABANDONMENT_NOT_FOUND"
	// Unable to find a marketing activity for the provided ID.
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeMarketingActivityNotFound AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode = "MARKETING_ACTIVITY_NOT_FOUND"
	// Unable to find delivery status info for the provided ID.
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeDeliveryStatusInfoNotFound AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode = "DELIVERY_STATUS_INFO_NOT_FOUND"
)

var AllAbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode = []AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode{
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeAbandonmentNotFound,
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeMarketingActivityNotFound,
	AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeDeliveryStatusInfoNotFound,
}

func (e AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode) IsValid() bool {
	switch e {
	case AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeAbandonmentNotFound, AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeMarketingActivityNotFound, AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCodeDeliveryStatusInfoNotFound:
		return true
	}
	return false
}

func (e AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode) String() string {
	return string(e)
}

func (e *AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode", str)
	}
	return nil
}

func (e AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible types of app developer.
type AppDeveloperType string

const (
	// Indicates the app developer is Shopify.
	AppDeveloperTypeShopify AppDeveloperType = "SHOPIFY"
	// Indicates the app developer is a Partner.
	AppDeveloperTypePartner AppDeveloperType = "PARTNER"
	// Indicates the app developer works directly for a Merchant.
	AppDeveloperTypeMerchant AppDeveloperType = "MERCHANT"
	// Indicates the app developer is unknown. It is not categorized as any of the other developer types.
	AppDeveloperTypeUnknown AppDeveloperType = "UNKNOWN"
)

var AllAppDeveloperType = []AppDeveloperType{
	AppDeveloperTypeShopify,
	AppDeveloperTypePartner,
	AppDeveloperTypeMerchant,
	AppDeveloperTypeUnknown,
}

func (e AppDeveloperType) IsValid() bool {
	switch e {
	case AppDeveloperTypeShopify, AppDeveloperTypePartner, AppDeveloperTypeMerchant, AppDeveloperTypeUnknown:
		return true
	}
	return false
}

func (e AppDeveloperType) String() string {
	return string(e)
}

func (e *AppDeveloperType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppDeveloperType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppDeveloperType", str)
	}
	return nil
}

func (e AppDeveloperType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible categories of an app installation, based on their purpose
// or the environment they can run in.
type AppInstallationCategory string

const (
	// Apps that serve as channels through which sales are made, such as the online store.
	AppInstallationCategoryChannel AppInstallationCategory = "CHANNEL"
	// Apps that can be used in the POS mobile client.
	AppInstallationCategoryPosEmbedded AppInstallationCategory = "POS_EMBEDDED"
)

var AllAppInstallationCategory = []AppInstallationCategory{
	AppInstallationCategoryChannel,
	AppInstallationCategoryPosEmbedded,
}

func (e AppInstallationCategory) IsValid() bool {
	switch e {
	case AppInstallationCategoryChannel, AppInstallationCategoryPosEmbedded:
		return true
	}
	return false
}

func (e AppInstallationCategory) String() string {
	return string(e)
}

func (e *AppInstallationCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationCategory", str)
	}
	return nil
}

func (e AppInstallationCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The levels of privacy of an app installation.
type AppInstallationPrivacy string

const (
	AppInstallationPrivacyPublic  AppInstallationPrivacy = "PUBLIC"
	AppInstallationPrivacyPrivate AppInstallationPrivacy = "PRIVATE"
)

var AllAppInstallationPrivacy = []AppInstallationPrivacy{
	AppInstallationPrivacyPublic,
	AppInstallationPrivacyPrivate,
}

func (e AppInstallationPrivacy) IsValid() bool {
	switch e {
	case AppInstallationPrivacyPublic, AppInstallationPrivacyPrivate:
		return true
	}
	return false
}

func (e AppInstallationPrivacy) String() string {
	return string(e)
}

func (e *AppInstallationPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationPrivacy", str)
	}
	return nil
}

func (e AppInstallationPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppInstallation query.
type AppInstallationSortKeys string

const (
	// Sort by the `installed_at` value.
	AppInstallationSortKeysInstalledAt AppInstallationSortKeys = "INSTALLED_AT"
	// Sort by the `app_title` value.
	AppInstallationSortKeysAppTitle AppInstallationSortKeys = "APP_TITLE"
	// Sort by the `id` value.
	AppInstallationSortKeysID AppInstallationSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AppInstallationSortKeysRelevance AppInstallationSortKeys = "RELEVANCE"
)

var AllAppInstallationSortKeys = []AppInstallationSortKeys{
	AppInstallationSortKeysInstalledAt,
	AppInstallationSortKeysAppTitle,
	AppInstallationSortKeysID,
	AppInstallationSortKeysRelevance,
}

func (e AppInstallationSortKeys) IsValid() bool {
	switch e {
	case AppInstallationSortKeysInstalledAt, AppInstallationSortKeysAppTitle, AppInstallationSortKeysID, AppInstallationSortKeysRelevance:
		return true
	}
	return false
}

func (e AppInstallationSortKeys) String() string {
	return string(e)
}

func (e *AppInstallationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationSortKeys", str)
	}
	return nil
}

func (e AppInstallationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The frequency at which the shop is billed for an app subscription.
type AppPricingInterval string

const (
	// The app subscription bills the shop annually.
	AppPricingIntervalAnnual AppPricingInterval = "ANNUAL"
	// The app subscription bills the shop every 30 days.
	AppPricingIntervalEvery30Days AppPricingInterval = "EVERY_30_DAYS"
)

var AllAppPricingInterval = []AppPricingInterval{
	AppPricingIntervalAnnual,
	AppPricingIntervalEvery30Days,
}

func (e AppPricingInterval) IsValid() bool {
	switch e {
	case AppPricingIntervalAnnual, AppPricingIntervalEvery30Days:
		return true
	}
	return false
}

func (e AppPricingInterval) String() string {
	return string(e)
}

func (e *AppPricingInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPricingInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPricingInterval", str)
	}
	return nil
}

func (e AppPricingInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The public-facing category for an app.
type AppPublicCategory string

const (
	// The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
	AppPublicCategoryPrivate AppPublicCategory = "PRIVATE"
	// The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
	AppPublicCategoryPublic AppPublicCategory = "PUBLIC"
	// The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
	AppPublicCategoryCustom AppPublicCategory = "CUSTOM"
	// The app's public category is other. An app is in this category if it's not classified under any of the other app types (private, public, or custom).
	AppPublicCategoryOther AppPublicCategory = "OTHER"
)

var AllAppPublicCategory = []AppPublicCategory{
	AppPublicCategoryPrivate,
	AppPublicCategoryPublic,
	AppPublicCategoryCustom,
	AppPublicCategoryOther,
}

func (e AppPublicCategory) IsValid() bool {
	switch e {
	case AppPublicCategoryPrivate, AppPublicCategoryPublic, AppPublicCategoryCustom, AppPublicCategoryOther:
		return true
	}
	return false
}

func (e AppPublicCategory) String() string {
	return string(e)
}

func (e *AppPublicCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPublicCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPublicCategory", str)
	}
	return nil
}

func (e AppPublicCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The approval status of the app purchase.
//
// The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
// If the payment fails, then the app purchase remains `pending`.
//
// Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
// remains in that final state.
type AppPurchaseStatus string

const (
	// The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
	AppPurchaseStatusAccepted AppPurchaseStatus = "ACCEPTED"
	// The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner.
	AppPurchaseStatusActive AppPurchaseStatus = "ACTIVE"
	// The app purchase was declined by the merchant.
	AppPurchaseStatusDeclined AppPurchaseStatus = "DECLINED"
	// The app purchase was not accepted within two days of being created.
	AppPurchaseStatusExpired AppPurchaseStatus = "EXPIRED"
	// The app purchase is pending approval by the merchant.
	AppPurchaseStatusPending AppPurchaseStatus = "PENDING"
)

var AllAppPurchaseStatus = []AppPurchaseStatus{
	AppPurchaseStatusAccepted,
	AppPurchaseStatusActive,
	AppPurchaseStatusDeclined,
	AppPurchaseStatusExpired,
	AppPurchaseStatusPending,
}

func (e AppPurchaseStatus) IsValid() bool {
	switch e {
	case AppPurchaseStatusAccepted, AppPurchaseStatusActive, AppPurchaseStatusDeclined, AppPurchaseStatusExpired, AppPurchaseStatusPending:
		return true
	}
	return false
}

func (e AppPurchaseStatus) String() string {
	return string(e)
}

func (e *AppPurchaseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPurchaseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPurchaseStatus", str)
	}
	return nil
}

func (e AppPurchaseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AppRevenueAttributionRecordCreateUserError`.
type AppRevenueAttributionRecordCreateUserErrorCode string

const (
	// The input value is invalid.
	AppRevenueAttributionRecordCreateUserErrorCodeInvalid AppRevenueAttributionRecordCreateUserErrorCode = "INVALID"
	// The input value is already taken.
	AppRevenueAttributionRecordCreateUserErrorCodeTaken AppRevenueAttributionRecordCreateUserErrorCode = "TAKEN"
)

var AllAppRevenueAttributionRecordCreateUserErrorCode = []AppRevenueAttributionRecordCreateUserErrorCode{
	AppRevenueAttributionRecordCreateUserErrorCodeInvalid,
	AppRevenueAttributionRecordCreateUserErrorCodeTaken,
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordCreateUserErrorCodeInvalid, AppRevenueAttributionRecordCreateUserErrorCodeTaken:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordCreateUserErrorCode", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AppRevenueAttributionRecordDeleteUserError`.
type AppRevenueAttributionRecordDeleteUserErrorCode string

const (
	// The input value is invalid.
	AppRevenueAttributionRecordDeleteUserErrorCodeInvalid AppRevenueAttributionRecordDeleteUserErrorCode = "INVALID"
)

var AllAppRevenueAttributionRecordDeleteUserErrorCode = []AppRevenueAttributionRecordDeleteUserErrorCode{
	AppRevenueAttributionRecordDeleteUserErrorCodeInvalid,
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordDeleteUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordDeleteUserErrorCode", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppRevenueAttributionRecord query.
type AppRevenueAttributionRecordSortKeys string

const (
	// Sort by the `created_at` value.
	AppRevenueAttributionRecordSortKeysCreatedAt AppRevenueAttributionRecordSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppRevenueAttributionRecordSortKeysID AppRevenueAttributionRecordSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AppRevenueAttributionRecordSortKeysRelevance AppRevenueAttributionRecordSortKeys = "RELEVANCE"
)

var AllAppRevenueAttributionRecordSortKeys = []AppRevenueAttributionRecordSortKeys{
	AppRevenueAttributionRecordSortKeysCreatedAt,
	AppRevenueAttributionRecordSortKeysID,
	AppRevenueAttributionRecordSortKeysRelevance,
}

func (e AppRevenueAttributionRecordSortKeys) IsValid() bool {
	switch e {
	case AppRevenueAttributionRecordSortKeysCreatedAt, AppRevenueAttributionRecordSortKeysID, AppRevenueAttributionRecordSortKeysRelevance:
		return true
	}
	return false
}

func (e AppRevenueAttributionRecordSortKeys) String() string {
	return string(e)
}

func (e *AppRevenueAttributionRecordSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionRecordSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionRecordSortKeys", str)
	}
	return nil
}

func (e AppRevenueAttributionRecordSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the billing types of revenue attribution.
type AppRevenueAttributionType string

const (
	// App purchase related revenue collection.
	AppRevenueAttributionTypeApplicationPurchase AppRevenueAttributionType = "APPLICATION_PURCHASE"
	// App subscription revenue collection.
	AppRevenueAttributionTypeApplicationSubscription AppRevenueAttributionType = "APPLICATION_SUBSCRIPTION"
	// App usage-based revenue collection.
	AppRevenueAttributionTypeApplicationUsage AppRevenueAttributionType = "APPLICATION_USAGE"
	// Other app revenue collection type.
	AppRevenueAttributionTypeOther AppRevenueAttributionType = "OTHER"
)

var AllAppRevenueAttributionType = []AppRevenueAttributionType{
	AppRevenueAttributionTypeApplicationPurchase,
	AppRevenueAttributionTypeApplicationSubscription,
	AppRevenueAttributionTypeApplicationUsage,
	AppRevenueAttributionTypeOther,
}

func (e AppRevenueAttributionType) IsValid() bool {
	switch e {
	case AppRevenueAttributionTypeApplicationPurchase, AppRevenueAttributionTypeApplicationSubscription, AppRevenueAttributionTypeApplicationUsage, AppRevenueAttributionTypeOther:
		return true
	}
	return false
}

func (e AppRevenueAttributionType) String() string {
	return string(e)
}

func (e *AppRevenueAttributionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppRevenueAttributionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppRevenueAttributionType", str)
	}
	return nil
}

func (e AppRevenueAttributionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
type AppSubscriptionReplacementBehavior string

const (
	// Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription.
	AppSubscriptionReplacementBehaviorApplyImmediately AppSubscriptionReplacementBehavior = "APPLY_IMMEDIATELY"
	// Defers canceling the merchant's current app subscription and applying the newly created app subscription until the start of the next billing cycle. This value is ignored if the new app subscription is using a different currency than the current app subscription, in which case the new app subscription is applied immediately.
	AppSubscriptionReplacementBehaviorApplyOnNextBillingCycle AppSubscriptionReplacementBehavior = "APPLY_ON_NEXT_BILLING_CYCLE"
	// Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription, with the exception of
	// the following scenarios where replacing the current app subscription will be deferred until the start of the next billing cycle.
	// 1) The current app subscription is annual and the newly created app subscription is annual, using the same currency, but is of a lesser value.
	// 2) The current app subscription is annual and the newly created app subscription is monthly and using the same currency.
	// 3) The current app subscription and the newly created app subscription are identical except for the `discount` value.
	//
	AppSubscriptionReplacementBehaviorStandard AppSubscriptionReplacementBehavior = "STANDARD"
)

var AllAppSubscriptionReplacementBehavior = []AppSubscriptionReplacementBehavior{
	AppSubscriptionReplacementBehaviorApplyImmediately,
	AppSubscriptionReplacementBehaviorApplyOnNextBillingCycle,
	AppSubscriptionReplacementBehaviorStandard,
}

func (e AppSubscriptionReplacementBehavior) IsValid() bool {
	switch e {
	case AppSubscriptionReplacementBehaviorApplyImmediately, AppSubscriptionReplacementBehaviorApplyOnNextBillingCycle, AppSubscriptionReplacementBehaviorStandard:
		return true
	}
	return false
}

func (e AppSubscriptionReplacementBehavior) String() string {
	return string(e)
}

func (e *AppSubscriptionReplacementBehavior) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionReplacementBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionReplacementBehavior", str)
	}
	return nil
}

func (e AppSubscriptionReplacementBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppSubscription query.
type AppSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	AppSubscriptionSortKeysCreatedAt AppSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppSubscriptionSortKeysID AppSubscriptionSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AppSubscriptionSortKeysRelevance AppSubscriptionSortKeys = "RELEVANCE"
)

var AllAppSubscriptionSortKeys = []AppSubscriptionSortKeys{
	AppSubscriptionSortKeysCreatedAt,
	AppSubscriptionSortKeysID,
	AppSubscriptionSortKeysRelevance,
}

func (e AppSubscriptionSortKeys) IsValid() bool {
	switch e {
	case AppSubscriptionSortKeysCreatedAt, AppSubscriptionSortKeysID, AppSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *AppSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionSortKeys", str)
	}
	return nil
}

func (e AppSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the app subscription.
type AppSubscriptionStatus string

const (
	// The app subscription is pending approval by the merchant.
	AppSubscriptionStatusPending AppSubscriptionStatus = "PENDING"
	// The app subscription has been approved by the merchant and is ready to be activated by the app.
	AppSubscriptionStatusAccepted AppSubscriptionStatus = "ACCEPTED"
	// The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts.
	AppSubscriptionStatusActive AppSubscriptionStatus = "ACTIVE"
	// The app subscription was declined by the merchant. This is a terminal state.
	AppSubscriptionStatusDeclined AppSubscriptionStatus = "DECLINED"
	// The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
	AppSubscriptionStatusExpired AppSubscriptionStatus = "EXPIRED"
	// The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
	AppSubscriptionStatusFrozen AppSubscriptionStatus = "FROZEN"
	// The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state.
	AppSubscriptionStatusCancelled AppSubscriptionStatus = "CANCELLED"
)

var AllAppSubscriptionStatus = []AppSubscriptionStatus{
	AppSubscriptionStatusPending,
	AppSubscriptionStatusAccepted,
	AppSubscriptionStatusActive,
	AppSubscriptionStatusDeclined,
	AppSubscriptionStatusExpired,
	AppSubscriptionStatusFrozen,
	AppSubscriptionStatusCancelled,
}

func (e AppSubscriptionStatus) IsValid() bool {
	switch e {
	case AppSubscriptionStatusPending, AppSubscriptionStatusAccepted, AppSubscriptionStatusActive, AppSubscriptionStatusDeclined, AppSubscriptionStatusExpired, AppSubscriptionStatusFrozen, AppSubscriptionStatusCancelled:
		return true
	}
	return false
}

func (e AppSubscriptionStatus) String() string {
	return string(e)
}

func (e *AppSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionStatus", str)
	}
	return nil
}

func (e AppSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`.
type AppSubscriptionTrialExtendUserErrorCode string

const (
	// The app subscription wasn't found.
	AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotFound AppSubscriptionTrialExtendUserErrorCode = "SUBSCRIPTION_NOT_FOUND"
	// The trial isn't active.
	AppSubscriptionTrialExtendUserErrorCodeTrialNotActive AppSubscriptionTrialExtendUserErrorCode = "TRIAL_NOT_ACTIVE"
	// The app subscription isn't active.
	AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotActive AppSubscriptionTrialExtendUserErrorCode = "SUBSCRIPTION_NOT_ACTIVE"
)

var AllAppSubscriptionTrialExtendUserErrorCode = []AppSubscriptionTrialExtendUserErrorCode{
	AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotFound,
	AppSubscriptionTrialExtendUserErrorCodeTrialNotActive,
	AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotActive,
}

func (e AppSubscriptionTrialExtendUserErrorCode) IsValid() bool {
	switch e {
	case AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotFound, AppSubscriptionTrialExtendUserErrorCodeTrialNotActive, AppSubscriptionTrialExtendUserErrorCodeSubscriptionNotActive:
		return true
	}
	return false
}

func (e AppSubscriptionTrialExtendUserErrorCode) String() string {
	return string(e)
}

func (e *AppSubscriptionTrialExtendUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionTrialExtendUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionTrialExtendUserErrorCode", str)
	}
	return nil
}

func (e AppSubscriptionTrialExtendUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppTransaction query.
type AppTransactionSortKeys string

const (
	// Sort by the `created_at` value.
	AppTransactionSortKeysCreatedAt AppTransactionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppTransactionSortKeysID AppTransactionSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AppTransactionSortKeysRelevance AppTransactionSortKeys = "RELEVANCE"
)

var AllAppTransactionSortKeys = []AppTransactionSortKeys{
	AppTransactionSortKeysCreatedAt,
	AppTransactionSortKeysID,
	AppTransactionSortKeysRelevance,
}

func (e AppTransactionSortKeys) IsValid() bool {
	switch e {
	case AppTransactionSortKeysCreatedAt, AppTransactionSortKeysID, AppTransactionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppTransactionSortKeys) String() string {
	return string(e)
}

func (e *AppTransactionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppTransactionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppTransactionSortKeys", str)
	}
	return nil
}

func (e AppTransactionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppUsageRecord query.
type AppUsageRecordSortKeys string

const (
	// Sort by the `created_at` value.
	AppUsageRecordSortKeysCreatedAt AppUsageRecordSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppUsageRecordSortKeysID AppUsageRecordSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AppUsageRecordSortKeysRelevance AppUsageRecordSortKeys = "RELEVANCE"
)

var AllAppUsageRecordSortKeys = []AppUsageRecordSortKeys{
	AppUsageRecordSortKeysCreatedAt,
	AppUsageRecordSortKeysID,
	AppUsageRecordSortKeysRelevance,
}

func (e AppUsageRecordSortKeys) IsValid() bool {
	switch e {
	case AppUsageRecordSortKeysCreatedAt, AppUsageRecordSortKeysID, AppUsageRecordSortKeysRelevance:
		return true
	}
	return false
}

func (e AppUsageRecordSortKeys) String() string {
	return string(e)
}

func (e *AppUsageRecordSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppUsageRecordSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppUsageRecordSortKeys", str)
	}
	return nil
}

func (e AppUsageRecordSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AutomaticDiscount query.
type AutomaticDiscountSortKeys string

const (
	// Sort by the `created_at` value.
	AutomaticDiscountSortKeysCreatedAt AutomaticDiscountSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AutomaticDiscountSortKeysID AutomaticDiscountSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	AutomaticDiscountSortKeysRelevance AutomaticDiscountSortKeys = "RELEVANCE"
)

var AllAutomaticDiscountSortKeys = []AutomaticDiscountSortKeys{
	AutomaticDiscountSortKeysCreatedAt,
	AutomaticDiscountSortKeysID,
	AutomaticDiscountSortKeysRelevance,
}

func (e AutomaticDiscountSortKeys) IsValid() bool {
	switch e {
	case AutomaticDiscountSortKeysCreatedAt, AutomaticDiscountSortKeysID, AutomaticDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e AutomaticDiscountSortKeys) String() string {
	return string(e)
}

func (e *AutomaticDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AutomaticDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AutomaticDiscountSortKeys", str)
	}
	return nil
}

func (e AutomaticDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types for a badge.
type BadgeType string

const (
	// This badge has type `default`.
	BadgeTypeDefault BadgeType = "DEFAULT"
	// This badge has type `success`.
	BadgeTypeSuccess BadgeType = "SUCCESS"
	// This badge has type `attention`.
	BadgeTypeAttention BadgeType = "ATTENTION"
	// This badge has type `warning`.
	BadgeTypeWarning BadgeType = "WARNING"
	// This badge has type `info`.
	BadgeTypeInfo BadgeType = "INFO"
)

var AllBadgeType = []BadgeType{
	BadgeTypeDefault,
	BadgeTypeSuccess,
	BadgeTypeAttention,
	BadgeTypeWarning,
	BadgeTypeInfo,
}

func (e BadgeType) IsValid() bool {
	switch e {
	case BadgeTypeDefault, BadgeTypeSuccess, BadgeTypeAttention, BadgeTypeWarning, BadgeTypeInfo:
		return true
	}
	return false
}

func (e BadgeType) String() string {
	return string(e)
}

func (e *BadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BadgeType", str)
	}
	return nil
}

func (e BadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BillingAttemptUserError`.
type BillingAttemptUserErrorCode string

const (
	// The input value is invalid.
	BillingAttemptUserErrorCodeInvalid BillingAttemptUserErrorCode = "INVALID"
	// The input value is blank.
	BillingAttemptUserErrorCodeBlank BillingAttemptUserErrorCode = "BLANK"
	// Subscription contract does not exist.
	BillingAttemptUserErrorCodeContractNotFound BillingAttemptUserErrorCode = "CONTRACT_NOT_FOUND"
	// Origin time cannot be before the contract creation time.
	BillingAttemptUserErrorCodeOriginTimeBeforeContractCreation BillingAttemptUserErrorCode = "ORIGIN_TIME_BEFORE_CONTRACT_CREATION"
	// Billing cycle selector cannot select upcoming billing cycle past limit.
	BillingAttemptUserErrorCodeUpcomingCycleLimitExceeded BillingAttemptUserErrorCode = "UPCOMING_CYCLE_LIMIT_EXCEEDED"
	// Billing cycle selector cannot select billing cycle outside of index range.
	BillingAttemptUserErrorCodeCycleIndexOutOfRange BillingAttemptUserErrorCode = "CYCLE_INDEX_OUT_OF_RANGE"
	// Billing cycle selector cannot select billing cycle outside of start date range.
	BillingAttemptUserErrorCodeCycleStartDateOutOfRange BillingAttemptUserErrorCode = "CYCLE_START_DATE_OUT_OF_RANGE"
	// Origin time needs to be within the selected billing cycle's start and end at date.
	BillingAttemptUserErrorCodeOriginTimeOutOfRange BillingAttemptUserErrorCode = "ORIGIN_TIME_OUT_OF_RANGE"
)

var AllBillingAttemptUserErrorCode = []BillingAttemptUserErrorCode{
	BillingAttemptUserErrorCodeInvalid,
	BillingAttemptUserErrorCodeBlank,
	BillingAttemptUserErrorCodeContractNotFound,
	BillingAttemptUserErrorCodeOriginTimeBeforeContractCreation,
	BillingAttemptUserErrorCodeUpcomingCycleLimitExceeded,
	BillingAttemptUserErrorCodeCycleIndexOutOfRange,
	BillingAttemptUserErrorCodeCycleStartDateOutOfRange,
	BillingAttemptUserErrorCodeOriginTimeOutOfRange,
}

func (e BillingAttemptUserErrorCode) IsValid() bool {
	switch e {
	case BillingAttemptUserErrorCodeInvalid, BillingAttemptUserErrorCodeBlank, BillingAttemptUserErrorCodeContractNotFound, BillingAttemptUserErrorCodeOriginTimeBeforeContractCreation, BillingAttemptUserErrorCodeUpcomingCycleLimitExceeded, BillingAttemptUserErrorCodeCycleIndexOutOfRange, BillingAttemptUserErrorCodeCycleStartDateOutOfRange, BillingAttemptUserErrorCodeOriginTimeOutOfRange:
		return true
	}
	return false
}

func (e BillingAttemptUserErrorCode) String() string {
	return string(e)
}

func (e *BillingAttemptUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingAttemptUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingAttemptUserErrorCode", str)
	}
	return nil
}

func (e BillingAttemptUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BulkMutationUserError`.
type BulkMutationErrorCode string

const (
	// The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation.
	BulkMutationErrorCodeOperationInProgress BulkMutationErrorCode = "OPERATION_IN_PROGRESS"
	// The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
	BulkMutationErrorCodeInvalidMutation BulkMutationErrorCode = "INVALID_MUTATION"
	// The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
	BulkMutationErrorCodeInvalidStagedUploadFile BulkMutationErrorCode = "INVALID_STAGED_UPLOAD_FILE"
	// The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `stagedUploadPath` mutation argument.
	BulkMutationErrorCodeNoSuchFile BulkMutationErrorCode = "NO_SUCH_FILE"
	// There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again.
	BulkMutationErrorCodeInternalFileServerError BulkMutationErrorCode = "INTERNAL_FILE_SERVER_ERROR"
)

var AllBulkMutationErrorCode = []BulkMutationErrorCode{
	BulkMutationErrorCodeOperationInProgress,
	BulkMutationErrorCodeInvalidMutation,
	BulkMutationErrorCodeInvalidStagedUploadFile,
	BulkMutationErrorCodeNoSuchFile,
	BulkMutationErrorCodeInternalFileServerError,
}

func (e BulkMutationErrorCode) IsValid() bool {
	switch e {
	case BulkMutationErrorCodeOperationInProgress, BulkMutationErrorCodeInvalidMutation, BulkMutationErrorCodeInvalidStagedUploadFile, BulkMutationErrorCodeNoSuchFile, BulkMutationErrorCodeInternalFileServerError:
		return true
	}
	return false
}

func (e BulkMutationErrorCode) String() string {
	return string(e)
}

func (e *BulkMutationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkMutationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkMutationErrorCode", str)
	}
	return nil
}

func (e BulkMutationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error codes for failed bulk operations.
type BulkOperationErrorCode string

const (
	// The provided operation `query` returned access denied due to missing
	// [access scopes](https://shopify.dev/api/usage/access-scopes).
	// Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
	//
	BulkOperationErrorCodeAccessDenied BulkOperationErrorCode = "ACCESS_DENIED"
	// The operation resulted in partial or incomplete data due to internal server errors during execution.
	// These errors might be intermittent, so you can try performing the same query again.
	//
	BulkOperationErrorCodeInternalServerError BulkOperationErrorCode = "INTERNAL_SERVER_ERROR"
	// The operation resulted in partial or incomplete data due to query timeouts during execution.
	// In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
	//
	BulkOperationErrorCodeTimeout BulkOperationErrorCode = "TIMEOUT"
)

var AllBulkOperationErrorCode = []BulkOperationErrorCode{
	BulkOperationErrorCodeAccessDenied,
	BulkOperationErrorCodeInternalServerError,
	BulkOperationErrorCodeTimeout,
}

func (e BulkOperationErrorCode) IsValid() bool {
	switch e {
	case BulkOperationErrorCodeAccessDenied, BulkOperationErrorCodeInternalServerError, BulkOperationErrorCodeTimeout:
		return true
	}
	return false
}

func (e BulkOperationErrorCode) String() string {
	return string(e)
}

func (e *BulkOperationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationErrorCode", str)
	}
	return nil
}

func (e BulkOperationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the status of a bulk operation.
type BulkOperationStatus string

const (
	// The bulk operation has been canceled.
	BulkOperationStatusCanceled BulkOperationStatus = "CANCELED"
	// Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
	// starts until the operation is actually canceled.
	//
	BulkOperationStatusCanceling BulkOperationStatus = "CANCELING"
	// The bulk operation has successfully completed.
	BulkOperationStatusCompleted BulkOperationStatus = "COMPLETED"
	// The bulk operation has been created.
	BulkOperationStatusCreated BulkOperationStatus = "CREATED"
	// The bulk operation URL has expired.
	BulkOperationStatusExpired BulkOperationStatus = "EXPIRED"
	// The bulk operation has failed. For information on why the operation failed, use
	// [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
	//
	BulkOperationStatusFailed BulkOperationStatus = "FAILED"
	// The bulk operation is runnning.
	BulkOperationStatusRunning BulkOperationStatus = "RUNNING"
)

var AllBulkOperationStatus = []BulkOperationStatus{
	BulkOperationStatusCanceled,
	BulkOperationStatusCanceling,
	BulkOperationStatusCompleted,
	BulkOperationStatusCreated,
	BulkOperationStatusExpired,
	BulkOperationStatusFailed,
	BulkOperationStatusRunning,
}

func (e BulkOperationStatus) IsValid() bool {
	switch e {
	case BulkOperationStatusCanceled, BulkOperationStatusCanceling, BulkOperationStatusCompleted, BulkOperationStatusCreated, BulkOperationStatusExpired, BulkOperationStatusFailed, BulkOperationStatusRunning:
		return true
	}
	return false
}

func (e BulkOperationStatus) String() string {
	return string(e)
}

func (e *BulkOperationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationStatus", str)
	}
	return nil
}

func (e BulkOperationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the bulk operation's type.
type BulkOperationType string

const (
	// The bulk operation is a query.
	BulkOperationTypeQuery BulkOperationType = "QUERY"
	// The bulk operation is a mutation.
	BulkOperationTypeMutation BulkOperationType = "MUTATION"
)

var AllBulkOperationType = []BulkOperationType{
	BulkOperationTypeQuery,
	BulkOperationTypeMutation,
}

func (e BulkOperationType) IsValid() bool {
	switch e {
	case BulkOperationTypeQuery, BulkOperationTypeMutation:
		return true
	}
	return false
}

func (e BulkOperationType) String() string {
	return string(e)
}

func (e *BulkOperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationType", str)
	}
	return nil
}

func (e BulkOperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
type BulkProductResourceFeedbackCreateUserErrorCode string

const (
	// The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50.
	BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded BulkProductResourceFeedbackCreateUserErrorCode = "MAXIMUM_FEEDBACK_LIMIT_EXCEEDED"
	// The feedback for a later version of this resource was already accepted.
	BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback BulkProductResourceFeedbackCreateUserErrorCode = "OUTDATED_FEEDBACK"
	// The product wasn't found or isn't available to the channel.
	BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound BulkProductResourceFeedbackCreateUserErrorCode = "PRODUCT_NOT_FOUND"
	// The input value is invalid.
	BulkProductResourceFeedbackCreateUserErrorCodeInvalid BulkProductResourceFeedbackCreateUserErrorCode = "INVALID"
	// The input value is blank.
	BulkProductResourceFeedbackCreateUserErrorCodeBlank BulkProductResourceFeedbackCreateUserErrorCode = "BLANK"
	// The input value needs to be blank.
	BulkProductResourceFeedbackCreateUserErrorCodePresent BulkProductResourceFeedbackCreateUserErrorCode = "PRESENT"
	// The input value should be less than or equal to the maximum value allowed.
	BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo BulkProductResourceFeedbackCreateUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
)

var AllBulkProductResourceFeedbackCreateUserErrorCode = []BulkProductResourceFeedbackCreateUserErrorCode{
	BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded,
	BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback,
	BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound,
	BulkProductResourceFeedbackCreateUserErrorCodeInvalid,
	BulkProductResourceFeedbackCreateUserErrorCodeBlank,
	BulkProductResourceFeedbackCreateUserErrorCodePresent,
	BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo,
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) IsValid() bool {
	switch e {
	case BulkProductResourceFeedbackCreateUserErrorCodeMaximumFeedbackLimitExceeded, BulkProductResourceFeedbackCreateUserErrorCodeOutdatedFeedback, BulkProductResourceFeedbackCreateUserErrorCodeProductNotFound, BulkProductResourceFeedbackCreateUserErrorCodeInvalid, BulkProductResourceFeedbackCreateUserErrorCodeBlank, BulkProductResourceFeedbackCreateUserErrorCodePresent, BulkProductResourceFeedbackCreateUserErrorCodeLessThanOrEqualTo:
		return true
	}
	return false
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) String() string {
	return string(e)
}

func (e *BulkProductResourceFeedbackCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkProductResourceFeedbackCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkProductResourceFeedbackCreateUserErrorCode", str)
	}
	return nil
}

func (e BulkProductResourceFeedbackCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `BusinessCustomerUserError`.
type BusinessCustomerErrorCode string

const (
	// An internal error occurred.
	BusinessCustomerErrorCodeInternalError BusinessCustomerErrorCode = "INTERNAL_ERROR"
	// The resource wasn't found.
	BusinessCustomerErrorCodeResourceNotFound BusinessCustomerErrorCode = "RESOURCE_NOT_FOUND"
	// Deleting the resource failed.
	BusinessCustomerErrorCodeFailedToDelete BusinessCustomerErrorCode = "FAILED_TO_DELETE"
	// Missing a required field.
	BusinessCustomerErrorCodeRequired BusinessCustomerErrorCode = "REQUIRED"
	// The input is empty.
	BusinessCustomerErrorCodeNoInput BusinessCustomerErrorCode = "NO_INPUT"
	// The input is invalid.
	BusinessCustomerErrorCodeInvalidInput BusinessCustomerErrorCode = "INVALID_INPUT"
	// Unexpected type.
	BusinessCustomerErrorCodeUnexpectedType BusinessCustomerErrorCode = "UNEXPECTED_TYPE"
	// The field value is too long.
	BusinessCustomerErrorCodeTooLong BusinessCustomerErrorCode = "TOO_LONG"
	// The number of resources exceeded the limit.
	BusinessCustomerErrorCodeLimitReached BusinessCustomerErrorCode = "LIMIT_REACHED"
	// The input value is invalid.
	BusinessCustomerErrorCodeInvalid BusinessCustomerErrorCode = "INVALID"
	// The input value is blank.
	BusinessCustomerErrorCodeBlank BusinessCustomerErrorCode = "BLANK"
	// The input value is already taken.
	BusinessCustomerErrorCodeTaken BusinessCustomerErrorCode = "TAKEN"
)

var AllBusinessCustomerErrorCode = []BusinessCustomerErrorCode{
	BusinessCustomerErrorCodeInternalError,
	BusinessCustomerErrorCodeResourceNotFound,
	BusinessCustomerErrorCodeFailedToDelete,
	BusinessCustomerErrorCodeRequired,
	BusinessCustomerErrorCodeNoInput,
	BusinessCustomerErrorCodeInvalidInput,
	BusinessCustomerErrorCodeUnexpectedType,
	BusinessCustomerErrorCodeTooLong,
	BusinessCustomerErrorCodeLimitReached,
	BusinessCustomerErrorCodeInvalid,
	BusinessCustomerErrorCodeBlank,
	BusinessCustomerErrorCodeTaken,
}

func (e BusinessCustomerErrorCode) IsValid() bool {
	switch e {
	case BusinessCustomerErrorCodeInternalError, BusinessCustomerErrorCodeResourceNotFound, BusinessCustomerErrorCodeFailedToDelete, BusinessCustomerErrorCodeRequired, BusinessCustomerErrorCodeNoInput, BusinessCustomerErrorCodeInvalidInput, BusinessCustomerErrorCodeUnexpectedType, BusinessCustomerErrorCodeTooLong, BusinessCustomerErrorCodeLimitReached, BusinessCustomerErrorCodeInvalid, BusinessCustomerErrorCodeBlank, BusinessCustomerErrorCodeTaken:
		return true
	}
	return false
}

func (e BusinessCustomerErrorCode) String() string {
	return string(e)
}

func (e *BusinessCustomerErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessCustomerErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessCustomerErrorCode", str)
	}
	return nil
}

func (e BusinessCustomerErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CartTransformCreateUserError`.
type CartTransformCreateUserErrorCode string

const (
	// Failed to create cart transform due to invalid input.
	CartTransformCreateUserErrorCodeInputInvalid CartTransformCreateUserErrorCode = "INPUT_INVALID"
	// No Shopify Function found for provided function_id.
	CartTransformCreateUserErrorCodeFunctionNotFound CartTransformCreateUserErrorCode = "FUNCTION_NOT_FOUND"
	// A cart transform function already exists for the provided function_id.
	CartTransformCreateUserErrorCodeFunctionAlreadyRegistered CartTransformCreateUserErrorCode = "FUNCTION_ALREADY_REGISTERED"
	// Function does not implement the required interface for this cart_transform function.
	CartTransformCreateUserErrorCodeFunctionDoesNotImplement CartTransformCreateUserErrorCode = "FUNCTION_DOES_NOT_IMPLEMENT"
)

var AllCartTransformCreateUserErrorCode = []CartTransformCreateUserErrorCode{
	CartTransformCreateUserErrorCodeInputInvalid,
	CartTransformCreateUserErrorCodeFunctionNotFound,
	CartTransformCreateUserErrorCodeFunctionAlreadyRegistered,
	CartTransformCreateUserErrorCodeFunctionDoesNotImplement,
}

func (e CartTransformCreateUserErrorCode) IsValid() bool {
	switch e {
	case CartTransformCreateUserErrorCodeInputInvalid, CartTransformCreateUserErrorCodeFunctionNotFound, CartTransformCreateUserErrorCodeFunctionAlreadyRegistered, CartTransformCreateUserErrorCodeFunctionDoesNotImplement:
		return true
	}
	return false
}

func (e CartTransformCreateUserErrorCode) String() string {
	return string(e)
}

func (e *CartTransformCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CartTransformCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CartTransformCreateUserErrorCode", str)
	}
	return nil
}

func (e CartTransformCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CartTransformDeleteUserError`.
type CartTransformDeleteUserErrorCode string

const (
	// Could not find cart transform for provided id.
	CartTransformDeleteUserErrorCodeNotFound CartTransformDeleteUserErrorCode = "NOT_FOUND"
	// Unauthorized app scope.
	CartTransformDeleteUserErrorCodeUnauthorizedAppScope CartTransformDeleteUserErrorCode = "UNAUTHORIZED_APP_SCOPE"
)

var AllCartTransformDeleteUserErrorCode = []CartTransformDeleteUserErrorCode{
	CartTransformDeleteUserErrorCodeNotFound,
	CartTransformDeleteUserErrorCodeUnauthorizedAppScope,
}

func (e CartTransformDeleteUserErrorCode) IsValid() bool {
	switch e {
	case CartTransformDeleteUserErrorCodeNotFound, CartTransformDeleteUserErrorCodeUnauthorizedAppScope:
		return true
	}
	return false
}

func (e CartTransformDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *CartTransformDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CartTransformDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CartTransformDeleteUserErrorCode", str)
	}
	return nil
}

func (e CartTransformDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Catalog query.
type CatalogSortKeys string

const (
	// Sort by the `title` value.
	CatalogSortKeysTitle CatalogSortKeys = "TITLE"
	// Sort by the `id` value.
	CatalogSortKeysID CatalogSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CatalogSortKeysRelevance CatalogSortKeys = "RELEVANCE"
)

var AllCatalogSortKeys = []CatalogSortKeys{
	CatalogSortKeysTitle,
	CatalogSortKeysID,
	CatalogSortKeysRelevance,
}

func (e CatalogSortKeys) IsValid() bool {
	switch e {
	case CatalogSortKeysTitle, CatalogSortKeysID, CatalogSortKeysRelevance:
		return true
	}
	return false
}

func (e CatalogSortKeys) String() string {
	return string(e)
}

func (e *CatalogSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatalogSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatalogSortKeys", str)
	}
	return nil
}

func (e CatalogSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The state of a catalog.
type CatalogStatus string

const (
	// The catalog is active.
	CatalogStatusActive CatalogStatus = "ACTIVE"
	// The catalog is archived.
	CatalogStatusArchived CatalogStatus = "ARCHIVED"
	// The catalog is in draft.
	CatalogStatusDraft CatalogStatus = "DRAFT"
)

var AllCatalogStatus = []CatalogStatus{
	CatalogStatusActive,
	CatalogStatusArchived,
	CatalogStatusDraft,
}

func (e CatalogStatus) IsValid() bool {
	switch e {
	case CatalogStatusActive, CatalogStatusArchived, CatalogStatusDraft:
		return true
	}
	return false
}

func (e CatalogStatus) String() string {
	return string(e)
}

func (e *CatalogStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatalogStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatalogStatus", str)
	}
	return nil
}

func (e CatalogStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The associated catalog's type.
type CatalogType string

const (
	// Not associated to a catalog.
	CatalogTypeNone CatalogType = "NONE"
	// Catalogs belonging to apps.
	CatalogTypeApp CatalogType = "APP"
	// Catalogs belonging to company locations.
	CatalogTypeCompanyLocation CatalogType = "COMPANY_LOCATION"
	// Catalogs belonging to markets.
	CatalogTypeMarket CatalogType = "MARKET"
)

var AllCatalogType = []CatalogType{
	CatalogTypeNone,
	CatalogTypeApp,
	CatalogTypeCompanyLocation,
	CatalogTypeMarket,
}

func (e CatalogType) IsValid() bool {
	switch e {
	case CatalogTypeNone, CatalogTypeApp, CatalogTypeCompanyLocation, CatalogTypeMarket:
		return true
	}
	return false
}

func (e CatalogType) String() string {
	return string(e)
}

func (e *CatalogType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatalogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatalogType", str)
	}
	return nil
}

func (e CatalogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CatalogUserError`.
type CatalogUserErrorCode string

const (
	// An app catalog cannot be assigned to a price list.
	CatalogUserErrorCodeAppCatalogPriceListAssignment CatalogUserErrorCode = "APP_CATALOG_PRICE_LIST_ASSIGNMENT"
	// Catalog failed to save.
	CatalogUserErrorCodeCatalogFailedToSave CatalogUserErrorCode = "CATALOG_FAILED_TO_SAVE"
	// The catalog wasn't found.
	CatalogUserErrorCodeCatalogNotFound CatalogUserErrorCode = "CATALOG_NOT_FOUND"
	// A price list cannot be assigned to the primary market.
	CatalogUserErrorCodePriceListNotAllowedForPrimaryMarket CatalogUserErrorCode = "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
	// Quantity rules can be associated only with company location catalogs.
	CatalogUserErrorCodeCatalogContextDoesNotSupportQuantityRules CatalogUserErrorCode = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
	// The catalog can't be associated with more than one market.
	CatalogUserErrorCodeCannotAddMoreThanOneMarket CatalogUserErrorCode = "CANNOT_ADD_MORE_THAN_ONE_MARKET"
	// A company location catalog outside of a supported plan can only have an archived status.
	CatalogUserErrorCodeCompanyLocationCatalogStatusPlan CatalogUserErrorCode = "COMPANY_LOCATION_CATALOG_STATUS_PLAN"
	// Context driver already assigned to this catalog.
	CatalogUserErrorCodeContextAlreadyAssignedToCatalog CatalogUserErrorCode = "CONTEXT_ALREADY_ASSIGNED_TO_CATALOG"
	// Cannot save the catalog because the catalog limit for the context was reached.
	CatalogUserErrorCodeContextCatalogLimitReached CatalogUserErrorCode = "CONTEXT_CATALOG_LIMIT_REACHED"
	// The company location could not be found.
	CatalogUserErrorCodeCompanyLocationNotFound CatalogUserErrorCode = "COMPANY_LOCATION_NOT_FOUND"
	// The arguments `contextsToAdd` and `contextsToRemove` must match existing catalog context type.
	CatalogUserErrorCodeContextDriverMismatch CatalogUserErrorCode = "CONTEXT_DRIVER_MISMATCH"
	// A country price list cannot be assigned to a catalog.
	CatalogUserErrorCodeCountryPriceListAssignment CatalogUserErrorCode = "COUNTRY_PRICE_LIST_ASSIGNMENT"
	// The catalog context type is invalid.
	CatalogUserErrorCodeInvalidCatalogContextType CatalogUserErrorCode = "INVALID_CATALOG_CONTEXT_TYPE"
	// A market catalog must have an active status.
	CatalogUserErrorCodeMarketCatalogStatus CatalogUserErrorCode = "MARKET_CATALOG_STATUS"
	// Market not found.
	CatalogUserErrorCodeMarketNotFound CatalogUserErrorCode = "MARKET_NOT_FOUND"
	// The catalog's market and price list currencies do not match.
	CatalogUserErrorCodeMarketAndPriceListCurrencyMismatch CatalogUserErrorCode = "MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
	// Market already belongs to another catalog.
	CatalogUserErrorCodeMarketTaken CatalogUserErrorCode = "MARKET_TAKEN"
	// Must provide exactly one context type.
	CatalogUserErrorCodeMustProvideExactlyOneContextType CatalogUserErrorCode = "MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE"
	// Price list failed to save.
	CatalogUserErrorCodePriceListFailedToSave CatalogUserErrorCode = "PRICE_LIST_FAILED_TO_SAVE"
	// Price list not found.
	CatalogUserErrorCodePriceListNotFound CatalogUserErrorCode = "PRICE_LIST_NOT_FOUND"
	// The price list is currently being modified. Please try again later.
	CatalogUserErrorCodePriceListLocked CatalogUserErrorCode = "PRICE_LIST_LOCKED"
	// Publication not found.
	CatalogUserErrorCodePublicationNotFound CatalogUserErrorCode = "PUBLICATION_NOT_FOUND"
	// Must have `contexts_to_add` or `contexts_to_remove` argument.
	CatalogUserErrorCodeRequiresContextsToAddOrRemove CatalogUserErrorCode = "REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE"
	// Can't perform this action on a catalog of this type.
	CatalogUserErrorCodeUnsupportedCatalogAction CatalogUserErrorCode = "UNSUPPORTED_CATALOG_ACTION"
	// Cannot create a catalog for an app.
	CatalogUserErrorCodeCannotCreateAppCatalog CatalogUserErrorCode = "CANNOT_CREATE_APP_CATALOG"
	// Cannot modify a catalog for an app.
	CatalogUserErrorCodeCannotModifyAppCatalog CatalogUserErrorCode = "CANNOT_MODIFY_APP_CATALOG"
	// Cannot delete a catalog for an app.
	CatalogUserErrorCodeCannotDeleteAppCatalog CatalogUserErrorCode = "CANNOT_DELETE_APP_CATALOG"
	// Cannot create a catalog for a market.
	CatalogUserErrorCodeCannotCreateMarketCatalog CatalogUserErrorCode = "CANNOT_CREATE_MARKET_CATALOG"
	// Cannot modify a catalog for a market.
	CatalogUserErrorCodeCannotModifyMarketCatalog CatalogUserErrorCode = "CANNOT_MODIFY_MARKET_CATALOG"
	// Cannot delete a catalog for a market.
	CatalogUserErrorCodeCannotDeleteMarketCatalog CatalogUserErrorCode = "CANNOT_DELETE_MARKET_CATALOG"
	// The input value is invalid.
	CatalogUserErrorCodeInvalid CatalogUserErrorCode = "INVALID"
	// The input value is already taken.
	CatalogUserErrorCodeTaken CatalogUserErrorCode = "TAKEN"
	// The input value is too long.
	CatalogUserErrorCodeTooLong CatalogUserErrorCode = "TOO_LONG"
	// The input value is too short.
	CatalogUserErrorCodeTooShort CatalogUserErrorCode = "TOO_SHORT"
	// The input value is blank.
	CatalogUserErrorCodeBlank CatalogUserErrorCode = "BLANK"
)

var AllCatalogUserErrorCode = []CatalogUserErrorCode{
	CatalogUserErrorCodeAppCatalogPriceListAssignment,
	CatalogUserErrorCodeCatalogFailedToSave,
	CatalogUserErrorCodeCatalogNotFound,
	CatalogUserErrorCodePriceListNotAllowedForPrimaryMarket,
	CatalogUserErrorCodeCatalogContextDoesNotSupportQuantityRules,
	CatalogUserErrorCodeCannotAddMoreThanOneMarket,
	CatalogUserErrorCodeCompanyLocationCatalogStatusPlan,
	CatalogUserErrorCodeContextAlreadyAssignedToCatalog,
	CatalogUserErrorCodeContextCatalogLimitReached,
	CatalogUserErrorCodeCompanyLocationNotFound,
	CatalogUserErrorCodeContextDriverMismatch,
	CatalogUserErrorCodeCountryPriceListAssignment,
	CatalogUserErrorCodeInvalidCatalogContextType,
	CatalogUserErrorCodeMarketCatalogStatus,
	CatalogUserErrorCodeMarketNotFound,
	CatalogUserErrorCodeMarketAndPriceListCurrencyMismatch,
	CatalogUserErrorCodeMarketTaken,
	CatalogUserErrorCodeMustProvideExactlyOneContextType,
	CatalogUserErrorCodePriceListFailedToSave,
	CatalogUserErrorCodePriceListNotFound,
	CatalogUserErrorCodePriceListLocked,
	CatalogUserErrorCodePublicationNotFound,
	CatalogUserErrorCodeRequiresContextsToAddOrRemove,
	CatalogUserErrorCodeUnsupportedCatalogAction,
	CatalogUserErrorCodeCannotCreateAppCatalog,
	CatalogUserErrorCodeCannotModifyAppCatalog,
	CatalogUserErrorCodeCannotDeleteAppCatalog,
	CatalogUserErrorCodeCannotCreateMarketCatalog,
	CatalogUserErrorCodeCannotModifyMarketCatalog,
	CatalogUserErrorCodeCannotDeleteMarketCatalog,
	CatalogUserErrorCodeInvalid,
	CatalogUserErrorCodeTaken,
	CatalogUserErrorCodeTooLong,
	CatalogUserErrorCodeTooShort,
	CatalogUserErrorCodeBlank,
}

func (e CatalogUserErrorCode) IsValid() bool {
	switch e {
	case CatalogUserErrorCodeAppCatalogPriceListAssignment, CatalogUserErrorCodeCatalogFailedToSave, CatalogUserErrorCodeCatalogNotFound, CatalogUserErrorCodePriceListNotAllowedForPrimaryMarket, CatalogUserErrorCodeCatalogContextDoesNotSupportQuantityRules, CatalogUserErrorCodeCannotAddMoreThanOneMarket, CatalogUserErrorCodeCompanyLocationCatalogStatusPlan, CatalogUserErrorCodeContextAlreadyAssignedToCatalog, CatalogUserErrorCodeContextCatalogLimitReached, CatalogUserErrorCodeCompanyLocationNotFound, CatalogUserErrorCodeContextDriverMismatch, CatalogUserErrorCodeCountryPriceListAssignment, CatalogUserErrorCodeInvalidCatalogContextType, CatalogUserErrorCodeMarketCatalogStatus, CatalogUserErrorCodeMarketNotFound, CatalogUserErrorCodeMarketAndPriceListCurrencyMismatch, CatalogUserErrorCodeMarketTaken, CatalogUserErrorCodeMustProvideExactlyOneContextType, CatalogUserErrorCodePriceListFailedToSave, CatalogUserErrorCodePriceListNotFound, CatalogUserErrorCodePriceListLocked, CatalogUserErrorCodePublicationNotFound, CatalogUserErrorCodeRequiresContextsToAddOrRemove, CatalogUserErrorCodeUnsupportedCatalogAction, CatalogUserErrorCodeCannotCreateAppCatalog, CatalogUserErrorCodeCannotModifyAppCatalog, CatalogUserErrorCodeCannotDeleteAppCatalog, CatalogUserErrorCodeCannotCreateMarketCatalog, CatalogUserErrorCodeCannotModifyMarketCatalog, CatalogUserErrorCodeCannotDeleteMarketCatalog, CatalogUserErrorCodeInvalid, CatalogUserErrorCodeTaken, CatalogUserErrorCodeTooLong, CatalogUserErrorCodeTooShort, CatalogUserErrorCodeBlank:
		return true
	}
	return false
}

func (e CatalogUserErrorCode) String() string {
	return string(e)
}

func (e *CatalogUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatalogUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatalogUserErrorCode", str)
	}
	return nil
}

func (e CatalogUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CheckoutProfile query.
type CheckoutProfileSortKeys string

const (
	// Sort by the `created_at` value.
	CheckoutProfileSortKeysCreatedAt CheckoutProfileSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CheckoutProfileSortKeysUpdatedAt CheckoutProfileSortKeys = "UPDATED_AT"
	// Sort by the `edited_at` value.
	CheckoutProfileSortKeysEditedAt CheckoutProfileSortKeys = "EDITED_AT"
	// Sort by the `is_published` value.
	CheckoutProfileSortKeysIsPublished CheckoutProfileSortKeys = "IS_PUBLISHED"
	// Sort by the `id` value.
	CheckoutProfileSortKeysID CheckoutProfileSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CheckoutProfileSortKeysRelevance CheckoutProfileSortKeys = "RELEVANCE"
)

var AllCheckoutProfileSortKeys = []CheckoutProfileSortKeys{
	CheckoutProfileSortKeysCreatedAt,
	CheckoutProfileSortKeysUpdatedAt,
	CheckoutProfileSortKeysEditedAt,
	CheckoutProfileSortKeysIsPublished,
	CheckoutProfileSortKeysID,
	CheckoutProfileSortKeysRelevance,
}

func (e CheckoutProfileSortKeys) IsValid() bool {
	switch e {
	case CheckoutProfileSortKeysCreatedAt, CheckoutProfileSortKeysUpdatedAt, CheckoutProfileSortKeysEditedAt, CheckoutProfileSortKeysIsPublished, CheckoutProfileSortKeysID, CheckoutProfileSortKeysRelevance:
		return true
	}
	return false
}

func (e CheckoutProfileSortKeys) String() string {
	return string(e)
}

func (e *CheckoutProfileSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckoutProfileSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckoutProfileSortKeys", str)
	}
	return nil
}

func (e CheckoutProfileSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CodeDiscount query.
type CodeDiscountSortKeys string

const (
	// Sort by the `starts_at` value.
	CodeDiscountSortKeysStartsAt CodeDiscountSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	CodeDiscountSortKeysEndsAt CodeDiscountSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	CodeDiscountSortKeysTitle CodeDiscountSortKeys = "TITLE"
	// Sort by the `created_at` value.
	CodeDiscountSortKeysCreatedAt CodeDiscountSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CodeDiscountSortKeysUpdatedAt CodeDiscountSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CodeDiscountSortKeysID CodeDiscountSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CodeDiscountSortKeysRelevance CodeDiscountSortKeys = "RELEVANCE"
)

var AllCodeDiscountSortKeys = []CodeDiscountSortKeys{
	CodeDiscountSortKeysStartsAt,
	CodeDiscountSortKeysEndsAt,
	CodeDiscountSortKeysTitle,
	CodeDiscountSortKeysCreatedAt,
	CodeDiscountSortKeysUpdatedAt,
	CodeDiscountSortKeysID,
	CodeDiscountSortKeysRelevance,
}

func (e CodeDiscountSortKeys) IsValid() bool {
	switch e {
	case CodeDiscountSortKeysStartsAt, CodeDiscountSortKeysEndsAt, CodeDiscountSortKeysTitle, CodeDiscountSortKeysCreatedAt, CodeDiscountSortKeysUpdatedAt, CodeDiscountSortKeysID, CodeDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e CodeDiscountSortKeys) String() string {
	return string(e)
}

func (e *CodeDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodeDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodeDiscountSortKeys", str)
	}
	return nil
}

func (e CodeDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CollectionAddProductsV2UserError`.
type CollectionAddProductsV2UserErrorCode string

const (
	// Can't manually add products to a smart collection.
	CollectionAddProductsV2UserErrorCodeCantAddToSmartCollection CollectionAddProductsV2UserErrorCode = "CANT_ADD_TO_SMART_COLLECTION"
	// Collection doesn't exist.
	CollectionAddProductsV2UserErrorCodeCollectionDoesNotExist CollectionAddProductsV2UserErrorCode = "COLLECTION_DOES_NOT_EXIST"
)

var AllCollectionAddProductsV2UserErrorCode = []CollectionAddProductsV2UserErrorCode{
	CollectionAddProductsV2UserErrorCodeCantAddToSmartCollection,
	CollectionAddProductsV2UserErrorCodeCollectionDoesNotExist,
}

func (e CollectionAddProductsV2UserErrorCode) IsValid() bool {
	switch e {
	case CollectionAddProductsV2UserErrorCodeCantAddToSmartCollection, CollectionAddProductsV2UserErrorCodeCollectionDoesNotExist:
		return true
	}
	return false
}

func (e CollectionAddProductsV2UserErrorCode) String() string {
	return string(e)
}

func (e *CollectionAddProductsV2UserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionAddProductsV2UserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionAddProductsV2UserErrorCode", str)
	}
	return nil
}

func (e CollectionAddProductsV2UserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the attribute of a product being used to populate the smart collection.
type CollectionRuleColumn string

const (
	// The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
	CollectionRuleColumnTag CollectionRuleColumn = "TAG"
	// The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
	CollectionRuleColumnTitle CollectionRuleColumn = "TITLE"
	// The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
	CollectionRuleColumnType CollectionRuleColumn = "TYPE"
	// The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
	CollectionRuleColumnProductTaxonomyNodeID CollectionRuleColumn = "PRODUCT_TAXONOMY_NODE_ID"
	// The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
	CollectionRuleColumnVendor CollectionRuleColumn = "VENDOR"
	// The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
	CollectionRuleColumnVariantPrice CollectionRuleColumn = "VARIANT_PRICE"
	// An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
	// With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
	// With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
	//
	CollectionRuleColumnIsPriceReduced CollectionRuleColumn = "IS_PRICE_REDUCED"
	// The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
	CollectionRuleColumnVariantCompareAtPrice CollectionRuleColumn = "VARIANT_COMPARE_AT_PRICE"
	// The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
	CollectionRuleColumnVariantWeight CollectionRuleColumn = "VARIANT_WEIGHT"
	// The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
	CollectionRuleColumnVariantInventory CollectionRuleColumn = "VARIANT_INVENTORY"
	// The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
	CollectionRuleColumnVariantTitle CollectionRuleColumn = "VARIANT_TITLE"
	// This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
	//
	CollectionRuleColumnProductMetafieldDefinition CollectionRuleColumn = "PRODUCT_METAFIELD_DEFINITION"
	// This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
	//
	CollectionRuleColumnVariantMetafieldDefinition CollectionRuleColumn = "VARIANT_METAFIELD_DEFINITION"
)

var AllCollectionRuleColumn = []CollectionRuleColumn{
	CollectionRuleColumnTag,
	CollectionRuleColumnTitle,
	CollectionRuleColumnType,
	CollectionRuleColumnProductTaxonomyNodeID,
	CollectionRuleColumnVendor,
	CollectionRuleColumnVariantPrice,
	CollectionRuleColumnIsPriceReduced,
	CollectionRuleColumnVariantCompareAtPrice,
	CollectionRuleColumnVariantWeight,
	CollectionRuleColumnVariantInventory,
	CollectionRuleColumnVariantTitle,
	CollectionRuleColumnProductMetafieldDefinition,
	CollectionRuleColumnVariantMetafieldDefinition,
}

func (e CollectionRuleColumn) IsValid() bool {
	switch e {
	case CollectionRuleColumnTag, CollectionRuleColumnTitle, CollectionRuleColumnType, CollectionRuleColumnProductTaxonomyNodeID, CollectionRuleColumnVendor, CollectionRuleColumnVariantPrice, CollectionRuleColumnIsPriceReduced, CollectionRuleColumnVariantCompareAtPrice, CollectionRuleColumnVariantWeight, CollectionRuleColumnVariantInventory, CollectionRuleColumnVariantTitle, CollectionRuleColumnProductMetafieldDefinition, CollectionRuleColumnVariantMetafieldDefinition:
		return true
	}
	return false
}

func (e CollectionRuleColumn) String() string {
	return string(e)
}

func (e *CollectionRuleColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleColumn", str)
	}
	return nil
}

func (e CollectionRuleColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the relationship between the `column` and the `condition`.
type CollectionRuleRelation string

const (
	// The attribute contains the condition.
	CollectionRuleRelationContains CollectionRuleRelation = "CONTAINS"
	// The attribute ends with the condition.
	CollectionRuleRelationEndsWith CollectionRuleRelation = "ENDS_WITH"
	// The attribute is equal to the condition.
	CollectionRuleRelationEquals CollectionRuleRelation = "EQUALS"
	// The attribute is greater than the condition.
	CollectionRuleRelationGreaterThan CollectionRuleRelation = "GREATER_THAN"
	// The attribute is not set (equal to `null`).
	CollectionRuleRelationIsNotSet CollectionRuleRelation = "IS_NOT_SET"
	// The attribute is set (not equal to `null`).
	CollectionRuleRelationIsSet CollectionRuleRelation = "IS_SET"
	// The attribute is less than the condition.
	CollectionRuleRelationLessThan CollectionRuleRelation = "LESS_THAN"
	// The attribute does not contain the condition.
	CollectionRuleRelationNotContains CollectionRuleRelation = "NOT_CONTAINS"
	// The attribute does not equal the condition.
	CollectionRuleRelationNotEquals CollectionRuleRelation = "NOT_EQUALS"
	// The attribute starts with the condition.
	CollectionRuleRelationStartsWith CollectionRuleRelation = "STARTS_WITH"
)

var AllCollectionRuleRelation = []CollectionRuleRelation{
	CollectionRuleRelationContains,
	CollectionRuleRelationEndsWith,
	CollectionRuleRelationEquals,
	CollectionRuleRelationGreaterThan,
	CollectionRuleRelationIsNotSet,
	CollectionRuleRelationIsSet,
	CollectionRuleRelationLessThan,
	CollectionRuleRelationNotContains,
	CollectionRuleRelationNotEquals,
	CollectionRuleRelationStartsWith,
}

func (e CollectionRuleRelation) IsValid() bool {
	switch e {
	case CollectionRuleRelationContains, CollectionRuleRelationEndsWith, CollectionRuleRelationEquals, CollectionRuleRelationGreaterThan, CollectionRuleRelationIsNotSet, CollectionRuleRelationIsSet, CollectionRuleRelationLessThan, CollectionRuleRelationNotContains, CollectionRuleRelationNotEquals, CollectionRuleRelationStartsWith:
		return true
	}
	return false
}

func (e CollectionRuleRelation) String() string {
	return string(e)
}

func (e *CollectionRuleRelation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleRelation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleRelation", str)
	}
	return nil
}

func (e CollectionRuleRelation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Collection query.
type CollectionSortKeys string

const (
	// Sort by the `title` value.
	CollectionSortKeysTitle CollectionSortKeys = "TITLE"
	// Sort by the `updated_at` value.
	CollectionSortKeysUpdatedAt CollectionSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CollectionSortKeysID CollectionSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CollectionSortKeysRelevance CollectionSortKeys = "RELEVANCE"
)

var AllCollectionSortKeys = []CollectionSortKeys{
	CollectionSortKeysTitle,
	CollectionSortKeysUpdatedAt,
	CollectionSortKeysID,
	CollectionSortKeysRelevance,
}

func (e CollectionSortKeys) IsValid() bool {
	switch e {
	case CollectionSortKeysTitle, CollectionSortKeysUpdatedAt, CollectionSortKeysID, CollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e CollectionSortKeys) String() string {
	return string(e)
}

func (e *CollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortKeys", str)
	}
	return nil
}

func (e CollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the sort order for the products in the collection.
type CollectionSortOrder string

const (
	// Alphabetically, in ascending order (A - Z).
	CollectionSortOrderAlphaAsc CollectionSortOrder = "ALPHA_ASC"
	// Alphabetically, in descending order (Z - A).
	CollectionSortOrderAlphaDesc CollectionSortOrder = "ALPHA_DESC"
	// By best-selling products.
	CollectionSortOrderBestSelling CollectionSortOrder = "BEST_SELLING"
	// By date created, in ascending order (oldest - newest).
	CollectionSortOrderCreated CollectionSortOrder = "CREATED"
	// By date created, in descending order (newest - oldest).
	CollectionSortOrderCreatedDesc CollectionSortOrder = "CREATED_DESC"
	// In the order set manually by the merchant.
	CollectionSortOrderManual CollectionSortOrder = "MANUAL"
	// By price, in ascending order (lowest - highest).
	CollectionSortOrderPriceAsc CollectionSortOrder = "PRICE_ASC"
	// By price, in descending order (highest - lowest).
	CollectionSortOrderPriceDesc CollectionSortOrder = "PRICE_DESC"
)

var AllCollectionSortOrder = []CollectionSortOrder{
	CollectionSortOrderAlphaAsc,
	CollectionSortOrderAlphaDesc,
	CollectionSortOrderBestSelling,
	CollectionSortOrderCreated,
	CollectionSortOrderCreatedDesc,
	CollectionSortOrderManual,
	CollectionSortOrderPriceAsc,
	CollectionSortOrderPriceDesc,
}

func (e CollectionSortOrder) IsValid() bool {
	switch e {
	case CollectionSortOrderAlphaAsc, CollectionSortOrderAlphaDesc, CollectionSortOrderBestSelling, CollectionSortOrderCreated, CollectionSortOrderCreatedDesc, CollectionSortOrderManual, CollectionSortOrderPriceAsc, CollectionSortOrderPriceDesc:
		return true
	}
	return false
}

func (e CollectionSortOrder) String() string {
	return string(e)
}

func (e *CollectionSortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortOrder", str)
	}
	return nil
}

func (e CollectionSortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the address type of a company.
type CompanyAddressType string

const (
	// The address is a billing address.
	CompanyAddressTypeBilling CompanyAddressType = "BILLING"
	// The address is a shipping address.
	CompanyAddressTypeShipping CompanyAddressType = "SHIPPING"
)

var AllCompanyAddressType = []CompanyAddressType{
	CompanyAddressTypeBilling,
	CompanyAddressTypeShipping,
}

func (e CompanyAddressType) IsValid() bool {
	switch e {
	case CompanyAddressTypeBilling, CompanyAddressTypeShipping:
		return true
	}
	return false
}

func (e CompanyAddressType) String() string {
	return string(e)
}

func (e *CompanyAddressType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyAddressType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyAddressType", str)
	}
	return nil
}

func (e CompanyAddressType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CompanyContactRoleAssignment query.
type CompanyContactRoleAssignmentSortKeys string

const (
	// Sort by the `created_at` value.
	CompanyContactRoleAssignmentSortKeysCreatedAt CompanyContactRoleAssignmentSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CompanyContactRoleAssignmentSortKeysUpdatedAt CompanyContactRoleAssignmentSortKeys = "UPDATED_AT"
	// Sort by the `location_name` value.
	CompanyContactRoleAssignmentSortKeysLocationName CompanyContactRoleAssignmentSortKeys = "LOCATION_NAME"
	// Sort by the `id` value.
	CompanyContactRoleAssignmentSortKeysID CompanyContactRoleAssignmentSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CompanyContactRoleAssignmentSortKeysRelevance CompanyContactRoleAssignmentSortKeys = "RELEVANCE"
)

var AllCompanyContactRoleAssignmentSortKeys = []CompanyContactRoleAssignmentSortKeys{
	CompanyContactRoleAssignmentSortKeysCreatedAt,
	CompanyContactRoleAssignmentSortKeysUpdatedAt,
	CompanyContactRoleAssignmentSortKeysLocationName,
	CompanyContactRoleAssignmentSortKeysID,
	CompanyContactRoleAssignmentSortKeysRelevance,
}

func (e CompanyContactRoleAssignmentSortKeys) IsValid() bool {
	switch e {
	case CompanyContactRoleAssignmentSortKeysCreatedAt, CompanyContactRoleAssignmentSortKeysUpdatedAt, CompanyContactRoleAssignmentSortKeysLocationName, CompanyContactRoleAssignmentSortKeysID, CompanyContactRoleAssignmentSortKeysRelevance:
		return true
	}
	return false
}

func (e CompanyContactRoleAssignmentSortKeys) String() string {
	return string(e)
}

func (e *CompanyContactRoleAssignmentSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyContactRoleAssignmentSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyContactRoleAssignmentSortKeys", str)
	}
	return nil
}

func (e CompanyContactRoleAssignmentSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CompanyContactRole query.
type CompanyContactRoleSortKeys string

const (
	// Sort by the `created_at` value.
	CompanyContactRoleSortKeysCreatedAt CompanyContactRoleSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CompanyContactRoleSortKeysUpdatedAt CompanyContactRoleSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CompanyContactRoleSortKeysID CompanyContactRoleSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CompanyContactRoleSortKeysRelevance CompanyContactRoleSortKeys = "RELEVANCE"
)

var AllCompanyContactRoleSortKeys = []CompanyContactRoleSortKeys{
	CompanyContactRoleSortKeysCreatedAt,
	CompanyContactRoleSortKeysUpdatedAt,
	CompanyContactRoleSortKeysID,
	CompanyContactRoleSortKeysRelevance,
}

func (e CompanyContactRoleSortKeys) IsValid() bool {
	switch e {
	case CompanyContactRoleSortKeysCreatedAt, CompanyContactRoleSortKeysUpdatedAt, CompanyContactRoleSortKeysID, CompanyContactRoleSortKeysRelevance:
		return true
	}
	return false
}

func (e CompanyContactRoleSortKeys) String() string {
	return string(e)
}

func (e *CompanyContactRoleSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyContactRoleSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyContactRoleSortKeys", str)
	}
	return nil
}

func (e CompanyContactRoleSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CompanyContact query.
type CompanyContactSortKeys string

const (
	// Sort by the `created_at` value.
	CompanyContactSortKeysCreatedAt CompanyContactSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CompanyContactSortKeysUpdatedAt CompanyContactSortKeys = "UPDATED_AT"
	// Sort by the `title` value.
	CompanyContactSortKeysTitle CompanyContactSortKeys = "TITLE"
	// Sort by the `company_id` value.
	CompanyContactSortKeysCompanyID CompanyContactSortKeys = "COMPANY_ID"
	// Sort by the `name` value.
	CompanyContactSortKeysName CompanyContactSortKeys = "NAME"
	// Sort by the `email` value.
	CompanyContactSortKeysEmail CompanyContactSortKeys = "EMAIL"
	// Sort by the `name_email` value.
	CompanyContactSortKeysNameEmail CompanyContactSortKeys = "NAME_EMAIL"
	// Sort by the `id` value.
	CompanyContactSortKeysID CompanyContactSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CompanyContactSortKeysRelevance CompanyContactSortKeys = "RELEVANCE"
)

var AllCompanyContactSortKeys = []CompanyContactSortKeys{
	CompanyContactSortKeysCreatedAt,
	CompanyContactSortKeysUpdatedAt,
	CompanyContactSortKeysTitle,
	CompanyContactSortKeysCompanyID,
	CompanyContactSortKeysName,
	CompanyContactSortKeysEmail,
	CompanyContactSortKeysNameEmail,
	CompanyContactSortKeysID,
	CompanyContactSortKeysRelevance,
}

func (e CompanyContactSortKeys) IsValid() bool {
	switch e {
	case CompanyContactSortKeysCreatedAt, CompanyContactSortKeysUpdatedAt, CompanyContactSortKeysTitle, CompanyContactSortKeysCompanyID, CompanyContactSortKeysName, CompanyContactSortKeysEmail, CompanyContactSortKeysNameEmail, CompanyContactSortKeysID, CompanyContactSortKeysRelevance:
		return true
	}
	return false
}

func (e CompanyContactSortKeys) String() string {
	return string(e)
}

func (e *CompanyContactSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyContactSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyContactSortKeys", str)
	}
	return nil
}

func (e CompanyContactSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CompanyLocation query.
type CompanyLocationSortKeys string

const (
	// Sort by the `created_at` value.
	CompanyLocationSortKeysCreatedAt CompanyLocationSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CompanyLocationSortKeysUpdatedAt CompanyLocationSortKeys = "UPDATED_AT"
	// Sort by the `name` value.
	CompanyLocationSortKeysName CompanyLocationSortKeys = "NAME"
	// Sort by the `company_id` value.
	CompanyLocationSortKeysCompanyID CompanyLocationSortKeys = "COMPANY_ID"
	// Sort by the `company_and_location_name` value.
	CompanyLocationSortKeysCompanyAndLocationName CompanyLocationSortKeys = "COMPANY_AND_LOCATION_NAME"
	// Sort by the `id` value.
	CompanyLocationSortKeysID CompanyLocationSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CompanyLocationSortKeysRelevance CompanyLocationSortKeys = "RELEVANCE"
)

var AllCompanyLocationSortKeys = []CompanyLocationSortKeys{
	CompanyLocationSortKeysCreatedAt,
	CompanyLocationSortKeysUpdatedAt,
	CompanyLocationSortKeysName,
	CompanyLocationSortKeysCompanyID,
	CompanyLocationSortKeysCompanyAndLocationName,
	CompanyLocationSortKeysID,
	CompanyLocationSortKeysRelevance,
}

func (e CompanyLocationSortKeys) IsValid() bool {
	switch e {
	case CompanyLocationSortKeysCreatedAt, CompanyLocationSortKeysUpdatedAt, CompanyLocationSortKeysName, CompanyLocationSortKeysCompanyID, CompanyLocationSortKeysCompanyAndLocationName, CompanyLocationSortKeysID, CompanyLocationSortKeysRelevance:
		return true
	}
	return false
}

func (e CompanyLocationSortKeys) String() string {
	return string(e)
}

func (e *CompanyLocationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyLocationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyLocationSortKeys", str)
	}
	return nil
}

func (e CompanyLocationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Company query.
type CompanySortKeys string

const (
	// Sort by the `created_at` value.
	CompanySortKeysCreatedAt CompanySortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CompanySortKeysUpdatedAt CompanySortKeys = "UPDATED_AT"
	// Sort by the `since_date` value.
	CompanySortKeysSinceDate CompanySortKeys = "SINCE_DATE"
	// Sort by the `name` value.
	CompanySortKeysName CompanySortKeys = "NAME"
	// Sort by the `order_count` value.
	CompanySortKeysOrderCount CompanySortKeys = "ORDER_COUNT"
	// Sort by the `total_spent` value.
	CompanySortKeysTotalSpent CompanySortKeys = "TOTAL_SPENT"
	// Sort by the `id` value.
	CompanySortKeysID CompanySortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CompanySortKeysRelevance CompanySortKeys = "RELEVANCE"
)

var AllCompanySortKeys = []CompanySortKeys{
	CompanySortKeysCreatedAt,
	CompanySortKeysUpdatedAt,
	CompanySortKeysSinceDate,
	CompanySortKeysName,
	CompanySortKeysOrderCount,
	CompanySortKeysTotalSpent,
	CompanySortKeysID,
	CompanySortKeysRelevance,
}

func (e CompanySortKeys) IsValid() bool {
	switch e {
	case CompanySortKeysCreatedAt, CompanySortKeysUpdatedAt, CompanySortKeysSinceDate, CompanySortKeysName, CompanySortKeysOrderCount, CompanySortKeysTotalSpent, CompanySortKeysID, CompanySortKeysRelevance:
		return true
	}
	return false
}

func (e CompanySortKeys) String() string {
	return string(e)
}

func (e *CompanySortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanySortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanySortKeys", str)
	}
	return nil
}

func (e CompanySortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
// If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
// of another country. For example, the territories associated with Spain are represented by the country code `ES`,
// and the territories associated with the United States of America are represented by the country code `US`.
type CountryCode string

const (
	// Afghanistan.
	CountryCodeAf CountryCode = "AF"
	// Åland Islands.
	CountryCodeAx CountryCode = "AX"
	// Albania.
	CountryCodeAl CountryCode = "AL"
	// Algeria.
	CountryCodeDz CountryCode = "DZ"
	// Andorra.
	CountryCodeAd CountryCode = "AD"
	// Angola.
	CountryCodeAo CountryCode = "AO"
	// Anguilla.
	CountryCodeAi CountryCode = "AI"
	// Antigua & Barbuda.
	CountryCodeAg CountryCode = "AG"
	// Argentina.
	CountryCodeAr CountryCode = "AR"
	// Armenia.
	CountryCodeAm CountryCode = "AM"
	// Aruba.
	CountryCodeAw CountryCode = "AW"
	// Ascension Island.
	CountryCodeAc CountryCode = "AC"
	// Australia.
	CountryCodeAu CountryCode = "AU"
	// Austria.
	CountryCodeAt CountryCode = "AT"
	// Azerbaijan.
	CountryCodeAz CountryCode = "AZ"
	// Bahamas.
	CountryCodeBs CountryCode = "BS"
	// Bahrain.
	CountryCodeBh CountryCode = "BH"
	// Bangladesh.
	CountryCodeBd CountryCode = "BD"
	// Barbados.
	CountryCodeBb CountryCode = "BB"
	// Belarus.
	CountryCodeBy CountryCode = "BY"
	// Belgium.
	CountryCodeBe CountryCode = "BE"
	// Belize.
	CountryCodeBz CountryCode = "BZ"
	// Benin.
	CountryCodeBj CountryCode = "BJ"
	// Bermuda.
	CountryCodeBm CountryCode = "BM"
	// Bhutan.
	CountryCodeBt CountryCode = "BT"
	// Bolivia.
	CountryCodeBo CountryCode = "BO"
	// Bosnia & Herzegovina.
	CountryCodeBa CountryCode = "BA"
	// Botswana.
	CountryCodeBw CountryCode = "BW"
	// Bouvet Island.
	CountryCodeBv CountryCode = "BV"
	// Brazil.
	CountryCodeBr CountryCode = "BR"
	// British Indian Ocean Territory.
	CountryCodeIo CountryCode = "IO"
	// Brunei.
	CountryCodeBn CountryCode = "BN"
	// Bulgaria.
	CountryCodeBg CountryCode = "BG"
	// Burkina Faso.
	CountryCodeBf CountryCode = "BF"
	// Burundi.
	CountryCodeBi CountryCode = "BI"
	// Cambodia.
	CountryCodeKh CountryCode = "KH"
	// Canada.
	CountryCodeCa CountryCode = "CA"
	// Cape Verde.
	CountryCodeCv CountryCode = "CV"
	// Caribbean Netherlands.
	CountryCodeBq CountryCode = "BQ"
	// Cayman Islands.
	CountryCodeKy CountryCode = "KY"
	// Central African Republic.
	CountryCodeCf CountryCode = "CF"
	// Chad.
	CountryCodeTd CountryCode = "TD"
	// Chile.
	CountryCodeCl CountryCode = "CL"
	// China.
	CountryCodeCn CountryCode = "CN"
	// Christmas Island.
	CountryCodeCx CountryCode = "CX"
	// Cocos (Keeling) Islands.
	CountryCodeCc CountryCode = "CC"
	// Colombia.
	CountryCodeCo CountryCode = "CO"
	// Comoros.
	CountryCodeKm CountryCode = "KM"
	// Congo - Brazzaville.
	CountryCodeCg CountryCode = "CG"
	// Congo - Kinshasa.
	CountryCodeCd CountryCode = "CD"
	// Cook Islands.
	CountryCodeCk CountryCode = "CK"
	// Costa Rica.
	CountryCodeCr CountryCode = "CR"
	// Croatia.
	CountryCodeHr CountryCode = "HR"
	// Cuba.
	CountryCodeCu CountryCode = "CU"
	// Curaçao.
	CountryCodeCw CountryCode = "CW"
	// Cyprus.
	CountryCodeCy CountryCode = "CY"
	// Czechia.
	CountryCodeCz CountryCode = "CZ"
	// Côte d’Ivoire.
	CountryCodeCi CountryCode = "CI"
	// Denmark.
	CountryCodeDk CountryCode = "DK"
	// Djibouti.
	CountryCodeDj CountryCode = "DJ"
	// Dominica.
	CountryCodeDm CountryCode = "DM"
	// Dominican Republic.
	CountryCodeDo CountryCode = "DO"
	// Ecuador.
	CountryCodeEc CountryCode = "EC"
	// Egypt.
	CountryCodeEg CountryCode = "EG"
	// El Salvador.
	CountryCodeSv CountryCode = "SV"
	// Equatorial Guinea.
	CountryCodeGq CountryCode = "GQ"
	// Eritrea.
	CountryCodeEr CountryCode = "ER"
	// Estonia.
	CountryCodeEe CountryCode = "EE"
	// Eswatini.
	CountryCodeSz CountryCode = "SZ"
	// Ethiopia.
	CountryCodeEt CountryCode = "ET"
	// Falkland Islands.
	CountryCodeFk CountryCode = "FK"
	// Faroe Islands.
	CountryCodeFo CountryCode = "FO"
	// Fiji.
	CountryCodeFj CountryCode = "FJ"
	// Finland.
	CountryCodeFi CountryCode = "FI"
	// France.
	CountryCodeFr CountryCode = "FR"
	// French Guiana.
	CountryCodeGf CountryCode = "GF"
	// French Polynesia.
	CountryCodePf CountryCode = "PF"
	// French Southern Territories.
	CountryCodeTf CountryCode = "TF"
	// Gabon.
	CountryCodeGa CountryCode = "GA"
	// Gambia.
	CountryCodeGm CountryCode = "GM"
	// Georgia.
	CountryCodeGe CountryCode = "GE"
	// Germany.
	CountryCodeDe CountryCode = "DE"
	// Ghana.
	CountryCodeGh CountryCode = "GH"
	// Gibraltar.
	CountryCodeGi CountryCode = "GI"
	// Greece.
	CountryCodeGr CountryCode = "GR"
	// Greenland.
	CountryCodeGl CountryCode = "GL"
	// Grenada.
	CountryCodeGd CountryCode = "GD"
	// Guadeloupe.
	CountryCodeGp CountryCode = "GP"
	// Guatemala.
	CountryCodeGt CountryCode = "GT"
	// Guernsey.
	CountryCodeGg CountryCode = "GG"
	// Guinea.
	CountryCodeGn CountryCode = "GN"
	// Guinea-Bissau.
	CountryCodeGw CountryCode = "GW"
	// Guyana.
	CountryCodeGy CountryCode = "GY"
	// Haiti.
	CountryCodeHt CountryCode = "HT"
	// Heard & McDonald Islands.
	CountryCodeHm CountryCode = "HM"
	// Vatican City.
	CountryCodeVa CountryCode = "VA"
	// Honduras.
	CountryCodeHn CountryCode = "HN"
	// Hong Kong SAR.
	CountryCodeHk CountryCode = "HK"
	// Hungary.
	CountryCodeHu CountryCode = "HU"
	// Iceland.
	CountryCodeIs CountryCode = "IS"
	// India.
	CountryCodeIn CountryCode = "IN"
	// Indonesia.
	CountryCodeID CountryCode = "ID"
	// Iran.
	CountryCodeIr CountryCode = "IR"
	// Iraq.
	CountryCodeIq CountryCode = "IQ"
	// Ireland.
	CountryCodeIe CountryCode = "IE"
	// Isle of Man.
	CountryCodeIm CountryCode = "IM"
	// Israel.
	CountryCodeIl CountryCode = "IL"
	// Italy.
	CountryCodeIt CountryCode = "IT"
	// Jamaica.
	CountryCodeJm CountryCode = "JM"
	// Japan.
	CountryCodeJp CountryCode = "JP"
	// Jersey.
	CountryCodeJe CountryCode = "JE"
	// Jordan.
	CountryCodeJo CountryCode = "JO"
	// Kazakhstan.
	CountryCodeKz CountryCode = "KZ"
	// Kenya.
	CountryCodeKe CountryCode = "KE"
	// Kiribati.
	CountryCodeKi CountryCode = "KI"
	// North Korea.
	CountryCodeKp CountryCode = "KP"
	// Kosovo.
	CountryCodeXk CountryCode = "XK"
	// Kuwait.
	CountryCodeKw CountryCode = "KW"
	// Kyrgyzstan.
	CountryCodeKg CountryCode = "KG"
	// Laos.
	CountryCodeLa CountryCode = "LA"
	// Latvia.
	CountryCodeLv CountryCode = "LV"
	// Lebanon.
	CountryCodeLb CountryCode = "LB"
	// Lesotho.
	CountryCodeLs CountryCode = "LS"
	// Liberia.
	CountryCodeLr CountryCode = "LR"
	// Libya.
	CountryCodeLy CountryCode = "LY"
	// Liechtenstein.
	CountryCodeLi CountryCode = "LI"
	// Lithuania.
	CountryCodeLt CountryCode = "LT"
	// Luxembourg.
	CountryCodeLu CountryCode = "LU"
	// Macao SAR.
	CountryCodeMo CountryCode = "MO"
	// Madagascar.
	CountryCodeMg CountryCode = "MG"
	// Malawi.
	CountryCodeMw CountryCode = "MW"
	// Malaysia.
	CountryCodeMy CountryCode = "MY"
	// Maldives.
	CountryCodeMv CountryCode = "MV"
	// Mali.
	CountryCodeMl CountryCode = "ML"
	// Malta.
	CountryCodeMt CountryCode = "MT"
	// Martinique.
	CountryCodeMq CountryCode = "MQ"
	// Mauritania.
	CountryCodeMr CountryCode = "MR"
	// Mauritius.
	CountryCodeMu CountryCode = "MU"
	// Mayotte.
	CountryCodeYt CountryCode = "YT"
	// Mexico.
	CountryCodeMx CountryCode = "MX"
	// Moldova.
	CountryCodeMd CountryCode = "MD"
	// Monaco.
	CountryCodeMc CountryCode = "MC"
	// Mongolia.
	CountryCodeMn CountryCode = "MN"
	// Montenegro.
	CountryCodeMe CountryCode = "ME"
	// Montserrat.
	CountryCodeMs CountryCode = "MS"
	// Morocco.
	CountryCodeMa CountryCode = "MA"
	// Mozambique.
	CountryCodeMz CountryCode = "MZ"
	// Myanmar (Burma).
	CountryCodeMm CountryCode = "MM"
	// Namibia.
	CountryCodeNa CountryCode = "NA"
	// Nauru.
	CountryCodeNr CountryCode = "NR"
	// Nepal.
	CountryCodeNp CountryCode = "NP"
	// Netherlands.
	CountryCodeNl CountryCode = "NL"
	// Netherlands Antilles.
	CountryCodeAn CountryCode = "AN"
	// New Caledonia.
	CountryCodeNc CountryCode = "NC"
	// New Zealand.
	CountryCodeNz CountryCode = "NZ"
	// Nicaragua.
	CountryCodeNi CountryCode = "NI"
	// Niger.
	CountryCodeNe CountryCode = "NE"
	// Nigeria.
	CountryCodeNg CountryCode = "NG"
	// Niue.
	CountryCodeNu CountryCode = "NU"
	// Norfolk Island.
	CountryCodeNf CountryCode = "NF"
	// North Macedonia.
	CountryCodeMk CountryCode = "MK"
	// Norway.
	CountryCodeNo CountryCode = "NO"
	// Oman.
	CountryCodeOm CountryCode = "OM"
	// Pakistan.
	CountryCodePk CountryCode = "PK"
	// Palestinian Territories.
	CountryCodePs CountryCode = "PS"
	// Panama.
	CountryCodePa CountryCode = "PA"
	// Papua New Guinea.
	CountryCodePg CountryCode = "PG"
	// Paraguay.
	CountryCodePy CountryCode = "PY"
	// Peru.
	CountryCodePe CountryCode = "PE"
	// Philippines.
	CountryCodePh CountryCode = "PH"
	// Pitcairn Islands.
	CountryCodePn CountryCode = "PN"
	// Poland.
	CountryCodePl CountryCode = "PL"
	// Portugal.
	CountryCodePt CountryCode = "PT"
	// Qatar.
	CountryCodeQa CountryCode = "QA"
	// Cameroon.
	CountryCodeCm CountryCode = "CM"
	// Réunion.
	CountryCodeRe CountryCode = "RE"
	// Romania.
	CountryCodeRo CountryCode = "RO"
	// Russia.
	CountryCodeRu CountryCode = "RU"
	// Rwanda.
	CountryCodeRw CountryCode = "RW"
	// St. Barthélemy.
	CountryCodeBl CountryCode = "BL"
	// St. Helena.
	CountryCodeSh CountryCode = "SH"
	// St. Kitts & Nevis.
	CountryCodeKn CountryCode = "KN"
	// St. Lucia.
	CountryCodeLc CountryCode = "LC"
	// St. Martin.
	CountryCodeMf CountryCode = "MF"
	// St. Pierre & Miquelon.
	CountryCodePm CountryCode = "PM"
	// Samoa.
	CountryCodeWs CountryCode = "WS"
	// San Marino.
	CountryCodeSm CountryCode = "SM"
	// São Tomé & Príncipe.
	CountryCodeSt CountryCode = "ST"
	// Saudi Arabia.
	CountryCodeSa CountryCode = "SA"
	// Senegal.
	CountryCodeSn CountryCode = "SN"
	// Serbia.
	CountryCodeRs CountryCode = "RS"
	// Seychelles.
	CountryCodeSc CountryCode = "SC"
	// Sierra Leone.
	CountryCodeSl CountryCode = "SL"
	// Singapore.
	CountryCodeSg CountryCode = "SG"
	// Sint Maarten.
	CountryCodeSx CountryCode = "SX"
	// Slovakia.
	CountryCodeSk CountryCode = "SK"
	// Slovenia.
	CountryCodeSi CountryCode = "SI"
	// Solomon Islands.
	CountryCodeSb CountryCode = "SB"
	// Somalia.
	CountryCodeSo CountryCode = "SO"
	// South Africa.
	CountryCodeZa CountryCode = "ZA"
	// South Georgia & South Sandwich Islands.
	CountryCodeGs CountryCode = "GS"
	// South Korea.
	CountryCodeKr CountryCode = "KR"
	// South Sudan.
	CountryCodeSs CountryCode = "SS"
	// Spain.
	CountryCodeEs CountryCode = "ES"
	// Sri Lanka.
	CountryCodeLk CountryCode = "LK"
	// St. Vincent & Grenadines.
	CountryCodeVc CountryCode = "VC"
	// Sudan.
	CountryCodeSd CountryCode = "SD"
	// Suriname.
	CountryCodeSr CountryCode = "SR"
	// Svalbard & Jan Mayen.
	CountryCodeSj CountryCode = "SJ"
	// Sweden.
	CountryCodeSe CountryCode = "SE"
	// Switzerland.
	CountryCodeCh CountryCode = "CH"
	// Syria.
	CountryCodeSy CountryCode = "SY"
	// Taiwan.
	CountryCodeTw CountryCode = "TW"
	// Tajikistan.
	CountryCodeTj CountryCode = "TJ"
	// Tanzania.
	CountryCodeTz CountryCode = "TZ"
	// Thailand.
	CountryCodeTh CountryCode = "TH"
	// Timor-Leste.
	CountryCodeTl CountryCode = "TL"
	// Togo.
	CountryCodeTg CountryCode = "TG"
	// Tokelau.
	CountryCodeTk CountryCode = "TK"
	// Tonga.
	CountryCodeTo CountryCode = "TO"
	// Trinidad & Tobago.
	CountryCodeTt CountryCode = "TT"
	// Tristan da Cunha.
	CountryCodeTa CountryCode = "TA"
	// Tunisia.
	CountryCodeTn CountryCode = "TN"
	// Turkey.
	CountryCodeTr CountryCode = "TR"
	// Turkmenistan.
	CountryCodeTm CountryCode = "TM"
	// Turks & Caicos Islands.
	CountryCodeTc CountryCode = "TC"
	// Tuvalu.
	CountryCodeTv CountryCode = "TV"
	// Uganda.
	CountryCodeUg CountryCode = "UG"
	// Ukraine.
	CountryCodeUa CountryCode = "UA"
	// United Arab Emirates.
	CountryCodeAe CountryCode = "AE"
	// United Kingdom.
	CountryCodeGb CountryCode = "GB"
	// United States.
	CountryCodeUs CountryCode = "US"
	// U.S. Outlying Islands.
	CountryCodeUm CountryCode = "UM"
	// Uruguay.
	CountryCodeUy CountryCode = "UY"
	// Uzbekistan.
	CountryCodeUz CountryCode = "UZ"
	// Vanuatu.
	CountryCodeVu CountryCode = "VU"
	// Venezuela.
	CountryCodeVe CountryCode = "VE"
	// Vietnam.
	CountryCodeVn CountryCode = "VN"
	// British Virgin Islands.
	CountryCodeVg CountryCode = "VG"
	// Wallis & Futuna.
	CountryCodeWf CountryCode = "WF"
	// Western Sahara.
	CountryCodeEh CountryCode = "EH"
	// Yemen.
	CountryCodeYe CountryCode = "YE"
	// Zambia.
	CountryCodeZm CountryCode = "ZM"
	// Zimbabwe.
	CountryCodeZw CountryCode = "ZW"
	// Unknown Region.
	CountryCodeZz CountryCode = "ZZ"
)

var AllCountryCode = []CountryCode{
	CountryCodeAf,
	CountryCodeAx,
	CountryCodeAl,
	CountryCodeDz,
	CountryCodeAd,
	CountryCodeAo,
	CountryCodeAi,
	CountryCodeAg,
	CountryCodeAr,
	CountryCodeAm,
	CountryCodeAw,
	CountryCodeAc,
	CountryCodeAu,
	CountryCodeAt,
	CountryCodeAz,
	CountryCodeBs,
	CountryCodeBh,
	CountryCodeBd,
	CountryCodeBb,
	CountryCodeBy,
	CountryCodeBe,
	CountryCodeBz,
	CountryCodeBj,
	CountryCodeBm,
	CountryCodeBt,
	CountryCodeBo,
	CountryCodeBa,
	CountryCodeBw,
	CountryCodeBv,
	CountryCodeBr,
	CountryCodeIo,
	CountryCodeBn,
	CountryCodeBg,
	CountryCodeBf,
	CountryCodeBi,
	CountryCodeKh,
	CountryCodeCa,
	CountryCodeCv,
	CountryCodeBq,
	CountryCodeKy,
	CountryCodeCf,
	CountryCodeTd,
	CountryCodeCl,
	CountryCodeCn,
	CountryCodeCx,
	CountryCodeCc,
	CountryCodeCo,
	CountryCodeKm,
	CountryCodeCg,
	CountryCodeCd,
	CountryCodeCk,
	CountryCodeCr,
	CountryCodeHr,
	CountryCodeCu,
	CountryCodeCw,
	CountryCodeCy,
	CountryCodeCz,
	CountryCodeCi,
	CountryCodeDk,
	CountryCodeDj,
	CountryCodeDm,
	CountryCodeDo,
	CountryCodeEc,
	CountryCodeEg,
	CountryCodeSv,
	CountryCodeGq,
	CountryCodeEr,
	CountryCodeEe,
	CountryCodeSz,
	CountryCodeEt,
	CountryCodeFk,
	CountryCodeFo,
	CountryCodeFj,
	CountryCodeFi,
	CountryCodeFr,
	CountryCodeGf,
	CountryCodePf,
	CountryCodeTf,
	CountryCodeGa,
	CountryCodeGm,
	CountryCodeGe,
	CountryCodeDe,
	CountryCodeGh,
	CountryCodeGi,
	CountryCodeGr,
	CountryCodeGl,
	CountryCodeGd,
	CountryCodeGp,
	CountryCodeGt,
	CountryCodeGg,
	CountryCodeGn,
	CountryCodeGw,
	CountryCodeGy,
	CountryCodeHt,
	CountryCodeHm,
	CountryCodeVa,
	CountryCodeHn,
	CountryCodeHk,
	CountryCodeHu,
	CountryCodeIs,
	CountryCodeIn,
	CountryCodeID,
	CountryCodeIr,
	CountryCodeIq,
	CountryCodeIe,
	CountryCodeIm,
	CountryCodeIl,
	CountryCodeIt,
	CountryCodeJm,
	CountryCodeJp,
	CountryCodeJe,
	CountryCodeJo,
	CountryCodeKz,
	CountryCodeKe,
	CountryCodeKi,
	CountryCodeKp,
	CountryCodeXk,
	CountryCodeKw,
	CountryCodeKg,
	CountryCodeLa,
	CountryCodeLv,
	CountryCodeLb,
	CountryCodeLs,
	CountryCodeLr,
	CountryCodeLy,
	CountryCodeLi,
	CountryCodeLt,
	CountryCodeLu,
	CountryCodeMo,
	CountryCodeMg,
	CountryCodeMw,
	CountryCodeMy,
	CountryCodeMv,
	CountryCodeMl,
	CountryCodeMt,
	CountryCodeMq,
	CountryCodeMr,
	CountryCodeMu,
	CountryCodeYt,
	CountryCodeMx,
	CountryCodeMd,
	CountryCodeMc,
	CountryCodeMn,
	CountryCodeMe,
	CountryCodeMs,
	CountryCodeMa,
	CountryCodeMz,
	CountryCodeMm,
	CountryCodeNa,
	CountryCodeNr,
	CountryCodeNp,
	CountryCodeNl,
	CountryCodeAn,
	CountryCodeNc,
	CountryCodeNz,
	CountryCodeNi,
	CountryCodeNe,
	CountryCodeNg,
	CountryCodeNu,
	CountryCodeNf,
	CountryCodeMk,
	CountryCodeNo,
	CountryCodeOm,
	CountryCodePk,
	CountryCodePs,
	CountryCodePa,
	CountryCodePg,
	CountryCodePy,
	CountryCodePe,
	CountryCodePh,
	CountryCodePn,
	CountryCodePl,
	CountryCodePt,
	CountryCodeQa,
	CountryCodeCm,
	CountryCodeRe,
	CountryCodeRo,
	CountryCodeRu,
	CountryCodeRw,
	CountryCodeBl,
	CountryCodeSh,
	CountryCodeKn,
	CountryCodeLc,
	CountryCodeMf,
	CountryCodePm,
	CountryCodeWs,
	CountryCodeSm,
	CountryCodeSt,
	CountryCodeSa,
	CountryCodeSn,
	CountryCodeRs,
	CountryCodeSc,
	CountryCodeSl,
	CountryCodeSg,
	CountryCodeSx,
	CountryCodeSk,
	CountryCodeSi,
	CountryCodeSb,
	CountryCodeSo,
	CountryCodeZa,
	CountryCodeGs,
	CountryCodeKr,
	CountryCodeSs,
	CountryCodeEs,
	CountryCodeLk,
	CountryCodeVc,
	CountryCodeSd,
	CountryCodeSr,
	CountryCodeSj,
	CountryCodeSe,
	CountryCodeCh,
	CountryCodeSy,
	CountryCodeTw,
	CountryCodeTj,
	CountryCodeTz,
	CountryCodeTh,
	CountryCodeTl,
	CountryCodeTg,
	CountryCodeTk,
	CountryCodeTo,
	CountryCodeTt,
	CountryCodeTa,
	CountryCodeTn,
	CountryCodeTr,
	CountryCodeTm,
	CountryCodeTc,
	CountryCodeTv,
	CountryCodeUg,
	CountryCodeUa,
	CountryCodeAe,
	CountryCodeGb,
	CountryCodeUs,
	CountryCodeUm,
	CountryCodeUy,
	CountryCodeUz,
	CountryCodeVu,
	CountryCodeVe,
	CountryCodeVn,
	CountryCodeVg,
	CountryCodeWf,
	CountryCodeEh,
	CountryCodeYe,
	CountryCodeZm,
	CountryCodeZw,
	CountryCodeZz,
}

func (e CountryCode) IsValid() bool {
	switch e {
	case CountryCodeAf, CountryCodeAx, CountryCodeAl, CountryCodeDz, CountryCodeAd, CountryCodeAo, CountryCodeAi, CountryCodeAg, CountryCodeAr, CountryCodeAm, CountryCodeAw, CountryCodeAc, CountryCodeAu, CountryCodeAt, CountryCodeAz, CountryCodeBs, CountryCodeBh, CountryCodeBd, CountryCodeBb, CountryCodeBy, CountryCodeBe, CountryCodeBz, CountryCodeBj, CountryCodeBm, CountryCodeBt, CountryCodeBo, CountryCodeBa, CountryCodeBw, CountryCodeBv, CountryCodeBr, CountryCodeIo, CountryCodeBn, CountryCodeBg, CountryCodeBf, CountryCodeBi, CountryCodeKh, CountryCodeCa, CountryCodeCv, CountryCodeBq, CountryCodeKy, CountryCodeCf, CountryCodeTd, CountryCodeCl, CountryCodeCn, CountryCodeCx, CountryCodeCc, CountryCodeCo, CountryCodeKm, CountryCodeCg, CountryCodeCd, CountryCodeCk, CountryCodeCr, CountryCodeHr, CountryCodeCu, CountryCodeCw, CountryCodeCy, CountryCodeCz, CountryCodeCi, CountryCodeDk, CountryCodeDj, CountryCodeDm, CountryCodeDo, CountryCodeEc, CountryCodeEg, CountryCodeSv, CountryCodeGq, CountryCodeEr, CountryCodeEe, CountryCodeSz, CountryCodeEt, CountryCodeFk, CountryCodeFo, CountryCodeFj, CountryCodeFi, CountryCodeFr, CountryCodeGf, CountryCodePf, CountryCodeTf, CountryCodeGa, CountryCodeGm, CountryCodeGe, CountryCodeDe, CountryCodeGh, CountryCodeGi, CountryCodeGr, CountryCodeGl, CountryCodeGd, CountryCodeGp, CountryCodeGt, CountryCodeGg, CountryCodeGn, CountryCodeGw, CountryCodeGy, CountryCodeHt, CountryCodeHm, CountryCodeVa, CountryCodeHn, CountryCodeHk, CountryCodeHu, CountryCodeIs, CountryCodeIn, CountryCodeID, CountryCodeIr, CountryCodeIq, CountryCodeIe, CountryCodeIm, CountryCodeIl, CountryCodeIt, CountryCodeJm, CountryCodeJp, CountryCodeJe, CountryCodeJo, CountryCodeKz, CountryCodeKe, CountryCodeKi, CountryCodeKp, CountryCodeXk, CountryCodeKw, CountryCodeKg, CountryCodeLa, CountryCodeLv, CountryCodeLb, CountryCodeLs, CountryCodeLr, CountryCodeLy, CountryCodeLi, CountryCodeLt, CountryCodeLu, CountryCodeMo, CountryCodeMg, CountryCodeMw, CountryCodeMy, CountryCodeMv, CountryCodeMl, CountryCodeMt, CountryCodeMq, CountryCodeMr, CountryCodeMu, CountryCodeYt, CountryCodeMx, CountryCodeMd, CountryCodeMc, CountryCodeMn, CountryCodeMe, CountryCodeMs, CountryCodeMa, CountryCodeMz, CountryCodeMm, CountryCodeNa, CountryCodeNr, CountryCodeNp, CountryCodeNl, CountryCodeAn, CountryCodeNc, CountryCodeNz, CountryCodeNi, CountryCodeNe, CountryCodeNg, CountryCodeNu, CountryCodeNf, CountryCodeMk, CountryCodeNo, CountryCodeOm, CountryCodePk, CountryCodePs, CountryCodePa, CountryCodePg, CountryCodePy, CountryCodePe, CountryCodePh, CountryCodePn, CountryCodePl, CountryCodePt, CountryCodeQa, CountryCodeCm, CountryCodeRe, CountryCodeRo, CountryCodeRu, CountryCodeRw, CountryCodeBl, CountryCodeSh, CountryCodeKn, CountryCodeLc, CountryCodeMf, CountryCodePm, CountryCodeWs, CountryCodeSm, CountryCodeSt, CountryCodeSa, CountryCodeSn, CountryCodeRs, CountryCodeSc, CountryCodeSl, CountryCodeSg, CountryCodeSx, CountryCodeSk, CountryCodeSi, CountryCodeSb, CountryCodeSo, CountryCodeZa, CountryCodeGs, CountryCodeKr, CountryCodeSs, CountryCodeEs, CountryCodeLk, CountryCodeVc, CountryCodeSd, CountryCodeSr, CountryCodeSj, CountryCodeSe, CountryCodeCh, CountryCodeSy, CountryCodeTw, CountryCodeTj, CountryCodeTz, CountryCodeTh, CountryCodeTl, CountryCodeTg, CountryCodeTk, CountryCodeTo, CountryCodeTt, CountryCodeTa, CountryCodeTn, CountryCodeTr, CountryCodeTm, CountryCodeTc, CountryCodeTv, CountryCodeUg, CountryCodeUa, CountryCodeAe, CountryCodeGb, CountryCodeUs, CountryCodeUm, CountryCodeUy, CountryCodeUz, CountryCodeVu, CountryCodeVe, CountryCodeVn, CountryCodeVg, CountryCodeWf, CountryCodeEh, CountryCodeYe, CountryCodeZm, CountryCodeZw, CountryCodeZz:
		return true
	}
	return false
}

func (e CountryCode) String() string {
	return string(e)
}

func (e *CountryCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryCode", str)
	}
	return nil
}

func (e CountryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The part of the image that should remain after cropping.
type CropRegion string

const (
	// Keep the center of the image.
	CropRegionCenter CropRegion = "CENTER"
	// Keep the top of the image.
	CropRegionTop CropRegion = "TOP"
	// Keep the bottom of the image.
	CropRegionBottom CropRegion = "BOTTOM"
	// Keep the left of the image.
	CropRegionLeft CropRegion = "LEFT"
	// Keep the right of the image.
	CropRegionRight CropRegion = "RIGHT"
)

var AllCropRegion = []CropRegion{
	CropRegionCenter,
	CropRegionTop,
	CropRegionBottom,
	CropRegionLeft,
	CropRegionRight,
}

func (e CropRegion) IsValid() bool {
	switch e {
	case CropRegionCenter, CropRegionTop, CropRegionBottom, CropRegionLeft, CropRegionRight:
		return true
	}
	return false
}

func (e CropRegion) String() string {
	return string(e)
}

func (e *CropRegion) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CropRegion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CropRegion", str)
	}
	return nil
}

func (e CropRegion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
// and non-standard codes.
type CurrencyCode string

const (
	// United States Dollars (USD).
	CurrencyCodeUsd CurrencyCode = "USD"
	// Euro (EUR).
	CurrencyCodeEur CurrencyCode = "EUR"
	// United Kingdom Pounds (GBP).
	CurrencyCodeGbp CurrencyCode = "GBP"
	// Canadian Dollars (CAD).
	CurrencyCodeCad CurrencyCode = "CAD"
	// Afghan Afghani (AFN).
	CurrencyCodeAfn CurrencyCode = "AFN"
	// Albanian Lek (ALL).
	CurrencyCodeAll CurrencyCode = "ALL"
	// Algerian Dinar (DZD).
	CurrencyCodeDzd CurrencyCode = "DZD"
	// Angolan Kwanza (AOA).
	CurrencyCodeAoa CurrencyCode = "AOA"
	// Argentine Pesos (ARS).
	CurrencyCodeArs CurrencyCode = "ARS"
	// Armenian Dram (AMD).
	CurrencyCodeAmd CurrencyCode = "AMD"
	// Aruban Florin (AWG).
	CurrencyCodeAwg CurrencyCode = "AWG"
	// Australian Dollars (AUD).
	CurrencyCodeAud CurrencyCode = "AUD"
	// Barbadian Dollar (BBD).
	CurrencyCodeBbd CurrencyCode = "BBD"
	// Azerbaijani Manat (AZN).
	CurrencyCodeAzn CurrencyCode = "AZN"
	// Bangladesh Taka (BDT).
	CurrencyCodeBdt CurrencyCode = "BDT"
	// Bahamian Dollar (BSD).
	CurrencyCodeBsd CurrencyCode = "BSD"
	// Bahraini Dinar (BHD).
	CurrencyCodeBhd CurrencyCode = "BHD"
	// Burundian Franc (BIF).
	CurrencyCodeBif CurrencyCode = "BIF"
	// Belize Dollar (BZD).
	CurrencyCodeBzd CurrencyCode = "BZD"
	// Bermudian Dollar (BMD).
	CurrencyCodeBmd CurrencyCode = "BMD"
	// Bhutanese Ngultrum (BTN).
	CurrencyCodeBtn CurrencyCode = "BTN"
	// Bosnia and Herzegovina Convertible Mark (BAM).
	CurrencyCodeBam CurrencyCode = "BAM"
	// Brazilian Real (BRL).
	CurrencyCodeBrl CurrencyCode = "BRL"
	// Bolivian Boliviano (BOB).
	CurrencyCodeBob CurrencyCode = "BOB"
	// Botswana Pula (BWP).
	CurrencyCodeBwp CurrencyCode = "BWP"
	// Brunei Dollar (BND).
	CurrencyCodeBnd CurrencyCode = "BND"
	// Bulgarian Lev (BGN).
	CurrencyCodeBgn CurrencyCode = "BGN"
	// Burmese Kyat (MMK).
	CurrencyCodeMmk CurrencyCode = "MMK"
	// Cambodian Riel.
	CurrencyCodeKhr CurrencyCode = "KHR"
	// Cape Verdean escudo (CVE).
	CurrencyCodeCve CurrencyCode = "CVE"
	// Cayman Dollars (KYD).
	CurrencyCodeKyd CurrencyCode = "KYD"
	// Central African CFA Franc (XAF).
	CurrencyCodeXaf CurrencyCode = "XAF"
	// Chilean Peso (CLP).
	CurrencyCodeClp CurrencyCode = "CLP"
	// Chinese Yuan Renminbi (CNY).
	CurrencyCodeCny CurrencyCode = "CNY"
	// Colombian Peso (COP).
	CurrencyCodeCop CurrencyCode = "COP"
	// Comorian Franc (KMF).
	CurrencyCodeKmf CurrencyCode = "KMF"
	// Congolese franc (CDF).
	CurrencyCodeCdf CurrencyCode = "CDF"
	// Costa Rican Colones (CRC).
	CurrencyCodeCrc CurrencyCode = "CRC"
	// Croatian Kuna (HRK).
	CurrencyCodeHrk CurrencyCode = "HRK"
	// Czech Koruny (CZK).
	CurrencyCodeCzk CurrencyCode = "CZK"
	// Danish Kroner (DKK).
	CurrencyCodeDkk CurrencyCode = "DKK"
	// Dominican Peso (DOP).
	CurrencyCodeDop CurrencyCode = "DOP"
	// East Caribbean Dollar (XCD).
	CurrencyCodeXcd CurrencyCode = "XCD"
	// Egyptian Pound (EGP).
	CurrencyCodeEgp CurrencyCode = "EGP"
	// Ethiopian Birr (ETB).
	CurrencyCodeEtb CurrencyCode = "ETB"
	// CFP Franc (XPF).
	CurrencyCodeXpf CurrencyCode = "XPF"
	// Fijian Dollars (FJD).
	CurrencyCodeFjd CurrencyCode = "FJD"
	// Gambian Dalasi (GMD).
	CurrencyCodeGmd CurrencyCode = "GMD"
	// Ghanaian Cedi (GHS).
	CurrencyCodeGhs CurrencyCode = "GHS"
	// Guatemalan Quetzal (GTQ).
	CurrencyCodeGtq CurrencyCode = "GTQ"
	// Guyanese Dollar (GYD).
	CurrencyCodeGyd CurrencyCode = "GYD"
	// Georgian Lari (GEL).
	CurrencyCodeGel CurrencyCode = "GEL"
	// Haitian Gourde (HTG).
	CurrencyCodeHtg CurrencyCode = "HTG"
	// Honduran Lempira (HNL).
	CurrencyCodeHnl CurrencyCode = "HNL"
	// Hong Kong Dollars (HKD).
	CurrencyCodeHkd CurrencyCode = "HKD"
	// Hungarian Forint (HUF).
	CurrencyCodeHuf CurrencyCode = "HUF"
	// Icelandic Kronur (ISK).
	CurrencyCodeIsk CurrencyCode = "ISK"
	// Indian Rupees (INR).
	CurrencyCodeInr CurrencyCode = "INR"
	// Indonesian Rupiah (IDR).
	CurrencyCodeIDR CurrencyCode = "IDR"
	// Israeli New Shekel (NIS).
	CurrencyCodeIls CurrencyCode = "ILS"
	// Iraqi Dinar (IQD).
	CurrencyCodeIqd CurrencyCode = "IQD"
	// Jamaican Dollars (JMD).
	CurrencyCodeJmd CurrencyCode = "JMD"
	// Japanese Yen (JPY).
	CurrencyCodeJpy CurrencyCode = "JPY"
	// Jersey Pound.
	CurrencyCodeJep CurrencyCode = "JEP"
	// Jordanian Dinar (JOD).
	CurrencyCodeJod CurrencyCode = "JOD"
	// Kazakhstani Tenge (KZT).
	CurrencyCodeKzt CurrencyCode = "KZT"
	// Kenyan Shilling (KES).
	CurrencyCodeKes CurrencyCode = "KES"
	// Kuwaiti Dinar (KWD).
	CurrencyCodeKwd CurrencyCode = "KWD"
	// Kyrgyzstani Som (KGS).
	CurrencyCodeKgs CurrencyCode = "KGS"
	// Laotian Kip (LAK).
	CurrencyCodeLak CurrencyCode = "LAK"
	// Latvian Lati (LVL).
	CurrencyCodeLvl CurrencyCode = "LVL"
	// Lebanese Pounds (LBP).
	CurrencyCodeLbp CurrencyCode = "LBP"
	// Lesotho Loti (LSL).
	CurrencyCodeLsl CurrencyCode = "LSL"
	// Liberian Dollar (LRD).
	CurrencyCodeLrd CurrencyCode = "LRD"
	// Lithuanian Litai (LTL).
	CurrencyCodeLtl CurrencyCode = "LTL"
	// Malagasy Ariary (MGA).
	CurrencyCodeMga CurrencyCode = "MGA"
	// Macedonia Denar (MKD).
	CurrencyCodeMkd CurrencyCode = "MKD"
	// Macanese Pataca (MOP).
	CurrencyCodeMop CurrencyCode = "MOP"
	// Malawian Kwacha (MWK).
	CurrencyCodeMwk CurrencyCode = "MWK"
	// Maldivian Rufiyaa (MVR).
	CurrencyCodeMvr CurrencyCode = "MVR"
	// Mexican Pesos (MXN).
	CurrencyCodeMxn CurrencyCode = "MXN"
	// Malaysian Ringgits (MYR).
	CurrencyCodeMyr CurrencyCode = "MYR"
	// Mauritian Rupee (MUR).
	CurrencyCodeMur CurrencyCode = "MUR"
	// Moldovan Leu (MDL).
	CurrencyCodeMdl CurrencyCode = "MDL"
	// Moroccan Dirham.
	CurrencyCodeMad CurrencyCode = "MAD"
	// Mongolian Tugrik.
	CurrencyCodeMnt CurrencyCode = "MNT"
	// Mozambican Metical.
	CurrencyCodeMzn CurrencyCode = "MZN"
	// Namibian Dollar.
	CurrencyCodeNad CurrencyCode = "NAD"
	// Nepalese Rupee (NPR).
	CurrencyCodeNpr CurrencyCode = "NPR"
	// Netherlands Antillean Guilder.
	CurrencyCodeAng CurrencyCode = "ANG"
	// New Zealand Dollars (NZD).
	CurrencyCodeNzd CurrencyCode = "NZD"
	// Nicaraguan Córdoba (NIO).
	CurrencyCodeNio CurrencyCode = "NIO"
	// Nigerian Naira (NGN).
	CurrencyCodeNgn CurrencyCode = "NGN"
	// Norwegian Kroner (NOK).
	CurrencyCodeNok CurrencyCode = "NOK"
	// Omani Rial (OMR).
	CurrencyCodeOmr CurrencyCode = "OMR"
	// Panamian Balboa (PAB).
	CurrencyCodePab CurrencyCode = "PAB"
	// Pakistani Rupee (PKR).
	CurrencyCodePkr CurrencyCode = "PKR"
	// Papua New Guinean Kina (PGK).
	CurrencyCodePgk CurrencyCode = "PGK"
	// Paraguayan Guarani (PYG).
	CurrencyCodePyg CurrencyCode = "PYG"
	// Peruvian Nuevo Sol (PEN).
	CurrencyCodePen CurrencyCode = "PEN"
	// Philippine Peso (PHP).
	CurrencyCodePhp CurrencyCode = "PHP"
	// Polish Zlotych (PLN).
	CurrencyCodePln CurrencyCode = "PLN"
	// Qatari Rial (QAR).
	CurrencyCodeQar CurrencyCode = "QAR"
	// Romanian Lei (RON).
	CurrencyCodeRon CurrencyCode = "RON"
	// Russian Rubles (RUB).
	CurrencyCodeRub CurrencyCode = "RUB"
	// Rwandan Franc (RWF).
	CurrencyCodeRwf CurrencyCode = "RWF"
	// Samoan Tala (WST).
	CurrencyCodeWst CurrencyCode = "WST"
	// Saudi Riyal (SAR).
	CurrencyCodeSar CurrencyCode = "SAR"
	// Serbian dinar (RSD).
	CurrencyCodeRsd CurrencyCode = "RSD"
	// Seychellois Rupee (SCR).
	CurrencyCodeScr CurrencyCode = "SCR"
	// Singapore Dollars (SGD).
	CurrencyCodeSgd CurrencyCode = "SGD"
	// Sudanese Pound (SDG).
	CurrencyCodeSdg CurrencyCode = "SDG"
	// Syrian Pound (SYP).
	CurrencyCodeSyp CurrencyCode = "SYP"
	// South African Rand (ZAR).
	CurrencyCodeZar CurrencyCode = "ZAR"
	// South Korean Won (KRW).
	CurrencyCodeKrw CurrencyCode = "KRW"
	// South Sudanese Pound (SSP).
	CurrencyCodeSsp CurrencyCode = "SSP"
	// Solomon Islands Dollar (SBD).
	CurrencyCodeSbd CurrencyCode = "SBD"
	// Sri Lankan Rupees (LKR).
	CurrencyCodeLkr CurrencyCode = "LKR"
	// Surinamese Dollar (SRD).
	CurrencyCodeSrd CurrencyCode = "SRD"
	// Swazi Lilangeni (SZL).
	CurrencyCodeSzl CurrencyCode = "SZL"
	// Swedish Kronor (SEK).
	CurrencyCodeSek CurrencyCode = "SEK"
	// Swiss Francs (CHF).
	CurrencyCodeChf CurrencyCode = "CHF"
	// Taiwan Dollars (TWD).
	CurrencyCodeTwd CurrencyCode = "TWD"
	// Thai baht (THB).
	CurrencyCodeThb CurrencyCode = "THB"
	// Tanzanian Shilling (TZS).
	CurrencyCodeTzs CurrencyCode = "TZS"
	// Trinidad and Tobago Dollars (TTD).
	CurrencyCodeTtd CurrencyCode = "TTD"
	// Tunisian Dinar (TND).
	CurrencyCodeTnd CurrencyCode = "TND"
	// Turkish Lira (TRY).
	CurrencyCodeTry CurrencyCode = "TRY"
	// Turkmenistani Manat (TMT).
	CurrencyCodeTmt CurrencyCode = "TMT"
	// Ugandan Shilling (UGX).
	CurrencyCodeUgx CurrencyCode = "UGX"
	// Ukrainian Hryvnia (UAH).
	CurrencyCodeUah CurrencyCode = "UAH"
	// United Arab Emirates Dirham (AED).
	CurrencyCodeAed CurrencyCode = "AED"
	// Uruguayan Pesos (UYU).
	CurrencyCodeUyu CurrencyCode = "UYU"
	// Uzbekistan som (UZS).
	CurrencyCodeUzs CurrencyCode = "UZS"
	// Vanuatu Vatu (VUV).
	CurrencyCodeVuv CurrencyCode = "VUV"
	// Vietnamese đồng (VND).
	CurrencyCodeVnd CurrencyCode = "VND"
	// West African CFA franc (XOF).
	CurrencyCodeXof CurrencyCode = "XOF"
	// Yemeni Rial (YER).
	CurrencyCodeYer CurrencyCode = "YER"
	// Zambian Kwacha (ZMW).
	CurrencyCodeZmw CurrencyCode = "ZMW"
	// Belarusian Ruble (BYN).
	CurrencyCodeByn CurrencyCode = "BYN"
	// Belarusian Ruble (BYR).
	CurrencyCodeByr CurrencyCode = "BYR"
	// Djiboutian Franc (DJF).
	CurrencyCodeDjf CurrencyCode = "DJF"
	// Eritrean Nakfa (ERN).
	CurrencyCodeErn CurrencyCode = "ERN"
	// Falkland Islands Pounds (FKP).
	CurrencyCodeFkp CurrencyCode = "FKP"
	// Gibraltar Pounds (GIP).
	CurrencyCodeGip CurrencyCode = "GIP"
	// Guinean Franc (GNF).
	CurrencyCodeGnf CurrencyCode = "GNF"
	// Iranian Rial (IRR).
	CurrencyCodeIrr CurrencyCode = "IRR"
	// Kiribati Dollar (KID).
	CurrencyCodeKid CurrencyCode = "KID"
	// Libyan Dinar (LYD).
	CurrencyCodeLyd CurrencyCode = "LYD"
	// Mauritanian Ouguiya (MRU).
	CurrencyCodeMru CurrencyCode = "MRU"
	// Sierra Leonean Leone (SLL).
	CurrencyCodeSll CurrencyCode = "SLL"
	// Saint Helena Pounds (SHP).
	CurrencyCodeShp CurrencyCode = "SHP"
	// Somali Shilling (SOS).
	CurrencyCodeSos CurrencyCode = "SOS"
	// Sao Tome And Principe Dobra (STD).
	CurrencyCodeStd CurrencyCode = "STD"
	// Sao Tome And Principe Dobra (STN).
	CurrencyCodeStn CurrencyCode = "STN"
	// Tajikistani Somoni (TJS).
	CurrencyCodeTjs CurrencyCode = "TJS"
	// Tongan Pa'anga (TOP).
	CurrencyCodeTop CurrencyCode = "TOP"
	// Venezuelan Bolivares (VED).
	CurrencyCodeVed CurrencyCode = "VED"
	// Venezuelan Bolivares (VEF).
	CurrencyCodeVef CurrencyCode = "VEF"
	// Venezuelan Bolivares (VES).
	CurrencyCodeVes CurrencyCode = "VES"
	// Unrecognized currency.
	CurrencyCodeXxx CurrencyCode = "XXX"
)

var AllCurrencyCode = []CurrencyCode{
	CurrencyCodeUsd,
	CurrencyCodeEur,
	CurrencyCodeGbp,
	CurrencyCodeCad,
	CurrencyCodeAfn,
	CurrencyCodeAll,
	CurrencyCodeDzd,
	CurrencyCodeAoa,
	CurrencyCodeArs,
	CurrencyCodeAmd,
	CurrencyCodeAwg,
	CurrencyCodeAud,
	CurrencyCodeBbd,
	CurrencyCodeAzn,
	CurrencyCodeBdt,
	CurrencyCodeBsd,
	CurrencyCodeBhd,
	CurrencyCodeBif,
	CurrencyCodeBzd,
	CurrencyCodeBmd,
	CurrencyCodeBtn,
	CurrencyCodeBam,
	CurrencyCodeBrl,
	CurrencyCodeBob,
	CurrencyCodeBwp,
	CurrencyCodeBnd,
	CurrencyCodeBgn,
	CurrencyCodeMmk,
	CurrencyCodeKhr,
	CurrencyCodeCve,
	CurrencyCodeKyd,
	CurrencyCodeXaf,
	CurrencyCodeClp,
	CurrencyCodeCny,
	CurrencyCodeCop,
	CurrencyCodeKmf,
	CurrencyCodeCdf,
	CurrencyCodeCrc,
	CurrencyCodeHrk,
	CurrencyCodeCzk,
	CurrencyCodeDkk,
	CurrencyCodeDop,
	CurrencyCodeXcd,
	CurrencyCodeEgp,
	CurrencyCodeEtb,
	CurrencyCodeXpf,
	CurrencyCodeFjd,
	CurrencyCodeGmd,
	CurrencyCodeGhs,
	CurrencyCodeGtq,
	CurrencyCodeGyd,
	CurrencyCodeGel,
	CurrencyCodeHtg,
	CurrencyCodeHnl,
	CurrencyCodeHkd,
	CurrencyCodeHuf,
	CurrencyCodeIsk,
	CurrencyCodeInr,
	CurrencyCodeIDR,
	CurrencyCodeIls,
	CurrencyCodeIqd,
	CurrencyCodeJmd,
	CurrencyCodeJpy,
	CurrencyCodeJep,
	CurrencyCodeJod,
	CurrencyCodeKzt,
	CurrencyCodeKes,
	CurrencyCodeKwd,
	CurrencyCodeKgs,
	CurrencyCodeLak,
	CurrencyCodeLvl,
	CurrencyCodeLbp,
	CurrencyCodeLsl,
	CurrencyCodeLrd,
	CurrencyCodeLtl,
	CurrencyCodeMga,
	CurrencyCodeMkd,
	CurrencyCodeMop,
	CurrencyCodeMwk,
	CurrencyCodeMvr,
	CurrencyCodeMxn,
	CurrencyCodeMyr,
	CurrencyCodeMur,
	CurrencyCodeMdl,
	CurrencyCodeMad,
	CurrencyCodeMnt,
	CurrencyCodeMzn,
	CurrencyCodeNad,
	CurrencyCodeNpr,
	CurrencyCodeAng,
	CurrencyCodeNzd,
	CurrencyCodeNio,
	CurrencyCodeNgn,
	CurrencyCodeNok,
	CurrencyCodeOmr,
	CurrencyCodePab,
	CurrencyCodePkr,
	CurrencyCodePgk,
	CurrencyCodePyg,
	CurrencyCodePen,
	CurrencyCodePhp,
	CurrencyCodePln,
	CurrencyCodeQar,
	CurrencyCodeRon,
	CurrencyCodeRub,
	CurrencyCodeRwf,
	CurrencyCodeWst,
	CurrencyCodeSar,
	CurrencyCodeRsd,
	CurrencyCodeScr,
	CurrencyCodeSgd,
	CurrencyCodeSdg,
	CurrencyCodeSyp,
	CurrencyCodeZar,
	CurrencyCodeKrw,
	CurrencyCodeSsp,
	CurrencyCodeSbd,
	CurrencyCodeLkr,
	CurrencyCodeSrd,
	CurrencyCodeSzl,
	CurrencyCodeSek,
	CurrencyCodeChf,
	CurrencyCodeTwd,
	CurrencyCodeThb,
	CurrencyCodeTzs,
	CurrencyCodeTtd,
	CurrencyCodeTnd,
	CurrencyCodeTry,
	CurrencyCodeTmt,
	CurrencyCodeUgx,
	CurrencyCodeUah,
	CurrencyCodeAed,
	CurrencyCodeUyu,
	CurrencyCodeUzs,
	CurrencyCodeVuv,
	CurrencyCodeVnd,
	CurrencyCodeXof,
	CurrencyCodeYer,
	CurrencyCodeZmw,
	CurrencyCodeByn,
	CurrencyCodeByr,
	CurrencyCodeDjf,
	CurrencyCodeErn,
	CurrencyCodeFkp,
	CurrencyCodeGip,
	CurrencyCodeGnf,
	CurrencyCodeIrr,
	CurrencyCodeKid,
	CurrencyCodeLyd,
	CurrencyCodeMru,
	CurrencyCodeSll,
	CurrencyCodeShp,
	CurrencyCodeSos,
	CurrencyCodeStd,
	CurrencyCodeStn,
	CurrencyCodeTjs,
	CurrencyCodeTop,
	CurrencyCodeVed,
	CurrencyCodeVef,
	CurrencyCodeVes,
	CurrencyCodeXxx,
}

func (e CurrencyCode) IsValid() bool {
	switch e {
	case CurrencyCodeUsd, CurrencyCodeEur, CurrencyCodeGbp, CurrencyCodeCad, CurrencyCodeAfn, CurrencyCodeAll, CurrencyCodeDzd, CurrencyCodeAoa, CurrencyCodeArs, CurrencyCodeAmd, CurrencyCodeAwg, CurrencyCodeAud, CurrencyCodeBbd, CurrencyCodeAzn, CurrencyCodeBdt, CurrencyCodeBsd, CurrencyCodeBhd, CurrencyCodeBif, CurrencyCodeBzd, CurrencyCodeBmd, CurrencyCodeBtn, CurrencyCodeBam, CurrencyCodeBrl, CurrencyCodeBob, CurrencyCodeBwp, CurrencyCodeBnd, CurrencyCodeBgn, CurrencyCodeMmk, CurrencyCodeKhr, CurrencyCodeCve, CurrencyCodeKyd, CurrencyCodeXaf, CurrencyCodeClp, CurrencyCodeCny, CurrencyCodeCop, CurrencyCodeKmf, CurrencyCodeCdf, CurrencyCodeCrc, CurrencyCodeHrk, CurrencyCodeCzk, CurrencyCodeDkk, CurrencyCodeDop, CurrencyCodeXcd, CurrencyCodeEgp, CurrencyCodeEtb, CurrencyCodeXpf, CurrencyCodeFjd, CurrencyCodeGmd, CurrencyCodeGhs, CurrencyCodeGtq, CurrencyCodeGyd, CurrencyCodeGel, CurrencyCodeHtg, CurrencyCodeHnl, CurrencyCodeHkd, CurrencyCodeHuf, CurrencyCodeIsk, CurrencyCodeInr, CurrencyCodeIDR, CurrencyCodeIls, CurrencyCodeIqd, CurrencyCodeJmd, CurrencyCodeJpy, CurrencyCodeJep, CurrencyCodeJod, CurrencyCodeKzt, CurrencyCodeKes, CurrencyCodeKwd, CurrencyCodeKgs, CurrencyCodeLak, CurrencyCodeLvl, CurrencyCodeLbp, CurrencyCodeLsl, CurrencyCodeLrd, CurrencyCodeLtl, CurrencyCodeMga, CurrencyCodeMkd, CurrencyCodeMop, CurrencyCodeMwk, CurrencyCodeMvr, CurrencyCodeMxn, CurrencyCodeMyr, CurrencyCodeMur, CurrencyCodeMdl, CurrencyCodeMad, CurrencyCodeMnt, CurrencyCodeMzn, CurrencyCodeNad, CurrencyCodeNpr, CurrencyCodeAng, CurrencyCodeNzd, CurrencyCodeNio, CurrencyCodeNgn, CurrencyCodeNok, CurrencyCodeOmr, CurrencyCodePab, CurrencyCodePkr, CurrencyCodePgk, CurrencyCodePyg, CurrencyCodePen, CurrencyCodePhp, CurrencyCodePln, CurrencyCodeQar, CurrencyCodeRon, CurrencyCodeRub, CurrencyCodeRwf, CurrencyCodeWst, CurrencyCodeSar, CurrencyCodeRsd, CurrencyCodeScr, CurrencyCodeSgd, CurrencyCodeSdg, CurrencyCodeSyp, CurrencyCodeZar, CurrencyCodeKrw, CurrencyCodeSsp, CurrencyCodeSbd, CurrencyCodeLkr, CurrencyCodeSrd, CurrencyCodeSzl, CurrencyCodeSek, CurrencyCodeChf, CurrencyCodeTwd, CurrencyCodeThb, CurrencyCodeTzs, CurrencyCodeTtd, CurrencyCodeTnd, CurrencyCodeTry, CurrencyCodeTmt, CurrencyCodeUgx, CurrencyCodeUah, CurrencyCodeAed, CurrencyCodeUyu, CurrencyCodeUzs, CurrencyCodeVuv, CurrencyCodeVnd, CurrencyCodeXof, CurrencyCodeYer, CurrencyCodeZmw, CurrencyCodeByn, CurrencyCodeByr, CurrencyCodeDjf, CurrencyCodeErn, CurrencyCodeFkp, CurrencyCodeGip, CurrencyCodeGnf, CurrencyCodeIrr, CurrencyCodeKid, CurrencyCodeLyd, CurrencyCodeMru, CurrencyCodeSll, CurrencyCodeShp, CurrencyCodeSos, CurrencyCodeStd, CurrencyCodeStn, CurrencyCodeTjs, CurrencyCodeTop, CurrencyCodeVed, CurrencyCodeVef, CurrencyCodeVes, CurrencyCodeXxx:
		return true
	}
	return false
}

func (e CurrencyCode) String() string {
	return string(e)
}

func (e *CurrencyCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyCode", str)
	}
	return nil
}

func (e CurrencyCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The source that collected the customer's consent to receive marketing materials.
type CustomerConsentCollectedFrom string

const (
	// The customer consent was collected by Shopify.
	//
	CustomerConsentCollectedFromShopify CustomerConsentCollectedFrom = "SHOPIFY"
	// The customer consent was collected outside of Shopify.
	//
	CustomerConsentCollectedFromOther CustomerConsentCollectedFrom = "OTHER"
)

var AllCustomerConsentCollectedFrom = []CustomerConsentCollectedFrom{
	CustomerConsentCollectedFromShopify,
	CustomerConsentCollectedFromOther,
}

func (e CustomerConsentCollectedFrom) IsValid() bool {
	switch e {
	case CustomerConsentCollectedFromShopify, CustomerConsentCollectedFromOther:
		return true
	}
	return false
}

func (e CustomerConsentCollectedFrom) String() string {
	return string(e)
}

func (e *CustomerConsentCollectedFrom) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerConsentCollectedFrom(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerConsentCollectedFrom", str)
	}
	return nil
}

func (e CustomerConsentCollectedFrom) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible marketing states for the customer’s email address.
type CustomerEmailAddressMarketingState string

const (
	// The customer’s email address marketing state is invalid.
	//
	CustomerEmailAddressMarketingStateInvalid CustomerEmailAddressMarketingState = "INVALID"
	// The customer is not subscribed to email marketing.
	//
	CustomerEmailAddressMarketingStateNotSubscribed CustomerEmailAddressMarketingState = "NOT_SUBSCRIBED"
	// The customer is in the process of subscribing to email marketing.
	//
	CustomerEmailAddressMarketingStatePending CustomerEmailAddressMarketingState = "PENDING"
	// The customer is subscribed to email marketing.
	//
	CustomerEmailAddressMarketingStateSubscribed CustomerEmailAddressMarketingState = "SUBSCRIBED"
	// The customer is not subscribed to email marketing but was previously subscribed.
	//
	CustomerEmailAddressMarketingStateUnsubscribed CustomerEmailAddressMarketingState = "UNSUBSCRIBED"
)

var AllCustomerEmailAddressMarketingState = []CustomerEmailAddressMarketingState{
	CustomerEmailAddressMarketingStateInvalid,
	CustomerEmailAddressMarketingStateNotSubscribed,
	CustomerEmailAddressMarketingStatePending,
	CustomerEmailAddressMarketingStateSubscribed,
	CustomerEmailAddressMarketingStateUnsubscribed,
}

func (e CustomerEmailAddressMarketingState) IsValid() bool {
	switch e {
	case CustomerEmailAddressMarketingStateInvalid, CustomerEmailAddressMarketingStateNotSubscribed, CustomerEmailAddressMarketingStatePending, CustomerEmailAddressMarketingStateSubscribed, CustomerEmailAddressMarketingStateUnsubscribed:
		return true
	}
	return false
}

func (e CustomerEmailAddressMarketingState) String() string {
	return string(e)
}

func (e *CustomerEmailAddressMarketingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailAddressMarketingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailAddressMarketingState", str)
	}
	return nil
}

func (e CustomerEmailAddressMarketingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different levels related to whether a customer has opted in to having their opened emails tracked.
type CustomerEmailAddressOpenTrackingLevel string

const (
	// The customer has not specified whether they want to opt in or out of having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelUnknown CustomerEmailAddressOpenTrackingLevel = "UNKNOWN"
	// The customer has opted in to having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelOptedIn CustomerEmailAddressOpenTrackingLevel = "OPTED_IN"
	// The customer has opted out of having their open emails tracked.
	//
	CustomerEmailAddressOpenTrackingLevelOptedOut CustomerEmailAddressOpenTrackingLevel = "OPTED_OUT"
)

var AllCustomerEmailAddressOpenTrackingLevel = []CustomerEmailAddressOpenTrackingLevel{
	CustomerEmailAddressOpenTrackingLevelUnknown,
	CustomerEmailAddressOpenTrackingLevelOptedIn,
	CustomerEmailAddressOpenTrackingLevelOptedOut,
}

func (e CustomerEmailAddressOpenTrackingLevel) IsValid() bool {
	switch e {
	case CustomerEmailAddressOpenTrackingLevelUnknown, CustomerEmailAddressOpenTrackingLevelOptedIn, CustomerEmailAddressOpenTrackingLevelOptedOut:
		return true
	}
	return false
}

func (e CustomerEmailAddressOpenTrackingLevel) String() string {
	return string(e)
}

func (e *CustomerEmailAddressOpenTrackingLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailAddressOpenTrackingLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailAddressOpenTrackingLevel", str)
	}
	return nil
}

func (e CustomerEmailAddressOpenTrackingLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`.
type CustomerEmailMarketingConsentUpdateUserErrorCode string

const (
	// The input value is invalid.
	CustomerEmailMarketingConsentUpdateUserErrorCodeInvalid CustomerEmailMarketingConsentUpdateUserErrorCode = "INVALID"
	// The input value isn't included in the list.
	CustomerEmailMarketingConsentUpdateUserErrorCodeInclusion CustomerEmailMarketingConsentUpdateUserErrorCode = "INCLUSION"
	// Unexpected internal error happened.
	CustomerEmailMarketingConsentUpdateUserErrorCodeInternalError CustomerEmailMarketingConsentUpdateUserErrorCode = "INTERNAL_ERROR"
	// Missing a required argument.
	CustomerEmailMarketingConsentUpdateUserErrorCodeMissingArgument CustomerEmailMarketingConsentUpdateUserErrorCode = "MISSING_ARGUMENT"
)

var AllCustomerEmailMarketingConsentUpdateUserErrorCode = []CustomerEmailMarketingConsentUpdateUserErrorCode{
	CustomerEmailMarketingConsentUpdateUserErrorCodeInvalid,
	CustomerEmailMarketingConsentUpdateUserErrorCodeInclusion,
	CustomerEmailMarketingConsentUpdateUserErrorCodeInternalError,
	CustomerEmailMarketingConsentUpdateUserErrorCodeMissingArgument,
}

func (e CustomerEmailMarketingConsentUpdateUserErrorCode) IsValid() bool {
	switch e {
	case CustomerEmailMarketingConsentUpdateUserErrorCodeInvalid, CustomerEmailMarketingConsentUpdateUserErrorCodeInclusion, CustomerEmailMarketingConsentUpdateUserErrorCodeInternalError, CustomerEmailMarketingConsentUpdateUserErrorCodeMissingArgument:
		return true
	}
	return false
}

func (e CustomerEmailMarketingConsentUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerEmailMarketingConsentUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailMarketingConsentUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailMarketingConsentUpdateUserErrorCode", str)
	}
	return nil
}

func (e CustomerEmailMarketingConsentUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible email marketing states for a customer.
type CustomerEmailMarketingState string

const (
	// The customer isn't subscribed to email marketing.
	//
	CustomerEmailMarketingStateNotSubscribed CustomerEmailMarketingState = "NOT_SUBSCRIBED"
	// The customer is in the process of subscribing to email marketing.
	//
	CustomerEmailMarketingStatePending CustomerEmailMarketingState = "PENDING"
	// The customer is subscribed to email marketing.
	//
	CustomerEmailMarketingStateSubscribed CustomerEmailMarketingState = "SUBSCRIBED"
	// The customer isn't currently subscribed to email marketing but was previously subscribed.
	//
	CustomerEmailMarketingStateUnsubscribed CustomerEmailMarketingState = "UNSUBSCRIBED"
	// The customer's personal data is erased. This value is internally-set and read-only.
	//
	CustomerEmailMarketingStateRedacted CustomerEmailMarketingState = "REDACTED"
	// The customer’s email address marketing state is invalid.
	//
	CustomerEmailMarketingStateInvalid CustomerEmailMarketingState = "INVALID"
)

var AllCustomerEmailMarketingState = []CustomerEmailMarketingState{
	CustomerEmailMarketingStateNotSubscribed,
	CustomerEmailMarketingStatePending,
	CustomerEmailMarketingStateSubscribed,
	CustomerEmailMarketingStateUnsubscribed,
	CustomerEmailMarketingStateRedacted,
	CustomerEmailMarketingStateInvalid,
}

func (e CustomerEmailMarketingState) IsValid() bool {
	switch e {
	case CustomerEmailMarketingStateNotSubscribed, CustomerEmailMarketingStatePending, CustomerEmailMarketingStateSubscribed, CustomerEmailMarketingStateUnsubscribed, CustomerEmailMarketingStateRedacted, CustomerEmailMarketingStateInvalid:
		return true
	}
	return false
}

func (e CustomerEmailMarketingState) String() string {
	return string(e)
}

func (e *CustomerEmailMarketingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerEmailMarketingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerEmailMarketingState", str)
	}
	return nil
}

func (e CustomerEmailMarketingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.
//
// The levels are defined by [the M3AAWG best practices guideline
//
//	document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
type CustomerMarketingOptInLevel string

const (
	// After providing their information, the customer receives marketing information without any
	// intermediate steps.
	//
	CustomerMarketingOptInLevelSingleOptIn CustomerMarketingOptInLevel = "SINGLE_OPT_IN"
	// After providing their information, the customer receives a confirmation and is required to
	// perform a intermediate step before receiving marketing information.
	//
	CustomerMarketingOptInLevelConfirmedOptIn CustomerMarketingOptInLevel = "CONFIRMED_OPT_IN"
	// The customer receives marketing information but how they were opted in is unknown.
	//
	CustomerMarketingOptInLevelUnknown CustomerMarketingOptInLevel = "UNKNOWN"
)

var AllCustomerMarketingOptInLevel = []CustomerMarketingOptInLevel{
	CustomerMarketingOptInLevelSingleOptIn,
	CustomerMarketingOptInLevelConfirmedOptIn,
	CustomerMarketingOptInLevelUnknown,
}

func (e CustomerMarketingOptInLevel) IsValid() bool {
	switch e {
	case CustomerMarketingOptInLevelSingleOptIn, CustomerMarketingOptInLevelConfirmedOptIn, CustomerMarketingOptInLevelUnknown:
		return true
	}
	return false
}

func (e CustomerMarketingOptInLevel) String() string {
	return string(e)
}

func (e *CustomerMarketingOptInLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMarketingOptInLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMarketingOptInLevel", str)
	}
	return nil
}

func (e CustomerMarketingOptInLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerMergeUserError`.
type CustomerMergeErrorCode string

const (
	// An internal error occurred.
	CustomerMergeErrorCodeInternalError CustomerMergeErrorCode = "INTERNAL_ERROR"
	// The customer cannot be merged.
	CustomerMergeErrorCodeInvalidCustomer CustomerMergeErrorCode = "INVALID_CUSTOMER"
	// The customer ID is invalid.
	CustomerMergeErrorCodeInvalidCustomerID CustomerMergeErrorCode = "INVALID_CUSTOMER_ID"
	// The customer cannot be merged because it has associated gift cards.
	CustomerMergeErrorCodeCustomerHasGiftCards CustomerMergeErrorCode = "CUSTOMER_HAS_GIFT_CARDS"
	// The customer is missing the attribute requested for override.
	CustomerMergeErrorCodeMissingOverrideAttribute CustomerMergeErrorCode = "MISSING_OVERRIDE_ATTRIBUTE"
	// The override attribute is invalid.
	CustomerMergeErrorCodeOverrideAttributeInvalid CustomerMergeErrorCode = "OVERRIDE_ATTRIBUTE_INVALID"
)

var AllCustomerMergeErrorCode = []CustomerMergeErrorCode{
	CustomerMergeErrorCodeInternalError,
	CustomerMergeErrorCodeInvalidCustomer,
	CustomerMergeErrorCodeInvalidCustomerID,
	CustomerMergeErrorCodeCustomerHasGiftCards,
	CustomerMergeErrorCodeMissingOverrideAttribute,
	CustomerMergeErrorCodeOverrideAttributeInvalid,
}

func (e CustomerMergeErrorCode) IsValid() bool {
	switch e {
	case CustomerMergeErrorCodeInternalError, CustomerMergeErrorCodeInvalidCustomer, CustomerMergeErrorCodeInvalidCustomerID, CustomerMergeErrorCodeCustomerHasGiftCards, CustomerMergeErrorCodeMissingOverrideAttribute, CustomerMergeErrorCodeOverrideAttributeInvalid:
		return true
	}
	return false
}

func (e CustomerMergeErrorCode) String() string {
	return string(e)
}

func (e *CustomerMergeErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMergeErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMergeErrorCode", str)
	}
	return nil
}

func (e CustomerMergeErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The types of the hard blockers preventing a customer from being merged to another customer.
type CustomerMergeErrorFieldType string

const (
	// The customer does not exist.
	CustomerMergeErrorFieldTypeDeletedAt CustomerMergeErrorFieldType = "DELETED_AT"
	// The customer has a pending or completed redaction.
	CustomerMergeErrorFieldTypeRedactedAt CustomerMergeErrorFieldType = "REDACTED_AT"
	// The customer has a subscription history.
	CustomerMergeErrorFieldTypeSubscriptions CustomerMergeErrorFieldType = "SUBSCRIPTIONS"
	// The customer has a merge in progress.
	CustomerMergeErrorFieldTypeMergeInProgress CustomerMergeErrorFieldType = "MERGE_IN_PROGRESS"
	// The customer has gift cards.
	CustomerMergeErrorFieldTypeGiftCards CustomerMergeErrorFieldType = "GIFT_CARDS"
	// The customer is a company contact.
	CustomerMergeErrorFieldTypeCompanyContact CustomerMergeErrorFieldType = "COMPANY_CONTACT"
	// The customer has payment methods.
	CustomerMergeErrorFieldTypeCustomerPaymentMethods CustomerMergeErrorFieldType = "CUSTOMER_PAYMENT_METHODS"
	// The customer has a pending data request.
	CustomerMergeErrorFieldTypePendingDataRequest CustomerMergeErrorFieldType = "PENDING_DATA_REQUEST"
	// The customer has a multipass identifier.
	CustomerMergeErrorFieldTypeMultipassIDEntifier CustomerMergeErrorFieldType = "MULTIPASS_IDENTIFIER"
)

var AllCustomerMergeErrorFieldType = []CustomerMergeErrorFieldType{
	CustomerMergeErrorFieldTypeDeletedAt,
	CustomerMergeErrorFieldTypeRedactedAt,
	CustomerMergeErrorFieldTypeSubscriptions,
	CustomerMergeErrorFieldTypeMergeInProgress,
	CustomerMergeErrorFieldTypeGiftCards,
	CustomerMergeErrorFieldTypeCompanyContact,
	CustomerMergeErrorFieldTypeCustomerPaymentMethods,
	CustomerMergeErrorFieldTypePendingDataRequest,
	CustomerMergeErrorFieldTypeMultipassIDEntifier,
}

func (e CustomerMergeErrorFieldType) IsValid() bool {
	switch e {
	case CustomerMergeErrorFieldTypeDeletedAt, CustomerMergeErrorFieldTypeRedactedAt, CustomerMergeErrorFieldTypeSubscriptions, CustomerMergeErrorFieldTypeMergeInProgress, CustomerMergeErrorFieldTypeGiftCards, CustomerMergeErrorFieldTypeCompanyContact, CustomerMergeErrorFieldTypeCustomerPaymentMethods, CustomerMergeErrorFieldTypePendingDataRequest, CustomerMergeErrorFieldTypeMultipassIDEntifier:
		return true
	}
	return false
}

func (e CustomerMergeErrorFieldType) String() string {
	return string(e)
}

func (e *CustomerMergeErrorFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMergeErrorFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMergeErrorFieldType", str)
	}
	return nil
}

func (e CustomerMergeErrorFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the customer merge request.
type CustomerMergeRequestStatus string

const (
	// The customer merge request has been requested.
	//
	CustomerMergeRequestStatusRequested CustomerMergeRequestStatus = "REQUESTED"
	// The customer merge request is currently in progress.
	//
	CustomerMergeRequestStatusInProgress CustomerMergeRequestStatus = "IN_PROGRESS"
	// The customer merge request has been completed.
	//
	CustomerMergeRequestStatusCompleted CustomerMergeRequestStatus = "COMPLETED"
	// The customer merge request has failed.
	//
	CustomerMergeRequestStatusFailed CustomerMergeRequestStatus = "FAILED"
)

var AllCustomerMergeRequestStatus = []CustomerMergeRequestStatus{
	CustomerMergeRequestStatusRequested,
	CustomerMergeRequestStatusInProgress,
	CustomerMergeRequestStatusCompleted,
	CustomerMergeRequestStatusFailed,
}

func (e CustomerMergeRequestStatus) IsValid() bool {
	switch e {
	case CustomerMergeRequestStatusRequested, CustomerMergeRequestStatusInProgress, CustomerMergeRequestStatusCompleted, CustomerMergeRequestStatusFailed:
		return true
	}
	return false
}

func (e CustomerMergeRequestStatus) String() string {
	return string(e)
}

func (e *CustomerMergeRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMergeRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMergeRequestStatus", str)
	}
	return nil
}

func (e CustomerMergeRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodCreateFromDuplicationDataUserError`.
type CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode string

const (
	// Too many requests.
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeTooManyRequests CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode = "TOO_MANY_REQUESTS"
	// Customer doesn't exist.
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeCustomerDoesNotExist CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode = "CUSTOMER_DOES_NOT_EXIST"
	// Invalid encrypted duplication data.
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeInvalidEncryptedDuplicationData CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode = "INVALID_ENCRYPTED_DUPLICATION_DATA"
)

var AllCustomerPaymentMethodCreateFromDuplicationDataUserErrorCode = []CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode{
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeTooManyRequests,
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeCustomerDoesNotExist,
	CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeInvalidEncryptedDuplicationData,
}

func (e CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeTooManyRequests, CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeCustomerDoesNotExist, CustomerPaymentMethodCreateFromDuplicationDataUserErrorCodeInvalidEncryptedDuplicationData:
		return true
	}
	return false
}

func (e CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodGetDuplicationDataUserError`.
type CustomerPaymentMethodGetDuplicationDataUserErrorCode string

const (
	// Payment method doesn't exist.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodePaymentMethodDoesNotExist CustomerPaymentMethodGetDuplicationDataUserErrorCode = "PAYMENT_METHOD_DOES_NOT_EXIST"
	// Invalid payment instrument.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidInstrument CustomerPaymentMethodGetDuplicationDataUserErrorCode = "INVALID_INSTRUMENT"
	// Too many requests.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeTooManyRequests CustomerPaymentMethodGetDuplicationDataUserErrorCode = "TOO_MANY_REQUESTS"
	// Customer doesn't exist.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeCustomerDoesNotExist CustomerPaymentMethodGetDuplicationDataUserErrorCode = "CUSTOMER_DOES_NOT_EXIST"
	// Target shop cannot be the same as the source.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeSameShop CustomerPaymentMethodGetDuplicationDataUserErrorCode = "SAME_SHOP"
	// Must be targeted to another shop in the same organization.
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidOrganizationShop CustomerPaymentMethodGetDuplicationDataUserErrorCode = "INVALID_ORGANIZATION_SHOP"
)

var AllCustomerPaymentMethodGetDuplicationDataUserErrorCode = []CustomerPaymentMethodGetDuplicationDataUserErrorCode{
	CustomerPaymentMethodGetDuplicationDataUserErrorCodePaymentMethodDoesNotExist,
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidInstrument,
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeTooManyRequests,
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeCustomerDoesNotExist,
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeSameShop,
	CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidOrganizationShop,
}

func (e CustomerPaymentMethodGetDuplicationDataUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodGetDuplicationDataUserErrorCodePaymentMethodDoesNotExist, CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidInstrument, CustomerPaymentMethodGetDuplicationDataUserErrorCodeTooManyRequests, CustomerPaymentMethodGetDuplicationDataUserErrorCodeCustomerDoesNotExist, CustomerPaymentMethodGetDuplicationDataUserErrorCodeSameShop, CustomerPaymentMethodGetDuplicationDataUserErrorCodeInvalidOrganizationShop:
		return true
	}
	return false
}

func (e CustomerPaymentMethodGetDuplicationDataUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodGetDuplicationDataUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodGetDuplicationDataUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodGetDuplicationDataUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodGetDuplicationDataUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
type CustomerPaymentMethodGetUpdateURLUserErrorCode string

const (
	// Payment method doesn't exist.
	CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist CustomerPaymentMethodGetUpdateURLUserErrorCode = "PAYMENT_METHOD_DOES_NOT_EXIST"
	// Invalid payment instrument.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument CustomerPaymentMethodGetUpdateURLUserErrorCode = "INVALID_INSTRUMENT"
	// Too many requests.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests CustomerPaymentMethodGetUpdateURLUserErrorCode = "TOO_MANY_REQUESTS"
	// Customer doesn't exist.
	CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist CustomerPaymentMethodGetUpdateURLUserErrorCode = "CUSTOMER_DOES_NOT_EXIST"
)

var AllCustomerPaymentMethodGetUpdateURLUserErrorCode = []CustomerPaymentMethodGetUpdateURLUserErrorCode{
	CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests,
	CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist,
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodGetUpdateURLUserErrorCodePaymentMethodDoesNotExist, CustomerPaymentMethodGetUpdateURLUserErrorCodeInvalidInstrument, CustomerPaymentMethodGetUpdateURLUserErrorCodeTooManyRequests, CustomerPaymentMethodGetUpdateURLUserErrorCodeCustomerDoesNotExist:
		return true
	}
	return false
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodGetUpdateURLUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodGetUpdateURLUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodGetUpdateUrlUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodGetUpdateURLUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
type CustomerPaymentMethodRemoteUserErrorCode string

const (
	// The input value is invalid.
	CustomerPaymentMethodRemoteUserErrorCodeInvalid CustomerPaymentMethodRemoteUserErrorCode = "INVALID"
	// The input value needs to be blank.
	CustomerPaymentMethodRemoteUserErrorCodePresent CustomerPaymentMethodRemoteUserErrorCode = "PRESENT"
	// The input value is already taken.
	CustomerPaymentMethodRemoteUserErrorCodeTaken CustomerPaymentMethodRemoteUserErrorCode = "TAKEN"
	// Exactly one remote reference is required.
	CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired CustomerPaymentMethodRemoteUserErrorCode = "EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED"
	// Authorize.net is not enabled for subscriptions.
	CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions CustomerPaymentMethodRemoteUserErrorCode = "AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS"
	// Braintree is not enabled for subscriptions.
	CustomerPaymentMethodRemoteUserErrorCodeBraintreeNotEnabledForSubscriptions CustomerPaymentMethodRemoteUserErrorCode = "BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS"
)

var AllCustomerPaymentMethodRemoteUserErrorCode = []CustomerPaymentMethodRemoteUserErrorCode{
	CustomerPaymentMethodRemoteUserErrorCodeInvalid,
	CustomerPaymentMethodRemoteUserErrorCodePresent,
	CustomerPaymentMethodRemoteUserErrorCodeTaken,
	CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired,
	CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions,
	CustomerPaymentMethodRemoteUserErrorCodeBraintreeNotEnabledForSubscriptions,
}

func (e CustomerPaymentMethodRemoteUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodRemoteUserErrorCodeInvalid, CustomerPaymentMethodRemoteUserErrorCodePresent, CustomerPaymentMethodRemoteUserErrorCodeTaken, CustomerPaymentMethodRemoteUserErrorCodeExactlyOneRemoteReferenceRequired, CustomerPaymentMethodRemoteUserErrorCodeAuthorizeNetNotEnabledForSubscriptions, CustomerPaymentMethodRemoteUserErrorCodeBraintreeNotEnabledForSubscriptions:
		return true
	}
	return false
}

func (e CustomerPaymentMethodRemoteUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodRemoteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodRemoteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodRemoteUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodRemoteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The revocation reason types for a customer payment method.
type CustomerPaymentMethodRevocationReason string

const (
	// The Authorize.net payment gateway is not enabled.
	CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled CustomerPaymentMethodRevocationReason = "AUTHORIZE_NET_GATEWAY_NOT_ENABLED"
	// Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
	CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod CustomerPaymentMethodRevocationReason = "AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD"
	// The credit card failed to update.
	CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard CustomerPaymentMethodRevocationReason = "FAILED_TO_UPDATE_CREDIT_CARD"
	// Failed to contact the Stripe API.
	CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError CustomerPaymentMethodRevocationReason = "STRIPE_API_AUTHENTICATION_ERROR"
	// Invalid request. Failed to retrieve payment method from Stripe.
	CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError CustomerPaymentMethodRevocationReason = "STRIPE_API_INVALID_REQUEST_ERROR"
	// The Stripe payment gateway is not enabled.
	CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled CustomerPaymentMethodRevocationReason = "STRIPE_GATEWAY_NOT_ENABLED"
	// Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
	CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod CustomerPaymentMethodRevocationReason = "STRIPE_RETURNED_NO_PAYMENT_METHOD"
	// The Stripe payment method type should be card.
	CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard CustomerPaymentMethodRevocationReason = "STRIPE_PAYMENT_METHOD_NOT_CARD"
	// Failed to contact Braintree API.
	CustomerPaymentMethodRevocationReasonBraintreeAPIAuthenticationError CustomerPaymentMethodRevocationReason = "BRAINTREE_API_AUTHENTICATION_ERROR"
	// The Braintree payment gateway is not enabled.
	CustomerPaymentMethodRevocationReasonBraintreeGatewayNotEnabled CustomerPaymentMethodRevocationReason = "BRAINTREE_GATEWAY_NOT_ENABLED"
	// Braintree returned no payment methods. Make sure the correct Braintree account is linked.
	CustomerPaymentMethodRevocationReasonBraintreeReturnedNoPaymentMethod CustomerPaymentMethodRevocationReason = "BRAINTREE_RETURNED_NO_PAYMENT_METHOD"
	// The Braintree payment method type should be a credit card or Apple Pay card.
	CustomerPaymentMethodRevocationReasonBraintreePaymentMethodNotCard CustomerPaymentMethodRevocationReason = "BRAINTREE_PAYMENT_METHOD_NOT_CARD"
	// The payment method was manually revoked.
	CustomerPaymentMethodRevocationReasonManuallyRevoked CustomerPaymentMethodRevocationReason = "MANUALLY_REVOKED"
	// The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method.
	CustomerPaymentMethodRevocationReasonMerged CustomerPaymentMethodRevocationReason = "MERGED"
)

var AllCustomerPaymentMethodRevocationReason = []CustomerPaymentMethodRevocationReason{
	CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled,
	CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod,
	CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard,
	CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError,
	CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError,
	CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled,
	CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod,
	CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard,
	CustomerPaymentMethodRevocationReasonBraintreeAPIAuthenticationError,
	CustomerPaymentMethodRevocationReasonBraintreeGatewayNotEnabled,
	CustomerPaymentMethodRevocationReasonBraintreeReturnedNoPaymentMethod,
	CustomerPaymentMethodRevocationReasonBraintreePaymentMethodNotCard,
	CustomerPaymentMethodRevocationReasonManuallyRevoked,
	CustomerPaymentMethodRevocationReasonMerged,
}

func (e CustomerPaymentMethodRevocationReason) IsValid() bool {
	switch e {
	case CustomerPaymentMethodRevocationReasonAuthorizeNetGatewayNotEnabled, CustomerPaymentMethodRevocationReasonAuthorizeNetReturnedNoPaymentMethod, CustomerPaymentMethodRevocationReasonFailedToUpdateCreditCard, CustomerPaymentMethodRevocationReasonStripeAPIAuthenticationError, CustomerPaymentMethodRevocationReasonStripeAPIInvalidRequestError, CustomerPaymentMethodRevocationReasonStripeGatewayNotEnabled, CustomerPaymentMethodRevocationReasonStripeReturnedNoPaymentMethod, CustomerPaymentMethodRevocationReasonStripePaymentMethodNotCard, CustomerPaymentMethodRevocationReasonBraintreeAPIAuthenticationError, CustomerPaymentMethodRevocationReasonBraintreeGatewayNotEnabled, CustomerPaymentMethodRevocationReasonBraintreeReturnedNoPaymentMethod, CustomerPaymentMethodRevocationReasonBraintreePaymentMethodNotCard, CustomerPaymentMethodRevocationReasonManuallyRevoked, CustomerPaymentMethodRevocationReasonMerged:
		return true
	}
	return false
}

func (e CustomerPaymentMethodRevocationReason) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodRevocationReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodRevocationReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodRevocationReason", str)
	}
	return nil
}

func (e CustomerPaymentMethodRevocationReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
type CustomerPaymentMethodUserErrorCode string

const (
	// The input value is invalid.
	CustomerPaymentMethodUserErrorCodeInvalid CustomerPaymentMethodUserErrorCode = "INVALID"
	// The input value needs to be blank.
	CustomerPaymentMethodUserErrorCodePresent CustomerPaymentMethodUserErrorCode = "PRESENT"
	// The input value is already taken.
	CustomerPaymentMethodUserErrorCodeTaken CustomerPaymentMethodUserErrorCode = "TAKEN"
)

var AllCustomerPaymentMethodUserErrorCode = []CustomerPaymentMethodUserErrorCode{
	CustomerPaymentMethodUserErrorCodeInvalid,
	CustomerPaymentMethodUserErrorCodePresent,
	CustomerPaymentMethodUserErrorCodeTaken,
}

func (e CustomerPaymentMethodUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodUserErrorCodeInvalid, CustomerPaymentMethodUserErrorCodePresent, CustomerPaymentMethodUserErrorCodeTaken:
		return true
	}
	return false
}

func (e CustomerPaymentMethodUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid tiers for the predicted spend of a customer with a shop.
type CustomerPredictedSpendTier string

const (
	// The customer's spending is predicted to be in the top spending range for the shop in the following year.
	//
	CustomerPredictedSpendTierHigh CustomerPredictedSpendTier = "HIGH"
	// The customer's spending is predicted to be in the normal spending range for the shop in the following year.
	//
	CustomerPredictedSpendTierMedium CustomerPredictedSpendTier = "MEDIUM"
	// The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
	//
	CustomerPredictedSpendTierLow CustomerPredictedSpendTier = "LOW"
)

var AllCustomerPredictedSpendTier = []CustomerPredictedSpendTier{
	CustomerPredictedSpendTierHigh,
	CustomerPredictedSpendTierMedium,
	CustomerPredictedSpendTierLow,
}

func (e CustomerPredictedSpendTier) IsValid() bool {
	switch e {
	case CustomerPredictedSpendTierHigh, CustomerPredictedSpendTierMedium, CustomerPredictedSpendTierLow:
		return true
	}
	return false
}

func (e CustomerPredictedSpendTier) String() string {
	return string(e)
}

func (e *CustomerPredictedSpendTier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPredictedSpendTier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPredictedSpendTier", str)
	}
	return nil
}

func (e CustomerPredictedSpendTier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible product subscription states for a customer, as defined by the customer's subscription contracts.
type CustomerProductSubscriberStatus string

const (
	// The customer has at least one active subscription contract.
	//
	CustomerProductSubscriberStatusActive CustomerProductSubscriberStatus = "ACTIVE"
	// The customer's last subscription contract was cancelled and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusCancelled CustomerProductSubscriberStatus = "CANCELLED"
	// The customer's last subscription contract expired and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusExpired CustomerProductSubscriberStatus = "EXPIRED"
	// The customer's last subscription contract failed and there are no other active or paused
	// subscription contracts.
	//
	CustomerProductSubscriberStatusFailed CustomerProductSubscriberStatus = "FAILED"
	// The customer has never had a subscription contract.
	//
	CustomerProductSubscriberStatusNeverSubscribed CustomerProductSubscriberStatus = "NEVER_SUBSCRIBED"
	// The customer has at least one paused subscription contract and there are no other active
	// subscription contracts.
	//
	CustomerProductSubscriberStatusPaused CustomerProductSubscriberStatus = "PAUSED"
)

var AllCustomerProductSubscriberStatus = []CustomerProductSubscriberStatus{
	CustomerProductSubscriberStatusActive,
	CustomerProductSubscriberStatusCancelled,
	CustomerProductSubscriberStatusExpired,
	CustomerProductSubscriberStatusFailed,
	CustomerProductSubscriberStatusNeverSubscribed,
	CustomerProductSubscriberStatusPaused,
}

func (e CustomerProductSubscriberStatus) IsValid() bool {
	switch e {
	case CustomerProductSubscriberStatusActive, CustomerProductSubscriberStatusCancelled, CustomerProductSubscriberStatusExpired, CustomerProductSubscriberStatusFailed, CustomerProductSubscriberStatusNeverSubscribed, CustomerProductSubscriberStatusPaused:
		return true
	}
	return false
}

func (e CustomerProductSubscriberStatus) String() string {
	return string(e)
}

func (e *CustomerProductSubscriberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerProductSubscriberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerProductSubscriberStatus", str)
	}
	return nil
}

func (e CustomerProductSubscriberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CustomerSavedSearch query.
type CustomerSavedSearchSortKeys string

const (
	// Sort by the `name` value.
	CustomerSavedSearchSortKeysName CustomerSavedSearchSortKeys = "NAME"
	// Sort by the `id` value.
	CustomerSavedSearchSortKeysID CustomerSavedSearchSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CustomerSavedSearchSortKeysRelevance CustomerSavedSearchSortKeys = "RELEVANCE"
)

var AllCustomerSavedSearchSortKeys = []CustomerSavedSearchSortKeys{
	CustomerSavedSearchSortKeysName,
	CustomerSavedSearchSortKeysID,
	CustomerSavedSearchSortKeysRelevance,
}

func (e CustomerSavedSearchSortKeys) IsValid() bool {
	switch e {
	case CustomerSavedSearchSortKeysName, CustomerSavedSearchSortKeysID, CustomerSavedSearchSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSavedSearchSortKeys) String() string {
	return string(e)
}

func (e *CustomerSavedSearchSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSavedSearchSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSavedSearchSortKeys", str)
	}
	return nil
}

func (e CustomerSavedSearchSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`.
type CustomerSegmentMembersQueryUserErrorCode string

const (
	// The input value is invalid.
	CustomerSegmentMembersQueryUserErrorCodeInvalid CustomerSegmentMembersQueryUserErrorCode = "INVALID"
)

var AllCustomerSegmentMembersQueryUserErrorCode = []CustomerSegmentMembersQueryUserErrorCode{
	CustomerSegmentMembersQueryUserErrorCodeInvalid,
}

func (e CustomerSegmentMembersQueryUserErrorCode) IsValid() bool {
	switch e {
	case CustomerSegmentMembersQueryUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e CustomerSegmentMembersQueryUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerSegmentMembersQueryUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSegmentMembersQueryUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSegmentMembersQueryUserErrorCode", str)
	}
	return nil
}

func (e CustomerSegmentMembersQueryUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
type CustomerSmsMarketingConsentErrorCode string

const (
	// The input value is invalid.
	CustomerSmsMarketingConsentErrorCodeInvalid CustomerSmsMarketingConsentErrorCode = "INVALID"
	// The input value isn't included in the list.
	CustomerSmsMarketingConsentErrorCodeInclusion CustomerSmsMarketingConsentErrorCode = "INCLUSION"
	// Unexpected internal error happened.
	CustomerSmsMarketingConsentErrorCodeInternalError CustomerSmsMarketingConsentErrorCode = "INTERNAL_ERROR"
	// Missing a required argument.
	CustomerSmsMarketingConsentErrorCodeMissingArgument CustomerSmsMarketingConsentErrorCode = "MISSING_ARGUMENT"
)

var AllCustomerSmsMarketingConsentErrorCode = []CustomerSmsMarketingConsentErrorCode{
	CustomerSmsMarketingConsentErrorCodeInvalid,
	CustomerSmsMarketingConsentErrorCodeInclusion,
	CustomerSmsMarketingConsentErrorCodeInternalError,
	CustomerSmsMarketingConsentErrorCodeMissingArgument,
}

func (e CustomerSmsMarketingConsentErrorCode) IsValid() bool {
	switch e {
	case CustomerSmsMarketingConsentErrorCodeInvalid, CustomerSmsMarketingConsentErrorCodeInclusion, CustomerSmsMarketingConsentErrorCodeInternalError, CustomerSmsMarketingConsentErrorCodeMissingArgument:
		return true
	}
	return false
}

func (e CustomerSmsMarketingConsentErrorCode) String() string {
	return string(e)
}

func (e *CustomerSmsMarketingConsentErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSmsMarketingConsentErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSmsMarketingConsentErrorCode", str)
	}
	return nil
}

func (e CustomerSmsMarketingConsentErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid SMS marketing states for a customer’s phone number.
type CustomerSmsMarketingState string

const (
	// The customer hasn't subscribed to SMS marketing.
	//
	CustomerSmsMarketingStateNotSubscribed CustomerSmsMarketingState = "NOT_SUBSCRIBED"
	// The customer is in the process of subscribing to SMS marketing.
	//
	CustomerSmsMarketingStatePending CustomerSmsMarketingState = "PENDING"
	// The customer is subscribed to SMS marketing.
	//
	CustomerSmsMarketingStateSubscribed CustomerSmsMarketingState = "SUBSCRIBED"
	// The customer isn't currently subscribed to SMS marketing but was previously subscribed.
	//
	CustomerSmsMarketingStateUnsubscribed CustomerSmsMarketingState = "UNSUBSCRIBED"
	// The customer's personal data is erased. This value is internally-set and read-only.
	//
	CustomerSmsMarketingStateRedacted CustomerSmsMarketingState = "REDACTED"
)

var AllCustomerSmsMarketingState = []CustomerSmsMarketingState{
	CustomerSmsMarketingStateNotSubscribed,
	CustomerSmsMarketingStatePending,
	CustomerSmsMarketingStateSubscribed,
	CustomerSmsMarketingStateUnsubscribed,
	CustomerSmsMarketingStateRedacted,
}

func (e CustomerSmsMarketingState) IsValid() bool {
	switch e {
	case CustomerSmsMarketingStateNotSubscribed, CustomerSmsMarketingStatePending, CustomerSmsMarketingStateSubscribed, CustomerSmsMarketingStateUnsubscribed, CustomerSmsMarketingStateRedacted:
		return true
	}
	return false
}

func (e CustomerSmsMarketingState) String() string {
	return string(e)
}

func (e *CustomerSmsMarketingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSmsMarketingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSmsMarketingState", str)
	}
	return nil
}

func (e CustomerSmsMarketingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Customer query.
type CustomerSortKeys string

const (
	// Sort by the `created_at` value.
	CustomerSortKeysCreatedAt CustomerSortKeys = "CREATED_AT"
	// Sort by the `name` value.
	CustomerSortKeysName CustomerSortKeys = "NAME"
	// Sort by the `location` value.
	CustomerSortKeysLocation CustomerSortKeys = "LOCATION"
	// Sort by the `orders_count` value.
	CustomerSortKeysOrdersCount CustomerSortKeys = "ORDERS_COUNT"
	// Sort by the `last_order_date` value.
	CustomerSortKeysLastOrderDate CustomerSortKeys = "LAST_ORDER_DATE"
	// Sort by the `total_spent` value.
	CustomerSortKeysTotalSpent CustomerSortKeys = "TOTAL_SPENT"
	// Sort by the `updated_at` value.
	CustomerSortKeysUpdatedAt CustomerSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CustomerSortKeysID CustomerSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	CustomerSortKeysRelevance CustomerSortKeys = "RELEVANCE"
)

var AllCustomerSortKeys = []CustomerSortKeys{
	CustomerSortKeysCreatedAt,
	CustomerSortKeysName,
	CustomerSortKeysLocation,
	CustomerSortKeysOrdersCount,
	CustomerSortKeysLastOrderDate,
	CustomerSortKeysTotalSpent,
	CustomerSortKeysUpdatedAt,
	CustomerSortKeysID,
	CustomerSortKeysRelevance,
}

func (e CustomerSortKeys) IsValid() bool {
	switch e {
	case CustomerSortKeysCreatedAt, CustomerSortKeysName, CustomerSortKeysLocation, CustomerSortKeysOrdersCount, CustomerSortKeysLastOrderDate, CustomerSortKeysTotalSpent, CustomerSortKeysUpdatedAt, CustomerSortKeysID, CustomerSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSortKeys) String() string {
	return string(e)
}

func (e *CustomerSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSortKeys", str)
	}
	return nil
}

func (e CustomerSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the state of a customer's account with a shop.
type CustomerState string

const (
	// The customer declined the email invite to create an account.
	//
	CustomerStateDeclined CustomerState = "DECLINED"
	// The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
	//
	CustomerStateDisabled CustomerState = "DISABLED"
	// The customer has created an account.
	//
	CustomerStateEnabled CustomerState = "ENABLED"
	// The customer has received an email invite to create an account.
	//
	CustomerStateInvited CustomerState = "INVITED"
)

var AllCustomerState = []CustomerState{
	CustomerStateDeclined,
	CustomerStateDisabled,
	CustomerStateEnabled,
	CustomerStateInvited,
}

func (e CustomerState) IsValid() bool {
	switch e {
	case CustomerStateDeclined, CustomerStateDisabled, CustomerStateEnabled, CustomerStateInvited:
		return true
	}
	return false
}

func (e CustomerState) String() string {
	return string(e)
}

func (e *CustomerState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerState", str)
	}
	return nil
}

func (e CustomerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Days of the week from Monday to Sunday.
type DayOfTheWeek string

const (
	// Monday.
	DayOfTheWeekMonday DayOfTheWeek = "MONDAY"
	// Tuesday.
	DayOfTheWeekTuesday DayOfTheWeek = "TUESDAY"
	// Wednesday.
	DayOfTheWeekWednesday DayOfTheWeek = "WEDNESDAY"
	// Thursday.
	DayOfTheWeekThursday DayOfTheWeek = "THURSDAY"
	// Friday.
	DayOfTheWeekFriday DayOfTheWeek = "FRIDAY"
	// Saturday.
	DayOfTheWeekSaturday DayOfTheWeek = "SATURDAY"
	// Sunday.
	DayOfTheWeekSunday DayOfTheWeek = "SUNDAY"
)

var AllDayOfTheWeek = []DayOfTheWeek{
	DayOfTheWeekMonday,
	DayOfTheWeekTuesday,
	DayOfTheWeekWednesday,
	DayOfTheWeekThursday,
	DayOfTheWeekFriday,
	DayOfTheWeekSaturday,
	DayOfTheWeekSunday,
}

func (e DayOfTheWeek) IsValid() bool {
	switch e {
	case DayOfTheWeekMonday, DayOfTheWeekTuesday, DayOfTheWeekWednesday, DayOfTheWeekThursday, DayOfTheWeekFriday, DayOfTheWeekSaturday, DayOfTheWeekSunday:
		return true
	}
	return false
}

func (e DayOfTheWeek) String() string {
	return string(e)
}

func (e *DayOfTheWeek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DayOfTheWeek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DayOfTheWeek", str)
	}
	return nil
}

func (e DayOfTheWeek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`.
type DelegateAccessTokenCreateUserErrorCode string

const (
	// The access scope can't be empty.
	DelegateAccessTokenCreateUserErrorCodeEmptyAccessScope DelegateAccessTokenCreateUserErrorCode = "EMPTY_ACCESS_SCOPE"
	// The parent access token can't be a delegate token.
	DelegateAccessTokenCreateUserErrorCodeDelegateAccessToken DelegateAccessTokenCreateUserErrorCode = "DELEGATE_ACCESS_TOKEN"
	// The expires_in value must be greater than 0.
	DelegateAccessTokenCreateUserErrorCodeNegativeExpiresIn DelegateAccessTokenCreateUserErrorCode = "NEGATIVE_EXPIRES_IN"
	// The delegate token can't expire after the parent token.
	DelegateAccessTokenCreateUserErrorCodeExpiresAfterParent DelegateAccessTokenCreateUserErrorCode = "EXPIRES_AFTER_PARENT"
	// The parent access token can't have a refresh token.
	DelegateAccessTokenCreateUserErrorCodeRefreshToken DelegateAccessTokenCreateUserErrorCode = "REFRESH_TOKEN"
	// Persistence failed.
	DelegateAccessTokenCreateUserErrorCodePersistenceFailed DelegateAccessTokenCreateUserErrorCode = "PERSISTENCE_FAILED"
	// Unknown scopes.
	DelegateAccessTokenCreateUserErrorCodeUnknownScopes DelegateAccessTokenCreateUserErrorCode = "UNKNOWN_SCOPES"
)

var AllDelegateAccessTokenCreateUserErrorCode = []DelegateAccessTokenCreateUserErrorCode{
	DelegateAccessTokenCreateUserErrorCodeEmptyAccessScope,
	DelegateAccessTokenCreateUserErrorCodeDelegateAccessToken,
	DelegateAccessTokenCreateUserErrorCodeNegativeExpiresIn,
	DelegateAccessTokenCreateUserErrorCodeExpiresAfterParent,
	DelegateAccessTokenCreateUserErrorCodeRefreshToken,
	DelegateAccessTokenCreateUserErrorCodePersistenceFailed,
	DelegateAccessTokenCreateUserErrorCodeUnknownScopes,
}

func (e DelegateAccessTokenCreateUserErrorCode) IsValid() bool {
	switch e {
	case DelegateAccessTokenCreateUserErrorCodeEmptyAccessScope, DelegateAccessTokenCreateUserErrorCodeDelegateAccessToken, DelegateAccessTokenCreateUserErrorCodeNegativeExpiresIn, DelegateAccessTokenCreateUserErrorCodeExpiresAfterParent, DelegateAccessTokenCreateUserErrorCodeRefreshToken, DelegateAccessTokenCreateUserErrorCodePersistenceFailed, DelegateAccessTokenCreateUserErrorCodeUnknownScopes:
		return true
	}
	return false
}

func (e DelegateAccessTokenCreateUserErrorCode) String() string {
	return string(e)
}

func (e *DelegateAccessTokenCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DelegateAccessTokenCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DelegateAccessTokenCreateUserErrorCode", str)
	}
	return nil
}

func (e DelegateAccessTokenCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DelegateAccessTokenDestroyUserError`.
type DelegateAccessTokenDestroyUserErrorCode string

const (
	// Persistence failed.
	DelegateAccessTokenDestroyUserErrorCodePersistenceFailed DelegateAccessTokenDestroyUserErrorCode = "PERSISTENCE_FAILED"
	// Access token not found.
	DelegateAccessTokenDestroyUserErrorCodeAccessTokenNotFound DelegateAccessTokenDestroyUserErrorCode = "ACCESS_TOKEN_NOT_FOUND"
	// Cannot delete parent access token.
	DelegateAccessTokenDestroyUserErrorCodeCanOnlyDeleteDelegateTokens DelegateAccessTokenDestroyUserErrorCode = "CAN_ONLY_DELETE_DELEGATE_TOKENS"
	// Access denied.
	DelegateAccessTokenDestroyUserErrorCodeAccessDenied DelegateAccessTokenDestroyUserErrorCode = "ACCESS_DENIED"
)

var AllDelegateAccessTokenDestroyUserErrorCode = []DelegateAccessTokenDestroyUserErrorCode{
	DelegateAccessTokenDestroyUserErrorCodePersistenceFailed,
	DelegateAccessTokenDestroyUserErrorCodeAccessTokenNotFound,
	DelegateAccessTokenDestroyUserErrorCodeCanOnlyDeleteDelegateTokens,
	DelegateAccessTokenDestroyUserErrorCodeAccessDenied,
}

func (e DelegateAccessTokenDestroyUserErrorCode) IsValid() bool {
	switch e {
	case DelegateAccessTokenDestroyUserErrorCodePersistenceFailed, DelegateAccessTokenDestroyUserErrorCodeAccessTokenNotFound, DelegateAccessTokenDestroyUserErrorCodeCanOnlyDeleteDelegateTokens, DelegateAccessTokenDestroyUserErrorCodeAccessDenied:
		return true
	}
	return false
}

func (e DelegateAccessTokenDestroyUserErrorCode) String() string {
	return string(e)
}

func (e *DelegateAccessTokenDestroyUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DelegateAccessTokenDestroyUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DelegateAccessTokenDestroyUserErrorCode", str)
	}
	return nil
}

func (e DelegateAccessTokenDestroyUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DeletionEvent query.
type DeletionEventSortKeys string

const (
	// Sort by the `created_at` value.
	DeletionEventSortKeysCreatedAt DeletionEventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DeletionEventSortKeysID DeletionEventSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	DeletionEventSortKeysRelevance DeletionEventSortKeys = "RELEVANCE"
)

var AllDeletionEventSortKeys = []DeletionEventSortKeys{
	DeletionEventSortKeysCreatedAt,
	DeletionEventSortKeysID,
	DeletionEventSortKeysRelevance,
}

func (e DeletionEventSortKeys) IsValid() bool {
	switch e {
	case DeletionEventSortKeysCreatedAt, DeletionEventSortKeysID, DeletionEventSortKeysRelevance:
		return true
	}
	return false
}

func (e DeletionEventSortKeys) String() string {
	return string(e)
}

func (e *DeletionEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSortKeys", str)
	}
	return nil
}

func (e DeletionEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported subject types of deletion events.
type DeletionEventSubjectType string

const (
	DeletionEventSubjectTypeCollection DeletionEventSubjectType = "COLLECTION"
	DeletionEventSubjectTypeProduct    DeletionEventSubjectType = "PRODUCT"
)

var AllDeletionEventSubjectType = []DeletionEventSubjectType{
	DeletionEventSubjectTypeCollection,
	DeletionEventSubjectTypeProduct,
}

func (e DeletionEventSubjectType) IsValid() bool {
	switch e {
	case DeletionEventSubjectTypeCollection, DeletionEventSubjectTypeProduct:
		return true
	}
	return false
}

func (e DeletionEventSubjectType) String() string {
	return string(e)
}

func (e *DeletionEventSubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSubjectType", str)
	}
	return nil
}

func (e DeletionEventSubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The field type that the condition will be applied to.
type DeliveryConditionField string

const (
	// The condition will check against the total weight of the order.
	DeliveryConditionFieldTotalWeight DeliveryConditionField = "TOTAL_WEIGHT"
	// The condition will check against the total price of the order.
	DeliveryConditionFieldTotalPrice DeliveryConditionField = "TOTAL_PRICE"
)

var AllDeliveryConditionField = []DeliveryConditionField{
	DeliveryConditionFieldTotalWeight,
	DeliveryConditionFieldTotalPrice,
}

func (e DeliveryConditionField) IsValid() bool {
	switch e {
	case DeliveryConditionFieldTotalWeight, DeliveryConditionFieldTotalPrice:
		return true
	}
	return false
}

func (e DeliveryConditionField) String() string {
	return string(e)
}

func (e *DeliveryConditionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionField", str)
	}
	return nil
}

func (e DeliveryConditionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The operator to use to determine if the condition passes.
type DeliveryConditionOperator string

const (
	// The condition will check whether the field is greater than or equal to the criterion.
	DeliveryConditionOperatorGreaterThanOrEqualTo DeliveryConditionOperator = "GREATER_THAN_OR_EQUAL_TO"
	// The condition will check if the field is less than or equal to the criterion.
	DeliveryConditionOperatorLessThanOrEqualTo DeliveryConditionOperator = "LESS_THAN_OR_EQUAL_TO"
)

var AllDeliveryConditionOperator = []DeliveryConditionOperator{
	DeliveryConditionOperatorGreaterThanOrEqualTo,
	DeliveryConditionOperatorLessThanOrEqualTo,
}

func (e DeliveryConditionOperator) IsValid() bool {
	switch e {
	case DeliveryConditionOperatorGreaterThanOrEqualTo, DeliveryConditionOperatorLessThanOrEqualTo:
		return true
	}
	return false
}

func (e DeliveryConditionOperator) String() string {
	return string(e)
}

func (e *DeliveryConditionOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionOperator", str)
	}
	return nil
}

func (e DeliveryConditionOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DeliveryCustomizationError`.
type DeliveryCustomizationErrorCode string

const (
	// The input value is invalid.
	DeliveryCustomizationErrorCodeInvalid DeliveryCustomizationErrorCode = "INVALID"
	// Function not found.
	DeliveryCustomizationErrorCodeFunctionNotFound DeliveryCustomizationErrorCode = "FUNCTION_NOT_FOUND"
	// Delivery customization not found.
	DeliveryCustomizationErrorCodeDeliveryCustomizationNotFound DeliveryCustomizationErrorCode = "DELIVERY_CUSTOMIZATION_NOT_FOUND"
	// Shop must be on a Shopify Plus plan to activate delivery customizations from a custom app.
	DeliveryCustomizationErrorCodeDeliveryCustomizationFunctionNotEligible DeliveryCustomizationErrorCode = "DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
	// Unauthorized app scope.
	DeliveryCustomizationErrorCodeUnauthorizedAppScope DeliveryCustomizationErrorCode = "UNAUTHORIZED_APP_SCOPE"
	// Maximum delivery customizations are already enabled.
	DeliveryCustomizationErrorCodeMaximumActiveDeliveryCustomizations DeliveryCustomizationErrorCode = "MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS"
	// Shop must be on a Shopify Plus plan to activate functions from a custom app.
	DeliveryCustomizationErrorCodeCustomAppFunctionNotEligible DeliveryCustomizationErrorCode = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
	// Function does not implement the required interface for this delivery customization.
	DeliveryCustomizationErrorCodeFunctionDoesNotImplement DeliveryCustomizationErrorCode = "FUNCTION_DOES_NOT_IMPLEMENT"
	// Function is pending deletion.
	DeliveryCustomizationErrorCodeFunctionPendingDeletion DeliveryCustomizationErrorCode = "FUNCTION_PENDING_DELETION"
	// Function ID cannot be changed.
	DeliveryCustomizationErrorCodeFunctionIDCannotBeChanged DeliveryCustomizationErrorCode = "FUNCTION_ID_CANNOT_BE_CHANGED"
	// Required input field must be present.
	DeliveryCustomizationErrorCodeRequiredInputField DeliveryCustomizationErrorCode = "REQUIRED_INPUT_FIELD"
	// Could not create or update metafields.
	DeliveryCustomizationErrorCodeInvalidMetafields DeliveryCustomizationErrorCode = "INVALID_METAFIELDS"
)

var AllDeliveryCustomizationErrorCode = []DeliveryCustomizationErrorCode{
	DeliveryCustomizationErrorCodeInvalid,
	DeliveryCustomizationErrorCodeFunctionNotFound,
	DeliveryCustomizationErrorCodeDeliveryCustomizationNotFound,
	DeliveryCustomizationErrorCodeDeliveryCustomizationFunctionNotEligible,
	DeliveryCustomizationErrorCodeUnauthorizedAppScope,
	DeliveryCustomizationErrorCodeMaximumActiveDeliveryCustomizations,
	DeliveryCustomizationErrorCodeCustomAppFunctionNotEligible,
	DeliveryCustomizationErrorCodeFunctionDoesNotImplement,
	DeliveryCustomizationErrorCodeFunctionPendingDeletion,
	DeliveryCustomizationErrorCodeFunctionIDCannotBeChanged,
	DeliveryCustomizationErrorCodeRequiredInputField,
	DeliveryCustomizationErrorCodeInvalidMetafields,
}

func (e DeliveryCustomizationErrorCode) IsValid() bool {
	switch e {
	case DeliveryCustomizationErrorCodeInvalid, DeliveryCustomizationErrorCodeFunctionNotFound, DeliveryCustomizationErrorCodeDeliveryCustomizationNotFound, DeliveryCustomizationErrorCodeDeliveryCustomizationFunctionNotEligible, DeliveryCustomizationErrorCodeUnauthorizedAppScope, DeliveryCustomizationErrorCodeMaximumActiveDeliveryCustomizations, DeliveryCustomizationErrorCodeCustomAppFunctionNotEligible, DeliveryCustomizationErrorCodeFunctionDoesNotImplement, DeliveryCustomizationErrorCodeFunctionPendingDeletion, DeliveryCustomizationErrorCodeFunctionIDCannotBeChanged, DeliveryCustomizationErrorCodeRequiredInputField, DeliveryCustomizationErrorCodeInvalidMetafields:
		return true
	}
	return false
}

func (e DeliveryCustomizationErrorCode) String() string {
	return string(e)
}

func (e *DeliveryCustomizationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryCustomizationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryCustomizationErrorCode", str)
	}
	return nil
}

func (e DeliveryCustomizationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
type DeliveryLegacyModeBlockedReason string

const (
	// Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled DeliveryLegacyModeBlockedReason = "MULTI_LOCATION_DISABLED"
	// There are no locations for this store that can fulfill online orders.
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders DeliveryLegacyModeBlockedReason = "NO_LOCATIONS_FULFILLING_ONLINE_ORDERS"
)

var AllDeliveryLegacyModeBlockedReason = []DeliveryLegacyModeBlockedReason{
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled,
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders,
}

func (e DeliveryLegacyModeBlockedReason) IsValid() bool {
	switch e {
	case DeliveryLegacyModeBlockedReasonMultiLocationDisabled, DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders:
		return true
	}
	return false
}

func (e DeliveryLegacyModeBlockedReason) String() string {
	return string(e)
}

func (e *DeliveryLegacyModeBlockedReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryLegacyModeBlockedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryLegacyModeBlockedReason", str)
	}
	return nil
}

func (e DeliveryLegacyModeBlockedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible pickup time values that a location enabled for local pickup can have.
type DeliveryLocalPickupTime string

const (
	// Usually ready in 1 hour.
	DeliveryLocalPickupTimeOneHour DeliveryLocalPickupTime = "ONE_HOUR"
	// Usually ready in 2 hours.
	DeliveryLocalPickupTimeTwoHours DeliveryLocalPickupTime = "TWO_HOURS"
	// Usually ready in 4 hours.
	DeliveryLocalPickupTimeFourHours DeliveryLocalPickupTime = "FOUR_HOURS"
	// Usually ready in 24 hours.
	DeliveryLocalPickupTimeTwentyFourHours DeliveryLocalPickupTime = "TWENTY_FOUR_HOURS"
	// Usually ready in 2-4 days.
	DeliveryLocalPickupTimeTwoToFourDays DeliveryLocalPickupTime = "TWO_TO_FOUR_DAYS"
	// Usually ready in 5+ days.
	DeliveryLocalPickupTimeFiveOrMoreDays DeliveryLocalPickupTime = "FIVE_OR_MORE_DAYS"
)

var AllDeliveryLocalPickupTime = []DeliveryLocalPickupTime{
	DeliveryLocalPickupTimeOneHour,
	DeliveryLocalPickupTimeTwoHours,
	DeliveryLocalPickupTimeFourHours,
	DeliveryLocalPickupTimeTwentyFourHours,
	DeliveryLocalPickupTimeTwoToFourDays,
	DeliveryLocalPickupTimeFiveOrMoreDays,
}

func (e DeliveryLocalPickupTime) IsValid() bool {
	switch e {
	case DeliveryLocalPickupTimeOneHour, DeliveryLocalPickupTimeTwoHours, DeliveryLocalPickupTimeFourHours, DeliveryLocalPickupTimeTwentyFourHours, DeliveryLocalPickupTimeTwoToFourDays, DeliveryLocalPickupTimeFiveOrMoreDays:
		return true
	}
	return false
}

func (e DeliveryLocalPickupTime) String() string {
	return string(e)
}

func (e *DeliveryLocalPickupTime) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryLocalPickupTime(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryLocalPickupTime", str)
	}
	return nil
}

func (e DeliveryLocalPickupTime) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`.
type DeliveryLocationLocalPickupSettingsErrorCode string

const (
	// Provided locationId is not for an active location belonging to this store.
	DeliveryLocationLocalPickupSettingsErrorCodeActiveLocationNotFound DeliveryLocationLocalPickupSettingsErrorCode = "ACTIVE_LOCATION_NOT_FOUND"
	// An error occurred while changing the local pickup settings.
	DeliveryLocationLocalPickupSettingsErrorCodeGenericError DeliveryLocationLocalPickupSettingsErrorCode = "GENERIC_ERROR"
)

var AllDeliveryLocationLocalPickupSettingsErrorCode = []DeliveryLocationLocalPickupSettingsErrorCode{
	DeliveryLocationLocalPickupSettingsErrorCodeActiveLocationNotFound,
	DeliveryLocationLocalPickupSettingsErrorCodeGenericError,
}

func (e DeliveryLocationLocalPickupSettingsErrorCode) IsValid() bool {
	switch e {
	case DeliveryLocationLocalPickupSettingsErrorCodeActiveLocationNotFound, DeliveryLocationLocalPickupSettingsErrorCodeGenericError:
		return true
	}
	return false
}

func (e DeliveryLocationLocalPickupSettingsErrorCode) String() string {
	return string(e)
}

func (e *DeliveryLocationLocalPickupSettingsErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryLocationLocalPickupSettingsErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryLocationLocalPickupSettingsErrorCode", str)
	}
	return nil
}

func (e DeliveryLocationLocalPickupSettingsErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different types of method definitions to filter by.
type DeliveryMethodDefinitionType string

const (
	// A static merchant-defined rate.
	DeliveryMethodDefinitionTypeMerchant DeliveryMethodDefinitionType = "MERCHANT"
	// A dynamic participant rate.
	DeliveryMethodDefinitionTypeParticipant DeliveryMethodDefinitionType = "PARTICIPANT"
)

var AllDeliveryMethodDefinitionType = []DeliveryMethodDefinitionType{
	DeliveryMethodDefinitionTypeMerchant,
	DeliveryMethodDefinitionTypeParticipant,
}

func (e DeliveryMethodDefinitionType) IsValid() bool {
	switch e {
	case DeliveryMethodDefinitionTypeMerchant, DeliveryMethodDefinitionTypeParticipant:
		return true
	}
	return false
}

func (e DeliveryMethodDefinitionType) String() string {
	return string(e)
}

func (e *DeliveryMethodDefinitionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodDefinitionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodDefinitionType", str)
	}
	return nil
}

func (e DeliveryMethodDefinitionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible method types that a delivery method can have.
type DeliveryMethodType string

const (
	// The order is shipped.
	DeliveryMethodTypeShipping DeliveryMethodType = "SHIPPING"
	// The order is picked up by the customer.
	DeliveryMethodTypePickUp DeliveryMethodType = "PICK_UP"
	// No delivery is needed.
	DeliveryMethodTypeNone DeliveryMethodType = "NONE"
	// The order is delivered to a retail store.
	DeliveryMethodTypeRetail DeliveryMethodType = "RETAIL"
	// The order is delivered using a local delivery service.
	DeliveryMethodTypeLocal DeliveryMethodType = "LOCAL"
)

var AllDeliveryMethodType = []DeliveryMethodType{
	DeliveryMethodTypeShipping,
	DeliveryMethodTypePickUp,
	DeliveryMethodTypeNone,
	DeliveryMethodTypeRetail,
	DeliveryMethodTypeLocal,
}

func (e DeliveryMethodType) IsValid() bool {
	switch e {
	case DeliveryMethodTypeShipping, DeliveryMethodTypePickUp, DeliveryMethodTypeNone, DeliveryMethodTypeRetail, DeliveryMethodTypeLocal:
		return true
	}
	return false
}

func (e DeliveryMethodType) String() string {
	return string(e)
}

func (e *DeliveryMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodType", str)
	}
	return nil
}

func (e DeliveryMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
type DigitalWallet string

const (
	// Apple Pay.
	DigitalWalletApplePay DigitalWallet = "APPLE_PAY"
	// Android Pay.
	DigitalWalletAndroidPay DigitalWallet = "ANDROID_PAY"
	// Google Pay.
	DigitalWalletGooglePay DigitalWallet = "GOOGLE_PAY"
	// Shopify Pay.
	DigitalWalletShopifyPay DigitalWallet = "SHOPIFY_PAY"
)

var AllDigitalWallet = []DigitalWallet{
	DigitalWalletApplePay,
	DigitalWalletAndroidPay,
	DigitalWalletGooglePay,
	DigitalWalletShopifyPay,
}

func (e DigitalWallet) IsValid() bool {
	switch e {
	case DigitalWalletApplePay, DigitalWalletAndroidPay, DigitalWalletGooglePay, DigitalWalletShopifyPay:
		return true
	}
	return false
}

func (e DigitalWallet) String() string {
	return string(e)
}

func (e *DigitalWallet) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DigitalWallet(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DigitalWallet", str)
	}
	return nil
}

func (e DigitalWallet) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the discount's value is allocated onto its entitled lines.
type DiscountApplicationAllocationMethod string

const (
	// The value is spread across all entitled lines.
	DiscountApplicationAllocationMethodAcross DiscountApplicationAllocationMethod = "ACROSS"
	// The value is applied onto every entitled line.
	DiscountApplicationAllocationMethodEach DiscountApplicationAllocationMethod = "EACH"
	// The value is specifically applied onto a particular line.
	DiscountApplicationAllocationMethodOne DiscountApplicationAllocationMethod = "ONE"
)

var AllDiscountApplicationAllocationMethod = []DiscountApplicationAllocationMethod{
	DiscountApplicationAllocationMethodAcross,
	DiscountApplicationAllocationMethodEach,
	DiscountApplicationAllocationMethodOne,
}

func (e DiscountApplicationAllocationMethod) IsValid() bool {
	switch e {
	case DiscountApplicationAllocationMethodAcross, DiscountApplicationAllocationMethodEach, DiscountApplicationAllocationMethodOne:
		return true
	}
	return false
}

func (e DiscountApplicationAllocationMethod) String() string {
	return string(e)
}

func (e *DiscountApplicationAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationAllocationMethod", str)
	}
	return nil
}

func (e DiscountApplicationAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The level at which the discount's value is applied.
type DiscountApplicationLevel string

const (
	// The discount is applied at the order level.
	// Order level discounts are not factored into the discountedUnitPriceSet on line items.
	//
	DiscountApplicationLevelOrder DiscountApplicationLevel = "ORDER"
	// The discount is applied at the line level.
	// Line level discounts are factored into the discountedUnitPriceSet on line items.
	//
	DiscountApplicationLevelLine DiscountApplicationLevel = "LINE"
)

var AllDiscountApplicationLevel = []DiscountApplicationLevel{
	DiscountApplicationLevelOrder,
	DiscountApplicationLevelLine,
}

func (e DiscountApplicationLevel) IsValid() bool {
	switch e {
	case DiscountApplicationLevelOrder, DiscountApplicationLevelLine:
		return true
	}
	return false
}

func (e DiscountApplicationLevel) String() string {
	return string(e)
}

func (e *DiscountApplicationLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationLevel", str)
	}
	return nil
}

func (e DiscountApplicationLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The lines on the order to which the discount is applied, of the type defined by
// the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
// `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
// The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
type DiscountApplicationTargetSelection string

const (
	// The discount is allocated onto all the lines.
	DiscountApplicationTargetSelectionAll DiscountApplicationTargetSelection = "ALL"
	// The discount is allocated onto only the lines that it's entitled for.
	DiscountApplicationTargetSelectionEntitled DiscountApplicationTargetSelection = "ENTITLED"
	// The discount is allocated onto explicitly chosen lines.
	DiscountApplicationTargetSelectionExplicit DiscountApplicationTargetSelection = "EXPLICIT"
)

var AllDiscountApplicationTargetSelection = []DiscountApplicationTargetSelection{
	DiscountApplicationTargetSelectionAll,
	DiscountApplicationTargetSelectionEntitled,
	DiscountApplicationTargetSelectionExplicit,
}

func (e DiscountApplicationTargetSelection) IsValid() bool {
	switch e {
	case DiscountApplicationTargetSelectionAll, DiscountApplicationTargetSelectionEntitled, DiscountApplicationTargetSelectionExplicit:
		return true
	}
	return false
}

func (e DiscountApplicationTargetSelection) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetSelection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetSelection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetSelection", str)
	}
	return nil
}

func (e DiscountApplicationTargetSelection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
type DiscountApplicationTargetType string

const (
	// The discount applies onto line items.
	DiscountApplicationTargetTypeLineItem DiscountApplicationTargetType = "LINE_ITEM"
	// The discount applies onto shipping lines.
	DiscountApplicationTargetTypeShippingLine DiscountApplicationTargetType = "SHIPPING_LINE"
)

var AllDiscountApplicationTargetType = []DiscountApplicationTargetType{
	DiscountApplicationTargetTypeLineItem,
	DiscountApplicationTargetTypeShippingLine,
}

func (e DiscountApplicationTargetType) IsValid() bool {
	switch e {
	case DiscountApplicationTargetTypeLineItem, DiscountApplicationTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountApplicationTargetType) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetType", str)
	}
	return nil
}

func (e DiscountApplicationTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The class of the discount for combining purposes.
type DiscountClass string

const (
	// Combined as a product discount.
	DiscountClassProduct DiscountClass = "PRODUCT"
	// Combined as an order discount.
	DiscountClassOrder DiscountClass = "ORDER"
	// Combined as a shipping discount.
	DiscountClassShipping DiscountClass = "SHIPPING"
)

var AllDiscountClass = []DiscountClass{
	DiscountClassProduct,
	DiscountClassOrder,
	DiscountClassShipping,
}

func (e DiscountClass) IsValid() bool {
	switch e {
	case DiscountClassProduct, DiscountClassOrder, DiscountClassShipping:
		return true
	}
	return false
}

func (e DiscountClass) String() string {
	return string(e)
}

func (e *DiscountClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountClass", str)
	}
	return nil
}

func (e DiscountClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DiscountCode query.
type DiscountCodeSortKeys string

const (
	// Sort by the `code` value.
	DiscountCodeSortKeysCode DiscountCodeSortKeys = "CODE"
	// Sort by the `created_at` value.
	DiscountCodeSortKeysCreatedAt DiscountCodeSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DiscountCodeSortKeysID DiscountCodeSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	DiscountCodeSortKeysRelevance DiscountCodeSortKeys = "RELEVANCE"
)

var AllDiscountCodeSortKeys = []DiscountCodeSortKeys{
	DiscountCodeSortKeysCode,
	DiscountCodeSortKeysCreatedAt,
	DiscountCodeSortKeysID,
	DiscountCodeSortKeysRelevance,
}

func (e DiscountCodeSortKeys) IsValid() bool {
	switch e {
	case DiscountCodeSortKeysCode, DiscountCodeSortKeysCreatedAt, DiscountCodeSortKeysID, DiscountCodeSortKeysRelevance:
		return true
	}
	return false
}

func (e DiscountCodeSortKeys) String() string {
	return string(e)
}

func (e *DiscountCodeSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountCodeSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountCodeSortKeys", str)
	}
	return nil
}

func (e DiscountCodeSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DiscountUserError`.
type DiscountErrorCode string

const (
	// The input value is blank.
	DiscountErrorCodeBlank DiscountErrorCode = "BLANK"
	// The input value needs to be blank.
	DiscountErrorCodePresent DiscountErrorCode = "PRESENT"
	// The input value should be equal to the value allowed.
	DiscountErrorCodeEqualTo DiscountErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	DiscountErrorCodeGreaterThan DiscountErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	DiscountErrorCodeGreaterThanOrEqualTo DiscountErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value is invalid.
	DiscountErrorCodeInvalid DiscountErrorCode = "INVALID"
	// The input value should be less than or equal to the maximum value allowed.
	DiscountErrorCodeLessThanOrEqualTo DiscountErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value should be less than the maximum value allowed.
	DiscountErrorCodeLessThan DiscountErrorCode = "LESS_THAN"
	// The input value is already taken.
	DiscountErrorCodeTaken DiscountErrorCode = "TAKEN"
	// The input value is too long.
	DiscountErrorCodeTooLong DiscountErrorCode = "TOO_LONG"
	// The input value is too short.
	DiscountErrorCodeTooShort DiscountErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	DiscountErrorCodeInternalError DiscountErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	DiscountErrorCodeTooManyArguments DiscountErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	DiscountErrorCodeMissingArgument DiscountErrorCode = "MISSING_ARGUMENT"
	// The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
	DiscountErrorCodeActivePeriodOverlap DiscountErrorCode = "ACTIVE_PERIOD_OVERLAP"
	// The value exceeded the maximum allowed value.
	DiscountErrorCodeExceededMax DiscountErrorCode = "EXCEEDED_MAX"
	// Specify a minimum subtotal or a quantity, but not both.
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent DiscountErrorCode = "MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// The value is outside of the allowed range.
	DiscountErrorCodeValueOutsideRange DiscountErrorCode = "VALUE_OUTSIDE_RANGE"
	// The attribute selection contains conflicting settings.
	DiscountErrorCodeConflict DiscountErrorCode = "CONFLICT"
	// The value is already present through another selection.
	DiscountErrorCodeImplicitDuplicate DiscountErrorCode = "IMPLICIT_DUPLICATE"
	// The input value is already present.
	DiscountErrorCodeDuplicate DiscountErrorCode = "DUPLICATE"
	// The input value isn't included in the list.
	DiscountErrorCodeInclusion DiscountErrorCode = "INCLUSION"
	// The `combinesWith` settings are invalid for the discount class.
	DiscountErrorCodeInvalidCombinesWithForDiscountClass DiscountErrorCode = "INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS"
	// The discountClass is invalid for the price rule.
	DiscountErrorCodeInvalidDiscountClassForPriceRule DiscountErrorCode = "INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE"
	// The active period overlaps with too many other app-provided discounts. There's a limit on the number of app discounts that can be active at any given time.
	DiscountErrorCodeMaxAppDiscounts DiscountErrorCode = "MAX_APP_DISCOUNTS"
)

var AllDiscountErrorCode = []DiscountErrorCode{
	DiscountErrorCodeBlank,
	DiscountErrorCodePresent,
	DiscountErrorCodeEqualTo,
	DiscountErrorCodeGreaterThan,
	DiscountErrorCodeGreaterThanOrEqualTo,
	DiscountErrorCodeInvalid,
	DiscountErrorCodeLessThanOrEqualTo,
	DiscountErrorCodeLessThan,
	DiscountErrorCodeTaken,
	DiscountErrorCodeTooLong,
	DiscountErrorCodeTooShort,
	DiscountErrorCodeInternalError,
	DiscountErrorCodeTooManyArguments,
	DiscountErrorCodeMissingArgument,
	DiscountErrorCodeActivePeriodOverlap,
	DiscountErrorCodeExceededMax,
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent,
	DiscountErrorCodeValueOutsideRange,
	DiscountErrorCodeConflict,
	DiscountErrorCodeImplicitDuplicate,
	DiscountErrorCodeDuplicate,
	DiscountErrorCodeInclusion,
	DiscountErrorCodeInvalidCombinesWithForDiscountClass,
	DiscountErrorCodeInvalidDiscountClassForPriceRule,
	DiscountErrorCodeMaxAppDiscounts,
}

func (e DiscountErrorCode) IsValid() bool {
	switch e {
	case DiscountErrorCodeBlank, DiscountErrorCodePresent, DiscountErrorCodeEqualTo, DiscountErrorCodeGreaterThan, DiscountErrorCodeGreaterThanOrEqualTo, DiscountErrorCodeInvalid, DiscountErrorCodeLessThanOrEqualTo, DiscountErrorCodeLessThan, DiscountErrorCodeTaken, DiscountErrorCodeTooLong, DiscountErrorCodeTooShort, DiscountErrorCodeInternalError, DiscountErrorCodeTooManyArguments, DiscountErrorCodeMissingArgument, DiscountErrorCodeActivePeriodOverlap, DiscountErrorCodeExceededMax, DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent, DiscountErrorCodeValueOutsideRange, DiscountErrorCodeConflict, DiscountErrorCodeImplicitDuplicate, DiscountErrorCodeDuplicate, DiscountErrorCodeInclusion, DiscountErrorCodeInvalidCombinesWithForDiscountClass, DiscountErrorCodeInvalidDiscountClassForPriceRule, DiscountErrorCodeMaxAppDiscounts:
		return true
	}
	return false
}

func (e DiscountErrorCode) String() string {
	return string(e)
}

func (e *DiscountErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountErrorCode", str)
	}
	return nil
}

func (e DiscountErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of page where a shareable discount URL lands.
type DiscountShareableURLTargetType string

const (
	// The URL lands on a home page.
	DiscountShareableURLTargetTypeHome DiscountShareableURLTargetType = "HOME"
	// The URL lands on a product page.
	DiscountShareableURLTargetTypeProduct DiscountShareableURLTargetType = "PRODUCT"
	// The URL lands on a collection page.
	DiscountShareableURLTargetTypeCollection DiscountShareableURLTargetType = "COLLECTION"
)

var AllDiscountShareableURLTargetType = []DiscountShareableURLTargetType{
	DiscountShareableURLTargetTypeHome,
	DiscountShareableURLTargetTypeProduct,
	DiscountShareableURLTargetTypeCollection,
}

func (e DiscountShareableURLTargetType) IsValid() bool {
	switch e {
	case DiscountShareableURLTargetTypeHome, DiscountShareableURLTargetTypeProduct, DiscountShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e DiscountShareableURLTargetType) String() string {
	return string(e)
}

func (e *DiscountShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountShareableUrlTargetType", str)
	}
	return nil
}

func (e DiscountShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Discount query.
type DiscountSortKeys string

const (
	// Sort by the `starts_at` value.
	DiscountSortKeysStartsAt DiscountSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	DiscountSortKeysEndsAt DiscountSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	DiscountSortKeysTitle DiscountSortKeys = "TITLE"
	// Sort by the `created_at` value.
	DiscountSortKeysCreatedAt DiscountSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	DiscountSortKeysUpdatedAt DiscountSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	DiscountSortKeysID DiscountSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	DiscountSortKeysRelevance DiscountSortKeys = "RELEVANCE"
)

var AllDiscountSortKeys = []DiscountSortKeys{
	DiscountSortKeysStartsAt,
	DiscountSortKeysEndsAt,
	DiscountSortKeysTitle,
	DiscountSortKeysCreatedAt,
	DiscountSortKeysUpdatedAt,
	DiscountSortKeysID,
	DiscountSortKeysRelevance,
}

func (e DiscountSortKeys) IsValid() bool {
	switch e {
	case DiscountSortKeysStartsAt, DiscountSortKeysEndsAt, DiscountSortKeysTitle, DiscountSortKeysCreatedAt, DiscountSortKeysUpdatedAt, DiscountSortKeysID, DiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e DiscountSortKeys) String() string {
	return string(e)
}

func (e *DiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountSortKeys", str)
	}
	return nil
}

func (e DiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the discount.
type DiscountStatus string

const (
	// The discount is active.
	DiscountStatusActive DiscountStatus = "ACTIVE"
	// The discount is expired.
	DiscountStatusExpired DiscountStatus = "EXPIRED"
	// The discount is scheduled.
	DiscountStatusScheduled DiscountStatus = "SCHEDULED"
)

var AllDiscountStatus = []DiscountStatus{
	DiscountStatusActive,
	DiscountStatusExpired,
	DiscountStatusScheduled,
}

func (e DiscountStatus) IsValid() bool {
	switch e {
	case DiscountStatusActive, DiscountStatusExpired, DiscountStatusScheduled:
		return true
	}
	return false
}

func (e DiscountStatus) String() string {
	return string(e)
}

func (e *DiscountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountStatus", str)
	}
	return nil
}

func (e DiscountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
type DiscountTargetType string

const (
	// The discount applies onto line items.
	DiscountTargetTypeLineItem DiscountTargetType = "LINE_ITEM"
	// The discount applies onto shipping lines.
	DiscountTargetTypeShippingLine DiscountTargetType = "SHIPPING_LINE"
)

var AllDiscountTargetType = []DiscountTargetType{
	DiscountTargetTypeLineItem,
	DiscountTargetTypeShippingLine,
}

func (e DiscountTargetType) IsValid() bool {
	switch e {
	case DiscountTargetTypeLineItem, DiscountTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountTargetType) String() string {
	return string(e)
}

func (e *DiscountTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountTargetType", str)
	}
	return nil
}

func (e DiscountTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the subscription discount.
type DiscountType string

const (
	// Manual discount type.
	DiscountTypeManual DiscountType = "MANUAL"
	// Code discount type.
	DiscountTypeCodeDiscount DiscountType = "CODE_DISCOUNT"
)

var AllDiscountType = []DiscountType{
	DiscountTypeManual,
	DiscountTypeCodeDiscount,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypeManual, DiscountTypeCodeDiscount:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`.
type DisputeEvidenceUpdateUserErrorCode string

const (
	// Dispute evidence could not be found.
	DisputeEvidenceUpdateUserErrorCodeDisputeEvidenceNotFound DisputeEvidenceUpdateUserErrorCode = "DISPUTE_EVIDENCE_NOT_FOUND"
	// Evidence already accepted.
	DisputeEvidenceUpdateUserErrorCodeEvidenceAlreadyAccepted DisputeEvidenceUpdateUserErrorCode = "EVIDENCE_ALREADY_ACCEPTED"
	// Evidence past due date.
	DisputeEvidenceUpdateUserErrorCodeEvidencePastDueDate DisputeEvidenceUpdateUserErrorCode = "EVIDENCE_PAST_DUE_DATE"
	// Combined files size is too large.
	DisputeEvidenceUpdateUserErrorCodeFilesSizeExceededLimit DisputeEvidenceUpdateUserErrorCode = "FILES_SIZE_EXCEEDED_LIMIT"
	// Individual file size is too large.
	DisputeEvidenceUpdateUserErrorCodeTooLarge DisputeEvidenceUpdateUserErrorCode = "TOO_LARGE"
	// The input value is invalid.
	DisputeEvidenceUpdateUserErrorCodeInvalid DisputeEvidenceUpdateUserErrorCode = "INVALID"
)

var AllDisputeEvidenceUpdateUserErrorCode = []DisputeEvidenceUpdateUserErrorCode{
	DisputeEvidenceUpdateUserErrorCodeDisputeEvidenceNotFound,
	DisputeEvidenceUpdateUserErrorCodeEvidenceAlreadyAccepted,
	DisputeEvidenceUpdateUserErrorCodeEvidencePastDueDate,
	DisputeEvidenceUpdateUserErrorCodeFilesSizeExceededLimit,
	DisputeEvidenceUpdateUserErrorCodeTooLarge,
	DisputeEvidenceUpdateUserErrorCodeInvalid,
}

func (e DisputeEvidenceUpdateUserErrorCode) IsValid() bool {
	switch e {
	case DisputeEvidenceUpdateUserErrorCodeDisputeEvidenceNotFound, DisputeEvidenceUpdateUserErrorCodeEvidenceAlreadyAccepted, DisputeEvidenceUpdateUserErrorCodeEvidencePastDueDate, DisputeEvidenceUpdateUserErrorCodeFilesSizeExceededLimit, DisputeEvidenceUpdateUserErrorCodeTooLarge, DisputeEvidenceUpdateUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e DisputeEvidenceUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *DisputeEvidenceUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeEvidenceUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeEvidenceUpdateUserErrorCode", str)
	}
	return nil
}

func (e DisputeEvidenceUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses of a dispute.
type DisputeStatus string

const (
	DisputeStatusNeedsResponse  DisputeStatus = "NEEDS_RESPONSE"
	DisputeStatusUnderReview    DisputeStatus = "UNDER_REVIEW"
	DisputeStatusChargeRefunded DisputeStatus = "CHARGE_REFUNDED"
	DisputeStatusAccepted       DisputeStatus = "ACCEPTED"
	DisputeStatusWon            DisputeStatus = "WON"
	DisputeStatusLost           DisputeStatus = "LOST"
)

var AllDisputeStatus = []DisputeStatus{
	DisputeStatusNeedsResponse,
	DisputeStatusUnderReview,
	DisputeStatusChargeRefunded,
	DisputeStatusAccepted,
	DisputeStatusWon,
	DisputeStatusLost,
}

func (e DisputeStatus) IsValid() bool {
	switch e {
	case DisputeStatusNeedsResponse, DisputeStatusUnderReview, DisputeStatusChargeRefunded, DisputeStatusAccepted, DisputeStatusWon, DisputeStatusLost:
		return true
	}
	return false
}

func (e DisputeStatus) String() string {
	return string(e)
}

func (e *DisputeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeStatus", str)
	}
	return nil
}

func (e DisputeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types for a dispute.
type DisputeType string

const (
	// The dispute has turned into a chargeback.
	DisputeTypeChargeback DisputeType = "CHARGEBACK"
	// The dispute is in the inquiry phase.
	DisputeTypeInquiry DisputeType = "INQUIRY"
)

var AllDisputeType = []DisputeType{
	DisputeTypeChargeback,
	DisputeTypeInquiry,
}

func (e DisputeType) IsValid() bool {
	switch e {
	case DisputeTypeChargeback, DisputeTypeInquiry:
		return true
	}
	return false
}

func (e DisputeType) String() string {
	return string(e)
}

func (e *DisputeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeType", str)
	}
	return nil
}

func (e DisputeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid discount types that can be applied to a draft order.
type DraftOrderAppliedDiscountType string

const (
	// A fixed amount in the store's currency.
	DraftOrderAppliedDiscountTypeFixedAmount DraftOrderAppliedDiscountType = "FIXED_AMOUNT"
	// A percentage of the order subtotal.
	DraftOrderAppliedDiscountTypePercentage DraftOrderAppliedDiscountType = "PERCENTAGE"
)

var AllDraftOrderAppliedDiscountType = []DraftOrderAppliedDiscountType{
	DraftOrderAppliedDiscountTypeFixedAmount,
	DraftOrderAppliedDiscountTypePercentage,
}

func (e DraftOrderAppliedDiscountType) IsValid() bool {
	switch e {
	case DraftOrderAppliedDiscountTypeFixedAmount, DraftOrderAppliedDiscountTypePercentage:
		return true
	}
	return false
}

func (e DraftOrderAppliedDiscountType) String() string {
	return string(e)
}

func (e *DraftOrderAppliedDiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderAppliedDiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderAppliedDiscountType", str)
	}
	return nil
}

func (e DraftOrderAppliedDiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DraftOrder query.
type DraftOrderSortKeys string

const (
	// Sort by the `number` value.
	DraftOrderSortKeysNumber DraftOrderSortKeys = "NUMBER"
	// Sort by the `updated_at` value.
	DraftOrderSortKeysUpdatedAt DraftOrderSortKeys = "UPDATED_AT"
	// Sort by the `status` value.
	DraftOrderSortKeysStatus DraftOrderSortKeys = "STATUS"
	// Sort by the `total_price` value.
	DraftOrderSortKeysTotalPrice DraftOrderSortKeys = "TOTAL_PRICE"
	// Sort by the `customer_name` value.
	DraftOrderSortKeysCustomerName DraftOrderSortKeys = "CUSTOMER_NAME"
	// Sort by the `id` value.
	DraftOrderSortKeysID DraftOrderSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	DraftOrderSortKeysRelevance DraftOrderSortKeys = "RELEVANCE"
)

var AllDraftOrderSortKeys = []DraftOrderSortKeys{
	DraftOrderSortKeysNumber,
	DraftOrderSortKeysUpdatedAt,
	DraftOrderSortKeysStatus,
	DraftOrderSortKeysTotalPrice,
	DraftOrderSortKeysCustomerName,
	DraftOrderSortKeysID,
	DraftOrderSortKeysRelevance,
}

func (e DraftOrderSortKeys) IsValid() bool {
	switch e {
	case DraftOrderSortKeysNumber, DraftOrderSortKeysUpdatedAt, DraftOrderSortKeysStatus, DraftOrderSortKeysTotalPrice, DraftOrderSortKeysCustomerName, DraftOrderSortKeysID, DraftOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e DraftOrderSortKeys) String() string {
	return string(e)
}

func (e *DraftOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderSortKeys", str)
	}
	return nil
}

func (e DraftOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid statuses for a draft order.
type DraftOrderStatus string

const (
	// The draft order has been paid.
	DraftOrderStatusCompleted DraftOrderStatus = "COMPLETED"
	// An invoice for the draft order has been sent to the customer.
	DraftOrderStatusInvoiceSent DraftOrderStatus = "INVOICE_SENT"
	// The draft order is open. It has not been paid, and an invoice hasn't been sent.
	DraftOrderStatusOpen DraftOrderStatus = "OPEN"
)

var AllDraftOrderStatus = []DraftOrderStatus{
	DraftOrderStatusCompleted,
	DraftOrderStatusInvoiceSent,
	DraftOrderStatusOpen,
}

func (e DraftOrderStatus) IsValid() bool {
	switch e {
	case DraftOrderStatusCompleted, DraftOrderStatusInvoiceSent, DraftOrderStatusOpen:
		return true
	}
	return false
}

func (e DraftOrderStatus) String() string {
	return string(e)
}

func (e *DraftOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderStatus", str)
	}
	return nil
}

func (e DraftOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ErrorsServerPixelUserError`.
type ErrorsServerPixelUserErrorCode string

const (
	// A server pixel doesn't exist for this app and shop.
	ErrorsServerPixelUserErrorCodeNotFound ErrorsServerPixelUserErrorCode = "NOT_FOUND"
	// A server pixel already exists for this app and shop. Only one server pixel can exist for any app and shop combination.
	ErrorsServerPixelUserErrorCodeAlreadyExists ErrorsServerPixelUserErrorCode = "ALREADY_EXISTS"
	// PubSubProject and PubSubTopic values resulted in an address that is not a valid GCP pub/sub format.Address format should be pubsub://project:topic.
	ErrorsServerPixelUserErrorCodePubSubError ErrorsServerPixelUserErrorCode = "PUB_SUB_ERROR"
	// Server Pixel must be configured with a valid AWS Event Bridge or GCP pub/sub endpoint address to be connected.
	ErrorsServerPixelUserErrorCodeNeedsConfigurationToConnect ErrorsServerPixelUserErrorCode = "NEEDS_CONFIGURATION_TO_CONNECT"
)

var AllErrorsServerPixelUserErrorCode = []ErrorsServerPixelUserErrorCode{
	ErrorsServerPixelUserErrorCodeNotFound,
	ErrorsServerPixelUserErrorCodeAlreadyExists,
	ErrorsServerPixelUserErrorCodePubSubError,
	ErrorsServerPixelUserErrorCodeNeedsConfigurationToConnect,
}

func (e ErrorsServerPixelUserErrorCode) IsValid() bool {
	switch e {
	case ErrorsServerPixelUserErrorCodeNotFound, ErrorsServerPixelUserErrorCodeAlreadyExists, ErrorsServerPixelUserErrorCodePubSubError, ErrorsServerPixelUserErrorCodeNeedsConfigurationToConnect:
		return true
	}
	return false
}

func (e ErrorsServerPixelUserErrorCode) String() string {
	return string(e)
}

func (e *ErrorsServerPixelUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorsServerPixelUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorsServerPixelUserErrorCode", str)
	}
	return nil
}

func (e ErrorsServerPixelUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ErrorsWebPixelUserError`.
type ErrorsWebPixelUserErrorCode string

const (
	// The input value is blank.
	ErrorsWebPixelUserErrorCodeBlank ErrorsWebPixelUserErrorCode = "BLANK"
	// The input value is already taken.
	ErrorsWebPixelUserErrorCodeTaken ErrorsWebPixelUserErrorCode = "TAKEN"
	// The record with the ID used as the input value couldn't be found.
	ErrorsWebPixelUserErrorCodeNotFound ErrorsWebPixelUserErrorCode = "NOT_FOUND"
	// The provided settings ID does not match the expected settings definition on the app.
	ErrorsWebPixelUserErrorCodeInvalidSettings ErrorsWebPixelUserErrorCode = "INVALID_SETTINGS"
	// An error occurred and the web pixel couldnt be deleted.
	ErrorsWebPixelUserErrorCodeUnableToDelete ErrorsWebPixelUserErrorCode = "UNABLE_TO_DELETE"
)

var AllErrorsWebPixelUserErrorCode = []ErrorsWebPixelUserErrorCode{
	ErrorsWebPixelUserErrorCodeBlank,
	ErrorsWebPixelUserErrorCodeTaken,
	ErrorsWebPixelUserErrorCodeNotFound,
	ErrorsWebPixelUserErrorCodeInvalidSettings,
	ErrorsWebPixelUserErrorCodeUnableToDelete,
}

func (e ErrorsWebPixelUserErrorCode) IsValid() bool {
	switch e {
	case ErrorsWebPixelUserErrorCodeBlank, ErrorsWebPixelUserErrorCodeTaken, ErrorsWebPixelUserErrorCodeNotFound, ErrorsWebPixelUserErrorCodeInvalidSettings, ErrorsWebPixelUserErrorCodeUnableToDelete:
		return true
	}
	return false
}

func (e ErrorsWebPixelUserErrorCode) String() string {
	return string(e)
}

func (e *ErrorsWebPixelUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorsWebPixelUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorsWebPixelUserErrorCode", str)
	}
	return nil
}

func (e ErrorsWebPixelUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Event query.
type EventSortKeys string

const (
	// Sort by the `created_at` value.
	EventSortKeysCreatedAt EventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	EventSortKeysID EventSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	EventSortKeysRelevance EventSortKeys = "RELEVANCE"
)

var AllEventSortKeys = []EventSortKeys{
	EventSortKeysCreatedAt,
	EventSortKeysID,
	EventSortKeysRelevance,
}

func (e EventSortKeys) IsValid() bool {
	switch e {
	case EventSortKeysCreatedAt, EventSortKeysID, EventSortKeysRelevance:
		return true
	}
	return false
}

func (e EventSortKeys) String() string {
	return string(e)
}

func (e *EventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSortKeys", str)
	}
	return nil
}

func (e EventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible content types for a file object.
type FileContentType string

const (
	// A Shopify-hosted image.
	FileContentTypeImage FileContentType = "IMAGE"
	// A Shopify-hosted generic file.
	FileContentTypeFile FileContentType = "FILE"
	// A Shopify-hosted video file. It's recommended to use this type for all video files.
	FileContentTypeVideo FileContentType = "VIDEO"
)

var AllFileContentType = []FileContentType{
	FileContentTypeImage,
	FileContentTypeFile,
	FileContentTypeVideo,
}

func (e FileContentType) IsValid() bool {
	switch e {
	case FileContentTypeImage, FileContentTypeFile, FileContentTypeVideo:
		return true
	}
	return false
}

func (e FileContentType) String() string {
	return string(e)
}

func (e *FileContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileContentType", str)
	}
	return nil
}

func (e FileContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The input fields for handling if filename is already in use.
type FileCreateInputDuplicateResolutionMode string

const (
	// Append a UUID if filename is already in use.
	FileCreateInputDuplicateResolutionModeAppendUUID FileCreateInputDuplicateResolutionMode = "APPEND_UUID"
	// Raise an error if filename is already in use.
	FileCreateInputDuplicateResolutionModeRaiseError FileCreateInputDuplicateResolutionMode = "RAISE_ERROR"
	// Replace the existing file if filename is already in use.
	FileCreateInputDuplicateResolutionModeReplace FileCreateInputDuplicateResolutionMode = "REPLACE"
)

var AllFileCreateInputDuplicateResolutionMode = []FileCreateInputDuplicateResolutionMode{
	FileCreateInputDuplicateResolutionModeAppendUUID,
	FileCreateInputDuplicateResolutionModeRaiseError,
	FileCreateInputDuplicateResolutionModeReplace,
}

func (e FileCreateInputDuplicateResolutionMode) IsValid() bool {
	switch e {
	case FileCreateInputDuplicateResolutionModeAppendUUID, FileCreateInputDuplicateResolutionModeRaiseError, FileCreateInputDuplicateResolutionModeReplace:
		return true
	}
	return false
}

func (e FileCreateInputDuplicateResolutionMode) String() string {
	return string(e)
}

func (e *FileCreateInputDuplicateResolutionMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileCreateInputDuplicateResolutionMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileCreateInputDuplicateResolutionMode", str)
	}
	return nil
}

func (e FileCreateInputDuplicateResolutionMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The error types for a file.
type FileErrorCode string

const (
	// File error has occurred for an unknown reason.
	FileErrorCodeUnknown FileErrorCode = "UNKNOWN"
	// File could not be processed because the signed URL was invalid.
	FileErrorCodeInvalidSignedURL FileErrorCode = "INVALID_SIGNED_URL"
	// File could not be processed because the image could not be downloaded.
	FileErrorCodeImageDownloadFailure FileErrorCode = "IMAGE_DOWNLOAD_FAILURE"
	// File could not be processed because the image could not be processed.
	FileErrorCodeImageProcessingFailure FileErrorCode = "IMAGE_PROCESSING_FAILURE"
	// File timed out because it is currently being modified by another operation.
	FileErrorCodeMediaTimeoutError FileErrorCode = "MEDIA_TIMEOUT_ERROR"
	// File could not be created because the external video could not be found.
	FileErrorCodeExternalVideoNotFound FileErrorCode = "EXTERNAL_VIDEO_NOT_FOUND"
	// File could not be created because the external video is not listed or is private.
	FileErrorCodeExternalVideoUnlisted FileErrorCode = "EXTERNAL_VIDEO_UNLISTED"
	// File could not be created because the external video has an invalid aspect ratio.
	FileErrorCodeExternalVideoInvalidAspectRatio FileErrorCode = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
	// File could not be created because embed permissions are disabled for this video.
	FileErrorCodeExternalVideoEmbedDisabled FileErrorCode = "EXTERNAL_VIDEO_EMBED_DISABLED"
	// File could not be created because video is either not found or still transcoding.
	FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding FileErrorCode = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
	// File could not be processed because the source could not be downloaded.
	FileErrorCodeGenericFileDownloadFailure FileErrorCode = "GENERIC_FILE_DOWNLOAD_FAILURE"
	// File could not be created because the size is too large.
	FileErrorCodeGenericFileInvalidSize FileErrorCode = "GENERIC_FILE_INVALID_SIZE"
	// File could not be created because the metadata could not be read.
	FileErrorCodeVideoMetadataReadError FileErrorCode = "VIDEO_METADATA_READ_ERROR"
	// File could not be created because it has an invalid file type.
	FileErrorCodeVideoInvalidFiletypeError FileErrorCode = "VIDEO_INVALID_FILETYPE_ERROR"
	// File could not be created because it does not meet the minimum width requirement.
	FileErrorCodeVideoMinWidthError FileErrorCode = "VIDEO_MIN_WIDTH_ERROR"
	// File could not be created because it does not meet the maximum width requirement.
	FileErrorCodeVideoMaxWidthError FileErrorCode = "VIDEO_MAX_WIDTH_ERROR"
	// File could not be created because it does not meet the minimum height requirement.
	FileErrorCodeVideoMinHeightError FileErrorCode = "VIDEO_MIN_HEIGHT_ERROR"
	// File could not be created because it does not meet the maximum height requirement.
	FileErrorCodeVideoMaxHeightError FileErrorCode = "VIDEO_MAX_HEIGHT_ERROR"
	// File could not be created because it does not meet the minimum duration requirement.
	FileErrorCodeVideoMinDurationError FileErrorCode = "VIDEO_MIN_DURATION_ERROR"
	// File could not be created because it does not meet the maximum duration requirement.
	FileErrorCodeVideoMaxDurationError FileErrorCode = "VIDEO_MAX_DURATION_ERROR"
	// Video failed validation.
	FileErrorCodeVideoValidationError FileErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model failed validation.
	FileErrorCodeModel3dValidationError FileErrorCode = "MODEL3D_VALIDATION_ERROR"
	// File could not be created because the model's thumbnail generation failed.
	FileErrorCodeModel3dThumbnailGenerationError FileErrorCode = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
	// There was an issue while trying to generate a new thumbnail.
	FileErrorCodeModel3dThumbnailRegenerationError FileErrorCode = "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
	// File could not be created because the model can't be converted to USDZ format.
	FileErrorCodeModel3dGlbToUsdzConversionError FileErrorCode = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
	// File could not be created because the model file failed processing.
	FileErrorCodeModel3dGlbOutputCreationError FileErrorCode = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
	// File could not be created because the model file failed processing.
	FileErrorCodeModel3dProcessingFailure FileErrorCode = "MODEL3D_PROCESSING_FAILURE"
	// File could not be created because the image is an unsupported file type.
	FileErrorCodeUnsupportedImageFileType FileErrorCode = "UNSUPPORTED_IMAGE_FILE_TYPE"
	// File could not be created because the image size is too large.
	FileErrorCodeInvalidImageFileSize FileErrorCode = "INVALID_IMAGE_FILE_SIZE"
	// File could not be created because the image has an invalid aspect ratio.
	FileErrorCodeInvalidImageAspectRatio FileErrorCode = "INVALID_IMAGE_ASPECT_RATIO"
	// File could not be created because the image's resolution exceeds the max limit.
	FileErrorCodeInvalidImageResolution FileErrorCode = "INVALID_IMAGE_RESOLUTION"
	// File could not be created because the cumulative file storage limit would be exceeded.
	FileErrorCodeFileStorageLimitExceeded FileErrorCode = "FILE_STORAGE_LIMIT_EXCEEDED"
	// File could not be created because a file with the same name already exists.
	FileErrorCodeDuplicateFilenameError FileErrorCode = "DUPLICATE_FILENAME_ERROR"
)

var AllFileErrorCode = []FileErrorCode{
	FileErrorCodeUnknown,
	FileErrorCodeInvalidSignedURL,
	FileErrorCodeImageDownloadFailure,
	FileErrorCodeImageProcessingFailure,
	FileErrorCodeMediaTimeoutError,
	FileErrorCodeExternalVideoNotFound,
	FileErrorCodeExternalVideoUnlisted,
	FileErrorCodeExternalVideoInvalidAspectRatio,
	FileErrorCodeExternalVideoEmbedDisabled,
	FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding,
	FileErrorCodeGenericFileDownloadFailure,
	FileErrorCodeGenericFileInvalidSize,
	FileErrorCodeVideoMetadataReadError,
	FileErrorCodeVideoInvalidFiletypeError,
	FileErrorCodeVideoMinWidthError,
	FileErrorCodeVideoMaxWidthError,
	FileErrorCodeVideoMinHeightError,
	FileErrorCodeVideoMaxHeightError,
	FileErrorCodeVideoMinDurationError,
	FileErrorCodeVideoMaxDurationError,
	FileErrorCodeVideoValidationError,
	FileErrorCodeModel3dValidationError,
	FileErrorCodeModel3dThumbnailGenerationError,
	FileErrorCodeModel3dThumbnailRegenerationError,
	FileErrorCodeModel3dGlbToUsdzConversionError,
	FileErrorCodeModel3dGlbOutputCreationError,
	FileErrorCodeModel3dProcessingFailure,
	FileErrorCodeUnsupportedImageFileType,
	FileErrorCodeInvalidImageFileSize,
	FileErrorCodeInvalidImageAspectRatio,
	FileErrorCodeInvalidImageResolution,
	FileErrorCodeFileStorageLimitExceeded,
	FileErrorCodeDuplicateFilenameError,
}

func (e FileErrorCode) IsValid() bool {
	switch e {
	case FileErrorCodeUnknown, FileErrorCodeInvalidSignedURL, FileErrorCodeImageDownloadFailure, FileErrorCodeImageProcessingFailure, FileErrorCodeMediaTimeoutError, FileErrorCodeExternalVideoNotFound, FileErrorCodeExternalVideoUnlisted, FileErrorCodeExternalVideoInvalidAspectRatio, FileErrorCodeExternalVideoEmbedDisabled, FileErrorCodeExternalVideoEmbedNotFoundOrTranscoding, FileErrorCodeGenericFileDownloadFailure, FileErrorCodeGenericFileInvalidSize, FileErrorCodeVideoMetadataReadError, FileErrorCodeVideoInvalidFiletypeError, FileErrorCodeVideoMinWidthError, FileErrorCodeVideoMaxWidthError, FileErrorCodeVideoMinHeightError, FileErrorCodeVideoMaxHeightError, FileErrorCodeVideoMinDurationError, FileErrorCodeVideoMaxDurationError, FileErrorCodeVideoValidationError, FileErrorCodeModel3dValidationError, FileErrorCodeModel3dThumbnailGenerationError, FileErrorCodeModel3dThumbnailRegenerationError, FileErrorCodeModel3dGlbToUsdzConversionError, FileErrorCodeModel3dGlbOutputCreationError, FileErrorCodeModel3dProcessingFailure, FileErrorCodeUnsupportedImageFileType, FileErrorCodeInvalidImageFileSize, FileErrorCodeInvalidImageAspectRatio, FileErrorCodeInvalidImageResolution, FileErrorCodeFileStorageLimitExceeded, FileErrorCodeDuplicateFilenameError:
		return true
	}
	return false
}

func (e FileErrorCode) String() string {
	return string(e)
}

func (e *FileErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileErrorCode", str)
	}
	return nil
}

func (e FileErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the File query.
type FileSortKeys string

const (
	// Sort by the `filename` value.
	FileSortKeysFilename FileSortKeys = "FILENAME"
	// Sort by the `original_upload_size` value.
	FileSortKeysOriginalUploadSize FileSortKeys = "ORIGINAL_UPLOAD_SIZE"
	// Sort by the `created_at` value.
	FileSortKeysCreatedAt FileSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	FileSortKeysUpdatedAt FileSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	FileSortKeysID FileSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	FileSortKeysRelevance FileSortKeys = "RELEVANCE"
)

var AllFileSortKeys = []FileSortKeys{
	FileSortKeysFilename,
	FileSortKeysOriginalUploadSize,
	FileSortKeysCreatedAt,
	FileSortKeysUpdatedAt,
	FileSortKeysID,
	FileSortKeysRelevance,
}

func (e FileSortKeys) IsValid() bool {
	switch e {
	case FileSortKeysFilename, FileSortKeysOriginalUploadSize, FileSortKeysCreatedAt, FileSortKeysUpdatedAt, FileSortKeysID, FileSortKeysRelevance:
		return true
	}
	return false
}

func (e FileSortKeys) String() string {
	return string(e)
}

func (e *FileSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileSortKeys", str)
	}
	return nil
}

func (e FileSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a file object.
type FileStatus string

const (
	// File has been uploaded but hasn't been processed.
	FileStatusUploaded FileStatus = "UPLOADED"
	// File is being processed.
	FileStatusProcessing FileStatus = "PROCESSING"
	// File is ready to be displayed.
	FileStatusReady FileStatus = "READY"
	// File processing has failed.
	FileStatusFailed FileStatus = "FAILED"
)

var AllFileStatus = []FileStatus{
	FileStatusUploaded,
	FileStatusProcessing,
	FileStatusReady,
	FileStatusFailed,
}

func (e FileStatus) IsValid() bool {
	switch e {
	case FileStatusUploaded, FileStatusProcessing, FileStatusReady, FileStatusFailed:
		return true
	}
	return false
}

func (e FileStatus) String() string {
	return string(e)
}

func (e *FileStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileStatus", str)
	}
	return nil
}

func (e FileStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FilesUserError`.
type FilesErrorCode string

const (
	// The input value is invalid.
	FilesErrorCodeInvalid FilesErrorCode = "INVALID"
	// File does not exist.
	FilesErrorCodeFileDoesNotExist FilesErrorCode = "FILE_DOES_NOT_EXIST"
	// File has a pending operation.
	FilesErrorCodeFileLocked FilesErrorCode = "FILE_LOCKED"
	// Filename update is only supported on Image and GenericFile.
	FilesErrorCodeUnsupportedMediaTypeForFilenameUpdate FilesErrorCode = "UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE"
	// Specify one argument: search, IDs, or deleteAll.
	FilesErrorCodeTooManyArguments FilesErrorCode = "TOO_MANY_ARGUMENTS"
	// The search term must not be blank.
	FilesErrorCodeBlankSearch FilesErrorCode = "BLANK_SEARCH"
	// At least one argument is required.
	FilesErrorCodeMissingArguments FilesErrorCode = "MISSING_ARGUMENTS"
	// Search query isn't supported.
	FilesErrorCodeInvalidQuery FilesErrorCode = "INVALID_QUERY"
	// Invalid filename extension.
	FilesErrorCodeInvalidFilenameExtension FilesErrorCode = "INVALID_FILENAME_EXTENSION"
	// The provided filename is invalid.
	FilesErrorCodeInvalidFilename FilesErrorCode = "INVALID_FILENAME"
	// The provided filename already exists.
	FilesErrorCodeFilenameAlreadyExists FilesErrorCode = "FILENAME_ALREADY_EXISTS"
	// The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file.
	FilesErrorCodeUnacceptableUnverifiedTrialAsset FilesErrorCode = "UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET"
	// The file type is not supported.
	FilesErrorCodeUnacceptableAsset FilesErrorCode = "UNACCEPTABLE_ASSET"
	// The file is not supported on trial accounts. Select a plan to upload this file.
	FilesErrorCodeUnacceptableTrialAsset FilesErrorCode = "UNACCEPTABLE_TRIAL_ASSET"
	// The alt value exceeds the maximum limit of 512 characters.
	FilesErrorCodeAltValueLimitExceeded FilesErrorCode = "ALT_VALUE_LIMIT_EXCEEDED"
	// The file is not in the READY state.
	FilesErrorCodeNonReadyState FilesErrorCode = "NON_READY_STATE"
	// Exceeded the limit of non-image media per shop.
	FilesErrorCodeNonImageMediaPerShopLimitExceeded FilesErrorCode = "NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED"
	// Cannot create file with custom filename which does not match original source extension.
	FilesErrorCodeMismatchedFilenameAndOriginalSource FilesErrorCode = "MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE"
	// Duplicate resolution mode is not supported for this file type.
	FilesErrorCodeInvalidDuplicateModeForType FilesErrorCode = "INVALID_DUPLICATE_MODE_FOR_TYPE"
	// Invalid image source url value provided.
	FilesErrorCodeInvalidImageSourceURL FilesErrorCode = "INVALID_IMAGE_SOURCE_URL"
	// Duplicate resolution mode REPLACE cannot be used without specifying filename.
	FilesErrorCodeMissingFilenameForDuplicateModeReplace FilesErrorCode = "MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE"
)

var AllFilesErrorCode = []FilesErrorCode{
	FilesErrorCodeInvalid,
	FilesErrorCodeFileDoesNotExist,
	FilesErrorCodeFileLocked,
	FilesErrorCodeUnsupportedMediaTypeForFilenameUpdate,
	FilesErrorCodeTooManyArguments,
	FilesErrorCodeBlankSearch,
	FilesErrorCodeMissingArguments,
	FilesErrorCodeInvalidQuery,
	FilesErrorCodeInvalidFilenameExtension,
	FilesErrorCodeInvalidFilename,
	FilesErrorCodeFilenameAlreadyExists,
	FilesErrorCodeUnacceptableUnverifiedTrialAsset,
	FilesErrorCodeUnacceptableAsset,
	FilesErrorCodeUnacceptableTrialAsset,
	FilesErrorCodeAltValueLimitExceeded,
	FilesErrorCodeNonReadyState,
	FilesErrorCodeNonImageMediaPerShopLimitExceeded,
	FilesErrorCodeMismatchedFilenameAndOriginalSource,
	FilesErrorCodeInvalidDuplicateModeForType,
	FilesErrorCodeInvalidImageSourceURL,
	FilesErrorCodeMissingFilenameForDuplicateModeReplace,
}

func (e FilesErrorCode) IsValid() bool {
	switch e {
	case FilesErrorCodeInvalid, FilesErrorCodeFileDoesNotExist, FilesErrorCodeFileLocked, FilesErrorCodeUnsupportedMediaTypeForFilenameUpdate, FilesErrorCodeTooManyArguments, FilesErrorCodeBlankSearch, FilesErrorCodeMissingArguments, FilesErrorCodeInvalidQuery, FilesErrorCodeInvalidFilenameExtension, FilesErrorCodeInvalidFilename, FilesErrorCodeFilenameAlreadyExists, FilesErrorCodeUnacceptableUnverifiedTrialAsset, FilesErrorCodeUnacceptableAsset, FilesErrorCodeUnacceptableTrialAsset, FilesErrorCodeAltValueLimitExceeded, FilesErrorCodeNonReadyState, FilesErrorCodeNonImageMediaPerShopLimitExceeded, FilesErrorCodeMismatchedFilenameAndOriginalSource, FilesErrorCodeInvalidDuplicateModeForType, FilesErrorCodeInvalidImageSourceURL, FilesErrorCodeMissingFilenameForDuplicateModeReplace:
		return true
	}
	return false
}

func (e FilesErrorCode) String() string {
	return string(e)
}

func (e *FilesErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilesErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilesErrorCode", str)
	}
	return nil
}

func (e FilesErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The display status of a fulfillment.
type FulfillmentDisplayStatus string

const (
	// Displayed as **Attempted delivery**.
	FulfillmentDisplayStatusAttemptedDelivery FulfillmentDisplayStatus = "ATTEMPTED_DELIVERY"
	// Displayed as **Canceled**.
	FulfillmentDisplayStatusCanceled FulfillmentDisplayStatus = "CANCELED"
	// Displayed as **Confirmed**.
	FulfillmentDisplayStatusConfirmed FulfillmentDisplayStatus = "CONFIRMED"
	// Displayed as **Delivered**.
	FulfillmentDisplayStatusDelivered FulfillmentDisplayStatus = "DELIVERED"
	// Displayed as **Failure**.
	FulfillmentDisplayStatusFailure FulfillmentDisplayStatus = "FAILURE"
	// Displayed as **Fulfilled**.
	FulfillmentDisplayStatusFulfilled FulfillmentDisplayStatus = "FULFILLED"
	// Displayed as **In transit**.
	FulfillmentDisplayStatusInTransit FulfillmentDisplayStatus = "IN_TRANSIT"
	// Displayed as **Label printed**.
	FulfillmentDisplayStatusLabelPrinted FulfillmentDisplayStatus = "LABEL_PRINTED"
	// Displayed as **Label purchased**.
	FulfillmentDisplayStatusLabelPurchased FulfillmentDisplayStatus = "LABEL_PURCHASED"
	// Displayed as **Label voided**.
	FulfillmentDisplayStatusLabelVoided FulfillmentDisplayStatus = "LABEL_VOIDED"
	// Displayed as **Marked as fulfilled**.
	FulfillmentDisplayStatusMarkedAsFulfilled FulfillmentDisplayStatus = "MARKED_AS_FULFILLED"
	// Displayed as **Not delivered**.
	FulfillmentDisplayStatusNotDelivered FulfillmentDisplayStatus = "NOT_DELIVERED"
	// Displayed as **Out for delivery**.
	FulfillmentDisplayStatusOutForDelivery FulfillmentDisplayStatus = "OUT_FOR_DELIVERY"
	// Displayed as **Ready for pickup**.
	FulfillmentDisplayStatusReadyForPickup FulfillmentDisplayStatus = "READY_FOR_PICKUP"
	// Displayed as **Picked up**.
	FulfillmentDisplayStatusPickedUp FulfillmentDisplayStatus = "PICKED_UP"
	// Displayed as **Submitted**.
	FulfillmentDisplayStatusSubmitted FulfillmentDisplayStatus = "SUBMITTED"
)

var AllFulfillmentDisplayStatus = []FulfillmentDisplayStatus{
	FulfillmentDisplayStatusAttemptedDelivery,
	FulfillmentDisplayStatusCanceled,
	FulfillmentDisplayStatusConfirmed,
	FulfillmentDisplayStatusDelivered,
	FulfillmentDisplayStatusFailure,
	FulfillmentDisplayStatusFulfilled,
	FulfillmentDisplayStatusInTransit,
	FulfillmentDisplayStatusLabelPrinted,
	FulfillmentDisplayStatusLabelPurchased,
	FulfillmentDisplayStatusLabelVoided,
	FulfillmentDisplayStatusMarkedAsFulfilled,
	FulfillmentDisplayStatusNotDelivered,
	FulfillmentDisplayStatusOutForDelivery,
	FulfillmentDisplayStatusReadyForPickup,
	FulfillmentDisplayStatusPickedUp,
	FulfillmentDisplayStatusSubmitted,
}

func (e FulfillmentDisplayStatus) IsValid() bool {
	switch e {
	case FulfillmentDisplayStatusAttemptedDelivery, FulfillmentDisplayStatusCanceled, FulfillmentDisplayStatusConfirmed, FulfillmentDisplayStatusDelivered, FulfillmentDisplayStatusFailure, FulfillmentDisplayStatusFulfilled, FulfillmentDisplayStatusInTransit, FulfillmentDisplayStatusLabelPrinted, FulfillmentDisplayStatusLabelPurchased, FulfillmentDisplayStatusLabelVoided, FulfillmentDisplayStatusMarkedAsFulfilled, FulfillmentDisplayStatusNotDelivered, FulfillmentDisplayStatusOutForDelivery, FulfillmentDisplayStatusReadyForPickup, FulfillmentDisplayStatusPickedUp, FulfillmentDisplayStatusSubmitted:
		return true
	}
	return false
}

func (e FulfillmentDisplayStatus) String() string {
	return string(e)
}

func (e *FulfillmentDisplayStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentDisplayStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentDisplayStatus", str)
	}
	return nil
}

func (e FulfillmentDisplayStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentEvent query.
type FulfillmentEventSortKeys string

const (
	// Sort by the `happened_at` value.
	FulfillmentEventSortKeysHappenedAt FulfillmentEventSortKeys = "HAPPENED_AT"
	// Sort by the `id` value.
	FulfillmentEventSortKeysID FulfillmentEventSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	FulfillmentEventSortKeysRelevance FulfillmentEventSortKeys = "RELEVANCE"
)

var AllFulfillmentEventSortKeys = []FulfillmentEventSortKeys{
	FulfillmentEventSortKeysHappenedAt,
	FulfillmentEventSortKeysID,
	FulfillmentEventSortKeysRelevance,
}

func (e FulfillmentEventSortKeys) IsValid() bool {
	switch e {
	case FulfillmentEventSortKeysHappenedAt, FulfillmentEventSortKeysID, FulfillmentEventSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentEventSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventSortKeys", str)
	}
	return nil
}

func (e FulfillmentEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status that describes a fulfillment or delivery event.
type FulfillmentEventStatus string

const (
	// A shipping label has been purchased.
	FulfillmentEventStatusLabelPurchased FulfillmentEventStatus = "LABEL_PURCHASED"
	// A purchased shipping label has been printed.
	FulfillmentEventStatusLabelPrinted FulfillmentEventStatus = "LABEL_PRINTED"
	// The fulfillment is ready to be picked up.
	FulfillmentEventStatusReadyForPickup FulfillmentEventStatus = "READY_FOR_PICKUP"
	// The fulfillment is confirmed. This is the default value when no other information is available.
	FulfillmentEventStatusConfirmed FulfillmentEventStatus = "CONFIRMED"
	// The fulfillment is in transit.
	FulfillmentEventStatusInTransit FulfillmentEventStatus = "IN_TRANSIT"
	// The fulfillment is out for delivery.
	FulfillmentEventStatusOutForDelivery FulfillmentEventStatus = "OUT_FOR_DELIVERY"
	// A delivery was attempted.
	FulfillmentEventStatusAttemptedDelivery FulfillmentEventStatus = "ATTEMPTED_DELIVERY"
	// The fulfillment was successfully delivered.
	FulfillmentEventStatusDelivered FulfillmentEventStatus = "DELIVERED"
	// The fulfillment request failed.
	FulfillmentEventStatusFailure FulfillmentEventStatus = "FAILURE"
)

var AllFulfillmentEventStatus = []FulfillmentEventStatus{
	FulfillmentEventStatusLabelPurchased,
	FulfillmentEventStatusLabelPrinted,
	FulfillmentEventStatusReadyForPickup,
	FulfillmentEventStatusConfirmed,
	FulfillmentEventStatusInTransit,
	FulfillmentEventStatusOutForDelivery,
	FulfillmentEventStatusAttemptedDelivery,
	FulfillmentEventStatusDelivered,
	FulfillmentEventStatusFailure,
}

func (e FulfillmentEventStatus) IsValid() bool {
	switch e {
	case FulfillmentEventStatusLabelPurchased, FulfillmentEventStatusLabelPrinted, FulfillmentEventStatusReadyForPickup, FulfillmentEventStatusConfirmed, FulfillmentEventStatusInTransit, FulfillmentEventStatusOutForDelivery, FulfillmentEventStatusAttemptedDelivery, FulfillmentEventStatusDelivered, FulfillmentEventStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentEventStatus) String() string {
	return string(e)
}

func (e *FulfillmentEventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventStatus", str)
	}
	return nil
}

func (e FulfillmentEventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for a fulfillment hold.
type FulfillmentHoldReason string

const (
	// The fulfillment hold is applied because payment is pending.
	FulfillmentHoldReasonAwaitingPayment FulfillmentHoldReason = "AWAITING_PAYMENT"
	// The fulfillment hold is applied because of a high risk of fraud.
	FulfillmentHoldReasonHighRiskOfFraud FulfillmentHoldReason = "HIGH_RISK_OF_FRAUD"
	// The fulfillment hold is applied because of an incorrect address.
	FulfillmentHoldReasonIncorrectAddress FulfillmentHoldReason = "INCORRECT_ADDRESS"
	// The fulfillment hold is applied because inventory is out of stock.
	FulfillmentHoldReasonInventoryOutOfStock FulfillmentHoldReason = "INVENTORY_OUT_OF_STOCK"
	// The fulfillment hold is applied because of an unknown delivery date.
	FulfillmentHoldReasonUnknownDeliveryDate FulfillmentHoldReason = "UNKNOWN_DELIVERY_DATE"
	// The fulfillment hold is applied because of a post purchase upsell offer.
	FulfillmentHoldReasonOnlineStorePostPurchaseCrossSell FulfillmentHoldReason = "ONLINE_STORE_POST_PURCHASE_CROSS_SELL"
	// The fulfillment hold is applied for another reason.
	FulfillmentHoldReasonOther FulfillmentHoldReason = "OTHER"
)

var AllFulfillmentHoldReason = []FulfillmentHoldReason{
	FulfillmentHoldReasonAwaitingPayment,
	FulfillmentHoldReasonHighRiskOfFraud,
	FulfillmentHoldReasonIncorrectAddress,
	FulfillmentHoldReasonInventoryOutOfStock,
	FulfillmentHoldReasonUnknownDeliveryDate,
	FulfillmentHoldReasonOnlineStorePostPurchaseCrossSell,
	FulfillmentHoldReasonOther,
}

func (e FulfillmentHoldReason) IsValid() bool {
	switch e {
	case FulfillmentHoldReasonAwaitingPayment, FulfillmentHoldReasonHighRiskOfFraud, FulfillmentHoldReasonIncorrectAddress, FulfillmentHoldReasonInventoryOutOfStock, FulfillmentHoldReasonUnknownDeliveryDate, FulfillmentHoldReasonOnlineStorePostPurchaseCrossSell, FulfillmentHoldReasonOther:
		return true
	}
	return false
}

func (e FulfillmentHoldReason) String() string {
	return string(e)
}

func (e *FulfillmentHoldReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentHoldReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentHoldReason", str)
	}
	return nil
}

func (e FulfillmentHoldReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The actions that can be taken on a fulfillment order.
type FulfillmentOrderAction string

const (
	// Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`.
	FulfillmentOrderActionCreateFulfillment FulfillmentOrderAction = "CREATE_FULFILLMENT"
	// Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`.
	FulfillmentOrderActionRequestFulfillment FulfillmentOrderAction = "REQUEST_FULFILLMENT"
	// Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
	FulfillmentOrderActionCancelFulfillmentOrder FulfillmentOrderAction = "CANCEL_FULFILLMENT_ORDER"
	// Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
	FulfillmentOrderActionMove FulfillmentOrderAction = "MOVE"
	// Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`.
	FulfillmentOrderActionRequestCancellation FulfillmentOrderAction = "REQUEST_CANCELLATION"
	// Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
	FulfillmentOrderActionMarkAsOpen FulfillmentOrderAction = "MARK_AS_OPEN"
	// Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`.
	FulfillmentOrderActionReleaseHold FulfillmentOrderAction = "RELEASE_HOLD"
	// Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
	FulfillmentOrderActionHold FulfillmentOrderAction = "HOLD"
	// Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`.
	FulfillmentOrderActionExternal FulfillmentOrderAction = "EXTERNAL"
	// Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`.
	FulfillmentOrderActionSplit FulfillmentOrderAction = "SPLIT"
	// Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`.
	FulfillmentOrderActionMerge FulfillmentOrderAction = "MERGE"
)

var AllFulfillmentOrderAction = []FulfillmentOrderAction{
	FulfillmentOrderActionCreateFulfillment,
	FulfillmentOrderActionRequestFulfillment,
	FulfillmentOrderActionCancelFulfillmentOrder,
	FulfillmentOrderActionMove,
	FulfillmentOrderActionRequestCancellation,
	FulfillmentOrderActionMarkAsOpen,
	FulfillmentOrderActionReleaseHold,
	FulfillmentOrderActionHold,
	FulfillmentOrderActionExternal,
	FulfillmentOrderActionSplit,
	FulfillmentOrderActionMerge,
}

func (e FulfillmentOrderAction) IsValid() bool {
	switch e {
	case FulfillmentOrderActionCreateFulfillment, FulfillmentOrderActionRequestFulfillment, FulfillmentOrderActionCancelFulfillmentOrder, FulfillmentOrderActionMove, FulfillmentOrderActionRequestCancellation, FulfillmentOrderActionMarkAsOpen, FulfillmentOrderActionReleaseHold, FulfillmentOrderActionHold, FulfillmentOrderActionExternal, FulfillmentOrderActionSplit, FulfillmentOrderActionMerge:
		return true
	}
	return false
}

func (e FulfillmentOrderAction) String() string {
	return string(e)
}

func (e *FulfillmentOrderAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAction", str)
	}
	return nil
}

func (e FulfillmentOrderAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The assigment status to be used to filter fulfillment orders.
type FulfillmentOrderAssignmentStatus string

const (
	// Fulfillment orders for which the merchant has requested cancellation of
	// the previously accepted fulfillment request.
	//
	FulfillmentOrderAssignmentStatusCancellationRequested FulfillmentOrderAssignmentStatus = "CANCELLATION_REQUESTED"
	// Fulfillment orders for which the merchant has requested fulfillment.
	//
	FulfillmentOrderAssignmentStatusFulfillmentRequested FulfillmentOrderAssignmentStatus = "FULFILLMENT_REQUESTED"
	// Fulfillment orders for which the merchant's fulfillment request has been accepted.
	// Any number of fulfillments can be created on these fulfillment orders
	// to completely fulfill the requested items.
	//
	FulfillmentOrderAssignmentStatusFulfillmentAccepted FulfillmentOrderAssignmentStatus = "FULFILLMENT_ACCEPTED"
)

var AllFulfillmentOrderAssignmentStatus = []FulfillmentOrderAssignmentStatus{
	FulfillmentOrderAssignmentStatusCancellationRequested,
	FulfillmentOrderAssignmentStatusFulfillmentRequested,
	FulfillmentOrderAssignmentStatusFulfillmentAccepted,
}

func (e FulfillmentOrderAssignmentStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderAssignmentStatusCancellationRequested, FulfillmentOrderAssignmentStatusFulfillmentRequested, FulfillmentOrderAssignmentStatusFulfillmentAccepted:
		return true
	}
	return false
}

func (e FulfillmentOrderAssignmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderAssignmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAssignmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAssignmentStatus", str)
	}
	return nil
}

func (e FulfillmentOrderAssignmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
type FulfillmentOrderHoldUserErrorCode string

const (
	// The fulfillment order could not be found.
	FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderHoldUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
	// The input value is already taken.
	FulfillmentOrderHoldUserErrorCodeTaken FulfillmentOrderHoldUserErrorCode = "TAKEN"
	// The fulfillment order line item quantity must be greater than 0.
	FulfillmentOrderHoldUserErrorCodeGreaterThanZero FulfillmentOrderHoldUserErrorCode = "GREATER_THAN_ZERO"
	// The fulfillment order line item quantity is invalid.
	FulfillmentOrderHoldUserErrorCodeInvalidLineItemQuantity FulfillmentOrderHoldUserErrorCode = "INVALID_LINE_ITEM_QUANTITY"
)

var AllFulfillmentOrderHoldUserErrorCode = []FulfillmentOrderHoldUserErrorCode{
	FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound,
	FulfillmentOrderHoldUserErrorCodeTaken,
	FulfillmentOrderHoldUserErrorCodeGreaterThanZero,
	FulfillmentOrderHoldUserErrorCodeInvalidLineItemQuantity,
}

func (e FulfillmentOrderHoldUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderHoldUserErrorCodeFulfillmentOrderNotFound, FulfillmentOrderHoldUserErrorCodeTaken, FulfillmentOrderHoldUserErrorCodeGreaterThanZero, FulfillmentOrderHoldUserErrorCodeInvalidLineItemQuantity:
		return true
	}
	return false
}

func (e FulfillmentOrderHoldUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderHoldUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderHoldUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderHoldUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderHoldUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`.
type FulfillmentOrderLineItemsPreparedForPickupUserErrorCode string

const (
	// The fulfillment order does not have any line items that can be prepared.
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeNoLineItemsToPrepareForFulfillmentOrder FulfillmentOrderLineItemsPreparedForPickupUserErrorCode = "NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER"
	// Invalid fulfillment order ID provided.
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeFulfillmentOrderInvalid FulfillmentOrderLineItemsPreparedForPickupUserErrorCode = "FULFILLMENT_ORDER_INVALID"
	// Unable to prepare quantity.
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeUnableToPrepareQuantity FulfillmentOrderLineItemsPreparedForPickupUserErrorCode = "UNABLE_TO_PREPARE_QUANTITY"
)

var AllFulfillmentOrderLineItemsPreparedForPickupUserErrorCode = []FulfillmentOrderLineItemsPreparedForPickupUserErrorCode{
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeNoLineItemsToPrepareForFulfillmentOrder,
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeFulfillmentOrderInvalid,
	FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeUnableToPrepareQuantity,
}

func (e FulfillmentOrderLineItemsPreparedForPickupUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeNoLineItemsToPrepareForFulfillmentOrder, FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeFulfillmentOrderInvalid, FulfillmentOrderLineItemsPreparedForPickupUserErrorCodeUnableToPrepareQuantity:
		return true
	}
	return false
}

func (e FulfillmentOrderLineItemsPreparedForPickupUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderLineItemsPreparedForPickupUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderLineItemsPreparedForPickupUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderLineItemsPreparedForPickupUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderLineItemsPreparedForPickupUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The kinds of request merchants can make to a fulfillment service.
type FulfillmentOrderMerchantRequestKind string

const (
	// The merchant requests fulfillment for an `OPEN` fulfillment order.
	//
	FulfillmentOrderMerchantRequestKindFulfillmentRequest FulfillmentOrderMerchantRequestKind = "FULFILLMENT_REQUEST"
	// The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
	//
	FulfillmentOrderMerchantRequestKindCancellationRequest FulfillmentOrderMerchantRequestKind = "CANCELLATION_REQUEST"
)

var AllFulfillmentOrderMerchantRequestKind = []FulfillmentOrderMerchantRequestKind{
	FulfillmentOrderMerchantRequestKindFulfillmentRequest,
	FulfillmentOrderMerchantRequestKindCancellationRequest,
}

func (e FulfillmentOrderMerchantRequestKind) IsValid() bool {
	switch e {
	case FulfillmentOrderMerchantRequestKindFulfillmentRequest, FulfillmentOrderMerchantRequestKindCancellationRequest:
		return true
	}
	return false
}

func (e FulfillmentOrderMerchantRequestKind) String() string {
	return string(e)
}

func (e *FulfillmentOrderMerchantRequestKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderMerchantRequestKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderMerchantRequestKind", str)
	}
	return nil
}

func (e FulfillmentOrderMerchantRequestKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderMergeUserError`.
type FulfillmentOrderMergeUserErrorCode string

const (
	// The fulfillment order could not be found.
	FulfillmentOrderMergeUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderMergeUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
	// The fulfillment order line item quantity must be greater than 0.
	FulfillmentOrderMergeUserErrorCodeGreaterThan FulfillmentOrderMergeUserErrorCode = "GREATER_THAN"
	// The fulfillment order line item quantity is invalid.
	FulfillmentOrderMergeUserErrorCodeInvalidLineItemQuantity FulfillmentOrderMergeUserErrorCode = "INVALID_LINE_ITEM_QUANTITY"
)

var AllFulfillmentOrderMergeUserErrorCode = []FulfillmentOrderMergeUserErrorCode{
	FulfillmentOrderMergeUserErrorCodeFulfillmentOrderNotFound,
	FulfillmentOrderMergeUserErrorCodeGreaterThan,
	FulfillmentOrderMergeUserErrorCodeInvalidLineItemQuantity,
}

func (e FulfillmentOrderMergeUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderMergeUserErrorCodeFulfillmentOrderNotFound, FulfillmentOrderMergeUserErrorCodeGreaterThan, FulfillmentOrderMergeUserErrorCodeInvalidLineItemQuantity:
		return true
	}
	return false
}

func (e FulfillmentOrderMergeUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderMergeUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderMergeUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderMergeUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderMergeUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for a fulfillment order rejection.
type FulfillmentOrderRejectionReason string

const (
	// The fulfillment order was rejected because of an incorrect address.
	FulfillmentOrderRejectionReasonIncorrectAddress FulfillmentOrderRejectionReason = "INCORRECT_ADDRESS"
	// The fulfillment order was rejected because inventory is out of stock.
	FulfillmentOrderRejectionReasonInventoryOutOfStock FulfillmentOrderRejectionReason = "INVENTORY_OUT_OF_STOCK"
	// The fulfillment order was rejected because of an ineligible product.
	FulfillmentOrderRejectionReasonIneligibleProduct FulfillmentOrderRejectionReason = "INELIGIBLE_PRODUCT"
	// The fulfillment order was rejected because of an undeliverable destination.
	FulfillmentOrderRejectionReasonUndeliverableDestination FulfillmentOrderRejectionReason = "UNDELIVERABLE_DESTINATION"
	// The fulfillment order was rejected for another reason.
	FulfillmentOrderRejectionReasonOther FulfillmentOrderRejectionReason = "OTHER"
)

var AllFulfillmentOrderRejectionReason = []FulfillmentOrderRejectionReason{
	FulfillmentOrderRejectionReasonIncorrectAddress,
	FulfillmentOrderRejectionReasonInventoryOutOfStock,
	FulfillmentOrderRejectionReasonIneligibleProduct,
	FulfillmentOrderRejectionReasonUndeliverableDestination,
	FulfillmentOrderRejectionReasonOther,
}

func (e FulfillmentOrderRejectionReason) IsValid() bool {
	switch e {
	case FulfillmentOrderRejectionReasonIncorrectAddress, FulfillmentOrderRejectionReasonInventoryOutOfStock, FulfillmentOrderRejectionReasonIneligibleProduct, FulfillmentOrderRejectionReasonUndeliverableDestination, FulfillmentOrderRejectionReasonOther:
		return true
	}
	return false
}

func (e FulfillmentOrderRejectionReason) String() string {
	return string(e)
}

func (e *FulfillmentOrderRejectionReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRejectionReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRejectionReason", str)
	}
	return nil
}

func (e FulfillmentOrderRejectionReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
type FulfillmentOrderReleaseHoldUserErrorCode string

const (
	// The fulfillment order wasn't found.
	FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderReleaseHoldUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
	// The fulfillment order line item quantity must be greater than 0.
	FulfillmentOrderReleaseHoldUserErrorCodeGreaterThanZero FulfillmentOrderReleaseHoldUserErrorCode = "GREATER_THAN_ZERO"
	// The fulfillment order line item quantity is invalid.
	FulfillmentOrderReleaseHoldUserErrorCodeInvalidLineItemQuantity FulfillmentOrderReleaseHoldUserErrorCode = "INVALID_LINE_ITEM_QUANTITY"
)

var AllFulfillmentOrderReleaseHoldUserErrorCode = []FulfillmentOrderReleaseHoldUserErrorCode{
	FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound,
	FulfillmentOrderReleaseHoldUserErrorCodeGreaterThanZero,
	FulfillmentOrderReleaseHoldUserErrorCodeInvalidLineItemQuantity,
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderReleaseHoldUserErrorCodeFulfillmentOrderNotFound, FulfillmentOrderReleaseHoldUserErrorCodeGreaterThanZero, FulfillmentOrderReleaseHoldUserErrorCodeInvalidLineItemQuantity:
		return true
	}
	return false
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderReleaseHoldUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderReleaseHoldUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderReleaseHoldUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderReleaseHoldUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The request status of a fulfillment order.
type FulfillmentOrderRequestStatus string

const (
	// The initial request status for the newly-created fulfillment orders. This is the only valid
	// request status for fulfillment orders that aren't assigned to a fulfillment service.
	//
	FulfillmentOrderRequestStatusUnsubmitted FulfillmentOrderRequestStatus = "UNSUBMITTED"
	// The merchant requested fulfillment for this fulfillment order.
	FulfillmentOrderRequestStatusSubmitted FulfillmentOrderRequestStatus = "SUBMITTED"
	// The fulfillment service accepted the merchant's fulfillment request.
	FulfillmentOrderRequestStatusAccepted FulfillmentOrderRequestStatus = "ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment request.
	FulfillmentOrderRequestStatusRejected FulfillmentOrderRequestStatus = "REJECTED"
	// The merchant requested a cancellation of the fulfillment request for this fulfillment order.
	//
	FulfillmentOrderRequestStatusCancellationRequested FulfillmentOrderRequestStatus = "CANCELLATION_REQUESTED"
	// The fulfillment service accepted the merchant's fulfillment cancellation request.
	//
	FulfillmentOrderRequestStatusCancellationAccepted FulfillmentOrderRequestStatus = "CANCELLATION_ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment cancellation request.
	//
	FulfillmentOrderRequestStatusCancellationRejected FulfillmentOrderRequestStatus = "CANCELLATION_REJECTED"
	// The fulfillment service closed the fulfillment order without completing it.
	FulfillmentOrderRequestStatusClosed FulfillmentOrderRequestStatus = "CLOSED"
)

var AllFulfillmentOrderRequestStatus = []FulfillmentOrderRequestStatus{
	FulfillmentOrderRequestStatusUnsubmitted,
	FulfillmentOrderRequestStatusSubmitted,
	FulfillmentOrderRequestStatusAccepted,
	FulfillmentOrderRequestStatusRejected,
	FulfillmentOrderRequestStatusCancellationRequested,
	FulfillmentOrderRequestStatusCancellationAccepted,
	FulfillmentOrderRequestStatusCancellationRejected,
	FulfillmentOrderRequestStatusClosed,
}

func (e FulfillmentOrderRequestStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderRequestStatusUnsubmitted, FulfillmentOrderRequestStatusSubmitted, FulfillmentOrderRequestStatusAccepted, FulfillmentOrderRequestStatusRejected, FulfillmentOrderRequestStatusCancellationRequested, FulfillmentOrderRequestStatusCancellationAccepted, FulfillmentOrderRequestStatusCancellationRejected, FulfillmentOrderRequestStatusClosed:
		return true
	}
	return false
}

func (e FulfillmentOrderRequestStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRequestStatus", str)
	}
	return nil
}

func (e FulfillmentOrderRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
type FulfillmentOrderRescheduleUserErrorCode string

const (
	// Fulfillment order could not be found.
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderRescheduleUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
)

var AllFulfillmentOrderRescheduleUserErrorCode = []FulfillmentOrderRescheduleUserErrorCode{
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound,
}

func (e FulfillmentOrderRescheduleUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrderRescheduleUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderRescheduleUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRescheduleUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRescheduleUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderRescheduleUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentOrder query.
type FulfillmentOrderSortKeys string

const (
	// Sort by the `id` value.
	FulfillmentOrderSortKeysID FulfillmentOrderSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	FulfillmentOrderSortKeysRelevance FulfillmentOrderSortKeys = "RELEVANCE"
)

var AllFulfillmentOrderSortKeys = []FulfillmentOrderSortKeys{
	FulfillmentOrderSortKeysID,
	FulfillmentOrderSortKeysRelevance,
}

func (e FulfillmentOrderSortKeys) IsValid() bool {
	switch e {
	case FulfillmentOrderSortKeysID, FulfillmentOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentOrderSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderSortKeys", str)
	}
	return nil
}

func (e FulfillmentOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrderSplitUserError`.
type FulfillmentOrderSplitUserErrorCode string

const (
	// The fulfillment order could not be found.
	FulfillmentOrderSplitUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderSplitUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
	// The fulfillment order line item quantity must be greater than 0.
	FulfillmentOrderSplitUserErrorCodeGreaterThan FulfillmentOrderSplitUserErrorCode = "GREATER_THAN"
	// The fulfillment order line item quantity is invalid.
	FulfillmentOrderSplitUserErrorCodeInvalidLineItemQuantity FulfillmentOrderSplitUserErrorCode = "INVALID_LINE_ITEM_QUANTITY"
)

var AllFulfillmentOrderSplitUserErrorCode = []FulfillmentOrderSplitUserErrorCode{
	FulfillmentOrderSplitUserErrorCodeFulfillmentOrderNotFound,
	FulfillmentOrderSplitUserErrorCodeGreaterThan,
	FulfillmentOrderSplitUserErrorCodeInvalidLineItemQuantity,
}

func (e FulfillmentOrderSplitUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderSplitUserErrorCodeFulfillmentOrderNotFound, FulfillmentOrderSplitUserErrorCodeGreaterThan, FulfillmentOrderSplitUserErrorCodeInvalidLineItemQuantity:
		return true
	}
	return false
}

func (e FulfillmentOrderSplitUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderSplitUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderSplitUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderSplitUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderSplitUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment order.
type FulfillmentOrderStatus string

const (
	// The fulfillment order is ready for fulfillment.
	FulfillmentOrderStatusOpen FulfillmentOrderStatus = "OPEN"
	// The fulfillment order is being processed.
	FulfillmentOrderStatusInProgress FulfillmentOrderStatus = "IN_PROGRESS"
	// The fulfillment order has been cancelled by the merchant.
	FulfillmentOrderStatusCancelled FulfillmentOrderStatus = "CANCELLED"
	// The fulfillment order cannot be completed as requested.
	FulfillmentOrderStatusIncomplete FulfillmentOrderStatus = "INCOMPLETE"
	// The fulfillment order has been completed and closed.
	FulfillmentOrderStatusClosed FulfillmentOrderStatus = "CLOSED"
	// The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
	FulfillmentOrderStatusScheduled FulfillmentOrderStatus = "SCHEDULED"
	// The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released.
	FulfillmentOrderStatusOnHold FulfillmentOrderStatus = "ON_HOLD"
)

var AllFulfillmentOrderStatus = []FulfillmentOrderStatus{
	FulfillmentOrderStatusOpen,
	FulfillmentOrderStatusInProgress,
	FulfillmentOrderStatusCancelled,
	FulfillmentOrderStatusIncomplete,
	FulfillmentOrderStatusClosed,
	FulfillmentOrderStatusScheduled,
	FulfillmentOrderStatusOnHold,
}

func (e FulfillmentOrderStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderStatusOpen, FulfillmentOrderStatusInProgress, FulfillmentOrderStatusCancelled, FulfillmentOrderStatusIncomplete, FulfillmentOrderStatusClosed, FulfillmentOrderStatusScheduled, FulfillmentOrderStatusOnHold:
		return true
	}
	return false
}

func (e FulfillmentOrderStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderStatus", str)
	}
	return nil
}

func (e FulfillmentOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`.
type FulfillmentOrdersReleaseHoldsUserErrorCode string

const (
	// Failed to create release fulfillment order holds job.
	FulfillmentOrdersReleaseHoldsUserErrorCodeFailedToCreateJob FulfillmentOrdersReleaseHoldsUserErrorCode = "FAILED_TO_CREATE_JOB"
)

var AllFulfillmentOrdersReleaseHoldsUserErrorCode = []FulfillmentOrdersReleaseHoldsUserErrorCode{
	FulfillmentOrdersReleaseHoldsUserErrorCodeFailedToCreateJob,
}

func (e FulfillmentOrdersReleaseHoldsUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrdersReleaseHoldsUserErrorCodeFailedToCreateJob:
		return true
	}
	return false
}

func (e FulfillmentOrdersReleaseHoldsUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrdersReleaseHoldsUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrdersReleaseHoldsUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrdersReleaseHoldsUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrdersReleaseHoldsUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`.
type FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode string

const (
	// The fulfillment orders could not be found.
	FulfillmentOrdersSetFulfillmentDeadlineUserErrorCodeFulfillmentOrdersNotFound FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode = "FULFILLMENT_ORDERS_NOT_FOUND"
)

var AllFulfillmentOrdersSetFulfillmentDeadlineUserErrorCode = []FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode{
	FulfillmentOrdersSetFulfillmentDeadlineUserErrorCodeFulfillmentOrdersNotFound,
}

func (e FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrdersSetFulfillmentDeadlineUserErrorCodeFulfillmentOrdersNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a fulfillment service.
type FulfillmentServiceType string

const (
	// Fulfillment by gift card.
	FulfillmentServiceTypeGiftCard FulfillmentServiceType = "GIFT_CARD"
	// Manual fulfillment by the merchant.
	FulfillmentServiceTypeManual FulfillmentServiceType = "MANUAL"
	// Fullfillment by a third-party fulfillment service.
	FulfillmentServiceTypeThirdParty FulfillmentServiceType = "THIRD_PARTY"
)

var AllFulfillmentServiceType = []FulfillmentServiceType{
	FulfillmentServiceTypeGiftCard,
	FulfillmentServiceTypeManual,
	FulfillmentServiceTypeThirdParty,
}

func (e FulfillmentServiceType) IsValid() bool {
	switch e {
	case FulfillmentServiceTypeGiftCard, FulfillmentServiceTypeManual, FulfillmentServiceTypeThirdParty:
		return true
	}
	return false
}

func (e FulfillmentServiceType) String() string {
	return string(e)
}

func (e *FulfillmentServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentServiceType", str)
	}
	return nil
}

func (e FulfillmentServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment.
type FulfillmentStatus string

const (
	// Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
	//
	FulfillmentStatusPending FulfillmentStatus = "PENDING"
	// The third-party fulfillment service has acknowledged the fulfillment and is processing it.
	//
	FulfillmentStatusOpen FulfillmentStatus = "OPEN"
	// The fulfillment was completed successfully.
	FulfillmentStatusSuccess FulfillmentStatus = "SUCCESS"
	// The fulfillment was canceled.
	FulfillmentStatusCancelled FulfillmentStatus = "CANCELLED"
	// There was an error with the fulfillment request.
	FulfillmentStatusError FulfillmentStatus = "ERROR"
	// The fulfillment request failed.
	FulfillmentStatusFailure FulfillmentStatus = "FAILURE"
)

var AllFulfillmentStatus = []FulfillmentStatus{
	FulfillmentStatusPending,
	FulfillmentStatusOpen,
	FulfillmentStatusSuccess,
	FulfillmentStatusCancelled,
	FulfillmentStatusError,
	FulfillmentStatusFailure,
}

func (e FulfillmentStatus) IsValid() bool {
	switch e {
	case FulfillmentStatusPending, FulfillmentStatusOpen, FulfillmentStatusSuccess, FulfillmentStatusCancelled, FulfillmentStatusError, FulfillmentStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentStatus", str)
	}
	return nil
}

func (e FulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `GiftCardUserError`.
type GiftCardErrorCode string

const (
	// The input value is too long.
	GiftCardErrorCodeTooLong GiftCardErrorCode = "TOO_LONG"
	// The input value is too short.
	GiftCardErrorCodeTooShort GiftCardErrorCode = "TOO_SHORT"
	// The input value is already taken.
	GiftCardErrorCodeTaken GiftCardErrorCode = "TAKEN"
	// The input value is invalid.
	GiftCardErrorCodeInvalid GiftCardErrorCode = "INVALID"
	// Unexpected internal error happened.
	GiftCardErrorCodeInternalError GiftCardErrorCode = "INTERNAL_ERROR"
	// Missing a required argument.
	GiftCardErrorCodeMissingArgument GiftCardErrorCode = "MISSING_ARGUMENT"
	// The input value should be greater than the minimum allowed value.
	GiftCardErrorCodeGreaterThan GiftCardErrorCode = "GREATER_THAN"
)

var AllGiftCardErrorCode = []GiftCardErrorCode{
	GiftCardErrorCodeTooLong,
	GiftCardErrorCodeTooShort,
	GiftCardErrorCodeTaken,
	GiftCardErrorCodeInvalid,
	GiftCardErrorCodeInternalError,
	GiftCardErrorCodeMissingArgument,
	GiftCardErrorCodeGreaterThan,
}

func (e GiftCardErrorCode) IsValid() bool {
	switch e {
	case GiftCardErrorCodeTooLong, GiftCardErrorCodeTooShort, GiftCardErrorCodeTaken, GiftCardErrorCodeInvalid, GiftCardErrorCodeInternalError, GiftCardErrorCodeMissingArgument, GiftCardErrorCodeGreaterThan:
		return true
	}
	return false
}

func (e GiftCardErrorCode) String() string {
	return string(e)
}

func (e *GiftCardErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GiftCardErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GiftCardErrorCode", str)
	}
	return nil
}

func (e GiftCardErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the GiftCard query.
type GiftCardSortKeys string

const (
	// Sort by the `created_at` value.
	GiftCardSortKeysCreatedAt GiftCardSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	GiftCardSortKeysUpdatedAt GiftCardSortKeys = "UPDATED_AT"
	// Sort by the `customer_name` value.
	GiftCardSortKeysCustomerName GiftCardSortKeys = "CUSTOMER_NAME"
	// Sort by the `code` value.
	GiftCardSortKeysCode GiftCardSortKeys = "CODE"
	// Sort by the `balance` value.
	GiftCardSortKeysBalance GiftCardSortKeys = "BALANCE"
	// Sort by the `amount_spent` value.
	GiftCardSortKeysAmountSpent GiftCardSortKeys = "AMOUNT_SPENT"
	// Sort by the `initial_value` value.
	GiftCardSortKeysInitialValue GiftCardSortKeys = "INITIAL_VALUE"
	// Sort by the `disabled_at` value.
	GiftCardSortKeysDisabledAt GiftCardSortKeys = "DISABLED_AT"
	// Sort by the `expires_on` value.
	GiftCardSortKeysExpiresOn GiftCardSortKeys = "EXPIRES_ON"
	// Sort by the `id` value.
	GiftCardSortKeysID GiftCardSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	GiftCardSortKeysRelevance GiftCardSortKeys = "RELEVANCE"
)

var AllGiftCardSortKeys = []GiftCardSortKeys{
	GiftCardSortKeysCreatedAt,
	GiftCardSortKeysUpdatedAt,
	GiftCardSortKeysCustomerName,
	GiftCardSortKeysCode,
	GiftCardSortKeysBalance,
	GiftCardSortKeysAmountSpent,
	GiftCardSortKeysInitialValue,
	GiftCardSortKeysDisabledAt,
	GiftCardSortKeysExpiresOn,
	GiftCardSortKeysID,
	GiftCardSortKeysRelevance,
}

func (e GiftCardSortKeys) IsValid() bool {
	switch e {
	case GiftCardSortKeysCreatedAt, GiftCardSortKeysUpdatedAt, GiftCardSortKeysCustomerName, GiftCardSortKeysCode, GiftCardSortKeysBalance, GiftCardSortKeysAmountSpent, GiftCardSortKeysInitialValue, GiftCardSortKeysDisabledAt, GiftCardSortKeysExpiresOn, GiftCardSortKeysID, GiftCardSortKeysRelevance:
		return true
	}
	return false
}

func (e GiftCardSortKeys) String() string {
	return string(e)
}

func (e *GiftCardSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GiftCardSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GiftCardSortKeys", str)
	}
	return nil
}

func (e GiftCardSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// List of supported image content types.
type ImageContentType string

const (
	// A PNG image.
	ImageContentTypePng ImageContentType = "PNG"
	// A JPG image.
	ImageContentTypeJpg ImageContentType = "JPG"
	// A WEBP image.
	ImageContentTypeWebp ImageContentType = "WEBP"
)

var AllImageContentType = []ImageContentType{
	ImageContentTypePng,
	ImageContentTypeJpg,
	ImageContentTypeWebp,
}

func (e ImageContentType) IsValid() bool {
	switch e {
	case ImageContentTypePng, ImageContentTypeJpg, ImageContentTypeWebp:
		return true
	}
	return false
}

func (e ImageContentType) String() string {
	return string(e)
}

func (e *ImageContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageContentType", str)
	}
	return nil
}

func (e ImageContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`.
type InventoryAdjustQuantitiesUserErrorCode string

const (
	// Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
	InventoryAdjustQuantitiesUserErrorCodeInternalLedgerDocument InventoryAdjustQuantitiesUserErrorCode = "INTERNAL_LEDGER_DOCUMENT"
	// A ledger document URI is not allowed when adjusting available.
	InventoryAdjustQuantitiesUserErrorCodeInvalidAvailableDocument InventoryAdjustQuantitiesUserErrorCode = "INVALID_AVAILABLE_DOCUMENT"
	// The specified inventory item could not be found.
	InventoryAdjustQuantitiesUserErrorCodeInvalidInventoryItem InventoryAdjustQuantitiesUserErrorCode = "INVALID_INVENTORY_ITEM"
	// The specified ledger document is invalid.
	InventoryAdjustQuantitiesUserErrorCodeInvalidLedgerDocument InventoryAdjustQuantitiesUserErrorCode = "INVALID_LEDGER_DOCUMENT"
	// The specified location could not be found.
	InventoryAdjustQuantitiesUserErrorCodeInvalidLocation InventoryAdjustQuantitiesUserErrorCode = "INVALID_LOCATION"
	// A ledger document URI is required except when adjusting available.
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityDocument InventoryAdjustQuantitiesUserErrorCode = "INVALID_QUANTITY_DOCUMENT"
	// The specified quantity name is invalid.
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityName InventoryAdjustQuantitiesUserErrorCode = "INVALID_QUANTITY_NAME"
	// The quantity can't be lower than -2,000,000,000.
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooLow InventoryAdjustQuantitiesUserErrorCode = "INVALID_QUANTITY_TOO_LOW"
	// The quantity can't be higher than 2,000,000,000.
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooHigh InventoryAdjustQuantitiesUserErrorCode = "INVALID_QUANTITY_TOO_HIGH"
	// The specified reason is invalid.
	InventoryAdjustQuantitiesUserErrorCodeInvalidReason InventoryAdjustQuantitiesUserErrorCode = "INVALID_REASON"
	// The specified reference document is invalid.
	InventoryAdjustQuantitiesUserErrorCodeInvalidReferenceDocument InventoryAdjustQuantitiesUserErrorCode = "INVALID_REFERENCE_DOCUMENT"
	// The quantities couldn't be adjusted. Try again.
	InventoryAdjustQuantitiesUserErrorCodeAdjustQuantitiesFailed InventoryAdjustQuantitiesUserErrorCode = "ADJUST_QUANTITIES_FAILED"
	// All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI.
	InventoryAdjustQuantitiesUserErrorCodeMaxOneLedgerDocument InventoryAdjustQuantitiesUserErrorCode = "MAX_ONE_LEDGER_DOCUMENT"
	// The inventory item is not stocked at the location.
	InventoryAdjustQuantitiesUserErrorCodeItemNotStockedAtLocation InventoryAdjustQuantitiesUserErrorCode = "ITEM_NOT_STOCKED_AT_LOCATION"
	// The specified inventory item is not allowed to be adjusted via API.
	InventoryAdjustQuantitiesUserErrorCodeNonMutableInventoryItem InventoryAdjustQuantitiesUserErrorCode = "NON_MUTABLE_INVENTORY_ITEM"
)

var AllInventoryAdjustQuantitiesUserErrorCode = []InventoryAdjustQuantitiesUserErrorCode{
	InventoryAdjustQuantitiesUserErrorCodeInternalLedgerDocument,
	InventoryAdjustQuantitiesUserErrorCodeInvalidAvailableDocument,
	InventoryAdjustQuantitiesUserErrorCodeInvalidInventoryItem,
	InventoryAdjustQuantitiesUserErrorCodeInvalidLedgerDocument,
	InventoryAdjustQuantitiesUserErrorCodeInvalidLocation,
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityDocument,
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityName,
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooLow,
	InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooHigh,
	InventoryAdjustQuantitiesUserErrorCodeInvalidReason,
	InventoryAdjustQuantitiesUserErrorCodeInvalidReferenceDocument,
	InventoryAdjustQuantitiesUserErrorCodeAdjustQuantitiesFailed,
	InventoryAdjustQuantitiesUserErrorCodeMaxOneLedgerDocument,
	InventoryAdjustQuantitiesUserErrorCodeItemNotStockedAtLocation,
	InventoryAdjustQuantitiesUserErrorCodeNonMutableInventoryItem,
}

func (e InventoryAdjustQuantitiesUserErrorCode) IsValid() bool {
	switch e {
	case InventoryAdjustQuantitiesUserErrorCodeInternalLedgerDocument, InventoryAdjustQuantitiesUserErrorCodeInvalidAvailableDocument, InventoryAdjustQuantitiesUserErrorCodeInvalidInventoryItem, InventoryAdjustQuantitiesUserErrorCodeInvalidLedgerDocument, InventoryAdjustQuantitiesUserErrorCodeInvalidLocation, InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityDocument, InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityName, InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooLow, InventoryAdjustQuantitiesUserErrorCodeInvalidQuantityTooHigh, InventoryAdjustQuantitiesUserErrorCodeInvalidReason, InventoryAdjustQuantitiesUserErrorCodeInvalidReferenceDocument, InventoryAdjustQuantitiesUserErrorCodeAdjustQuantitiesFailed, InventoryAdjustQuantitiesUserErrorCodeMaxOneLedgerDocument, InventoryAdjustQuantitiesUserErrorCodeItemNotStockedAtLocation, InventoryAdjustQuantitiesUserErrorCodeNonMutableInventoryItem:
		return true
	}
	return false
}

func (e InventoryAdjustQuantitiesUserErrorCode) String() string {
	return string(e)
}

func (e *InventoryAdjustQuantitiesUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InventoryAdjustQuantitiesUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InventoryAdjustQuantitiesUserErrorCode", str)
	}
	return nil
}

func (e InventoryAdjustQuantitiesUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`.
type InventoryBulkToggleActivationUserErrorCode string

const (
	// An error occurred while setting the activation status.
	InventoryBulkToggleActivationUserErrorCodeGenericError InventoryBulkToggleActivationUserErrorCode = "GENERIC_ERROR"
	// Cannot unstock an inventory item from the only location at which it is stocked.
	InventoryBulkToggleActivationUserErrorCodeCannotDeactivateFromOnlyLocation InventoryBulkToggleActivationUserErrorCode = "CANNOT_DEACTIVATE_FROM_ONLY_LOCATION"
	// Cannot unstock this inventory item from this location because it has committed and incoming quantities.
	InventoryBulkToggleActivationUserErrorCodeCommittedAndIncomingInventoryAtLocation InventoryBulkToggleActivationUserErrorCode = "COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION"
	// Cannot unstock this inventory item from this location because it has incoming quantities.
	InventoryBulkToggleActivationUserErrorCodeIncomingInventoryAtLocation InventoryBulkToggleActivationUserErrorCode = "INCOMING_INVENTORY_AT_LOCATION"
	// Cannot unstock this inventory item from this location because it has committed quantities.
	InventoryBulkToggleActivationUserErrorCodeCommittedInventoryAtLocation InventoryBulkToggleActivationUserErrorCode = "COMMITTED_INVENTORY_AT_LOCATION"
	// Cannot unstock this inventory item from this location because it has unavailable quantities.
	InventoryBulkToggleActivationUserErrorCodeReservedInventoryAtLocation InventoryBulkToggleActivationUserErrorCode = "RESERVED_INVENTORY_AT_LOCATION"
	// Failed to unstock this inventory item from this location.
	InventoryBulkToggleActivationUserErrorCodeFailedToUnstockFromLocation InventoryBulkToggleActivationUserErrorCode = "FAILED_TO_UNSTOCK_FROM_LOCATION"
	// Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service.
	InventoryBulkToggleActivationUserErrorCodeInventoryManagedBy3rdParty InventoryBulkToggleActivationUserErrorCode = "INVENTORY_MANAGED_BY_3RD_PARTY"
	// Cannot stock this inventory item at this location because it is managed by Shopify.
	InventoryBulkToggleActivationUserErrorCodeInventoryManagedByShopify InventoryBulkToggleActivationUserErrorCode = "INVENTORY_MANAGED_BY_SHOPIFY"
	// Failed to stock this inventory item at this location.
	InventoryBulkToggleActivationUserErrorCodeFailedToStockAtLocation InventoryBulkToggleActivationUserErrorCode = "FAILED_TO_STOCK_AT_LOCATION"
	// Cannot stock this inventory item at this location because the variant is missing a SKU.
	InventoryBulkToggleActivationUserErrorCodeMissingSku InventoryBulkToggleActivationUserErrorCode = "MISSING_SKU"
	// The location was not found.
	InventoryBulkToggleActivationUserErrorCodeLocationNotFound InventoryBulkToggleActivationUserErrorCode = "LOCATION_NOT_FOUND"
	// The inventory item was not found.
	InventoryBulkToggleActivationUserErrorCodeInventoryItemNotFound InventoryBulkToggleActivationUserErrorCode = "INVENTORY_ITEM_NOT_FOUND"
)

var AllInventoryBulkToggleActivationUserErrorCode = []InventoryBulkToggleActivationUserErrorCode{
	InventoryBulkToggleActivationUserErrorCodeGenericError,
	InventoryBulkToggleActivationUserErrorCodeCannotDeactivateFromOnlyLocation,
	InventoryBulkToggleActivationUserErrorCodeCommittedAndIncomingInventoryAtLocation,
	InventoryBulkToggleActivationUserErrorCodeIncomingInventoryAtLocation,
	InventoryBulkToggleActivationUserErrorCodeCommittedInventoryAtLocation,
	InventoryBulkToggleActivationUserErrorCodeReservedInventoryAtLocation,
	InventoryBulkToggleActivationUserErrorCodeFailedToUnstockFromLocation,
	InventoryBulkToggleActivationUserErrorCodeInventoryManagedBy3rdParty,
	InventoryBulkToggleActivationUserErrorCodeInventoryManagedByShopify,
	InventoryBulkToggleActivationUserErrorCodeFailedToStockAtLocation,
	InventoryBulkToggleActivationUserErrorCodeMissingSku,
	InventoryBulkToggleActivationUserErrorCodeLocationNotFound,
	InventoryBulkToggleActivationUserErrorCodeInventoryItemNotFound,
}

func (e InventoryBulkToggleActivationUserErrorCode) IsValid() bool {
	switch e {
	case InventoryBulkToggleActivationUserErrorCodeGenericError, InventoryBulkToggleActivationUserErrorCodeCannotDeactivateFromOnlyLocation, InventoryBulkToggleActivationUserErrorCodeCommittedAndIncomingInventoryAtLocation, InventoryBulkToggleActivationUserErrorCodeIncomingInventoryAtLocation, InventoryBulkToggleActivationUserErrorCodeCommittedInventoryAtLocation, InventoryBulkToggleActivationUserErrorCodeReservedInventoryAtLocation, InventoryBulkToggleActivationUserErrorCodeFailedToUnstockFromLocation, InventoryBulkToggleActivationUserErrorCodeInventoryManagedBy3rdParty, InventoryBulkToggleActivationUserErrorCodeInventoryManagedByShopify, InventoryBulkToggleActivationUserErrorCodeFailedToStockAtLocation, InventoryBulkToggleActivationUserErrorCodeMissingSku, InventoryBulkToggleActivationUserErrorCodeLocationNotFound, InventoryBulkToggleActivationUserErrorCodeInventoryItemNotFound:
		return true
	}
	return false
}

func (e InventoryBulkToggleActivationUserErrorCode) String() string {
	return string(e)
}

func (e *InventoryBulkToggleActivationUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InventoryBulkToggleActivationUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InventoryBulkToggleActivationUserErrorCode", str)
	}
	return nil
}

func (e InventoryBulkToggleActivationUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`.
type InventoryMoveQuantitiesUserErrorCode string

const (
	// Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
	InventoryMoveQuantitiesUserErrorCodeInternalLedgerDocument InventoryMoveQuantitiesUserErrorCode = "INTERNAL_LEDGER_DOCUMENT"
	// A ledger document URI is not allowed when adjusting available.
	InventoryMoveQuantitiesUserErrorCodeInvalidAvailableDocument InventoryMoveQuantitiesUserErrorCode = "INVALID_AVAILABLE_DOCUMENT"
	// The specified inventory item could not be found.
	InventoryMoveQuantitiesUserErrorCodeInvalidInventoryItem InventoryMoveQuantitiesUserErrorCode = "INVALID_INVENTORY_ITEM"
	// The specified ledger document is invalid.
	InventoryMoveQuantitiesUserErrorCodeInvalidLedgerDocument InventoryMoveQuantitiesUserErrorCode = "INVALID_LEDGER_DOCUMENT"
	// The specified location could not be found.
	InventoryMoveQuantitiesUserErrorCodeInvalidLocation InventoryMoveQuantitiesUserErrorCode = "INVALID_LOCATION"
	// A ledger document URI is required except when adjusting available.
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityDocument InventoryMoveQuantitiesUserErrorCode = "INVALID_QUANTITY_DOCUMENT"
	// The specified quantity name is invalid.
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityName InventoryMoveQuantitiesUserErrorCode = "INVALID_QUANTITY_NAME"
	// The quantity can't be negative.
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityNegative InventoryMoveQuantitiesUserErrorCode = "INVALID_QUANTITY_NEGATIVE"
	// The quantity can't be higher than 2,000,000,000.
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityTooHigh InventoryMoveQuantitiesUserErrorCode = "INVALID_QUANTITY_TOO_HIGH"
	// The specified reason is invalid.
	InventoryMoveQuantitiesUserErrorCodeInvalidReason InventoryMoveQuantitiesUserErrorCode = "INVALID_REASON"
	// The specified reference document is invalid.
	InventoryMoveQuantitiesUserErrorCodeInvalidReferenceDocument InventoryMoveQuantitiesUserErrorCode = "INVALID_REFERENCE_DOCUMENT"
	// The quantities couldn't be moved. Try again.
	InventoryMoveQuantitiesUserErrorCodeMoveQuantitiesFailed InventoryMoveQuantitiesUserErrorCode = "MOVE_QUANTITIES_FAILED"
	// The quantities can't be moved between different locations.
	InventoryMoveQuantitiesUserErrorCodeDifferentLocations InventoryMoveQuantitiesUserErrorCode = "DIFFERENT_LOCATIONS"
	// The quantity names for each change can't be the same.
	InventoryMoveQuantitiesUserErrorCodeSameQuantityName InventoryMoveQuantitiesUserErrorCode = "SAME_QUANTITY_NAME"
	// Only a maximum of 2 ledger document URIs across all changes is allowed.
	InventoryMoveQuantitiesUserErrorCodeMaximumLedgerDocumentURIS InventoryMoveQuantitiesUserErrorCode = "MAXIMUM_LEDGER_DOCUMENT_URIS"
	// The inventory item is not stocked at the location.
	InventoryMoveQuantitiesUserErrorCodeItemNotStockedAtLocation InventoryMoveQuantitiesUserErrorCode = "ITEM_NOT_STOCKED_AT_LOCATION"
	// The specified inventory item is not allowed to be adjusted via API.
	InventoryMoveQuantitiesUserErrorCodeNonMutableInventoryItem InventoryMoveQuantitiesUserErrorCode = "NON_MUTABLE_INVENTORY_ITEM"
)

var AllInventoryMoveQuantitiesUserErrorCode = []InventoryMoveQuantitiesUserErrorCode{
	InventoryMoveQuantitiesUserErrorCodeInternalLedgerDocument,
	InventoryMoveQuantitiesUserErrorCodeInvalidAvailableDocument,
	InventoryMoveQuantitiesUserErrorCodeInvalidInventoryItem,
	InventoryMoveQuantitiesUserErrorCodeInvalidLedgerDocument,
	InventoryMoveQuantitiesUserErrorCodeInvalidLocation,
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityDocument,
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityName,
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityNegative,
	InventoryMoveQuantitiesUserErrorCodeInvalidQuantityTooHigh,
	InventoryMoveQuantitiesUserErrorCodeInvalidReason,
	InventoryMoveQuantitiesUserErrorCodeInvalidReferenceDocument,
	InventoryMoveQuantitiesUserErrorCodeMoveQuantitiesFailed,
	InventoryMoveQuantitiesUserErrorCodeDifferentLocations,
	InventoryMoveQuantitiesUserErrorCodeSameQuantityName,
	InventoryMoveQuantitiesUserErrorCodeMaximumLedgerDocumentURIS,
	InventoryMoveQuantitiesUserErrorCodeItemNotStockedAtLocation,
	InventoryMoveQuantitiesUserErrorCodeNonMutableInventoryItem,
}

func (e InventoryMoveQuantitiesUserErrorCode) IsValid() bool {
	switch e {
	case InventoryMoveQuantitiesUserErrorCodeInternalLedgerDocument, InventoryMoveQuantitiesUserErrorCodeInvalidAvailableDocument, InventoryMoveQuantitiesUserErrorCodeInvalidInventoryItem, InventoryMoveQuantitiesUserErrorCodeInvalidLedgerDocument, InventoryMoveQuantitiesUserErrorCodeInvalidLocation, InventoryMoveQuantitiesUserErrorCodeInvalidQuantityDocument, InventoryMoveQuantitiesUserErrorCodeInvalidQuantityName, InventoryMoveQuantitiesUserErrorCodeInvalidQuantityNegative, InventoryMoveQuantitiesUserErrorCodeInvalidQuantityTooHigh, InventoryMoveQuantitiesUserErrorCodeInvalidReason, InventoryMoveQuantitiesUserErrorCodeInvalidReferenceDocument, InventoryMoveQuantitiesUserErrorCodeMoveQuantitiesFailed, InventoryMoveQuantitiesUserErrorCodeDifferentLocations, InventoryMoveQuantitiesUserErrorCodeSameQuantityName, InventoryMoveQuantitiesUserErrorCodeMaximumLedgerDocumentURIS, InventoryMoveQuantitiesUserErrorCodeItemNotStockedAtLocation, InventoryMoveQuantitiesUserErrorCodeNonMutableInventoryItem:
		return true
	}
	return false
}

func (e InventoryMoveQuantitiesUserErrorCode) String() string {
	return string(e)
}

func (e *InventoryMoveQuantitiesUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InventoryMoveQuantitiesUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InventoryMoveQuantitiesUserErrorCode", str)
	}
	return nil
}

func (e InventoryMoveQuantitiesUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`.
type InventorySetOnHandQuantitiesUserErrorCode string

const (
	// The specified inventory item could not be found.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidInventoryItem InventorySetOnHandQuantitiesUserErrorCode = "INVALID_INVENTORY_ITEM"
	// The specified location could not be found.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidLocation InventorySetOnHandQuantitiesUserErrorCode = "INVALID_LOCATION"
	// The quantity can't be negative.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityNegative InventorySetOnHandQuantitiesUserErrorCode = "INVALID_QUANTITY_NEGATIVE"
	// The specified reason is invalid.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidReason InventorySetOnHandQuantitiesUserErrorCode = "INVALID_REASON"
	// The specified reference document is invalid.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidReferenceDocument InventorySetOnHandQuantitiesUserErrorCode = "INVALID_REFERENCE_DOCUMENT"
	// The on-hand quantities couldn't be set. Try again.
	InventorySetOnHandQuantitiesUserErrorCodeSetOnHandQuantitiesFailed InventorySetOnHandQuantitiesUserErrorCode = "SET_ON_HAND_QUANTITIES_FAILED"
	// The inventory item is not stocked at the location.
	InventorySetOnHandQuantitiesUserErrorCodeItemNotStockedAtLocation InventorySetOnHandQuantitiesUserErrorCode = "ITEM_NOT_STOCKED_AT_LOCATION"
	// The specified inventory item is not allowed to be adjusted via API.
	InventorySetOnHandQuantitiesUserErrorCodeNonMutableInventoryItem InventorySetOnHandQuantitiesUserErrorCode = "NON_MUTABLE_INVENTORY_ITEM"
	// The total quantity can't be higher than 1,000,000,000.
	InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityTooHigh InventorySetOnHandQuantitiesUserErrorCode = "INVALID_QUANTITY_TOO_HIGH"
)

var AllInventorySetOnHandQuantitiesUserErrorCode = []InventorySetOnHandQuantitiesUserErrorCode{
	InventorySetOnHandQuantitiesUserErrorCodeInvalidInventoryItem,
	InventorySetOnHandQuantitiesUserErrorCodeInvalidLocation,
	InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityNegative,
	InventorySetOnHandQuantitiesUserErrorCodeInvalidReason,
	InventorySetOnHandQuantitiesUserErrorCodeInvalidReferenceDocument,
	InventorySetOnHandQuantitiesUserErrorCodeSetOnHandQuantitiesFailed,
	InventorySetOnHandQuantitiesUserErrorCodeItemNotStockedAtLocation,
	InventorySetOnHandQuantitiesUserErrorCodeNonMutableInventoryItem,
	InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityTooHigh,
}

func (e InventorySetOnHandQuantitiesUserErrorCode) IsValid() bool {
	switch e {
	case InventorySetOnHandQuantitiesUserErrorCodeInvalidInventoryItem, InventorySetOnHandQuantitiesUserErrorCodeInvalidLocation, InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityNegative, InventorySetOnHandQuantitiesUserErrorCodeInvalidReason, InventorySetOnHandQuantitiesUserErrorCodeInvalidReferenceDocument, InventorySetOnHandQuantitiesUserErrorCodeSetOnHandQuantitiesFailed, InventorySetOnHandQuantitiesUserErrorCodeItemNotStockedAtLocation, InventorySetOnHandQuantitiesUserErrorCodeNonMutableInventoryItem, InventorySetOnHandQuantitiesUserErrorCodeInvalidQuantityTooHigh:
		return true
	}
	return false
}

func (e InventorySetOnHandQuantitiesUserErrorCode) String() string {
	return string(e)
}

func (e *InventorySetOnHandQuantitiesUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InventorySetOnHandQuantitiesUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InventorySetOnHandQuantitiesUserErrorCode", str)
	}
	return nil
}

func (e InventorySetOnHandQuantitiesUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ISO 639-1 language codes supported by Shopify.
type LanguageCode string

const (
	// Afrikaans.
	LanguageCodeAf LanguageCode = "AF"
	// Akan.
	LanguageCodeAk LanguageCode = "AK"
	// Amharic.
	LanguageCodeAm LanguageCode = "AM"
	// Arabic.
	LanguageCodeAr LanguageCode = "AR"
	// Assamese.
	LanguageCodeAs LanguageCode = "AS"
	// Azerbaijani.
	LanguageCodeAz LanguageCode = "AZ"
	// Belarusian.
	LanguageCodeBe LanguageCode = "BE"
	// Bulgarian.
	LanguageCodeBg LanguageCode = "BG"
	// Bambara.
	LanguageCodeBm LanguageCode = "BM"
	// Bangla.
	LanguageCodeBn LanguageCode = "BN"
	// Tibetan.
	LanguageCodeBo LanguageCode = "BO"
	// Breton.
	LanguageCodeBr LanguageCode = "BR"
	// Bosnian.
	LanguageCodeBs LanguageCode = "BS"
	// Catalan.
	LanguageCodeCa LanguageCode = "CA"
	// Chechen.
	LanguageCodeCe LanguageCode = "CE"
	// Czech.
	LanguageCodeCs LanguageCode = "CS"
	// Welsh.
	LanguageCodeCy LanguageCode = "CY"
	// Danish.
	LanguageCodeDa LanguageCode = "DA"
	// German.
	LanguageCodeDe LanguageCode = "DE"
	// Dzongkha.
	LanguageCodeDz LanguageCode = "DZ"
	// Ewe.
	LanguageCodeEe LanguageCode = "EE"
	// Greek.
	LanguageCodeEl LanguageCode = "EL"
	// English.
	LanguageCodeEn LanguageCode = "EN"
	// Esperanto.
	LanguageCodeEo LanguageCode = "EO"
	// Spanish.
	LanguageCodeEs LanguageCode = "ES"
	// Estonian.
	LanguageCodeEt LanguageCode = "ET"
	// Basque.
	LanguageCodeEu LanguageCode = "EU"
	// Persian.
	LanguageCodeFa LanguageCode = "FA"
	// Fulah.
	LanguageCodeFf LanguageCode = "FF"
	// Finnish.
	LanguageCodeFi LanguageCode = "FI"
	// Faroese.
	LanguageCodeFo LanguageCode = "FO"
	// French.
	LanguageCodeFr LanguageCode = "FR"
	// Western Frisian.
	LanguageCodeFy LanguageCode = "FY"
	// Irish.
	LanguageCodeGa LanguageCode = "GA"
	// Scottish Gaelic.
	LanguageCodeGd LanguageCode = "GD"
	// Galician.
	LanguageCodeGl LanguageCode = "GL"
	// Gujarati.
	LanguageCodeGu LanguageCode = "GU"
	// Manx.
	LanguageCodeGv LanguageCode = "GV"
	// Hausa.
	LanguageCodeHa LanguageCode = "HA"
	// Hebrew.
	LanguageCodeHe LanguageCode = "HE"
	// Hindi.
	LanguageCodeHi LanguageCode = "HI"
	// Croatian.
	LanguageCodeHr LanguageCode = "HR"
	// Hungarian.
	LanguageCodeHu LanguageCode = "HU"
	// Armenian.
	LanguageCodeHy LanguageCode = "HY"
	// Interlingua.
	LanguageCodeIa LanguageCode = "IA"
	// Indonesian.
	LanguageCodeID LanguageCode = "ID"
	// Igbo.
	LanguageCodeIg LanguageCode = "IG"
	// Sichuan Yi.
	LanguageCodeIi LanguageCode = "II"
	// Icelandic.
	LanguageCodeIs LanguageCode = "IS"
	// Italian.
	LanguageCodeIt LanguageCode = "IT"
	// Japanese.
	LanguageCodeJa LanguageCode = "JA"
	// Javanese.
	LanguageCodeJv LanguageCode = "JV"
	// Georgian.
	LanguageCodeKa LanguageCode = "KA"
	// Kikuyu.
	LanguageCodeKi LanguageCode = "KI"
	// Kazakh.
	LanguageCodeKk LanguageCode = "KK"
	// Kalaallisut.
	LanguageCodeKl LanguageCode = "KL"
	// Khmer.
	LanguageCodeKm LanguageCode = "KM"
	// Kannada.
	LanguageCodeKn LanguageCode = "KN"
	// Korean.
	LanguageCodeKo LanguageCode = "KO"
	// Kashmiri.
	LanguageCodeKs LanguageCode = "KS"
	// Kurdish.
	LanguageCodeKu LanguageCode = "KU"
	// Cornish.
	LanguageCodeKw LanguageCode = "KW"
	// Kyrgyz.
	LanguageCodeKy LanguageCode = "KY"
	// Luxembourgish.
	LanguageCodeLb LanguageCode = "LB"
	// Ganda.
	LanguageCodeLg LanguageCode = "LG"
	// Lingala.
	LanguageCodeLn LanguageCode = "LN"
	// Lao.
	LanguageCodeLo LanguageCode = "LO"
	// Lithuanian.
	LanguageCodeLt LanguageCode = "LT"
	// Luba-Katanga.
	LanguageCodeLu LanguageCode = "LU"
	// Latvian.
	LanguageCodeLv LanguageCode = "LV"
	// Malagasy.
	LanguageCodeMg LanguageCode = "MG"
	// Māori.
	LanguageCodeMi LanguageCode = "MI"
	// Macedonian.
	LanguageCodeMk LanguageCode = "MK"
	// Malayalam.
	LanguageCodeMl LanguageCode = "ML"
	// Mongolian.
	LanguageCodeMn LanguageCode = "MN"
	// Marathi.
	LanguageCodeMr LanguageCode = "MR"
	// Malay.
	LanguageCodeMs LanguageCode = "MS"
	// Maltese.
	LanguageCodeMt LanguageCode = "MT"
	// Burmese.
	LanguageCodeMy LanguageCode = "MY"
	// Norwegian (Bokmål).
	LanguageCodeNb LanguageCode = "NB"
	// North Ndebele.
	LanguageCodeNd LanguageCode = "ND"
	// Nepali.
	LanguageCodeNe LanguageCode = "NE"
	// Dutch.
	LanguageCodeNl LanguageCode = "NL"
	// Norwegian Nynorsk.
	LanguageCodeNn LanguageCode = "NN"
	// Norwegian.
	LanguageCodeNo LanguageCode = "NO"
	// Oromo.
	LanguageCodeOm LanguageCode = "OM"
	// Odia.
	LanguageCodeOr LanguageCode = "OR"
	// Ossetic.
	LanguageCodeOs LanguageCode = "OS"
	// Punjabi.
	LanguageCodePa LanguageCode = "PA"
	// Polish.
	LanguageCodePl LanguageCode = "PL"
	// Pashto.
	LanguageCodePs LanguageCode = "PS"
	// Portuguese (Brazil).
	LanguageCodePtBr LanguageCode = "PT_BR"
	// Portuguese (Portugal).
	LanguageCodePtPt LanguageCode = "PT_PT"
	// Quechua.
	LanguageCodeQu LanguageCode = "QU"
	// Romansh.
	LanguageCodeRm LanguageCode = "RM"
	// Rundi.
	LanguageCodeRn LanguageCode = "RN"
	// Romanian.
	LanguageCodeRo LanguageCode = "RO"
	// Russian.
	LanguageCodeRu LanguageCode = "RU"
	// Kinyarwanda.
	LanguageCodeRw LanguageCode = "RW"
	// Sindhi.
	LanguageCodeSd LanguageCode = "SD"
	// Northern Sami.
	LanguageCodeSe LanguageCode = "SE"
	// Sango.
	LanguageCodeSg LanguageCode = "SG"
	// Sinhala.
	LanguageCodeSi LanguageCode = "SI"
	// Slovak.
	LanguageCodeSk LanguageCode = "SK"
	// Slovenian.
	LanguageCodeSl LanguageCode = "SL"
	// Shona.
	LanguageCodeSn LanguageCode = "SN"
	// Somali.
	LanguageCodeSo LanguageCode = "SO"
	// Albanian.
	LanguageCodeSq LanguageCode = "SQ"
	// Serbian.
	LanguageCodeSr LanguageCode = "SR"
	// Sundanese.
	LanguageCodeSu LanguageCode = "SU"
	// Swedish.
	LanguageCodeSv LanguageCode = "SV"
	// Swahili.
	LanguageCodeSw LanguageCode = "SW"
	// Tamil.
	LanguageCodeTa LanguageCode = "TA"
	// Telugu.
	LanguageCodeTe LanguageCode = "TE"
	// Tajik.
	LanguageCodeTg LanguageCode = "TG"
	// Thai.
	LanguageCodeTh LanguageCode = "TH"
	// Tigrinya.
	LanguageCodeTi LanguageCode = "TI"
	// Turkmen.
	LanguageCodeTk LanguageCode = "TK"
	// Tongan.
	LanguageCodeTo LanguageCode = "TO"
	// Turkish.
	LanguageCodeTr LanguageCode = "TR"
	// Tatar.
	LanguageCodeTt LanguageCode = "TT"
	// Uyghur.
	LanguageCodeUg LanguageCode = "UG"
	// Ukrainian.
	LanguageCodeUk LanguageCode = "UK"
	// Urdu.
	LanguageCodeUr LanguageCode = "UR"
	// Uzbek.
	LanguageCodeUz LanguageCode = "UZ"
	// Vietnamese.
	LanguageCodeVi LanguageCode = "VI"
	// Wolof.
	LanguageCodeWo LanguageCode = "WO"
	// Xhosa.
	LanguageCodeXh LanguageCode = "XH"
	// Yiddish.
	LanguageCodeYi LanguageCode = "YI"
	// Yoruba.
	LanguageCodeYo LanguageCode = "YO"
	// Chinese (Simplified).
	LanguageCodeZhCn LanguageCode = "ZH_CN"
	// Chinese (Traditional).
	LanguageCodeZhTw LanguageCode = "ZH_TW"
	// Zulu.
	LanguageCodeZu LanguageCode = "ZU"
	// Chinese.
	LanguageCodeZh LanguageCode = "ZH"
	// Portuguese.
	LanguageCodePt LanguageCode = "PT"
	// Church Slavic.
	LanguageCodeCu LanguageCode = "CU"
	// Volapük.
	LanguageCodeVo LanguageCode = "VO"
)

var AllLanguageCode = []LanguageCode{
	LanguageCodeAf,
	LanguageCodeAk,
	LanguageCodeAm,
	LanguageCodeAr,
	LanguageCodeAs,
	LanguageCodeAz,
	LanguageCodeBe,
	LanguageCodeBg,
	LanguageCodeBm,
	LanguageCodeBn,
	LanguageCodeBo,
	LanguageCodeBr,
	LanguageCodeBs,
	LanguageCodeCa,
	LanguageCodeCe,
	LanguageCodeCs,
	LanguageCodeCy,
	LanguageCodeDa,
	LanguageCodeDe,
	LanguageCodeDz,
	LanguageCodeEe,
	LanguageCodeEl,
	LanguageCodeEn,
	LanguageCodeEo,
	LanguageCodeEs,
	LanguageCodeEt,
	LanguageCodeEu,
	LanguageCodeFa,
	LanguageCodeFf,
	LanguageCodeFi,
	LanguageCodeFo,
	LanguageCodeFr,
	LanguageCodeFy,
	LanguageCodeGa,
	LanguageCodeGd,
	LanguageCodeGl,
	LanguageCodeGu,
	LanguageCodeGv,
	LanguageCodeHa,
	LanguageCodeHe,
	LanguageCodeHi,
	LanguageCodeHr,
	LanguageCodeHu,
	LanguageCodeHy,
	LanguageCodeIa,
	LanguageCodeID,
	LanguageCodeIg,
	LanguageCodeIi,
	LanguageCodeIs,
	LanguageCodeIt,
	LanguageCodeJa,
	LanguageCodeJv,
	LanguageCodeKa,
	LanguageCodeKi,
	LanguageCodeKk,
	LanguageCodeKl,
	LanguageCodeKm,
	LanguageCodeKn,
	LanguageCodeKo,
	LanguageCodeKs,
	LanguageCodeKu,
	LanguageCodeKw,
	LanguageCodeKy,
	LanguageCodeLb,
	LanguageCodeLg,
	LanguageCodeLn,
	LanguageCodeLo,
	LanguageCodeLt,
	LanguageCodeLu,
	LanguageCodeLv,
	LanguageCodeMg,
	LanguageCodeMi,
	LanguageCodeMk,
	LanguageCodeMl,
	LanguageCodeMn,
	LanguageCodeMr,
	LanguageCodeMs,
	LanguageCodeMt,
	LanguageCodeMy,
	LanguageCodeNb,
	LanguageCodeNd,
	LanguageCodeNe,
	LanguageCodeNl,
	LanguageCodeNn,
	LanguageCodeNo,
	LanguageCodeOm,
	LanguageCodeOr,
	LanguageCodeOs,
	LanguageCodePa,
	LanguageCodePl,
	LanguageCodePs,
	LanguageCodePtBr,
	LanguageCodePtPt,
	LanguageCodeQu,
	LanguageCodeRm,
	LanguageCodeRn,
	LanguageCodeRo,
	LanguageCodeRu,
	LanguageCodeRw,
	LanguageCodeSd,
	LanguageCodeSe,
	LanguageCodeSg,
	LanguageCodeSi,
	LanguageCodeSk,
	LanguageCodeSl,
	LanguageCodeSn,
	LanguageCodeSo,
	LanguageCodeSq,
	LanguageCodeSr,
	LanguageCodeSu,
	LanguageCodeSv,
	LanguageCodeSw,
	LanguageCodeTa,
	LanguageCodeTe,
	LanguageCodeTg,
	LanguageCodeTh,
	LanguageCodeTi,
	LanguageCodeTk,
	LanguageCodeTo,
	LanguageCodeTr,
	LanguageCodeTt,
	LanguageCodeUg,
	LanguageCodeUk,
	LanguageCodeUr,
	LanguageCodeUz,
	LanguageCodeVi,
	LanguageCodeWo,
	LanguageCodeXh,
	LanguageCodeYi,
	LanguageCodeYo,
	LanguageCodeZhCn,
	LanguageCodeZhTw,
	LanguageCodeZu,
	LanguageCodeZh,
	LanguageCodePt,
	LanguageCodeCu,
	LanguageCodeVo,
}

func (e LanguageCode) IsValid() bool {
	switch e {
	case LanguageCodeAf, LanguageCodeAk, LanguageCodeAm, LanguageCodeAr, LanguageCodeAs, LanguageCodeAz, LanguageCodeBe, LanguageCodeBg, LanguageCodeBm, LanguageCodeBn, LanguageCodeBo, LanguageCodeBr, LanguageCodeBs, LanguageCodeCa, LanguageCodeCe, LanguageCodeCs, LanguageCodeCy, LanguageCodeDa, LanguageCodeDe, LanguageCodeDz, LanguageCodeEe, LanguageCodeEl, LanguageCodeEn, LanguageCodeEo, LanguageCodeEs, LanguageCodeEt, LanguageCodeEu, LanguageCodeFa, LanguageCodeFf, LanguageCodeFi, LanguageCodeFo, LanguageCodeFr, LanguageCodeFy, LanguageCodeGa, LanguageCodeGd, LanguageCodeGl, LanguageCodeGu, LanguageCodeGv, LanguageCodeHa, LanguageCodeHe, LanguageCodeHi, LanguageCodeHr, LanguageCodeHu, LanguageCodeHy, LanguageCodeIa, LanguageCodeID, LanguageCodeIg, LanguageCodeIi, LanguageCodeIs, LanguageCodeIt, LanguageCodeJa, LanguageCodeJv, LanguageCodeKa, LanguageCodeKi, LanguageCodeKk, LanguageCodeKl, LanguageCodeKm, LanguageCodeKn, LanguageCodeKo, LanguageCodeKs, LanguageCodeKu, LanguageCodeKw, LanguageCodeKy, LanguageCodeLb, LanguageCodeLg, LanguageCodeLn, LanguageCodeLo, LanguageCodeLt, LanguageCodeLu, LanguageCodeLv, LanguageCodeMg, LanguageCodeMi, LanguageCodeMk, LanguageCodeMl, LanguageCodeMn, LanguageCodeMr, LanguageCodeMs, LanguageCodeMt, LanguageCodeMy, LanguageCodeNb, LanguageCodeNd, LanguageCodeNe, LanguageCodeNl, LanguageCodeNn, LanguageCodeNo, LanguageCodeOm, LanguageCodeOr, LanguageCodeOs, LanguageCodePa, LanguageCodePl, LanguageCodePs, LanguageCodePtBr, LanguageCodePtPt, LanguageCodeQu, LanguageCodeRm, LanguageCodeRn, LanguageCodeRo, LanguageCodeRu, LanguageCodeRw, LanguageCodeSd, LanguageCodeSe, LanguageCodeSg, LanguageCodeSi, LanguageCodeSk, LanguageCodeSl, LanguageCodeSn, LanguageCodeSo, LanguageCodeSq, LanguageCodeSr, LanguageCodeSu, LanguageCodeSv, LanguageCodeSw, LanguageCodeTa, LanguageCodeTe, LanguageCodeTg, LanguageCodeTh, LanguageCodeTi, LanguageCodeTk, LanguageCodeTo, LanguageCodeTr, LanguageCodeTt, LanguageCodeUg, LanguageCodeUk, LanguageCodeUr, LanguageCodeUz, LanguageCodeVi, LanguageCodeWo, LanguageCodeXh, LanguageCodeYi, LanguageCodeYo, LanguageCodeZhCn, LanguageCodeZhTw, LanguageCodeZu, LanguageCodeZh, LanguageCodePt, LanguageCodeCu, LanguageCodeVo:
		return true
	}
	return false
}

func (e LanguageCode) String() string {
	return string(e)
}

func (e *LanguageCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageCode", str)
	}
	return nil
}

func (e LanguageCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Units of measurement for length.
type LengthUnit string

const (
	// 1000 millimeters equals 1 meter.
	LengthUnitMillimeters LengthUnit = "MILLIMETERS"
	// 100 centimeters equals 1 meter.
	LengthUnitCentimeters LengthUnit = "CENTIMETERS"
	// Metric system unit of length.
	LengthUnitMeters LengthUnit = "METERS"
	// 12 inches equals 1 foot.
	LengthUnitInches LengthUnit = "INCHES"
	// Imperial system unit of length.
	LengthUnitFeet LengthUnit = "FEET"
	// 1 yard equals 3 feet.
	LengthUnitYards LengthUnit = "YARDS"
)

var AllLengthUnit = []LengthUnit{
	LengthUnitMillimeters,
	LengthUnitCentimeters,
	LengthUnitMeters,
	LengthUnitInches,
	LengthUnitFeet,
	LengthUnitYards,
}

func (e LengthUnit) IsValid() bool {
	switch e {
	case LengthUnitMillimeters, LengthUnitCentimeters, LengthUnitMeters, LengthUnitInches, LengthUnitFeet, LengthUnitYards:
		return true
	}
	return false
}

func (e LengthUnit) String() string {
	return string(e)
}

func (e *LengthUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LengthUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LengthUnit", str)
	}
	return nil
}

func (e LengthUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of the underlying localizable content. This can be used to conditionally render different UI elements such as input fields.
type LocalizableContentType string

const (
	// A JSON string.
	LocalizableContentTypeJSONString LocalizableContentType = "JSON_STRING"
	// A JSON.
	LocalizableContentTypeJSON LocalizableContentType = "JSON"
	// A list of multi-line texts.
	LocalizableContentTypeListMultiLineTextField LocalizableContentType = "LIST_MULTI_LINE_TEXT_FIELD"
	// A list of single-line texts.
	LocalizableContentTypeListSingleLineTextField LocalizableContentType = "LIST_SINGLE_LINE_TEXT_FIELD"
	// A list of URLs.
	LocalizableContentTypeListURL LocalizableContentType = "LIST_URL"
	// A multi-line text.
	LocalizableContentTypeMultiLineTextField LocalizableContentType = "MULTI_LINE_TEXT_FIELD"
	// A rich text.
	LocalizableContentTypeRichTextField LocalizableContentType = "RICH_TEXT_FIELD"
	// A single-line text.
	LocalizableContentTypeSingleLineTextField LocalizableContentType = "SINGLE_LINE_TEXT_FIELD"
	// A string.
	LocalizableContentTypeString LocalizableContentType = "STRING"
	// A URL.
	LocalizableContentTypeURL LocalizableContentType = "URL"
	// A file reference.
	LocalizableContentTypeFileReference LocalizableContentType = "FILE_REFERENCE"
	// A list of file references.
	LocalizableContentTypeListFileReference LocalizableContentType = "LIST_FILE_REFERENCE"
	// An HTML.
	LocalizableContentTypeHTML LocalizableContentType = "HTML"
	// A URI.
	LocalizableContentTypeURI LocalizableContentType = "URI"
	// An inline rich text.
	LocalizableContentTypeInlineRichText LocalizableContentType = "INLINE_RICH_TEXT"
)

var AllLocalizableContentType = []LocalizableContentType{
	LocalizableContentTypeJSONString,
	LocalizableContentTypeJSON,
	LocalizableContentTypeListMultiLineTextField,
	LocalizableContentTypeListSingleLineTextField,
	LocalizableContentTypeListURL,
	LocalizableContentTypeMultiLineTextField,
	LocalizableContentTypeRichTextField,
	LocalizableContentTypeSingleLineTextField,
	LocalizableContentTypeString,
	LocalizableContentTypeURL,
	LocalizableContentTypeFileReference,
	LocalizableContentTypeListFileReference,
	LocalizableContentTypeHTML,
	LocalizableContentTypeURI,
	LocalizableContentTypeInlineRichText,
}

func (e LocalizableContentType) IsValid() bool {
	switch e {
	case LocalizableContentTypeJSONString, LocalizableContentTypeJSON, LocalizableContentTypeListMultiLineTextField, LocalizableContentTypeListSingleLineTextField, LocalizableContentTypeListURL, LocalizableContentTypeMultiLineTextField, LocalizableContentTypeRichTextField, LocalizableContentTypeSingleLineTextField, LocalizableContentTypeString, LocalizableContentTypeURL, LocalizableContentTypeFileReference, LocalizableContentTypeListFileReference, LocalizableContentTypeHTML, LocalizableContentTypeURI, LocalizableContentTypeInlineRichText:
		return true
	}
	return false
}

func (e LocalizableContentType) String() string {
	return string(e)
}

func (e *LocalizableContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizableContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizableContentType", str)
	}
	return nil
}

func (e LocalizableContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The key of a localization extension.
type LocalizationExtensionKey string

const (
	// Extension key 'tax_credential_br' for country BR.
	LocalizationExtensionKeyTaxCredentialBr LocalizationExtensionKey = "TAX_CREDENTIAL_BR"
	// Extension key 'shipping_credential_br' for country BR.
	LocalizationExtensionKeyShippingCredentialBr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_BR"
	// Extension key 'shipping_credential_cn' for country CN.
	LocalizationExtensionKeyShippingCredentialCn LocalizationExtensionKey = "SHIPPING_CREDENTIAL_CN"
	// Extension key 'tax_credential_it' for country IT.
	LocalizationExtensionKeyTaxCredentialIt LocalizationExtensionKey = "TAX_CREDENTIAL_IT"
	// Extension key 'tax_email_it' for country IT.
	LocalizationExtensionKeyTaxEmailIt LocalizationExtensionKey = "TAX_EMAIL_IT"
	// Extension key 'shipping_credential_kr' for country KR.
	LocalizationExtensionKeyShippingCredentialKr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_KR"
)

var AllLocalizationExtensionKey = []LocalizationExtensionKey{
	LocalizationExtensionKeyTaxCredentialBr,
	LocalizationExtensionKeyShippingCredentialBr,
	LocalizationExtensionKeyShippingCredentialCn,
	LocalizationExtensionKeyTaxCredentialIt,
	LocalizationExtensionKeyTaxEmailIt,
	LocalizationExtensionKeyShippingCredentialKr,
}

func (e LocalizationExtensionKey) IsValid() bool {
	switch e {
	case LocalizationExtensionKeyTaxCredentialBr, LocalizationExtensionKeyShippingCredentialBr, LocalizationExtensionKeyShippingCredentialCn, LocalizationExtensionKeyTaxCredentialIt, LocalizationExtensionKeyTaxEmailIt, LocalizationExtensionKeyShippingCredentialKr:
		return true
	}
	return false
}

func (e LocalizationExtensionKey) String() string {
	return string(e)
}

func (e *LocalizationExtensionKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionKey", str)
	}
	return nil
}

func (e LocalizationExtensionKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The purpose of a localization extension.
type LocalizationExtensionPurpose string

const (
	// Extensions that are used for shipping purposes, for example, customs clearance.
	LocalizationExtensionPurposeShipping LocalizationExtensionPurpose = "SHIPPING"
	// Extensions that are used for taxes purposes, for example, invoicing.
	LocalizationExtensionPurposeTax LocalizationExtensionPurpose = "TAX"
)

var AllLocalizationExtensionPurpose = []LocalizationExtensionPurpose{
	LocalizationExtensionPurposeShipping,
	LocalizationExtensionPurposeTax,
}

func (e LocalizationExtensionPurpose) IsValid() bool {
	switch e {
	case LocalizationExtensionPurposeShipping, LocalizationExtensionPurposeTax:
		return true
	}
	return false
}

func (e LocalizationExtensionPurpose) String() string {
	return string(e)
}

func (e *LocalizationExtensionPurpose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionPurpose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionPurpose", str)
	}
	return nil
}

func (e LocalizationExtensionPurpose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `LocationActivateUserError`.
type LocationActivateUserErrorCode string

const (
	// An error occurred while activating the location.
	LocationActivateUserErrorCodeGenericError LocationActivateUserErrorCode = "GENERIC_ERROR"
	// Shop has reached its location limit.
	LocationActivateUserErrorCodeLocationLimit LocationActivateUserErrorCode = "LOCATION_LIMIT"
	// This location currently cannot be activated as inventory, pending orders or transfers are being relocated from this location.
	LocationActivateUserErrorCodeHasOngoingRelocation LocationActivateUserErrorCode = "HAS_ONGOING_RELOCATION"
	// Location not found.
	LocationActivateUserErrorCodeLocationNotFound LocationActivateUserErrorCode = "LOCATION_NOT_FOUND"
	// There is already an active location with this name.
	LocationActivateUserErrorCodeHasNonUniqueName LocationActivateUserErrorCode = "HAS_NON_UNIQUE_NAME"
)

var AllLocationActivateUserErrorCode = []LocationActivateUserErrorCode{
	LocationActivateUserErrorCodeGenericError,
	LocationActivateUserErrorCodeLocationLimit,
	LocationActivateUserErrorCodeHasOngoingRelocation,
	LocationActivateUserErrorCodeLocationNotFound,
	LocationActivateUserErrorCodeHasNonUniqueName,
}

func (e LocationActivateUserErrorCode) IsValid() bool {
	switch e {
	case LocationActivateUserErrorCodeGenericError, LocationActivateUserErrorCodeLocationLimit, LocationActivateUserErrorCodeHasOngoingRelocation, LocationActivateUserErrorCodeLocationNotFound, LocationActivateUserErrorCodeHasNonUniqueName:
		return true
	}
	return false
}

func (e LocationActivateUserErrorCode) String() string {
	return string(e)
}

func (e *LocationActivateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationActivateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationActivateUserErrorCode", str)
	}
	return nil
}

func (e LocationActivateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `LocationAddUserError`.
type LocationAddUserErrorCode string

const (
	// The input value is invalid.
	LocationAddUserErrorCodeInvalid LocationAddUserErrorCode = "INVALID"
	// The input value is too long.
	LocationAddUserErrorCodeTooLong LocationAddUserErrorCode = "TOO_LONG"
	// The input value is already taken.
	LocationAddUserErrorCodeTaken LocationAddUserErrorCode = "TAKEN"
	// The input value is blank.
	LocationAddUserErrorCodeBlank LocationAddUserErrorCode = "BLANK"
	// The ZIP code is not a valid US ZIP code.
	LocationAddUserErrorCodeInvalidUsZipcode LocationAddUserErrorCode = "INVALID_US_ZIPCODE"
	// An error occurred while adding the location.
	LocationAddUserErrorCodeGenericError LocationAddUserErrorCode = "GENERIC_ERROR"
	// The type is invalid.
	LocationAddUserErrorCodeInvalidType LocationAddUserErrorCode = "INVALID_TYPE"
	// The value is invalid for the metafield type or for the definition options.
	LocationAddUserErrorCodeInvalidValue LocationAddUserErrorCode = "INVALID_VALUE"
	// ApiPermission metafields can only be created or updated by the app owner.
	LocationAddUserErrorCodeAppNotAuthorized LocationAddUserErrorCode = "APP_NOT_AUTHORIZED"
	// Unstructured reserved namespace.
	LocationAddUserErrorCodeUnstructuredReservedNamespace LocationAddUserErrorCode = "UNSTRUCTURED_RESERVED_NAMESPACE"
	// Owner type can't be used in this mutation.
	LocationAddUserErrorCodeDisallowedOwnerType LocationAddUserErrorCode = "DISALLOWED_OWNER_TYPE"
	// The input value isn't included in the list.
	LocationAddUserErrorCodeInclusion LocationAddUserErrorCode = "INCLUSION"
	// The input value needs to be blank.
	LocationAddUserErrorCodePresent LocationAddUserErrorCode = "PRESENT"
	// The input value is too short.
	LocationAddUserErrorCodeTooShort LocationAddUserErrorCode = "TOO_SHORT"
)

var AllLocationAddUserErrorCode = []LocationAddUserErrorCode{
	LocationAddUserErrorCodeInvalid,
	LocationAddUserErrorCodeTooLong,
	LocationAddUserErrorCodeTaken,
	LocationAddUserErrorCodeBlank,
	LocationAddUserErrorCodeInvalidUsZipcode,
	LocationAddUserErrorCodeGenericError,
	LocationAddUserErrorCodeInvalidType,
	LocationAddUserErrorCodeInvalidValue,
	LocationAddUserErrorCodeAppNotAuthorized,
	LocationAddUserErrorCodeUnstructuredReservedNamespace,
	LocationAddUserErrorCodeDisallowedOwnerType,
	LocationAddUserErrorCodeInclusion,
	LocationAddUserErrorCodePresent,
	LocationAddUserErrorCodeTooShort,
}

func (e LocationAddUserErrorCode) IsValid() bool {
	switch e {
	case LocationAddUserErrorCodeInvalid, LocationAddUserErrorCodeTooLong, LocationAddUserErrorCodeTaken, LocationAddUserErrorCodeBlank, LocationAddUserErrorCodeInvalidUsZipcode, LocationAddUserErrorCodeGenericError, LocationAddUserErrorCodeInvalidType, LocationAddUserErrorCodeInvalidValue, LocationAddUserErrorCodeAppNotAuthorized, LocationAddUserErrorCodeUnstructuredReservedNamespace, LocationAddUserErrorCodeDisallowedOwnerType, LocationAddUserErrorCodeInclusion, LocationAddUserErrorCodePresent, LocationAddUserErrorCodeTooShort:
		return true
	}
	return false
}

func (e LocationAddUserErrorCode) String() string {
	return string(e)
}

func (e *LocationAddUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationAddUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationAddUserErrorCode", str)
	}
	return nil
}

func (e LocationAddUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `LocationDeactivateUserError`.
type LocationDeactivateUserErrorCode string

const (
	// Location not found.
	LocationDeactivateUserErrorCodeLocationNotFound LocationDeactivateUserErrorCode = "LOCATION_NOT_FOUND"
	// Location either has a fulfillment service or is the only location with a shipping address.
	LocationDeactivateUserErrorCodePermanentlyBlockedFromDeactivationError LocationDeactivateUserErrorCode = "PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR"
	// Location has incoming inventory. The location can be deactivated after the inventory has been received.
	LocationDeactivateUserErrorCodeTemporarilyBlockedFromDeactivationError LocationDeactivateUserErrorCode = "TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR"
	// Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel.
	LocationDeactivateUserErrorCodeHasActiveRetailSubscriptions LocationDeactivateUserErrorCode = "HAS_ACTIVE_RETAIL_SUBSCRIPTIONS"
	// Destination location is the same as the location to be deactivated.
	LocationDeactivateUserErrorCodeDestinationLocationIsTheSameLocation LocationDeactivateUserErrorCode = "DESTINATION_LOCATION_IS_THE_SAME_LOCATION"
	// Destination location is not found or inactive.
	LocationDeactivateUserErrorCodeDestinationLocationNotFoundOrInactive LocationDeactivateUserErrorCode = "DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE"
	// Location could not be deactivated without specifying where to relocate inventory at the location.
	LocationDeactivateUserErrorCodeHasActiveInventoryError LocationDeactivateUserErrorCode = "HAS_ACTIVE_INVENTORY_ERROR"
	// Location could not be deactivated because it has pending orders.
	LocationDeactivateUserErrorCodeHasFulfillmentOrdersError LocationDeactivateUserErrorCode = "HAS_FULFILLMENT_ORDERS_ERROR"
	// Location could not be deactivated because it has open transfers.
	LocationDeactivateUserErrorCodeHasOpenTransfersError LocationDeactivateUserErrorCode = "HAS_OPEN_TRANSFERS_ERROR"
	// Location could not be deactivated because it has open Shopify Fulfillment Network transfers.
	LocationDeactivateUserErrorCodeHasIncomingMovementsError LocationDeactivateUserErrorCode = "HAS_INCOMING_MOVEMENTS_ERROR"
	// Location could not be deactivated because it has open purchase orders.
	LocationDeactivateUserErrorCodeHasOpenPurchaseOrdersError LocationDeactivateUserErrorCode = "HAS_OPEN_PURCHASE_ORDERS_ERROR"
	// Failed to relocate active inventories to the destination location.
	LocationDeactivateUserErrorCodeFailedToRelocateActiveInventories LocationDeactivateUserErrorCode = "FAILED_TO_RELOCATE_ACTIVE_INVENTORIES"
	// Failed to relocate open transfers to the destination location.
	LocationDeactivateUserErrorCodeFailedToRelocateOpenTransfers LocationDeactivateUserErrorCode = "FAILED_TO_RELOCATE_OPEN_TRANSFERS"
	// Failed to relocate open purchase orders to the destination location.
	LocationDeactivateUserErrorCodeFailedToRelocateOpenPurchaseOrders LocationDeactivateUserErrorCode = "FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS"
	// Failed to relocate incoming movements to the destination location.
	LocationDeactivateUserErrorCodeFailedToRelocateIncomingMovements LocationDeactivateUserErrorCode = "FAILED_TO_RELOCATE_INCOMING_MOVEMENTS"
	// At least one location must fulfill online orders.
	LocationDeactivateUserErrorCodeCannotDisableOnlineOrderFulfillment LocationDeactivateUserErrorCode = "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
)

var AllLocationDeactivateUserErrorCode = []LocationDeactivateUserErrorCode{
	LocationDeactivateUserErrorCodeLocationNotFound,
	LocationDeactivateUserErrorCodePermanentlyBlockedFromDeactivationError,
	LocationDeactivateUserErrorCodeTemporarilyBlockedFromDeactivationError,
	LocationDeactivateUserErrorCodeHasActiveRetailSubscriptions,
	LocationDeactivateUserErrorCodeDestinationLocationIsTheSameLocation,
	LocationDeactivateUserErrorCodeDestinationLocationNotFoundOrInactive,
	LocationDeactivateUserErrorCodeHasActiveInventoryError,
	LocationDeactivateUserErrorCodeHasFulfillmentOrdersError,
	LocationDeactivateUserErrorCodeHasOpenTransfersError,
	LocationDeactivateUserErrorCodeHasIncomingMovementsError,
	LocationDeactivateUserErrorCodeHasOpenPurchaseOrdersError,
	LocationDeactivateUserErrorCodeFailedToRelocateActiveInventories,
	LocationDeactivateUserErrorCodeFailedToRelocateOpenTransfers,
	LocationDeactivateUserErrorCodeFailedToRelocateOpenPurchaseOrders,
	LocationDeactivateUserErrorCodeFailedToRelocateIncomingMovements,
	LocationDeactivateUserErrorCodeCannotDisableOnlineOrderFulfillment,
}

func (e LocationDeactivateUserErrorCode) IsValid() bool {
	switch e {
	case LocationDeactivateUserErrorCodeLocationNotFound, LocationDeactivateUserErrorCodePermanentlyBlockedFromDeactivationError, LocationDeactivateUserErrorCodeTemporarilyBlockedFromDeactivationError, LocationDeactivateUserErrorCodeHasActiveRetailSubscriptions, LocationDeactivateUserErrorCodeDestinationLocationIsTheSameLocation, LocationDeactivateUserErrorCodeDestinationLocationNotFoundOrInactive, LocationDeactivateUserErrorCodeHasActiveInventoryError, LocationDeactivateUserErrorCodeHasFulfillmentOrdersError, LocationDeactivateUserErrorCodeHasOpenTransfersError, LocationDeactivateUserErrorCodeHasIncomingMovementsError, LocationDeactivateUserErrorCodeHasOpenPurchaseOrdersError, LocationDeactivateUserErrorCodeFailedToRelocateActiveInventories, LocationDeactivateUserErrorCodeFailedToRelocateOpenTransfers, LocationDeactivateUserErrorCodeFailedToRelocateOpenPurchaseOrders, LocationDeactivateUserErrorCodeFailedToRelocateIncomingMovements, LocationDeactivateUserErrorCodeCannotDisableOnlineOrderFulfillment:
		return true
	}
	return false
}

func (e LocationDeactivateUserErrorCode) String() string {
	return string(e)
}

func (e *LocationDeactivateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationDeactivateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationDeactivateUserErrorCode", str)
	}
	return nil
}

func (e LocationDeactivateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `LocationDeleteUserError`.
type LocationDeleteUserErrorCode string

const (
	// Location not found.
	LocationDeleteUserErrorCodeLocationNotFound LocationDeleteUserErrorCode = "LOCATION_NOT_FOUND"
	// The location cannot be deleted while it is active.
	LocationDeleteUserErrorCodeLocationIsActive LocationDeleteUserErrorCode = "LOCATION_IS_ACTIVE"
	// An error occurred while deleting the location.
	LocationDeleteUserErrorCodeGenericError LocationDeleteUserErrorCode = "GENERIC_ERROR"
	// The location cannot be deleted while it has inventory.
	LocationDeleteUserErrorCodeLocationHasInventory LocationDeleteUserErrorCode = "LOCATION_HAS_INVENTORY"
	// The location cannot be deleted while it has pending orders.
	LocationDeleteUserErrorCodeLocationHasPendingOrders LocationDeleteUserErrorCode = "LOCATION_HAS_PENDING_ORDERS"
	// The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel.
	LocationDeleteUserErrorCodeLocationHasActiveRetailSubscription LocationDeleteUserErrorCode = "LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION"
)

var AllLocationDeleteUserErrorCode = []LocationDeleteUserErrorCode{
	LocationDeleteUserErrorCodeLocationNotFound,
	LocationDeleteUserErrorCodeLocationIsActive,
	LocationDeleteUserErrorCodeGenericError,
	LocationDeleteUserErrorCodeLocationHasInventory,
	LocationDeleteUserErrorCodeLocationHasPendingOrders,
	LocationDeleteUserErrorCodeLocationHasActiveRetailSubscription,
}

func (e LocationDeleteUserErrorCode) IsValid() bool {
	switch e {
	case LocationDeleteUserErrorCodeLocationNotFound, LocationDeleteUserErrorCodeLocationIsActive, LocationDeleteUserErrorCodeGenericError, LocationDeleteUserErrorCodeLocationHasInventory, LocationDeleteUserErrorCodeLocationHasPendingOrders, LocationDeleteUserErrorCodeLocationHasActiveRetailSubscription:
		return true
	}
	return false
}

func (e LocationDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *LocationDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationDeleteUserErrorCode", str)
	}
	return nil
}

func (e LocationDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `LocationEditUserError`.
type LocationEditUserErrorCode string

const (
	// The input value is too long.
	LocationEditUserErrorCodeTooLong LocationEditUserErrorCode = "TOO_LONG"
	// The input value is blank.
	LocationEditUserErrorCodeBlank LocationEditUserErrorCode = "BLANK"
	// The record with the ID used as the input value couldn't be found.
	LocationEditUserErrorCodeNotFound LocationEditUserErrorCode = "NOT_FOUND"
	// The input value is invalid.
	LocationEditUserErrorCodeInvalid LocationEditUserErrorCode = "INVALID"
	// The input value is already taken.
	LocationEditUserErrorCodeTaken LocationEditUserErrorCode = "TAKEN"
	// The ZIP code is not a valid US ZIP code.
	LocationEditUserErrorCodeInvalidUsZipcode LocationEditUserErrorCode = "INVALID_US_ZIPCODE"
	// An error occurred while editing the location.
	LocationEditUserErrorCodeGenericError LocationEditUserErrorCode = "GENERIC_ERROR"
	// At least one location must fulfill online orders.
	LocationEditUserErrorCodeCannotDisableOnlineOrderFulfillment LocationEditUserErrorCode = "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
	// The type is invalid.
	LocationEditUserErrorCodeInvalidType LocationEditUserErrorCode = "INVALID_TYPE"
	// The value is invalid for the metafield type or for the definition options.
	LocationEditUserErrorCodeInvalidValue LocationEditUserErrorCode = "INVALID_VALUE"
	// ApiPermission metafields can only be created or updated by the app owner.
	LocationEditUserErrorCodeAppNotAuthorized LocationEditUserErrorCode = "APP_NOT_AUTHORIZED"
	// Unstructured reserved namespace.
	LocationEditUserErrorCodeUnstructuredReservedNamespace LocationEditUserErrorCode = "UNSTRUCTURED_RESERVED_NAMESPACE"
	// Owner type can't be used in this mutation.
	LocationEditUserErrorCodeDisallowedOwnerType LocationEditUserErrorCode = "DISALLOWED_OWNER_TYPE"
	// The input value isn't included in the list.
	LocationEditUserErrorCodeInclusion LocationEditUserErrorCode = "INCLUSION"
	// The input value needs to be blank.
	LocationEditUserErrorCodePresent LocationEditUserErrorCode = "PRESENT"
	// The input value is too short.
	LocationEditUserErrorCodeTooShort LocationEditUserErrorCode = "TOO_SHORT"
)

var AllLocationEditUserErrorCode = []LocationEditUserErrorCode{
	LocationEditUserErrorCodeTooLong,
	LocationEditUserErrorCodeBlank,
	LocationEditUserErrorCodeNotFound,
	LocationEditUserErrorCodeInvalid,
	LocationEditUserErrorCodeTaken,
	LocationEditUserErrorCodeInvalidUsZipcode,
	LocationEditUserErrorCodeGenericError,
	LocationEditUserErrorCodeCannotDisableOnlineOrderFulfillment,
	LocationEditUserErrorCodeInvalidType,
	LocationEditUserErrorCodeInvalidValue,
	LocationEditUserErrorCodeAppNotAuthorized,
	LocationEditUserErrorCodeUnstructuredReservedNamespace,
	LocationEditUserErrorCodeDisallowedOwnerType,
	LocationEditUserErrorCodeInclusion,
	LocationEditUserErrorCodePresent,
	LocationEditUserErrorCodeTooShort,
}

func (e LocationEditUserErrorCode) IsValid() bool {
	switch e {
	case LocationEditUserErrorCodeTooLong, LocationEditUserErrorCodeBlank, LocationEditUserErrorCodeNotFound, LocationEditUserErrorCodeInvalid, LocationEditUserErrorCodeTaken, LocationEditUserErrorCodeInvalidUsZipcode, LocationEditUserErrorCodeGenericError, LocationEditUserErrorCodeCannotDisableOnlineOrderFulfillment, LocationEditUserErrorCodeInvalidType, LocationEditUserErrorCodeInvalidValue, LocationEditUserErrorCodeAppNotAuthorized, LocationEditUserErrorCodeUnstructuredReservedNamespace, LocationEditUserErrorCodeDisallowedOwnerType, LocationEditUserErrorCodeInclusion, LocationEditUserErrorCodePresent, LocationEditUserErrorCodeTooShort:
		return true
	}
	return false
}

func (e LocationEditUserErrorCode) String() string {
	return string(e)
}

func (e *LocationEditUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationEditUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationEditUserErrorCode", str)
	}
	return nil
}

func (e LocationEditUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Location query.
type LocationSortKeys string

const (
	// Sort by the `name` value.
	LocationSortKeysName LocationSortKeys = "NAME"
	// Sort by the `id` value.
	LocationSortKeysID LocationSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	LocationSortKeysRelevance LocationSortKeys = "RELEVANCE"
)

var AllLocationSortKeys = []LocationSortKeys{
	LocationSortKeysName,
	LocationSortKeysID,
	LocationSortKeysRelevance,
}

func (e LocationSortKeys) IsValid() bool {
	switch e {
	case LocationSortKeysName, LocationSortKeysID, LocationSortKeysRelevance:
		return true
	}
	return false
}

func (e LocationSortKeys) String() string {
	return string(e)
}

func (e *LocationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationSortKeys", str)
	}
	return nil
}

func (e LocationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MarketCurrencySettingsUserError`.
type MarketCurrencySettingsUserErrorCode string

const (
	// The specified market wasn't found.
	MarketCurrencySettingsUserErrorCodeMarketNotFound MarketCurrencySettingsUserErrorCode = "MARKET_NOT_FOUND"
	// The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing.
	MarketCurrencySettingsUserErrorCodeManagedMarket MarketCurrencySettingsUserErrorCode = "MANAGED_MARKET"
	// The shop's payment gateway does not support enabling more than one currency.
	MarketCurrencySettingsUserErrorCodeMultipleCurrenciesNotSupported MarketCurrencySettingsUserErrorCode = "MULTIPLE_CURRENCIES_NOT_SUPPORTED"
	// Can't enable or disable local currencies on a single country market.
	MarketCurrencySettingsUserErrorCodeNoLocalCurrenciesOnSingleCountryMarket MarketCurrencySettingsUserErrorCode = "NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET"
	// The specified currency is not supported.
	MarketCurrencySettingsUserErrorCodeUnsupportedCurrency MarketCurrencySettingsUserErrorCode = "UNSUPPORTED_CURRENCY"
	// The primary market must use the shop currency.
	MarketCurrencySettingsUserErrorCodePrimaryMarketUsesShopCurrency MarketCurrencySettingsUserErrorCode = "PRIMARY_MARKET_USES_SHOP_CURRENCY"
)

var AllMarketCurrencySettingsUserErrorCode = []MarketCurrencySettingsUserErrorCode{
	MarketCurrencySettingsUserErrorCodeMarketNotFound,
	MarketCurrencySettingsUserErrorCodeManagedMarket,
	MarketCurrencySettingsUserErrorCodeMultipleCurrenciesNotSupported,
	MarketCurrencySettingsUserErrorCodeNoLocalCurrenciesOnSingleCountryMarket,
	MarketCurrencySettingsUserErrorCodeUnsupportedCurrency,
	MarketCurrencySettingsUserErrorCodePrimaryMarketUsesShopCurrency,
}

func (e MarketCurrencySettingsUserErrorCode) IsValid() bool {
	switch e {
	case MarketCurrencySettingsUserErrorCodeMarketNotFound, MarketCurrencySettingsUserErrorCodeManagedMarket, MarketCurrencySettingsUserErrorCodeMultipleCurrenciesNotSupported, MarketCurrencySettingsUserErrorCodeNoLocalCurrenciesOnSingleCountryMarket, MarketCurrencySettingsUserErrorCodeUnsupportedCurrency, MarketCurrencySettingsUserErrorCodePrimaryMarketUsesShopCurrency:
		return true
	}
	return false
}

func (e MarketCurrencySettingsUserErrorCode) String() string {
	return string(e)
}

func (e *MarketCurrencySettingsUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketCurrencySettingsUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketCurrencySettingsUserErrorCode", str)
	}
	return nil
}

func (e MarketCurrencySettingsUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of resources that are market localizable.
type MarketLocalizableResourceType string

const (
	// A metafield. Market localizable fields: `value`.
	MarketLocalizableResourceTypeMetafield MarketLocalizableResourceType = "METAFIELD"
)

var AllMarketLocalizableResourceType = []MarketLocalizableResourceType{
	MarketLocalizableResourceTypeMetafield,
}

func (e MarketLocalizableResourceType) IsValid() bool {
	switch e {
	case MarketLocalizableResourceTypeMetafield:
		return true
	}
	return false
}

func (e MarketLocalizableResourceType) String() string {
	return string(e)
}

func (e *MarketLocalizableResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketLocalizableResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketLocalizableResourceType", str)
	}
	return nil
}

func (e MarketLocalizableResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MarketUserError`.
type MarketUserErrorCode string

const (
	// The input value is invalid.
	MarketUserErrorCodeInvalid MarketUserErrorCode = "INVALID"
	// The input value is already taken.
	MarketUserErrorCodeTaken MarketUserErrorCode = "TAKEN"
	// The input value is too long.
	MarketUserErrorCodeTooLong MarketUserErrorCode = "TOO_LONG"
	// The input value is too short.
	MarketUserErrorCodeTooShort MarketUserErrorCode = "TOO_SHORT"
	// The input value is blank.
	MarketUserErrorCodeBlank MarketUserErrorCode = "BLANK"
	// The market wasn't found.
	MarketUserErrorCodeMarketNotFound MarketUserErrorCode = "MARKET_NOT_FOUND"
	// The market region wasn't found.
	MarketUserErrorCodeRegionNotFound MarketUserErrorCode = "REGION_NOT_FOUND"
	// The market web presence wasn't found.
	MarketUserErrorCodeWebPresenceNotFound MarketUserErrorCode = "WEB_PRESENCE_NOT_FOUND"
	// Can't add regions to the primary market.
	MarketUserErrorCodeCannotAddRegionsToPrimaryMarket MarketUserErrorCode = "CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET"
	// Can't delete the only region in a market.
	MarketUserErrorCodeCannotDeleteOnlyRegion MarketUserErrorCode = "CANNOT_DELETE_ONLY_REGION"
	// Exactly one input option is required.
	MarketUserErrorCodeRequiresExactlyOneOption MarketUserErrorCode = "REQUIRES_EXACTLY_ONE_OPTION"
	// Can't delete the primary market.
	MarketUserErrorCodeCannotDeletePrimaryMarket MarketUserErrorCode = "CANNOT_DELETE_PRIMARY_MARKET"
	// Domain was not found.
	MarketUserErrorCodeDomainNotFound MarketUserErrorCode = "DOMAIN_NOT_FOUND"
	// The subfolder suffix must contain only letters.
	MarketUserErrorCodeSubfolderSuffixMustContainOnlyLetters MarketUserErrorCode = "SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS"
	// The subfolder suffix is invalid, please provide a different value.
	MarketUserErrorCodeSubfolderSuffixCannotBeScriptCode MarketUserErrorCode = "SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE"
	// No languages selected.
	MarketUserErrorCodeNoLanguages MarketUserErrorCode = "NO_LANGUAGES"
	// Duplicates found in languages.
	MarketUserErrorCodeDuplicateLanguages MarketUserErrorCode = "DUPLICATE_LANGUAGES"
	// Cannot add region-specific language.
	MarketUserErrorCodeRegionSpecificLanguage MarketUserErrorCode = "REGION_SPECIFIC_LANGUAGE"
	// Can't pass both `subfolderSuffix` and `domainId`.
	MarketUserErrorCodeCannotHaveSubfolderAndDomain MarketUserErrorCode = "CANNOT_HAVE_SUBFOLDER_AND_DOMAIN"
	// Can't add the web presence to the primary market.
	MarketUserErrorCodeCannotAddWebPresenceToPrimaryMarket MarketUserErrorCode = "CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET"
	// One of `subfolderSuffix` or `domainId` is required.
	MarketUserErrorCodeRequiresDomainOrSubfolder MarketUserErrorCode = "REQUIRES_DOMAIN_OR_SUBFOLDER"
	// The primary market must use the primary domain.
	MarketUserErrorCodePrimaryMarketMustUsePrimaryDomain MarketUserErrorCode = "PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN"
	// Can't delete the primary market's web presence.
	MarketUserErrorCodeCannotDeletePrimaryMarketWebPresence MarketUserErrorCode = "CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE"
	// Can't have more than 50 markets.
	MarketUserErrorCodeShopReachedMarketsLimit MarketUserErrorCode = "SHOP_REACHED_MARKETS_LIMIT"
	// Can't disable the primary market.
	MarketUserErrorCodeCannotDisablePrimaryMarket MarketUserErrorCode = "CANNOT_DISABLE_PRIMARY_MARKET"
	// The language isn't published to the store.
	MarketUserErrorCodeUnpublishedLanguage MarketUserErrorCode = "UNPUBLISHED_LANGUAGE"
	// The language isn't enabled on the store.
	MarketUserErrorCodeDisabledLanguage MarketUserErrorCode = "DISABLED_LANGUAGE"
	// Can't set default locale to null.
	MarketUserErrorCodeCannotSetDefaultLocaleToNull MarketUserErrorCode = "CANNOT_SET_DEFAULT_LOCALE_TO_NULL"
	// Can't add unsupported country or region.
	MarketUserErrorCodeUnsupportedCountryRegion MarketUserErrorCode = "UNSUPPORTED_COUNTRY_REGION"
	// Can't add customer account domain to a market.
	MarketUserErrorCodeCannotAddCustomerDomain MarketUserErrorCode = "CANNOT_ADD_CUSTOMER_DOMAIN"
)

var AllMarketUserErrorCode = []MarketUserErrorCode{
	MarketUserErrorCodeInvalid,
	MarketUserErrorCodeTaken,
	MarketUserErrorCodeTooLong,
	MarketUserErrorCodeTooShort,
	MarketUserErrorCodeBlank,
	MarketUserErrorCodeMarketNotFound,
	MarketUserErrorCodeRegionNotFound,
	MarketUserErrorCodeWebPresenceNotFound,
	MarketUserErrorCodeCannotAddRegionsToPrimaryMarket,
	MarketUserErrorCodeCannotDeleteOnlyRegion,
	MarketUserErrorCodeRequiresExactlyOneOption,
	MarketUserErrorCodeCannotDeletePrimaryMarket,
	MarketUserErrorCodeDomainNotFound,
	MarketUserErrorCodeSubfolderSuffixMustContainOnlyLetters,
	MarketUserErrorCodeSubfolderSuffixCannotBeScriptCode,
	MarketUserErrorCodeNoLanguages,
	MarketUserErrorCodeDuplicateLanguages,
	MarketUserErrorCodeRegionSpecificLanguage,
	MarketUserErrorCodeCannotHaveSubfolderAndDomain,
	MarketUserErrorCodeCannotAddWebPresenceToPrimaryMarket,
	MarketUserErrorCodeRequiresDomainOrSubfolder,
	MarketUserErrorCodePrimaryMarketMustUsePrimaryDomain,
	MarketUserErrorCodeCannotDeletePrimaryMarketWebPresence,
	MarketUserErrorCodeShopReachedMarketsLimit,
	MarketUserErrorCodeCannotDisablePrimaryMarket,
	MarketUserErrorCodeUnpublishedLanguage,
	MarketUserErrorCodeDisabledLanguage,
	MarketUserErrorCodeCannotSetDefaultLocaleToNull,
	MarketUserErrorCodeUnsupportedCountryRegion,
	MarketUserErrorCodeCannotAddCustomerDomain,
}

func (e MarketUserErrorCode) IsValid() bool {
	switch e {
	case MarketUserErrorCodeInvalid, MarketUserErrorCodeTaken, MarketUserErrorCodeTooLong, MarketUserErrorCodeTooShort, MarketUserErrorCodeBlank, MarketUserErrorCodeMarketNotFound, MarketUserErrorCodeRegionNotFound, MarketUserErrorCodeWebPresenceNotFound, MarketUserErrorCodeCannotAddRegionsToPrimaryMarket, MarketUserErrorCodeCannotDeleteOnlyRegion, MarketUserErrorCodeRequiresExactlyOneOption, MarketUserErrorCodeCannotDeletePrimaryMarket, MarketUserErrorCodeDomainNotFound, MarketUserErrorCodeSubfolderSuffixMustContainOnlyLetters, MarketUserErrorCodeSubfolderSuffixCannotBeScriptCode, MarketUserErrorCodeNoLanguages, MarketUserErrorCodeDuplicateLanguages, MarketUserErrorCodeRegionSpecificLanguage, MarketUserErrorCodeCannotHaveSubfolderAndDomain, MarketUserErrorCodeCannotAddWebPresenceToPrimaryMarket, MarketUserErrorCodeRequiresDomainOrSubfolder, MarketUserErrorCodePrimaryMarketMustUsePrimaryDomain, MarketUserErrorCodeCannotDeletePrimaryMarketWebPresence, MarketUserErrorCodeShopReachedMarketsLimit, MarketUserErrorCodeCannotDisablePrimaryMarket, MarketUserErrorCodeUnpublishedLanguage, MarketUserErrorCodeDisabledLanguage, MarketUserErrorCodeCannotSetDefaultLocaleToNull, MarketUserErrorCodeUnsupportedCountryRegion, MarketUserErrorCodeCannotAddCustomerDomain:
		return true
	}
	return false
}

func (e MarketUserErrorCode) String() string {
	return string(e)
}

func (e *MarketUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketUserErrorCode", str)
	}
	return nil
}

func (e MarketUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The error code resulted from the marketing activity extension integration.
type MarketingActivityExtensionAppErrorCode string

const (
	// The shop/user must be onboarded to use the app.
	MarketingActivityExtensionAppErrorCodeNotOnboardedError MarketingActivityExtensionAppErrorCode = "NOT_ONBOARDED_ERROR"
	// The app has returned validation errors.
	MarketingActivityExtensionAppErrorCodeValidationError MarketingActivityExtensionAppErrorCode = "VALIDATION_ERROR"
	// The app is either not responding or returning unexpected data.
	MarketingActivityExtensionAppErrorCodeAPIError MarketingActivityExtensionAppErrorCode = "API_ERROR"
	// The app has returned an error when invoking the platform.
	MarketingActivityExtensionAppErrorCodePlatformError MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR"
	// The app needs to be installed.
	MarketingActivityExtensionAppErrorCodeInstallRequiredError MarketingActivityExtensionAppErrorCode = "INSTALL_REQUIRED_ERROR"
)

var AllMarketingActivityExtensionAppErrorCode = []MarketingActivityExtensionAppErrorCode{
	MarketingActivityExtensionAppErrorCodeNotOnboardedError,
	MarketingActivityExtensionAppErrorCodeValidationError,
	MarketingActivityExtensionAppErrorCodeAPIError,
	MarketingActivityExtensionAppErrorCodePlatformError,
	MarketingActivityExtensionAppErrorCodeInstallRequiredError,
}

func (e MarketingActivityExtensionAppErrorCode) IsValid() bool {
	switch e {
	case MarketingActivityExtensionAppErrorCodeNotOnboardedError, MarketingActivityExtensionAppErrorCodeValidationError, MarketingActivityExtensionAppErrorCodeAPIError, MarketingActivityExtensionAppErrorCodePlatformError, MarketingActivityExtensionAppErrorCodeInstallRequiredError:
		return true
	}
	return false
}

func (e MarketingActivityExtensionAppErrorCode) String() string {
	return string(e)
}

func (e *MarketingActivityExtensionAppErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityExtensionAppErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityExtensionAppErrorCode", str)
	}
	return nil
}

func (e MarketingActivityExtensionAppErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingActivity query.
type MarketingActivitySortKeys string

const (
	// Sort by the `title` value.
	MarketingActivitySortKeysTitle MarketingActivitySortKeys = "TITLE"
	// Sort by the `created_at` value.
	MarketingActivitySortKeysCreatedAt MarketingActivitySortKeys = "CREATED_AT"
	// Sort by the `id` value.
	MarketingActivitySortKeysID MarketingActivitySortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	MarketingActivitySortKeysRelevance MarketingActivitySortKeys = "RELEVANCE"
)

var AllMarketingActivitySortKeys = []MarketingActivitySortKeys{
	MarketingActivitySortKeysTitle,
	MarketingActivitySortKeysCreatedAt,
	MarketingActivitySortKeysID,
	MarketingActivitySortKeysRelevance,
}

func (e MarketingActivitySortKeys) IsValid() bool {
	switch e {
	case MarketingActivitySortKeysTitle, MarketingActivitySortKeysCreatedAt, MarketingActivitySortKeysID, MarketingActivitySortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingActivitySortKeys) String() string {
	return string(e)
}

func (e *MarketingActivitySortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivitySortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivitySortKeys", str)
	}
	return nil
}

func (e MarketingActivitySortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status helps to identify if this marketing activity has been completed, queued, failed etc.
type MarketingActivityStatus string

const (
	// This marketing activity is currently running.
	MarketingActivityStatusActive MarketingActivityStatus = "ACTIVE"
	// This marketing activity is permanently unavailable.
	MarketingActivityStatusDeleted MarketingActivityStatus = "DELETED"
	// This marketing activity was deleted and it was triggered from outside of Shopify.
	MarketingActivityStatusDeletedExternally MarketingActivityStatus = "DELETED_EXTERNALLY"
	// This marketing activity is disconnected and no longer editable.
	MarketingActivityStatusDisconnected MarketingActivityStatus = "DISCONNECTED"
	// This marketing activity has been edited, but it is not yet created.
	MarketingActivityStatusDraft MarketingActivityStatus = "DRAFT"
	// This marketing activity is unable to run.
	MarketingActivityStatusFailed MarketingActivityStatus = "FAILED"
	// This marketing activity has completed running.
	MarketingActivityStatusInactive MarketingActivityStatus = "INACTIVE"
	// This marketing activity is currently not running.
	MarketingActivityStatusPaused MarketingActivityStatus = "PAUSED"
	// This marketing activity is pending creation on the app's marketing platform.
	MarketingActivityStatusPending MarketingActivityStatus = "PENDING"
	// This marketing activity is scheduled to run.
	MarketingActivityStatusScheduled MarketingActivityStatus = "SCHEDULED"
	// The marketing activity's status is unknown.
	MarketingActivityStatusUndefined MarketingActivityStatus = "UNDEFINED"
)

var AllMarketingActivityStatus = []MarketingActivityStatus{
	MarketingActivityStatusActive,
	MarketingActivityStatusDeleted,
	MarketingActivityStatusDeletedExternally,
	MarketingActivityStatusDisconnected,
	MarketingActivityStatusDraft,
	MarketingActivityStatusFailed,
	MarketingActivityStatusInactive,
	MarketingActivityStatusPaused,
	MarketingActivityStatusPending,
	MarketingActivityStatusScheduled,
	MarketingActivityStatusUndefined,
}

func (e MarketingActivityStatus) IsValid() bool {
	switch e {
	case MarketingActivityStatusActive, MarketingActivityStatusDeleted, MarketingActivityStatusDeletedExternally, MarketingActivityStatusDisconnected, MarketingActivityStatusDraft, MarketingActivityStatusFailed, MarketingActivityStatusInactive, MarketingActivityStatusPaused, MarketingActivityStatusPending, MarketingActivityStatusScheduled, MarketingActivityStatusUndefined:
		return true
	}
	return false
}

func (e MarketingActivityStatus) String() string {
	return string(e)
}

func (e *MarketingActivityStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatus", str)
	}
	return nil
}

func (e MarketingActivityStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// StatusBadgeType helps to identify the color of the status badge.
type MarketingActivityStatusBadgeType string

const (
	// This status badge has type default.
	MarketingActivityStatusBadgeTypeDefault MarketingActivityStatusBadgeType = "DEFAULT"
	// This status badge has type success.
	MarketingActivityStatusBadgeTypeSuccess MarketingActivityStatusBadgeType = "SUCCESS"
	// This status badge has type attention.
	MarketingActivityStatusBadgeTypeAttention MarketingActivityStatusBadgeType = "ATTENTION"
	// This status badge has type warning.
	MarketingActivityStatusBadgeTypeWarning MarketingActivityStatusBadgeType = "WARNING"
	// This status badge has type info.
	MarketingActivityStatusBadgeTypeInfo MarketingActivityStatusBadgeType = "INFO"
)

var AllMarketingActivityStatusBadgeType = []MarketingActivityStatusBadgeType{
	MarketingActivityStatusBadgeTypeDefault,
	MarketingActivityStatusBadgeTypeSuccess,
	MarketingActivityStatusBadgeTypeAttention,
	MarketingActivityStatusBadgeTypeWarning,
	MarketingActivityStatusBadgeTypeInfo,
}

func (e MarketingActivityStatusBadgeType) IsValid() bool {
	switch e {
	case MarketingActivityStatusBadgeTypeDefault, MarketingActivityStatusBadgeTypeSuccess, MarketingActivityStatusBadgeTypeAttention, MarketingActivityStatusBadgeTypeWarning, MarketingActivityStatusBadgeTypeInfo:
		return true
	}
	return false
}

func (e MarketingActivityStatusBadgeType) String() string {
	return string(e)
}

func (e *MarketingActivityStatusBadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatusBadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatusBadgeType", str)
	}
	return nil
}

func (e MarketingActivityStatusBadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MarketingActivityUserError`.
type MarketingActivityUserErrorCode string

const (
	// The input value is invalid.
	MarketingActivityUserErrorCodeInvalid MarketingActivityUserErrorCode = "INVALID"
	// The input value is already taken.
	MarketingActivityUserErrorCodeTaken MarketingActivityUserErrorCode = "TAKEN"
)

var AllMarketingActivityUserErrorCode = []MarketingActivityUserErrorCode{
	MarketingActivityUserErrorCodeInvalid,
	MarketingActivityUserErrorCodeTaken,
}

func (e MarketingActivityUserErrorCode) IsValid() bool {
	switch e {
	case MarketingActivityUserErrorCodeInvalid, MarketingActivityUserErrorCodeTaken:
		return true
	}
	return false
}

func (e MarketingActivityUserErrorCode) String() string {
	return string(e)
}

func (e *MarketingActivityUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityUserErrorCode", str)
	}
	return nil
}

func (e MarketingActivityUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The budget type for a marketing activity.
type MarketingBudgetBudgetType string

const (
	// A daily budget.
	MarketingBudgetBudgetTypeDaily MarketingBudgetBudgetType = "DAILY"
	// A budget for the lifetime of a marketing activity.
	MarketingBudgetBudgetTypeLifetime MarketingBudgetBudgetType = "LIFETIME"
)

var AllMarketingBudgetBudgetType = []MarketingBudgetBudgetType{
	MarketingBudgetBudgetTypeDaily,
	MarketingBudgetBudgetTypeLifetime,
}

func (e MarketingBudgetBudgetType) IsValid() bool {
	switch e {
	case MarketingBudgetBudgetTypeDaily, MarketingBudgetBudgetTypeLifetime:
		return true
	}
	return false
}

func (e MarketingBudgetBudgetType) String() string {
	return string(e)
}

func (e *MarketingBudgetBudgetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingBudgetBudgetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingBudgetBudgetType", str)
	}
	return nil
}

func (e MarketingBudgetBudgetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available marketing channels for a marketing activity or event. A marketing channel is broad category of marketing, used for reporting aggregation.
type MarketingChannel string

const (
	// Paid search.
	MarketingChannelSearch MarketingChannel = "SEARCH"
	// Displayed ads.
	MarketingChannelDisplay MarketingChannel = "DISPLAY"
	// Social media.
	MarketingChannelSocial MarketingChannel = "SOCIAL"
	// Email.
	MarketingChannelEmail MarketingChannel = "EMAIL"
	// Referral links.
	MarketingChannelReferral MarketingChannel = "REFERRAL"
)

var AllMarketingChannel = []MarketingChannel{
	MarketingChannelSearch,
	MarketingChannelDisplay,
	MarketingChannelSocial,
	MarketingChannelEmail,
	MarketingChannelReferral,
}

func (e MarketingChannel) IsValid() bool {
	switch e {
	case MarketingChannelSearch, MarketingChannelDisplay, MarketingChannelSocial, MarketingChannelEmail, MarketingChannelReferral:
		return true
	}
	return false
}

func (e MarketingChannel) String() string {
	return string(e)
}

func (e *MarketingChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingChannel", str)
	}
	return nil
}

func (e MarketingChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingEvent query.
type MarketingEventSortKeys string

const (
	// Sort by the `started_at` value.
	MarketingEventSortKeysStartedAt MarketingEventSortKeys = "STARTED_AT"
	// Sort by the `id` value.
	MarketingEventSortKeysID MarketingEventSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	MarketingEventSortKeysRelevance MarketingEventSortKeys = "RELEVANCE"
)

var AllMarketingEventSortKeys = []MarketingEventSortKeys{
	MarketingEventSortKeysStartedAt,
	MarketingEventSortKeysID,
	MarketingEventSortKeysRelevance,
}

func (e MarketingEventSortKeys) IsValid() bool {
	switch e {
	case MarketingEventSortKeysStartedAt, MarketingEventSortKeysID, MarketingEventSortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingEventSortKeys) String() string {
	return string(e)
}

func (e *MarketingEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingEventSortKeys", str)
	}
	return nil
}

func (e MarketingEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available types of marketing event.
type MarketingTactic string

const (
	// An abandoned cart recovery email.
	MarketingTacticAbandonedCart MarketingTactic = "ABANDONED_CART"
	// An ad, such as a Facebook ad.
	MarketingTacticAd MarketingTactic = "AD"
	// An affiliate link.
	MarketingTacticAffiliate MarketingTactic = "AFFILIATE"
	// A link.
	MarketingTacticLink MarketingTactic = "LINK"
	// A loyalty program.
	MarketingTacticLoyalty MarketingTactic = "LOYALTY"
	// A messaging app, such as Facebook Messenger.
	MarketingTacticMessage MarketingTactic = "MESSAGE"
	// A newsletter.
	MarketingTacticNewsletter MarketingTactic = "NEWSLETTER"
	// A notification in the Shopify admin.
	MarketingTacticNotification MarketingTactic = "NOTIFICATION"
	// A blog post.
	MarketingTacticPost MarketingTactic = "POST"
	// A retargeting ad.
	MarketingTacticRetargeting MarketingTactic = "RETARGETING"
	// A transactional email.
	MarketingTacticTransactional MarketingTactic = "TRANSACTIONAL"
	// Search engine optimization.
	MarketingTacticSeo MarketingTactic = "SEO"
	// A direct visit to the online store.
	MarketingTacticDirect MarketingTactic = "DIRECT"
	// A popup on the online store.
	MarketingTacticStorefrontApp MarketingTactic = "STOREFRONT_APP"
	// A display ad.
	MarketingTacticDisplay MarketingTactic = "DISPLAY"
	// Paid search.
	MarketingTacticSearch MarketingTactic = "SEARCH"
	// A follow-up email.
	MarketingTacticFollowUp MarketingTactic = "FOLLOW_UP"
	// A promotional receipt.
	MarketingTacticReceipt MarketingTactic = "RECEIPT"
)

var AllMarketingTactic = []MarketingTactic{
	MarketingTacticAbandonedCart,
	MarketingTacticAd,
	MarketingTacticAffiliate,
	MarketingTacticLink,
	MarketingTacticLoyalty,
	MarketingTacticMessage,
	MarketingTacticNewsletter,
	MarketingTacticNotification,
	MarketingTacticPost,
	MarketingTacticRetargeting,
	MarketingTacticTransactional,
	MarketingTacticSeo,
	MarketingTacticDirect,
	MarketingTacticStorefrontApp,
	MarketingTacticDisplay,
	MarketingTacticSearch,
	MarketingTacticFollowUp,
	MarketingTacticReceipt,
}

func (e MarketingTactic) IsValid() bool {
	switch e {
	case MarketingTacticAbandonedCart, MarketingTacticAd, MarketingTacticAffiliate, MarketingTacticLink, MarketingTacticLoyalty, MarketingTacticMessage, MarketingTacticNewsletter, MarketingTacticNotification, MarketingTacticPost, MarketingTacticRetargeting, MarketingTacticTransactional, MarketingTacticSeo, MarketingTacticDirect, MarketingTacticStorefrontApp, MarketingTacticDisplay, MarketingTacticSearch, MarketingTacticFollowUp, MarketingTacticReceipt:
		return true
	}
	return false
}

func (e MarketingTactic) String() string {
	return string(e)
}

func (e *MarketingTactic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingTactic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingTactic", str)
	}
	return nil
}

func (e MarketingTactic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible content types for a media object.
type MediaContentType string

const (
	// A Shopify-hosted video.
	MediaContentTypeVideo MediaContentType = "VIDEO"
	// An externally hosted video.
	MediaContentTypeExternalVideo MediaContentType = "EXTERNAL_VIDEO"
	// A 3d model.
	MediaContentTypeModel3d MediaContentType = "MODEL_3D"
	// A Shopify-hosted image.
	MediaContentTypeImage MediaContentType = "IMAGE"
)

var AllMediaContentType = []MediaContentType{
	MediaContentTypeVideo,
	MediaContentTypeExternalVideo,
	MediaContentTypeModel3d,
	MediaContentTypeImage,
}

func (e MediaContentType) IsValid() bool {
	switch e {
	case MediaContentTypeVideo, MediaContentTypeExternalVideo, MediaContentTypeModel3d, MediaContentTypeImage:
		return true
	}
	return false
}

func (e MediaContentType) String() string {
	return string(e)
}

func (e *MediaContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaContentType", str)
	}
	return nil
}

func (e MediaContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error types for media.
type MediaErrorCode string

const (
	// Media error has occured for unknown reason.
	MediaErrorCodeUnknown MediaErrorCode = "UNKNOWN"
	// Media could not be processed because the signed URL was invalid.
	MediaErrorCodeInvalidSignedURL MediaErrorCode = "INVALID_SIGNED_URL"
	// Media could not be processed because the image could not be downloaded.
	MediaErrorCodeImageDownloadFailure MediaErrorCode = "IMAGE_DOWNLOAD_FAILURE"
	// Media could not be processed because the image could not be processed.
	MediaErrorCodeImageProcessingFailure MediaErrorCode = "IMAGE_PROCESSING_FAILURE"
	// Media timed out because it is currently being modified by another operation.
	MediaErrorCodeMediaTimeoutError MediaErrorCode = "MEDIA_TIMEOUT_ERROR"
	// Media could not be created because the external video could not be found.
	MediaErrorCodeExternalVideoNotFound MediaErrorCode = "EXTERNAL_VIDEO_NOT_FOUND"
	// Media could not be created because the external video is not listed or is private.
	MediaErrorCodeExternalVideoUnlisted MediaErrorCode = "EXTERNAL_VIDEO_UNLISTED"
	// Media could not be created because the external video has an invalid aspect ratio.
	MediaErrorCodeExternalVideoInvalidAspectRatio MediaErrorCode = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
	// Media could not be created because embed permissions are disabled for this video.
	MediaErrorCodeExternalVideoEmbedDisabled MediaErrorCode = "EXTERNAL_VIDEO_EMBED_DISABLED"
	// Media could not be created because video is either not found or still transcoding.
	MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding MediaErrorCode = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
	// File could not be processed because the source could not be downloaded.
	MediaErrorCodeGenericFileDownloadFailure MediaErrorCode = "GENERIC_FILE_DOWNLOAD_FAILURE"
	// File could not be created because the size is too large.
	MediaErrorCodeGenericFileInvalidSize MediaErrorCode = "GENERIC_FILE_INVALID_SIZE"
	// Media could not be created because the metadata could not be read.
	MediaErrorCodeVideoMetadataReadError MediaErrorCode = "VIDEO_METADATA_READ_ERROR"
	// Media could not be created because it has an invalid file type.
	MediaErrorCodeVideoInvalidFiletypeError MediaErrorCode = "VIDEO_INVALID_FILETYPE_ERROR"
	// Media could not be created because it does not meet the minimum width requirement.
	MediaErrorCodeVideoMinWidthError MediaErrorCode = "VIDEO_MIN_WIDTH_ERROR"
	// Media could not be created because it does not meet the maximum width requirement.
	MediaErrorCodeVideoMaxWidthError MediaErrorCode = "VIDEO_MAX_WIDTH_ERROR"
	// Media could not be created because it does not meet the minimum height requirement.
	MediaErrorCodeVideoMinHeightError MediaErrorCode = "VIDEO_MIN_HEIGHT_ERROR"
	// Media could not be created because it does not meet the maximum height requirement.
	MediaErrorCodeVideoMaxHeightError MediaErrorCode = "VIDEO_MAX_HEIGHT_ERROR"
	// Media could not be created because it does not meet the minimum duration requirement.
	MediaErrorCodeVideoMinDurationError MediaErrorCode = "VIDEO_MIN_DURATION_ERROR"
	// Media could not be created because it does not meet the maximum duration requirement.
	MediaErrorCodeVideoMaxDurationError MediaErrorCode = "VIDEO_MAX_DURATION_ERROR"
	// Video failed validation.
	MediaErrorCodeVideoValidationError MediaErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model failed validation.
	MediaErrorCodeModel3dValidationError MediaErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Media could not be created because the model's thumbnail generation failed.
	MediaErrorCodeModel3dThumbnailGenerationError MediaErrorCode = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
	// There was an issue while trying to generate a new thumbnail.
	MediaErrorCodeModel3dThumbnailRegenerationError MediaErrorCode = "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
	// Media could not be created because the model can't be converted to USDZ format.
	MediaErrorCodeModel3dGlbToUsdzConversionError MediaErrorCode = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
	// Media could not be created because the model file failed processing.
	MediaErrorCodeModel3dGlbOutputCreationError MediaErrorCode = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
	// Media could not be created because the model file failed processing.
	MediaErrorCodeModel3dProcessingFailure MediaErrorCode = "MODEL3D_PROCESSING_FAILURE"
	// Media could not be created because the image is an unsupported file type.
	MediaErrorCodeUnsupportedImageFileType MediaErrorCode = "UNSUPPORTED_IMAGE_FILE_TYPE"
	// Media could not be created because the image size is too large.
	MediaErrorCodeInvalidImageFileSize MediaErrorCode = "INVALID_IMAGE_FILE_SIZE"
	// Media could not be created because the image has an invalid aspect ratio.
	MediaErrorCodeInvalidImageAspectRatio MediaErrorCode = "INVALID_IMAGE_ASPECT_RATIO"
	// Media could not be created because the image's resolution exceeds the max limit.
	MediaErrorCodeInvalidImageResolution MediaErrorCode = "INVALID_IMAGE_RESOLUTION"
	// Media could not be created because the cumulative file storage limit would be exceeded.
	MediaErrorCodeFileStorageLimitExceeded MediaErrorCode = "FILE_STORAGE_LIMIT_EXCEEDED"
	// Media could not be created because a file with the same name already exists.
	MediaErrorCodeDuplicateFilenameError MediaErrorCode = "DUPLICATE_FILENAME_ERROR"
)

var AllMediaErrorCode = []MediaErrorCode{
	MediaErrorCodeUnknown,
	MediaErrorCodeInvalidSignedURL,
	MediaErrorCodeImageDownloadFailure,
	MediaErrorCodeImageProcessingFailure,
	MediaErrorCodeMediaTimeoutError,
	MediaErrorCodeExternalVideoNotFound,
	MediaErrorCodeExternalVideoUnlisted,
	MediaErrorCodeExternalVideoInvalidAspectRatio,
	MediaErrorCodeExternalVideoEmbedDisabled,
	MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding,
	MediaErrorCodeGenericFileDownloadFailure,
	MediaErrorCodeGenericFileInvalidSize,
	MediaErrorCodeVideoMetadataReadError,
	MediaErrorCodeVideoInvalidFiletypeError,
	MediaErrorCodeVideoMinWidthError,
	MediaErrorCodeVideoMaxWidthError,
	MediaErrorCodeVideoMinHeightError,
	MediaErrorCodeVideoMaxHeightError,
	MediaErrorCodeVideoMinDurationError,
	MediaErrorCodeVideoMaxDurationError,
	MediaErrorCodeVideoValidationError,
	MediaErrorCodeModel3dValidationError,
	MediaErrorCodeModel3dThumbnailGenerationError,
	MediaErrorCodeModel3dThumbnailRegenerationError,
	MediaErrorCodeModel3dGlbToUsdzConversionError,
	MediaErrorCodeModel3dGlbOutputCreationError,
	MediaErrorCodeModel3dProcessingFailure,
	MediaErrorCodeUnsupportedImageFileType,
	MediaErrorCodeInvalidImageFileSize,
	MediaErrorCodeInvalidImageAspectRatio,
	MediaErrorCodeInvalidImageResolution,
	MediaErrorCodeFileStorageLimitExceeded,
	MediaErrorCodeDuplicateFilenameError,
}

func (e MediaErrorCode) IsValid() bool {
	switch e {
	case MediaErrorCodeUnknown, MediaErrorCodeInvalidSignedURL, MediaErrorCodeImageDownloadFailure, MediaErrorCodeImageProcessingFailure, MediaErrorCodeMediaTimeoutError, MediaErrorCodeExternalVideoNotFound, MediaErrorCodeExternalVideoUnlisted, MediaErrorCodeExternalVideoInvalidAspectRatio, MediaErrorCodeExternalVideoEmbedDisabled, MediaErrorCodeExternalVideoEmbedNotFoundOrTranscoding, MediaErrorCodeGenericFileDownloadFailure, MediaErrorCodeGenericFileInvalidSize, MediaErrorCodeVideoMetadataReadError, MediaErrorCodeVideoInvalidFiletypeError, MediaErrorCodeVideoMinWidthError, MediaErrorCodeVideoMaxWidthError, MediaErrorCodeVideoMinHeightError, MediaErrorCodeVideoMaxHeightError, MediaErrorCodeVideoMinDurationError, MediaErrorCodeVideoMaxDurationError, MediaErrorCodeVideoValidationError, MediaErrorCodeModel3dValidationError, MediaErrorCodeModel3dThumbnailGenerationError, MediaErrorCodeModel3dThumbnailRegenerationError, MediaErrorCodeModel3dGlbToUsdzConversionError, MediaErrorCodeModel3dGlbOutputCreationError, MediaErrorCodeModel3dProcessingFailure, MediaErrorCodeUnsupportedImageFileType, MediaErrorCodeInvalidImageFileSize, MediaErrorCodeInvalidImageAspectRatio, MediaErrorCodeInvalidImageResolution, MediaErrorCodeFileStorageLimitExceeded, MediaErrorCodeDuplicateFilenameError:
		return true
	}
	return false
}

func (e MediaErrorCode) String() string {
	return string(e)
}

func (e *MediaErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaErrorCode", str)
	}
	return nil
}

func (e MediaErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Host for a Media Resource.
type MediaHost string

const (
	// Host for YouTube embedded videos.
	MediaHostYoutube MediaHost = "YOUTUBE"
	// Host for Vimeo embedded videos.
	MediaHostVimeo MediaHost = "VIMEO"
)

var AllMediaHost = []MediaHost{
	MediaHostYoutube,
	MediaHostVimeo,
}

func (e MediaHost) IsValid() bool {
	switch e {
	case MediaHostYoutube, MediaHostVimeo:
		return true
	}
	return false
}

func (e MediaHost) String() string {
	return string(e)
}

func (e *MediaHost) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaHost(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaHost", str)
	}
	return nil
}

func (e MediaHost) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media preview image.
type MediaPreviewImageStatus string

const (
	// Preview image is uploaded but not yet processed.
	MediaPreviewImageStatusUploaded MediaPreviewImageStatus = "UPLOADED"
	// Preview image is being processed.
	MediaPreviewImageStatusProcessing MediaPreviewImageStatus = "PROCESSING"
	// Preview image is ready to be displayed.
	MediaPreviewImageStatusReady MediaPreviewImageStatus = "READY"
	// Preview image processing has failed.
	MediaPreviewImageStatusFailed MediaPreviewImageStatus = "FAILED"
)

var AllMediaPreviewImageStatus = []MediaPreviewImageStatus{
	MediaPreviewImageStatusUploaded,
	MediaPreviewImageStatusProcessing,
	MediaPreviewImageStatusReady,
	MediaPreviewImageStatusFailed,
}

func (e MediaPreviewImageStatus) IsValid() bool {
	switch e {
	case MediaPreviewImageStatusUploaded, MediaPreviewImageStatusProcessing, MediaPreviewImageStatusReady, MediaPreviewImageStatusFailed:
		return true
	}
	return false
}

func (e MediaPreviewImageStatus) String() string {
	return string(e)
}

func (e *MediaPreviewImageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaPreviewImageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaPreviewImageStatus", str)
	}
	return nil
}

func (e MediaPreviewImageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media object.
type MediaStatus string

const (
	// Media has been uploaded but not yet processed.
	MediaStatusUploaded MediaStatus = "UPLOADED"
	// Media is being processed.
	MediaStatusProcessing MediaStatus = "PROCESSING"
	// Media is ready to be displayed.
	MediaStatusReady MediaStatus = "READY"
	// Media processing has failed.
	MediaStatusFailed MediaStatus = "FAILED"
)

var AllMediaStatus = []MediaStatus{
	MediaStatusUploaded,
	MediaStatusProcessing,
	MediaStatusReady,
	MediaStatusFailed,
}

func (e MediaStatus) IsValid() bool {
	switch e {
	case MediaStatusUploaded, MediaStatusProcessing, MediaStatusReady, MediaStatusFailed:
		return true
	}
	return false
}

func (e MediaStatus) String() string {
	return string(e)
}

func (e *MediaStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaStatus", str)
	}
	return nil
}

func (e MediaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MediaUserError`.
type MediaUserErrorCode string

const (
	// The input value is invalid.
	MediaUserErrorCodeInvalid MediaUserErrorCode = "INVALID"
	// The input value is blank.
	MediaUserErrorCodeBlank MediaUserErrorCode = "BLANK"
	// Video validation failed.
	MediaUserErrorCodeVideoValidationError MediaUserErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model validation failed.
	MediaUserErrorCodeModel3dValidationError MediaUserErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Video creation throttle was exceeded.
	MediaUserErrorCodeVideoThrottleExceeded MediaUserErrorCode = "VIDEO_THROTTLE_EXCEEDED"
	// Model3d creation throttle was exceeded.
	MediaUserErrorCodeModel3dThrottleExceeded MediaUserErrorCode = "MODEL3D_THROTTLE_EXCEEDED"
	// Exceeded the limit of media per product.
	MediaUserErrorCodeProductMediaLimitExceeded MediaUserErrorCode = "PRODUCT_MEDIA_LIMIT_EXCEEDED"
	// Exceeded the limit of media per shop.
	MediaUserErrorCodeShopMediaLimitExceeded MediaUserErrorCode = "SHOP_MEDIA_LIMIT_EXCEEDED"
	// Product does not exist.
	MediaUserErrorCodeProductDoesNotExist MediaUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Media does not exist.
	MediaUserErrorCodeMediaDoesNotExist MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST"
	// Media does not exist on the given product.
	MediaUserErrorCodeMediaDoesNotExistOnProduct MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST_ON_PRODUCT"
	// Only one mediaId is allowed per variant-media input pair.
	MediaUserErrorCodeTooManyMediaPerInputPair MediaUserErrorCode = "TOO_MANY_MEDIA_PER_INPUT_PAIR"
	// Exceeded the maximum number of 100 variant-media pairs per mutation call.
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded MediaUserErrorCode = "MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED"
	// Invalid media type.
	MediaUserErrorCodeInvalidMediaType MediaUserErrorCode = "INVALID_MEDIA_TYPE"
	// Variant specified in more than one pair.
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes MediaUserErrorCode = "PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES"
	// Variant does not exist on the given product.
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct MediaUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT"
	// Non-ready media are not supported.
	MediaUserErrorCodeNonReadyMedia MediaUserErrorCode = "NON_READY_MEDIA"
	// Product variant already has attached media.
	MediaUserErrorCodeProductVariantAlreadyHasMedia MediaUserErrorCode = "PRODUCT_VARIANT_ALREADY_HAS_MEDIA"
	// The specified media is not attached to the specified variant.
	MediaUserErrorCodeMediaIsNotAttachedToVariant MediaUserErrorCode = "MEDIA_IS_NOT_ATTACHED_TO_VARIANT"
	// Media cannot be modified. It is currently being modified by another operation.
	MediaUserErrorCodeMediaCannotBeModified MediaUserErrorCode = "MEDIA_CANNOT_BE_MODIFIED"
)

var AllMediaUserErrorCode = []MediaUserErrorCode{
	MediaUserErrorCodeInvalid,
	MediaUserErrorCodeBlank,
	MediaUserErrorCodeVideoValidationError,
	MediaUserErrorCodeModel3dValidationError,
	MediaUserErrorCodeVideoThrottleExceeded,
	MediaUserErrorCodeModel3dThrottleExceeded,
	MediaUserErrorCodeProductMediaLimitExceeded,
	MediaUserErrorCodeShopMediaLimitExceeded,
	MediaUserErrorCodeProductDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExistOnProduct,
	MediaUserErrorCodeTooManyMediaPerInputPair,
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded,
	MediaUserErrorCodeInvalidMediaType,
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes,
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct,
	MediaUserErrorCodeNonReadyMedia,
	MediaUserErrorCodeProductVariantAlreadyHasMedia,
	MediaUserErrorCodeMediaIsNotAttachedToVariant,
	MediaUserErrorCodeMediaCannotBeModified,
}

func (e MediaUserErrorCode) IsValid() bool {
	switch e {
	case MediaUserErrorCodeInvalid, MediaUserErrorCodeBlank, MediaUserErrorCodeVideoValidationError, MediaUserErrorCodeModel3dValidationError, MediaUserErrorCodeVideoThrottleExceeded, MediaUserErrorCodeModel3dThrottleExceeded, MediaUserErrorCodeProductMediaLimitExceeded, MediaUserErrorCodeShopMediaLimitExceeded, MediaUserErrorCodeProductDoesNotExist, MediaUserErrorCodeMediaDoesNotExist, MediaUserErrorCodeMediaDoesNotExistOnProduct, MediaUserErrorCodeTooManyMediaPerInputPair, MediaUserErrorCodeMaximumVariantMediaPairsExceeded, MediaUserErrorCodeInvalidMediaType, MediaUserErrorCodeProductVariantSpecifiedMultipleTimes, MediaUserErrorCodeProductVariantDoesNotExistOnProduct, MediaUserErrorCodeNonReadyMedia, MediaUserErrorCodeProductVariantAlreadyHasMedia, MediaUserErrorCodeMediaIsNotAttachedToVariant, MediaUserErrorCodeMediaCannotBeModified:
		return true
	}
	return false
}

func (e MediaUserErrorCode) String() string {
	return string(e)
}

func (e *MediaUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaUserErrorCode", str)
	}
	return nil
}

func (e MediaUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Warning types for media.
type MediaWarningCode string

const (
	// 3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct.
	MediaWarningCodeModelSmallPhysicalSize MediaWarningCode = "MODEL_SMALL_PHYSICAL_SIZE"
	// 3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct.
	MediaWarningCodeModelLargePhysicalSize MediaWarningCode = "MODEL_LARGE_PHYSICAL_SIZE"
)

var AllMediaWarningCode = []MediaWarningCode{
	MediaWarningCodeModelSmallPhysicalSize,
	MediaWarningCodeModelLargePhysicalSize,
}

func (e MediaWarningCode) IsValid() bool {
	switch e {
	case MediaWarningCodeModelSmallPhysicalSize, MediaWarningCodeModelLargePhysicalSize:
		return true
	}
	return false
}

func (e MediaWarningCode) String() string {
	return string(e)
}

func (e *MediaWarningCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaWarningCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaWarningCode", str)
	}
	return nil
}

func (e MediaWarningCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The class of the discount for combining purposes.
type MerchandiseDiscountClass string

const (
	// Combined as a product discount.
	MerchandiseDiscountClassProduct MerchandiseDiscountClass = "PRODUCT"
	// Combined as an order discount.
	MerchandiseDiscountClassOrder MerchandiseDiscountClass = "ORDER"
)

var AllMerchandiseDiscountClass = []MerchandiseDiscountClass{
	MerchandiseDiscountClassProduct,
	MerchandiseDiscountClassOrder,
}

func (e MerchandiseDiscountClass) IsValid() bool {
	switch e {
	case MerchandiseDiscountClassProduct, MerchandiseDiscountClassOrder:
		return true
	}
	return false
}

func (e MerchandiseDiscountClass) String() string {
	return string(e)
}

func (e *MerchandiseDiscountClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MerchandiseDiscountClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MerchandiseDiscountClass", str)
	}
	return nil
}

func (e MerchandiseDiscountClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible admin access settings for metafields.
type MetafieldAdminAccess string

const (
	// Owner gets full access. No one else has access rights.
	MetafieldAdminAccessPrivate MetafieldAdminAccess = "PRIVATE"
	// Owner gets full access. All applications and the merchant have read-only access.
	MetafieldAdminAccessPublicRead MetafieldAdminAccess = "PUBLIC_READ"
	// Owner gets full access. The merchant has read-only access. No one else has access rights.
	MetafieldAdminAccessMerchantRead MetafieldAdminAccess = "MERCHANT_READ"
	// Owner gets full access. The merchant has read and write access. No one else has access rights.
	MetafieldAdminAccessMerchantReadWrite MetafieldAdminAccess = "MERCHANT_READ_WRITE"
)

var AllMetafieldAdminAccess = []MetafieldAdminAccess{
	MetafieldAdminAccessPrivate,
	MetafieldAdminAccessPublicRead,
	MetafieldAdminAccessMerchantRead,
	MetafieldAdminAccessMerchantReadWrite,
}

func (e MetafieldAdminAccess) IsValid() bool {
	switch e {
	case MetafieldAdminAccessPrivate, MetafieldAdminAccessPublicRead, MetafieldAdminAccessMerchantRead, MetafieldAdminAccessMerchantReadWrite:
		return true
	}
	return false
}

func (e MetafieldAdminAccess) String() string {
	return string(e)
}

func (e *MetafieldAdminAccess) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldAdminAccess(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldAdminAccess", str)
	}
	return nil
}

func (e MetafieldAdminAccess) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
type MetafieldDefinitionCreateUserErrorCode string

const (
	// The input value is invalid.
	MetafieldDefinitionCreateUserErrorCodeInvalid MetafieldDefinitionCreateUserErrorCode = "INVALID"
	// The input value isn't included in the list.
	MetafieldDefinitionCreateUserErrorCodeInclusion MetafieldDefinitionCreateUserErrorCode = "INCLUSION"
	// The input value needs to be blank.
	MetafieldDefinitionCreateUserErrorCodePresent MetafieldDefinitionCreateUserErrorCode = "PRESENT"
	// The input value is already taken.
	MetafieldDefinitionCreateUserErrorCodeTaken MetafieldDefinitionCreateUserErrorCode = "TAKEN"
	// The input value is too long.
	MetafieldDefinitionCreateUserErrorCodeTooLong MetafieldDefinitionCreateUserErrorCode = "TOO_LONG"
	// The input value is too short.
	MetafieldDefinitionCreateUserErrorCodeTooShort MetafieldDefinitionCreateUserErrorCode = "TOO_SHORT"
	// The definition limit per owner type has exceeded.
	MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded MetafieldDefinitionCreateUserErrorCode = "RESOURCE_TYPE_LIMIT_EXCEEDED"
	// The maximum limit of definitions per owner type has exceeded.
	MetafieldDefinitionCreateUserErrorCodeLimitExceeded MetafieldDefinitionCreateUserErrorCode = "LIMIT_EXCEEDED"
	// An invalid option.
	MetafieldDefinitionCreateUserErrorCodeInvalidOption MetafieldDefinitionCreateUserErrorCode = "INVALID_OPTION"
	// A duplicate option.
	MetafieldDefinitionCreateUserErrorCodeDuplicateOption MetafieldDefinitionCreateUserErrorCode = "DUPLICATE_OPTION"
	// This namespace and key combination is reserved for standard definitions.
	MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey MetafieldDefinitionCreateUserErrorCode = "RESERVED_NAMESPACE_KEY"
	// The pinned limit has been reached for the owner type.
	MetafieldDefinitionCreateUserErrorCodePinnedLimitReached MetafieldDefinitionCreateUserErrorCode = "PINNED_LIMIT_REACHED"
	// This namespace and key combination is already in use for a set of your metafields.
	MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists MetafieldDefinitionCreateUserErrorCode = "UNSTRUCTURED_ALREADY_EXISTS"
	// A field contains an invalid character.
	MetafieldDefinitionCreateUserErrorCodeInvalidCharacter MetafieldDefinitionCreateUserErrorCode = "INVALID_CHARACTER"
	// The definition type is not eligible to be used as collection condition.
	MetafieldDefinitionCreateUserErrorCodeTypeNotAllowedForConditions MetafieldDefinitionCreateUserErrorCode = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
	// You have reached the maximum allowed definitions for automated collections.
	MetafieldDefinitionCreateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections MetafieldDefinitionCreateUserErrorCode = "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
)

var AllMetafieldDefinitionCreateUserErrorCode = []MetafieldDefinitionCreateUserErrorCode{
	MetafieldDefinitionCreateUserErrorCodeInvalid,
	MetafieldDefinitionCreateUserErrorCodeInclusion,
	MetafieldDefinitionCreateUserErrorCodePresent,
	MetafieldDefinitionCreateUserErrorCodeTaken,
	MetafieldDefinitionCreateUserErrorCodeTooLong,
	MetafieldDefinitionCreateUserErrorCodeTooShort,
	MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded,
	MetafieldDefinitionCreateUserErrorCodeLimitExceeded,
	MetafieldDefinitionCreateUserErrorCodeInvalidOption,
	MetafieldDefinitionCreateUserErrorCodeDuplicateOption,
	MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey,
	MetafieldDefinitionCreateUserErrorCodePinnedLimitReached,
	MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists,
	MetafieldDefinitionCreateUserErrorCodeInvalidCharacter,
	MetafieldDefinitionCreateUserErrorCodeTypeNotAllowedForConditions,
	MetafieldDefinitionCreateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections,
}

func (e MetafieldDefinitionCreateUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionCreateUserErrorCodeInvalid, MetafieldDefinitionCreateUserErrorCodeInclusion, MetafieldDefinitionCreateUserErrorCodePresent, MetafieldDefinitionCreateUserErrorCodeTaken, MetafieldDefinitionCreateUserErrorCodeTooLong, MetafieldDefinitionCreateUserErrorCodeTooShort, MetafieldDefinitionCreateUserErrorCodeResourceTypeLimitExceeded, MetafieldDefinitionCreateUserErrorCodeLimitExceeded, MetafieldDefinitionCreateUserErrorCodeInvalidOption, MetafieldDefinitionCreateUserErrorCodeDuplicateOption, MetafieldDefinitionCreateUserErrorCodeReservedNamespaceKey, MetafieldDefinitionCreateUserErrorCodePinnedLimitReached, MetafieldDefinitionCreateUserErrorCodeUnstructuredAlreadyExists, MetafieldDefinitionCreateUserErrorCodeInvalidCharacter, MetafieldDefinitionCreateUserErrorCodeTypeNotAllowedForConditions, MetafieldDefinitionCreateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections:
		return true
	}
	return false
}

func (e MetafieldDefinitionCreateUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionCreateUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
type MetafieldDefinitionDeleteUserErrorCode string

const (
	// The input value needs to be blank.
	MetafieldDefinitionDeleteUserErrorCodePresent MetafieldDefinitionDeleteUserErrorCode = "PRESENT"
	// Definition not found.
	MetafieldDefinitionDeleteUserErrorCodeNotFound MetafieldDefinitionDeleteUserErrorCode = "NOT_FOUND"
	// An internal error occurred.
	MetafieldDefinitionDeleteUserErrorCodeInternalError MetafieldDefinitionDeleteUserErrorCode = "INTERNAL_ERROR"
	// Deleting a reference type metafield definition requires deletion of its associated metafields.
	MetafieldDefinitionDeleteUserErrorCodeReferenceTypeDeletionError MetafieldDefinitionDeleteUserErrorCode = "REFERENCE_TYPE_DELETION_ERROR"
	// Action cannot proceed. Definition is currently in use.
	MetafieldDefinitionDeleteUserErrorCodeMetafieldDefinitionInUse MetafieldDefinitionDeleteUserErrorCode = "METAFIELD_DEFINITION_IN_USE"
	// Owner type can't be used in this mutation.
	MetafieldDefinitionDeleteUserErrorCodeDisallowedOwnerType MetafieldDefinitionDeleteUserErrorCode = "DISALLOWED_OWNER_TYPE"
)

var AllMetafieldDefinitionDeleteUserErrorCode = []MetafieldDefinitionDeleteUserErrorCode{
	MetafieldDefinitionDeleteUserErrorCodePresent,
	MetafieldDefinitionDeleteUserErrorCodeNotFound,
	MetafieldDefinitionDeleteUserErrorCodeInternalError,
	MetafieldDefinitionDeleteUserErrorCodeReferenceTypeDeletionError,
	MetafieldDefinitionDeleteUserErrorCodeMetafieldDefinitionInUse,
	MetafieldDefinitionDeleteUserErrorCodeDisallowedOwnerType,
}

func (e MetafieldDefinitionDeleteUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionDeleteUserErrorCodePresent, MetafieldDefinitionDeleteUserErrorCodeNotFound, MetafieldDefinitionDeleteUserErrorCodeInternalError, MetafieldDefinitionDeleteUserErrorCodeReferenceTypeDeletionError, MetafieldDefinitionDeleteUserErrorCodeMetafieldDefinitionInUse, MetafieldDefinitionDeleteUserErrorCodeDisallowedOwnerType:
		return true
	}
	return false
}

func (e MetafieldDefinitionDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionDeleteUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
type MetafieldDefinitionPinUserErrorCode string

const (
	// The metafield definition was not found.
	MetafieldDefinitionPinUserErrorCodeNotFound MetafieldDefinitionPinUserErrorCode = "NOT_FOUND"
	// The pinned limit has been reached for owner type.
	MetafieldDefinitionPinUserErrorCodePinnedLimitReached MetafieldDefinitionPinUserErrorCode = "PINNED_LIMIT_REACHED"
	// The metafield definition is already pinned.
	MetafieldDefinitionPinUserErrorCodeAlreadyPinned MetafieldDefinitionPinUserErrorCode = "ALREADY_PINNED"
	// An internal error occurred.
	MetafieldDefinitionPinUserErrorCodeInternalError MetafieldDefinitionPinUserErrorCode = "INTERNAL_ERROR"
	// Owner type can't be used in this mutation.
	MetafieldDefinitionPinUserErrorCodeDisallowedOwnerType MetafieldDefinitionPinUserErrorCode = "DISALLOWED_OWNER_TYPE"
)

var AllMetafieldDefinitionPinUserErrorCode = []MetafieldDefinitionPinUserErrorCode{
	MetafieldDefinitionPinUserErrorCodeNotFound,
	MetafieldDefinitionPinUserErrorCodePinnedLimitReached,
	MetafieldDefinitionPinUserErrorCodeAlreadyPinned,
	MetafieldDefinitionPinUserErrorCodeInternalError,
	MetafieldDefinitionPinUserErrorCodeDisallowedOwnerType,
}

func (e MetafieldDefinitionPinUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionPinUserErrorCodeNotFound, MetafieldDefinitionPinUserErrorCodePinnedLimitReached, MetafieldDefinitionPinUserErrorCodeAlreadyPinned, MetafieldDefinitionPinUserErrorCodeInternalError, MetafieldDefinitionPinUserErrorCodeDisallowedOwnerType:
		return true
	}
	return false
}

func (e MetafieldDefinitionPinUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionPinUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionPinUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionPinUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionPinUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield definition pinned statuses.
type MetafieldDefinitionPinnedStatus string

const (
	// All metafield definitions.
	MetafieldDefinitionPinnedStatusAny MetafieldDefinitionPinnedStatus = "ANY"
	// Only metafield definitions that are pinned.
	MetafieldDefinitionPinnedStatusPinned MetafieldDefinitionPinnedStatus = "PINNED"
	// Only metafield definitions that are not pinned.
	MetafieldDefinitionPinnedStatusUnpinned MetafieldDefinitionPinnedStatus = "UNPINNED"
)

var AllMetafieldDefinitionPinnedStatus = []MetafieldDefinitionPinnedStatus{
	MetafieldDefinitionPinnedStatusAny,
	MetafieldDefinitionPinnedStatusPinned,
	MetafieldDefinitionPinnedStatusUnpinned,
}

func (e MetafieldDefinitionPinnedStatus) IsValid() bool {
	switch e {
	case MetafieldDefinitionPinnedStatusAny, MetafieldDefinitionPinnedStatusPinned, MetafieldDefinitionPinnedStatusUnpinned:
		return true
	}
	return false
}

func (e MetafieldDefinitionPinnedStatus) String() string {
	return string(e)
}

func (e *MetafieldDefinitionPinnedStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionPinnedStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionPinnedStatus", str)
	}
	return nil
}

func (e MetafieldDefinitionPinnedStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MetafieldDefinition query.
type MetafieldDefinitionSortKeys string

const (
	// Sort by the `id` value.
	MetafieldDefinitionSortKeysID MetafieldDefinitionSortKeys = "ID"
	// Sort by the `name` value.
	MetafieldDefinitionSortKeysName MetafieldDefinitionSortKeys = "NAME"
	// Sort by the `pinned_position` value.
	MetafieldDefinitionSortKeysPinnedPosition MetafieldDefinitionSortKeys = "PINNED_POSITION"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	MetafieldDefinitionSortKeysRelevance MetafieldDefinitionSortKeys = "RELEVANCE"
)

var AllMetafieldDefinitionSortKeys = []MetafieldDefinitionSortKeys{
	MetafieldDefinitionSortKeysID,
	MetafieldDefinitionSortKeysName,
	MetafieldDefinitionSortKeysPinnedPosition,
	MetafieldDefinitionSortKeysRelevance,
}

func (e MetafieldDefinitionSortKeys) IsValid() bool {
	switch e {
	case MetafieldDefinitionSortKeysID, MetafieldDefinitionSortKeysName, MetafieldDefinitionSortKeysPinnedPosition, MetafieldDefinitionSortKeysRelevance:
		return true
	}
	return false
}

func (e MetafieldDefinitionSortKeys) String() string {
	return string(e)
}

func (e *MetafieldDefinitionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionSortKeys", str)
	}
	return nil
}

func (e MetafieldDefinitionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
type MetafieldDefinitionUnpinUserErrorCode string

const (
	// The metafield definition was not found.
	MetafieldDefinitionUnpinUserErrorCodeNotFound MetafieldDefinitionUnpinUserErrorCode = "NOT_FOUND"
	// The metafield definition isn't pinned.
	MetafieldDefinitionUnpinUserErrorCodeNotPinned MetafieldDefinitionUnpinUserErrorCode = "NOT_PINNED"
	// An internal error occurred.
	MetafieldDefinitionUnpinUserErrorCodeInternalError MetafieldDefinitionUnpinUserErrorCode = "INTERNAL_ERROR"
	// Owner type can't be used in this mutation.
	MetafieldDefinitionUnpinUserErrorCodeDisallowedOwnerType MetafieldDefinitionUnpinUserErrorCode = "DISALLOWED_OWNER_TYPE"
)

var AllMetafieldDefinitionUnpinUserErrorCode = []MetafieldDefinitionUnpinUserErrorCode{
	MetafieldDefinitionUnpinUserErrorCodeNotFound,
	MetafieldDefinitionUnpinUserErrorCodeNotPinned,
	MetafieldDefinitionUnpinUserErrorCodeInternalError,
	MetafieldDefinitionUnpinUserErrorCodeDisallowedOwnerType,
}

func (e MetafieldDefinitionUnpinUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionUnpinUserErrorCodeNotFound, MetafieldDefinitionUnpinUserErrorCodeNotPinned, MetafieldDefinitionUnpinUserErrorCodeInternalError, MetafieldDefinitionUnpinUserErrorCodeDisallowedOwnerType:
		return true
	}
	return false
}

func (e MetafieldDefinitionUnpinUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionUnpinUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionUnpinUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionUnpinUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionUnpinUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
type MetafieldDefinitionUpdateUserErrorCode string

const (
	// The input value needs to be blank.
	MetafieldDefinitionUpdateUserErrorCodePresent MetafieldDefinitionUpdateUserErrorCode = "PRESENT"
	// The input value is too long.
	MetafieldDefinitionUpdateUserErrorCodeTooLong MetafieldDefinitionUpdateUserErrorCode = "TOO_LONG"
	// The metafield definition wasn't found.
	MetafieldDefinitionUpdateUserErrorCodeNotFound MetafieldDefinitionUpdateUserErrorCode = "NOT_FOUND"
	// An invalid input.
	MetafieldDefinitionUpdateUserErrorCodeInvalidInput MetafieldDefinitionUpdateUserErrorCode = "INVALID_INPUT"
	// The pinned limit has been reached for the owner type.
	MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached MetafieldDefinitionUpdateUserErrorCode = "PINNED_LIMIT_REACHED"
	// An internal error occurred.
	MetafieldDefinitionUpdateUserErrorCodeInternalError MetafieldDefinitionUpdateUserErrorCode = "INTERNAL_ERROR"
	// The definition type is not eligible to be used as collection condition.
	MetafieldDefinitionUpdateUserErrorCodeTypeNotAllowedForConditions MetafieldDefinitionUpdateUserErrorCode = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
	// Action cannot proceed. Definition is currently in use.
	MetafieldDefinitionUpdateUserErrorCodeMetafieldDefinitionInUse MetafieldDefinitionUpdateUserErrorCode = "METAFIELD_DEFINITION_IN_USE"
	// You have reached the maximum allowed definitions for automated collections.
	MetafieldDefinitionUpdateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections MetafieldDefinitionUpdateUserErrorCode = "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
)

var AllMetafieldDefinitionUpdateUserErrorCode = []MetafieldDefinitionUpdateUserErrorCode{
	MetafieldDefinitionUpdateUserErrorCodePresent,
	MetafieldDefinitionUpdateUserErrorCodeTooLong,
	MetafieldDefinitionUpdateUserErrorCodeNotFound,
	MetafieldDefinitionUpdateUserErrorCodeInvalidInput,
	MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached,
	MetafieldDefinitionUpdateUserErrorCodeInternalError,
	MetafieldDefinitionUpdateUserErrorCodeTypeNotAllowedForConditions,
	MetafieldDefinitionUpdateUserErrorCodeMetafieldDefinitionInUse,
	MetafieldDefinitionUpdateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections,
}

func (e MetafieldDefinitionUpdateUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldDefinitionUpdateUserErrorCodePresent, MetafieldDefinitionUpdateUserErrorCodeTooLong, MetafieldDefinitionUpdateUserErrorCodeNotFound, MetafieldDefinitionUpdateUserErrorCodeInvalidInput, MetafieldDefinitionUpdateUserErrorCodePinnedLimitReached, MetafieldDefinitionUpdateUserErrorCodeInternalError, MetafieldDefinitionUpdateUserErrorCodeTypeNotAllowedForConditions, MetafieldDefinitionUpdateUserErrorCodeMetafieldDefinitionInUse, MetafieldDefinitionUpdateUserErrorCodeOwnerTypeLimitExceededForAutomatedCollections:
		return true
	}
	return false
}

func (e MetafieldDefinitionUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldDefinitionUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionUpdateUserErrorCode", str)
	}
	return nil
}

func (e MetafieldDefinitionUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield definition validation statuses.
type MetafieldDefinitionValidationStatus string

const (
	// All of this definition's metafields are valid.
	MetafieldDefinitionValidationStatusAllValid MetafieldDefinitionValidationStatus = "ALL_VALID"
	// Asynchronous validation of this definition's metafields is in progress.
	MetafieldDefinitionValidationStatusInProgress MetafieldDefinitionValidationStatus = "IN_PROGRESS"
	// Some of this definition's metafields are invalid.
	MetafieldDefinitionValidationStatusSomeInvalid MetafieldDefinitionValidationStatus = "SOME_INVALID"
)

var AllMetafieldDefinitionValidationStatus = []MetafieldDefinitionValidationStatus{
	MetafieldDefinitionValidationStatusAllValid,
	MetafieldDefinitionValidationStatusInProgress,
	MetafieldDefinitionValidationStatusSomeInvalid,
}

func (e MetafieldDefinitionValidationStatus) IsValid() bool {
	switch e {
	case MetafieldDefinitionValidationStatusAllValid, MetafieldDefinitionValidationStatusInProgress, MetafieldDefinitionValidationStatusSomeInvalid:
		return true
	}
	return false
}

func (e MetafieldDefinitionValidationStatus) String() string {
	return string(e)
}

func (e *MetafieldDefinitionValidationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldDefinitionValidationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldDefinitionValidationStatus", str)
	}
	return nil
}

func (e MetafieldDefinitionValidationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible types of a metafield's owner resource.
type MetafieldOwnerType string

const (
	// The Api Permission metafield owner type.
	MetafieldOwnerTypeAPIPermission MetafieldOwnerType = "API_PERMISSION"
	// The Company metafield owner type.
	MetafieldOwnerTypeCompany MetafieldOwnerType = "COMPANY"
	// The Company Location metafield owner type.
	MetafieldOwnerTypeCompanyLocation MetafieldOwnerType = "COMPANY_LOCATION"
	// The Payment Customization metafield owner type.
	MetafieldOwnerTypePaymentCustomization MetafieldOwnerType = "PAYMENT_CUSTOMIZATION"
	// The Customer metafield owner type.
	MetafieldOwnerTypeCustomer MetafieldOwnerType = "CUSTOMER"
	// The Delivery Customization metafield owner type.
	MetafieldOwnerTypeDeliveryCustomization MetafieldOwnerType = "DELIVERY_CUSTOMIZATION"
	// The Draft Order metafield owner type.
	MetafieldOwnerTypeDraftorder MetafieldOwnerType = "DRAFTORDER"
	// The Market metafield owner type.
	MetafieldOwnerTypeMarket MetafieldOwnerType = "MARKET"
	// The Collection metafield owner type.
	MetafieldOwnerTypeCollection MetafieldOwnerType = "COLLECTION"
	// The Media Image metafield owner type.
	MetafieldOwnerTypeMediaImage MetafieldOwnerType = "MEDIA_IMAGE"
	// The Product Image metafield owner type.
	MetafieldOwnerTypeProductimage MetafieldOwnerType = "PRODUCTIMAGE"
	// The Product metafield owner type.
	MetafieldOwnerTypeProduct MetafieldOwnerType = "PRODUCT"
	// The Product Variant metafield owner type.
	MetafieldOwnerTypeProductvariant MetafieldOwnerType = "PRODUCTVARIANT"
	// The Article metafield owner type.
	MetafieldOwnerTypeArticle MetafieldOwnerType = "ARTICLE"
	// The Blog metafield owner type.
	MetafieldOwnerTypeBlog MetafieldOwnerType = "BLOG"
	// The Page metafield owner type.
	MetafieldOwnerTypePage MetafieldOwnerType = "PAGE"
	// The Discount metafield owner type.
	MetafieldOwnerTypeDiscount MetafieldOwnerType = "DISCOUNT"
	// The Order metafield owner type.
	MetafieldOwnerTypeOrder MetafieldOwnerType = "ORDER"
	// The Location metafield owner type.
	MetafieldOwnerTypeLocation MetafieldOwnerType = "LOCATION"
	// The Shop metafield owner type.
	MetafieldOwnerTypeShop MetafieldOwnerType = "SHOP"
)

var AllMetafieldOwnerType = []MetafieldOwnerType{
	MetafieldOwnerTypeAPIPermission,
	MetafieldOwnerTypeCompany,
	MetafieldOwnerTypeCompanyLocation,
	MetafieldOwnerTypePaymentCustomization,
	MetafieldOwnerTypeCustomer,
	MetafieldOwnerTypeDeliveryCustomization,
	MetafieldOwnerTypeDraftorder,
	MetafieldOwnerTypeMarket,
	MetafieldOwnerTypeCollection,
	MetafieldOwnerTypeMediaImage,
	MetafieldOwnerTypeProductimage,
	MetafieldOwnerTypeProduct,
	MetafieldOwnerTypeProductvariant,
	MetafieldOwnerTypeArticle,
	MetafieldOwnerTypeBlog,
	MetafieldOwnerTypePage,
	MetafieldOwnerTypeDiscount,
	MetafieldOwnerTypeOrder,
	MetafieldOwnerTypeLocation,
	MetafieldOwnerTypeShop,
}

func (e MetafieldOwnerType) IsValid() bool {
	switch e {
	case MetafieldOwnerTypeAPIPermission, MetafieldOwnerTypeCompany, MetafieldOwnerTypeCompanyLocation, MetafieldOwnerTypePaymentCustomization, MetafieldOwnerTypeCustomer, MetafieldOwnerTypeDeliveryCustomization, MetafieldOwnerTypeDraftorder, MetafieldOwnerTypeMarket, MetafieldOwnerTypeCollection, MetafieldOwnerTypeMediaImage, MetafieldOwnerTypeProductimage, MetafieldOwnerTypeProduct, MetafieldOwnerTypeProductvariant, MetafieldOwnerTypeArticle, MetafieldOwnerTypeBlog, MetafieldOwnerTypePage, MetafieldOwnerTypeDiscount, MetafieldOwnerTypeOrder, MetafieldOwnerTypeLocation, MetafieldOwnerTypeShop:
		return true
	}
	return false
}

func (e MetafieldOwnerType) String() string {
	return string(e)
}

func (e *MetafieldOwnerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldOwnerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldOwnerType", str)
	}
	return nil
}

func (e MetafieldOwnerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible metafield validation statuses.
type MetafieldValidationStatus string

const (
	// Any validation status (valid or invalid).
	MetafieldValidationStatusAny MetafieldValidationStatus = "ANY"
	// Valid (according to definition).
	MetafieldValidationStatusValid MetafieldValidationStatus = "VALID"
	// Invalid (according to definition).
	MetafieldValidationStatusInvalid MetafieldValidationStatus = "INVALID"
)

var AllMetafieldValidationStatus = []MetafieldValidationStatus{
	MetafieldValidationStatusAny,
	MetafieldValidationStatusValid,
	MetafieldValidationStatusInvalid,
}

func (e MetafieldValidationStatus) IsValid() bool {
	switch e {
	case MetafieldValidationStatusAny, MetafieldValidationStatusValid, MetafieldValidationStatusInvalid:
		return true
	}
	return false
}

func (e MetafieldValidationStatus) String() string {
	return string(e)
}

func (e *MetafieldValidationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldValidationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldValidationStatus", str)
	}
	return nil
}

func (e MetafieldValidationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Legacy type information for the stored value.
// Replaced by `type`.
type MetafieldValueType string

const (
	// A text field.
	MetafieldValueTypeString MetafieldValueType = "STRING"
	// A whole number.
	MetafieldValueTypeInteger MetafieldValueType = "INTEGER"
	// A JSON string.
	MetafieldValueTypeJSONString MetafieldValueType = "JSON_STRING"
	// A `true` or `false` value.
	MetafieldValueTypeBoolean MetafieldValueType = "BOOLEAN"
)

var AllMetafieldValueType = []MetafieldValueType{
	MetafieldValueTypeString,
	MetafieldValueTypeInteger,
	MetafieldValueTypeJSONString,
	MetafieldValueTypeBoolean,
}

func (e MetafieldValueType) IsValid() bool {
	switch e {
	case MetafieldValueTypeString, MetafieldValueTypeInteger, MetafieldValueTypeJSONString, MetafieldValueTypeBoolean:
		return true
	}
	return false
}

func (e MetafieldValueType) String() string {
	return string(e)
}

func (e *MetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldValueType", str)
	}
	return nil
}

func (e MetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetafieldsSetUserError`.
type MetafieldsSetUserErrorCode string

const (
	// The input value is blank.
	MetafieldsSetUserErrorCodeBlank MetafieldsSetUserErrorCode = "BLANK"
	// The input value isn't included in the list.
	MetafieldsSetUserErrorCodeInclusion MetafieldsSetUserErrorCode = "INCLUSION"
	// The input value should be less than or equal to the maximum value allowed.
	MetafieldsSetUserErrorCodeLessThanOrEqualTo MetafieldsSetUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value needs to be blank.
	MetafieldsSetUserErrorCodePresent MetafieldsSetUserErrorCode = "PRESENT"
	// The input value is too short.
	MetafieldsSetUserErrorCodeTooShort MetafieldsSetUserErrorCode = "TOO_SHORT"
	// The input value is too long.
	MetafieldsSetUserErrorCodeTooLong MetafieldsSetUserErrorCode = "TOO_LONG"
	// The value is invalid for metafield type or for definition options.
	MetafieldsSetUserErrorCodeInvalidValue MetafieldsSetUserErrorCode = "INVALID_VALUE"
	// The type is invalid.
	MetafieldsSetUserErrorCodeInvalidType MetafieldsSetUserErrorCode = "INVALID_TYPE"
	// ApiPermission metafields can only be created or updated by the app owner.
	MetafieldsSetUserErrorCodeAppNotAuthorized MetafieldsSetUserErrorCode = "APP_NOT_AUTHORIZED"
)

var AllMetafieldsSetUserErrorCode = []MetafieldsSetUserErrorCode{
	MetafieldsSetUserErrorCodeBlank,
	MetafieldsSetUserErrorCodeInclusion,
	MetafieldsSetUserErrorCodeLessThanOrEqualTo,
	MetafieldsSetUserErrorCodePresent,
	MetafieldsSetUserErrorCodeTooShort,
	MetafieldsSetUserErrorCodeTooLong,
	MetafieldsSetUserErrorCodeInvalidValue,
	MetafieldsSetUserErrorCodeInvalidType,
	MetafieldsSetUserErrorCodeAppNotAuthorized,
}

func (e MetafieldsSetUserErrorCode) IsValid() bool {
	switch e {
	case MetafieldsSetUserErrorCodeBlank, MetafieldsSetUserErrorCodeInclusion, MetafieldsSetUserErrorCodeLessThanOrEqualTo, MetafieldsSetUserErrorCodePresent, MetafieldsSetUserErrorCodeTooShort, MetafieldsSetUserErrorCodeTooLong, MetafieldsSetUserErrorCodeInvalidValue, MetafieldsSetUserErrorCodeInvalidType, MetafieldsSetUserErrorCodeAppNotAuthorized:
		return true
	}
	return false
}

func (e MetafieldsSetUserErrorCode) String() string {
	return string(e)
}

func (e *MetafieldsSetUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldsSetUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldsSetUserErrorCode", str)
	}
	return nil
}

func (e MetafieldsSetUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines how the metaobjects of a definition can be accessed in admin API surface areas.
type MetaobjectAdminAccess string

const (
	// Only the application that owns a metaobject can read and write to it.
	//
	MetaobjectAdminAccessPrivate MetaobjectAdminAccess = "PRIVATE"
	// Applications that act on behalf of merchants can read metaobjects.
	// Only the owning application can write metaobjects.
	//
	MetaobjectAdminAccessMerchantRead MetaobjectAdminAccess = "MERCHANT_READ"
	// The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
	// No other applications can read or write metaobjects.
	//
	MetaobjectAdminAccessMerchantReadWrite MetaobjectAdminAccess = "MERCHANT_READ_WRITE"
	// All applications with the `metaobjects` access scope can read metaobjects.
	// Only the owning application can write metaobjects.
	//
	MetaobjectAdminAccessPublicRead MetaobjectAdminAccess = "PUBLIC_READ"
	// All applications with the `metaobjects` access scope can read and write metaobjects.
	//
	MetaobjectAdminAccessPublicReadWrite MetaobjectAdminAccess = "PUBLIC_READ_WRITE"
)

var AllMetaobjectAdminAccess = []MetaobjectAdminAccess{
	MetaobjectAdminAccessPrivate,
	MetaobjectAdminAccessMerchantRead,
	MetaobjectAdminAccessMerchantReadWrite,
	MetaobjectAdminAccessPublicRead,
	MetaobjectAdminAccessPublicReadWrite,
}

func (e MetaobjectAdminAccess) IsValid() bool {
	switch e {
	case MetaobjectAdminAccessPrivate, MetaobjectAdminAccessMerchantRead, MetaobjectAdminAccessMerchantReadWrite, MetaobjectAdminAccessPublicRead, MetaobjectAdminAccessPublicReadWrite:
		return true
	}
	return false
}

func (e MetaobjectAdminAccess) String() string {
	return string(e)
}

func (e *MetaobjectAdminAccess) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetaobjectAdminAccess(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetaobjectAdminAccess", str)
	}
	return nil
}

func (e MetaobjectAdminAccess) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines visibility status for metaobjects.
type MetaobjectStatus string

const (
	// The metaobjects is an internal record.
	MetaobjectStatusDraft MetaobjectStatus = "DRAFT"
	// The metaobjects is active for public use.
	MetaobjectStatusActive MetaobjectStatus = "ACTIVE"
)

var AllMetaobjectStatus = []MetaobjectStatus{
	MetaobjectStatusDraft,
	MetaobjectStatusActive,
}

func (e MetaobjectStatus) IsValid() bool {
	switch e {
	case MetaobjectStatusDraft, MetaobjectStatusActive:
		return true
	}
	return false
}

func (e MetaobjectStatus) String() string {
	return string(e)
}

func (e *MetaobjectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetaobjectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetaobjectStatus", str)
	}
	return nil
}

func (e MetaobjectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines how the metaobjects of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API.
type MetaobjectStorefrontAccess string

const (
	// Metaobjects are not accessible in any Storefront API surface area.
	//
	MetaobjectStorefrontAccessNone MetaobjectStorefrontAccess = "NONE"
	// Metaobjects are accessible in the GraphQL Storefront API by any application with the `unauthenticated_read_metaobjects` access scope.
	// Metaobjects are accessible in online store Liquid templates.
	//
	MetaobjectStorefrontAccessPublicRead MetaobjectStorefrontAccess = "PUBLIC_READ"
)

var AllMetaobjectStorefrontAccess = []MetaobjectStorefrontAccess{
	MetaobjectStorefrontAccessNone,
	MetaobjectStorefrontAccessPublicRead,
}

func (e MetaobjectStorefrontAccess) IsValid() bool {
	switch e {
	case MetaobjectStorefrontAccessNone, MetaobjectStorefrontAccessPublicRead:
		return true
	}
	return false
}

func (e MetaobjectStorefrontAccess) String() string {
	return string(e)
}

func (e *MetaobjectStorefrontAccess) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetaobjectStorefrontAccess(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetaobjectStorefrontAccess", str)
	}
	return nil
}

func (e MetaobjectStorefrontAccess) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `MetaobjectUserError`.
type MetaobjectUserErrorCode string

const (
	// The input value is invalid.
	MetaobjectUserErrorCodeInvalid MetaobjectUserErrorCode = "INVALID"
	// The input value isn't included in the list.
	MetaobjectUserErrorCodeInclusion MetaobjectUserErrorCode = "INCLUSION"
	// The input value is already taken.
	MetaobjectUserErrorCodeTaken MetaobjectUserErrorCode = "TAKEN"
	// The input value is too long.
	MetaobjectUserErrorCodeTooLong MetaobjectUserErrorCode = "TOO_LONG"
	// The input value is too short.
	MetaobjectUserErrorCodeTooShort MetaobjectUserErrorCode = "TOO_SHORT"
	// The input value needs to be blank.
	MetaobjectUserErrorCodePresent MetaobjectUserErrorCode = "PRESENT"
	// The input value is blank.
	MetaobjectUserErrorCodeBlank MetaobjectUserErrorCode = "BLANK"
	// The metafield type is invalid.
	MetaobjectUserErrorCodeInvalidType MetaobjectUserErrorCode = "INVALID_TYPE"
	// The value is invalid for the metafield type or the definition options.
	MetaobjectUserErrorCodeInvalidValue MetaobjectUserErrorCode = "INVALID_VALUE"
	// The value for the metafield definition option was invalid.
	MetaobjectUserErrorCodeInvalidOption MetaobjectUserErrorCode = "INVALID_OPTION"
	// Duplicate inputs were provided for this field key.
	MetaobjectUserErrorCodeDuplicateFieldInput MetaobjectUserErrorCode = "DUPLICATE_FIELD_INPUT"
	// No metaobject definition found for this type.
	MetaobjectUserErrorCodeUndefinedObjectType MetaobjectUserErrorCode = "UNDEFINED_OBJECT_TYPE"
	// No field definition found for this key.
	MetaobjectUserErrorCodeUndefinedObjectField MetaobjectUserErrorCode = "UNDEFINED_OBJECT_FIELD"
	// The specified field key is already in use.
	MetaobjectUserErrorCodeObjectFieldTaken MetaobjectUserErrorCode = "OBJECT_FIELD_TAKEN"
	// Missing required fields were found for this object.
	MetaobjectUserErrorCodeObjectFieldRequired MetaobjectUserErrorCode = "OBJECT_FIELD_REQUIRED"
	// The requested record couldn't be found.
	MetaobjectUserErrorCodeRecordNotFound MetaobjectUserErrorCode = "RECORD_NOT_FOUND"
	// An unexpected error occurred.
	MetaobjectUserErrorCodeInternalError MetaobjectUserErrorCode = "INTERNAL_ERROR"
	// The maximum number of metaobjects definitions has been exceeded.
	MetaobjectUserErrorCodeMaxDefinitionsExceeded MetaobjectUserErrorCode = "MAX_DEFINITIONS_EXCEEDED"
	// The maximum number of metaobjects per shop has been exceeded.
	MetaobjectUserErrorCodeMaxObjectsExceeded MetaobjectUserErrorCode = "MAX_OBJECTS_EXCEEDED"
	// The targeted object cannot be modified.
	MetaobjectUserErrorCodeImmutable MetaobjectUserErrorCode = "IMMUTABLE"
	// Not authorized.
	MetaobjectUserErrorCodeNotAuthorized MetaobjectUserErrorCode = "NOT_AUTHORIZED"
	// The provided name is reserved for system use.
	MetaobjectUserErrorCodeReservedName MetaobjectUserErrorCode = "RESERVED_NAME"
	// The capability you are using is not enabled.
	MetaobjectUserErrorCodeCapabilityNotEnabled MetaobjectUserErrorCode = "CAPABILITY_NOT_ENABLED"
)

var AllMetaobjectUserErrorCode = []MetaobjectUserErrorCode{
	MetaobjectUserErrorCodeInvalid,
	MetaobjectUserErrorCodeInclusion,
	MetaobjectUserErrorCodeTaken,
	MetaobjectUserErrorCodeTooLong,
	MetaobjectUserErrorCodeTooShort,
	MetaobjectUserErrorCodePresent,
	MetaobjectUserErrorCodeBlank,
	MetaobjectUserErrorCodeInvalidType,
	MetaobjectUserErrorCodeInvalidValue,
	MetaobjectUserErrorCodeInvalidOption,
	MetaobjectUserErrorCodeDuplicateFieldInput,
	MetaobjectUserErrorCodeUndefinedObjectType,
	MetaobjectUserErrorCodeUndefinedObjectField,
	MetaobjectUserErrorCodeObjectFieldTaken,
	MetaobjectUserErrorCodeObjectFieldRequired,
	MetaobjectUserErrorCodeRecordNotFound,
	MetaobjectUserErrorCodeInternalError,
	MetaobjectUserErrorCodeMaxDefinitionsExceeded,
	MetaobjectUserErrorCodeMaxObjectsExceeded,
	MetaobjectUserErrorCodeImmutable,
	MetaobjectUserErrorCodeNotAuthorized,
	MetaobjectUserErrorCodeReservedName,
	MetaobjectUserErrorCodeCapabilityNotEnabled,
}

func (e MetaobjectUserErrorCode) IsValid() bool {
	switch e {
	case MetaobjectUserErrorCodeInvalid, MetaobjectUserErrorCodeInclusion, MetaobjectUserErrorCodeTaken, MetaobjectUserErrorCodeTooLong, MetaobjectUserErrorCodeTooShort, MetaobjectUserErrorCodePresent, MetaobjectUserErrorCodeBlank, MetaobjectUserErrorCodeInvalidType, MetaobjectUserErrorCodeInvalidValue, MetaobjectUserErrorCodeInvalidOption, MetaobjectUserErrorCodeDuplicateFieldInput, MetaobjectUserErrorCodeUndefinedObjectType, MetaobjectUserErrorCodeUndefinedObjectField, MetaobjectUserErrorCodeObjectFieldTaken, MetaobjectUserErrorCodeObjectFieldRequired, MetaobjectUserErrorCodeRecordNotFound, MetaobjectUserErrorCodeInternalError, MetaobjectUserErrorCodeMaxDefinitionsExceeded, MetaobjectUserErrorCodeMaxObjectsExceeded, MetaobjectUserErrorCodeImmutable, MetaobjectUserErrorCodeNotAuthorized, MetaobjectUserErrorCodeReservedName, MetaobjectUserErrorCodeCapabilityNotEnabled:
		return true
	}
	return false
}

func (e MetaobjectUserErrorCode) String() string {
	return string(e)
}

func (e *MetaobjectUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetaobjectUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetaobjectUserErrorCode", str)
	}
	return nil
}

func (e MetaobjectUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MethodDefinition query.
type MethodDefinitionSortKeys string

const (
	// Sort by the `rate_provider_type` value.
	MethodDefinitionSortKeysRateProviderType MethodDefinitionSortKeys = "RATE_PROVIDER_TYPE"
	// Sort by the `id` value.
	MethodDefinitionSortKeysID MethodDefinitionSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	MethodDefinitionSortKeysRelevance MethodDefinitionSortKeys = "RELEVANCE"
)

var AllMethodDefinitionSortKeys = []MethodDefinitionSortKeys{
	MethodDefinitionSortKeysRateProviderType,
	MethodDefinitionSortKeysID,
	MethodDefinitionSortKeysRelevance,
}

func (e MethodDefinitionSortKeys) IsValid() bool {
	switch e {
	case MethodDefinitionSortKeysRateProviderType, MethodDefinitionSortKeysID, MethodDefinitionSortKeysRelevance:
		return true
	}
	return false
}

func (e MethodDefinitionSortKeys) String() string {
	return string(e)
}

func (e *MethodDefinitionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MethodDefinitionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MethodDefinitionSortKeys", str)
	}
	return nil
}

func (e MethodDefinitionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible order action types for a
// [sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
type OrderActionType string

const (
	// An order with a purchase or charge.
	OrderActionTypeOrder OrderActionType = "ORDER"
	// An edit to the order.
	OrderActionTypeOrderEdit OrderActionType = "ORDER_EDIT"
	// A refund on the order.
	OrderActionTypeRefund OrderActionType = "REFUND"
	// An unknown agreement action. Represents new actions that may be added in future versions.
	OrderActionTypeUnknown OrderActionType = "UNKNOWN"
)

var AllOrderActionType = []OrderActionType{
	OrderActionTypeOrder,
	OrderActionTypeOrderEdit,
	OrderActionTypeRefund,
	OrderActionTypeUnknown,
}

func (e OrderActionType) IsValid() bool {
	switch e {
	case OrderActionTypeOrder, OrderActionTypeOrderEdit, OrderActionTypeRefund, OrderActionTypeUnknown:
		return true
	}
	return false
}

func (e OrderActionType) String() string {
	return string(e)
}

func (e *OrderActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderActionType", str)
	}
	return nil
}

func (e OrderActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the reason for the order's cancellation.
type OrderCancelReason string

const (
	// The customer wanted to cancel the order.
	OrderCancelReasonCustomer OrderCancelReason = "CUSTOMER"
	// Payment was declined.
	OrderCancelReasonDeclined OrderCancelReason = "DECLINED"
	// The order was fraudulent.
	OrderCancelReasonFraud OrderCancelReason = "FRAUD"
	// There was insufficient inventory.
	OrderCancelReasonInventory OrderCancelReason = "INVENTORY"
	// The order was canceled for an unlisted reason.
	OrderCancelReasonOther OrderCancelReason = "OTHER"
)

var AllOrderCancelReason = []OrderCancelReason{
	OrderCancelReasonCustomer,
	OrderCancelReasonDeclined,
	OrderCancelReasonFraud,
	OrderCancelReasonInventory,
	OrderCancelReasonOther,
}

func (e OrderCancelReason) IsValid() bool {
	switch e {
	case OrderCancelReasonCustomer, OrderCancelReasonDeclined, OrderCancelReasonFraud, OrderCancelReasonInventory, OrderCancelReasonOther:
		return true
	}
	return false
}

func (e OrderCancelReason) String() string {
	return string(e)
}

func (e *OrderCancelReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderCancelReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderCancelReason", str)
	}
	return nil
}

func (e OrderCancelReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`.
type OrderCreateMandatePaymentUserErrorCode string

const (
	// Errors for mandate payment on order.
	OrderCreateMandatePaymentUserErrorCodeOrderMandatePaymentErrorCode OrderCreateMandatePaymentUserErrorCode = "ORDER_MANDATE_PAYMENT_ERROR_CODE"
)

var AllOrderCreateMandatePaymentUserErrorCode = []OrderCreateMandatePaymentUserErrorCode{
	OrderCreateMandatePaymentUserErrorCodeOrderMandatePaymentErrorCode,
}

func (e OrderCreateMandatePaymentUserErrorCode) IsValid() bool {
	switch e {
	case OrderCreateMandatePaymentUserErrorCodeOrderMandatePaymentErrorCode:
		return true
	}
	return false
}

func (e OrderCreateMandatePaymentUserErrorCode) String() string {
	return string(e)
}

func (e *OrderCreateMandatePaymentUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderCreateMandatePaymentUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderCreateMandatePaymentUserErrorCode", str)
	}
	return nil
}

func (e OrderCreateMandatePaymentUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's current financial status.
type OrderDisplayFinancialStatus string

const (
	// Displayed as **Pending**.
	OrderDisplayFinancialStatusPending OrderDisplayFinancialStatus = "PENDING"
	// Displayed as **Authorized**.
	OrderDisplayFinancialStatusAuthorized OrderDisplayFinancialStatus = "AUTHORIZED"
	// Displayed as **Partially paid**.
	OrderDisplayFinancialStatusPartiallyPaid OrderDisplayFinancialStatus = "PARTIALLY_PAID"
	// Displayed as **Partially refunded**.
	OrderDisplayFinancialStatusPartiallyRefunded OrderDisplayFinancialStatus = "PARTIALLY_REFUNDED"
	// Displayed as **Voided**.
	OrderDisplayFinancialStatusVoided OrderDisplayFinancialStatus = "VOIDED"
	// Displayed as **Paid**.
	OrderDisplayFinancialStatusPaid OrderDisplayFinancialStatus = "PAID"
	// Displayed as **Refunded**.
	OrderDisplayFinancialStatusRefunded OrderDisplayFinancialStatus = "REFUNDED"
	// Displayed as **Expired**.
	OrderDisplayFinancialStatusExpired OrderDisplayFinancialStatus = "EXPIRED"
)

var AllOrderDisplayFinancialStatus = []OrderDisplayFinancialStatus{
	OrderDisplayFinancialStatusPending,
	OrderDisplayFinancialStatusAuthorized,
	OrderDisplayFinancialStatusPartiallyPaid,
	OrderDisplayFinancialStatusPartiallyRefunded,
	OrderDisplayFinancialStatusVoided,
	OrderDisplayFinancialStatusPaid,
	OrderDisplayFinancialStatusRefunded,
	OrderDisplayFinancialStatusExpired,
}

func (e OrderDisplayFinancialStatus) IsValid() bool {
	switch e {
	case OrderDisplayFinancialStatusPending, OrderDisplayFinancialStatusAuthorized, OrderDisplayFinancialStatusPartiallyPaid, OrderDisplayFinancialStatusPartiallyRefunded, OrderDisplayFinancialStatusVoided, OrderDisplayFinancialStatusPaid, OrderDisplayFinancialStatusRefunded, OrderDisplayFinancialStatusExpired:
		return true
	}
	return false
}

func (e OrderDisplayFinancialStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFinancialStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFinancialStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFinancialStatus", str)
	}
	return nil
}

func (e OrderDisplayFinancialStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's aggregated fulfillment status for display purposes.
type OrderDisplayFulfillmentStatus string

const (
	// Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusUnfulfilled OrderDisplayFulfillmentStatus = "UNFULFILLED"
	// Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusPartiallyFulfilled OrderDisplayFulfillmentStatus = "PARTIALLY_FULFILLED"
	// Displayed as **Fulfilled**. All the items in the order have been fulfilled.
	OrderDisplayFulfillmentStatusFulfilled OrderDisplayFulfillmentStatus = "FULFILLED"
	// Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
	OrderDisplayFulfillmentStatusRestocked OrderDisplayFulfillmentStatus = "RESTOCKED"
	// Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
	OrderDisplayFulfillmentStatusPendingFulfillment OrderDisplayFulfillmentStatus = "PENDING_FULFILLMENT"
	// Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
	OrderDisplayFulfillmentStatusOpen OrderDisplayFulfillmentStatus = "OPEN"
	// Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
	OrderDisplayFulfillmentStatusInProgress OrderDisplayFulfillmentStatus = "IN_PROGRESS"
	// Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
	OrderDisplayFulfillmentStatusOnHold OrderDisplayFulfillmentStatus = "ON_HOLD"
	// Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
	OrderDisplayFulfillmentStatusScheduled OrderDisplayFulfillmentStatus = "SCHEDULED"
)

var AllOrderDisplayFulfillmentStatus = []OrderDisplayFulfillmentStatus{
	OrderDisplayFulfillmentStatusUnfulfilled,
	OrderDisplayFulfillmentStatusPartiallyFulfilled,
	OrderDisplayFulfillmentStatusFulfilled,
	OrderDisplayFulfillmentStatusRestocked,
	OrderDisplayFulfillmentStatusPendingFulfillment,
	OrderDisplayFulfillmentStatusOpen,
	OrderDisplayFulfillmentStatusInProgress,
	OrderDisplayFulfillmentStatusOnHold,
	OrderDisplayFulfillmentStatusScheduled,
}

func (e OrderDisplayFulfillmentStatus) IsValid() bool {
	switch e {
	case OrderDisplayFulfillmentStatusUnfulfilled, OrderDisplayFulfillmentStatusPartiallyFulfilled, OrderDisplayFulfillmentStatusFulfilled, OrderDisplayFulfillmentStatusRestocked, OrderDisplayFulfillmentStatusPendingFulfillment, OrderDisplayFulfillmentStatusOpen, OrderDisplayFulfillmentStatusInProgress, OrderDisplayFulfillmentStatusOnHold, OrderDisplayFulfillmentStatusScheduled:
		return true
	}
	return false
}

func (e OrderDisplayFulfillmentStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFulfillmentStatus", str)
	}
	return nil
}

func (e OrderDisplayFulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `OrderInvoiceSendUserError`.
type OrderInvoiceSendUserErrorCode string

const (
	// An error occurred while sending the invoice.
	OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful OrderInvoiceSendUserErrorCode = "ORDER_INVOICE_SEND_UNSUCCESSFUL"
)

var AllOrderInvoiceSendUserErrorCode = []OrderInvoiceSendUserErrorCode{
	OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful,
}

func (e OrderInvoiceSendUserErrorCode) IsValid() bool {
	switch e {
	case OrderInvoiceSendUserErrorCodeOrderInvoiceSendUnsuccessful:
		return true
	}
	return false
}

func (e OrderInvoiceSendUserErrorCode) String() string {
	return string(e)
}

func (e *OrderInvoiceSendUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderInvoiceSendUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderInvoiceSendUserErrorCode", str)
	}
	return nil
}

func (e OrderInvoiceSendUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a payment status.
type OrderPaymentStatusResult string

const (
	// The payment succeeded.
	OrderPaymentStatusResultSuccess OrderPaymentStatusResult = "SUCCESS"
	// The payment is authorized.
	OrderPaymentStatusResultAuthorized OrderPaymentStatusResult = "AUTHORIZED"
	// The payment is voided.
	OrderPaymentStatusResultVoided OrderPaymentStatusResult = "VOIDED"
	// The payment is refunded.
	OrderPaymentStatusResultRefunded OrderPaymentStatusResult = "REFUNDED"
	// The payment is captured.
	OrderPaymentStatusResultCaptured OrderPaymentStatusResult = "CAPTURED"
	// The payment is in purchased status.
	OrderPaymentStatusResultPurchased OrderPaymentStatusResult = "PURCHASED"
	// There was an error initiating the payment.
	OrderPaymentStatusResultError OrderPaymentStatusResult = "ERROR"
	// The payment is still being processed.
	OrderPaymentStatusResultProcessing OrderPaymentStatusResult = "PROCESSING"
	// Redirect required.
	OrderPaymentStatusResultRedirectRequired OrderPaymentStatusResult = "REDIRECT_REQUIRED"
	// Payment can be retried.
	OrderPaymentStatusResultRetryable OrderPaymentStatusResult = "RETRYABLE"
	// Status is unknown.
	OrderPaymentStatusResultUnknown OrderPaymentStatusResult = "UNKNOWN"
)

var AllOrderPaymentStatusResult = []OrderPaymentStatusResult{
	OrderPaymentStatusResultSuccess,
	OrderPaymentStatusResultAuthorized,
	OrderPaymentStatusResultVoided,
	OrderPaymentStatusResultRefunded,
	OrderPaymentStatusResultCaptured,
	OrderPaymentStatusResultPurchased,
	OrderPaymentStatusResultError,
	OrderPaymentStatusResultProcessing,
	OrderPaymentStatusResultRedirectRequired,
	OrderPaymentStatusResultRetryable,
	OrderPaymentStatusResultUnknown,
}

func (e OrderPaymentStatusResult) IsValid() bool {
	switch e {
	case OrderPaymentStatusResultSuccess, OrderPaymentStatusResultAuthorized, OrderPaymentStatusResultVoided, OrderPaymentStatusResultRefunded, OrderPaymentStatusResultCaptured, OrderPaymentStatusResultPurchased, OrderPaymentStatusResultError, OrderPaymentStatusResultProcessing, OrderPaymentStatusResultRedirectRequired, OrderPaymentStatusResultRetryable, OrderPaymentStatusResultUnknown:
		return true
	}
	return false
}

func (e OrderPaymentStatusResult) String() string {
	return string(e)
}

func (e *OrderPaymentStatusResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderPaymentStatusResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderPaymentStatusResult", str)
	}
	return nil
}

func (e OrderPaymentStatusResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The order's aggregated return status that's used for display purposes.
// An order might have multiple returns, so this field communicates the prioritized return status.
// The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
type OrderReturnStatus string

const (
	// Some items in the order are being returned.
	OrderReturnStatusInProgress OrderReturnStatus = "IN_PROGRESS"
	// All return shipments from a return in this order were inspected.
	OrderReturnStatusInspectionComplete OrderReturnStatus = "INSPECTION_COMPLETE"
	// No items in the order were returned.
	OrderReturnStatusNoReturn OrderReturnStatus = "NO_RETURN"
	// Some items in the order were returned.
	OrderReturnStatusReturned OrderReturnStatus = "RETURNED"
	// Some returns in the order were not completed successfully.
	OrderReturnStatusReturnFailed OrderReturnStatus = "RETURN_FAILED"
	// A return was requested for some items in the order.
	OrderReturnStatusReturnRequested OrderReturnStatus = "RETURN_REQUESTED"
)

var AllOrderReturnStatus = []OrderReturnStatus{
	OrderReturnStatusInProgress,
	OrderReturnStatusInspectionComplete,
	OrderReturnStatusNoReturn,
	OrderReturnStatusReturned,
	OrderReturnStatusReturnFailed,
	OrderReturnStatusReturnRequested,
}

func (e OrderReturnStatus) IsValid() bool {
	switch e {
	case OrderReturnStatusInProgress, OrderReturnStatusInspectionComplete, OrderReturnStatusNoReturn, OrderReturnStatusReturned, OrderReturnStatusReturnFailed, OrderReturnStatusReturnRequested:
		return true
	}
	return false
}

func (e OrderReturnStatus) String() string {
	return string(e)
}

func (e *OrderReturnStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderReturnStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderReturnStatus", str)
	}
	return nil
}

func (e OrderReturnStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The likelihood that an order is fraudulent.
type OrderRiskLevel string

const (
	// There is a low level of risk that this order is fraudulent.
	OrderRiskLevelLow OrderRiskLevel = "LOW"
	// There is a medium level of risk that this order is fraudulent.
	OrderRiskLevelMedium OrderRiskLevel = "MEDIUM"
	// There is a high level of risk that this order is fraudulent.
	OrderRiskLevelHigh OrderRiskLevel = "HIGH"
)

var AllOrderRiskLevel = []OrderRiskLevel{
	OrderRiskLevelLow,
	OrderRiskLevelMedium,
	OrderRiskLevelHigh,
}

func (e OrderRiskLevel) IsValid() bool {
	switch e {
	case OrderRiskLevelLow, OrderRiskLevelMedium, OrderRiskLevelHigh:
		return true
	}
	return false
}

func (e OrderRiskLevel) String() string {
	return string(e)
}

func (e *OrderRiskLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderRiskLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderRiskLevel", str)
	}
	return nil
}

func (e OrderRiskLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Order query.
type OrderSortKeys string

const (
	// Sort by the `created_at` value.
	OrderSortKeysCreatedAt OrderSortKeys = "CREATED_AT"
	// Sort by the `customer_name` value.
	OrderSortKeysCustomerName OrderSortKeys = "CUSTOMER_NAME"
	// Sort orders by their shipping address country and city.
	OrderSortKeysDestination OrderSortKeys = "DESTINATION"
	// Sort by the `financial_status` value.
	OrderSortKeysFinancialStatus OrderSortKeys = "FINANCIAL_STATUS"
	// Sort by the `fulfillment_status` value.
	OrderSortKeysFulfillmentStatus OrderSortKeys = "FULFILLMENT_STATUS"
	// Sort by the `order_number` value.
	OrderSortKeysOrderNumber OrderSortKeys = "ORDER_NUMBER"
	// Sort by the `processed_at` value.
	OrderSortKeysProcessedAt OrderSortKeys = "PROCESSED_AT"
	// Sort orders by the total quantity of all line items.
	OrderSortKeysTotalItemsQuantity OrderSortKeys = "TOTAL_ITEMS_QUANTITY"
	// Sort by the `total_price` value.
	OrderSortKeysTotalPrice OrderSortKeys = "TOTAL_PRICE"
	// Sort by the `updated_at` value.
	OrderSortKeysUpdatedAt OrderSortKeys = "UPDATED_AT"
	// Sort orders by their purchase order number.
	OrderSortKeysPoNumber OrderSortKeys = "PO_NUMBER"
	// Sort by the `id` value.
	OrderSortKeysID OrderSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	OrderSortKeysRelevance OrderSortKeys = "RELEVANCE"
)

var AllOrderSortKeys = []OrderSortKeys{
	OrderSortKeysCreatedAt,
	OrderSortKeysCustomerName,
	OrderSortKeysDestination,
	OrderSortKeysFinancialStatus,
	OrderSortKeysFulfillmentStatus,
	OrderSortKeysOrderNumber,
	OrderSortKeysProcessedAt,
	OrderSortKeysTotalItemsQuantity,
	OrderSortKeysTotalPrice,
	OrderSortKeysUpdatedAt,
	OrderSortKeysPoNumber,
	OrderSortKeysID,
	OrderSortKeysRelevance,
}

func (e OrderSortKeys) IsValid() bool {
	switch e {
	case OrderSortKeysCreatedAt, OrderSortKeysCustomerName, OrderSortKeysDestination, OrderSortKeysFinancialStatus, OrderSortKeysFulfillmentStatus, OrderSortKeysOrderNumber, OrderSortKeysProcessedAt, OrderSortKeysTotalItemsQuantity, OrderSortKeysTotalPrice, OrderSortKeysUpdatedAt, OrderSortKeysPoNumber, OrderSortKeysID, OrderSortKeysRelevance:
		return true
	}
	return false
}

func (e OrderSortKeys) String() string {
	return string(e)
}

func (e *OrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderSortKeys", str)
	}
	return nil
}

func (e OrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A standardized error code, independent of the payment provider.
type OrderTransactionErrorCode string

const (
	// The card number is incorrect.
	OrderTransactionErrorCodeIncorrectNumber OrderTransactionErrorCode = "INCORRECT_NUMBER"
	// The format of the card number is incorrect.
	OrderTransactionErrorCodeInvalidNumber OrderTransactionErrorCode = "INVALID_NUMBER"
	// The format of the expiry date is incorrect.
	OrderTransactionErrorCodeInvalidExpiryDate OrderTransactionErrorCode = "INVALID_EXPIRY_DATE"
	// The format of the CVC is incorrect.
	OrderTransactionErrorCodeInvalidCvc OrderTransactionErrorCode = "INVALID_CVC"
	// The card is expired.
	OrderTransactionErrorCodeExpiredCard OrderTransactionErrorCode = "EXPIRED_CARD"
	// The CVC does not match the card number.
	OrderTransactionErrorCodeIncorrectCvc OrderTransactionErrorCode = "INCORRECT_CVC"
	// The ZIP or postal code does not match the card number.
	OrderTransactionErrorCodeIncorrectZip OrderTransactionErrorCode = "INCORRECT_ZIP"
	// The address does not match the card number.
	OrderTransactionErrorCodeIncorrectAddress OrderTransactionErrorCode = "INCORRECT_ADDRESS"
	// The entered PIN is incorrect.
	OrderTransactionErrorCodeIncorrectPin OrderTransactionErrorCode = "INCORRECT_PIN"
	// The card was declined.
	OrderTransactionErrorCodeCardDeclined OrderTransactionErrorCode = "CARD_DECLINED"
	// There was an error while processing the payment.
	OrderTransactionErrorCodeProcessingError OrderTransactionErrorCode = "PROCESSING_ERROR"
	// Call the card issuer.
	OrderTransactionErrorCodeCallIssuer OrderTransactionErrorCode = "CALL_ISSUER"
	// The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
	//
	OrderTransactionErrorCodePickUpCard OrderTransactionErrorCode = "PICK_UP_CARD"
	// There is an error in the gateway or merchant configuration.
	OrderTransactionErrorCodeConfigError OrderTransactionErrorCode = "CONFIG_ERROR"
	// A real card was used but the gateway was in test mode.
	OrderTransactionErrorCodeTestModeLiveCard OrderTransactionErrorCode = "TEST_MODE_LIVE_CARD"
	// The gateway or merchant configuration doesn't support a feature, such as network tokenization.
	OrderTransactionErrorCodeUnsupportedFeature OrderTransactionErrorCode = "UNSUPPORTED_FEATURE"
	// There was an unknown error with processing the payment.
	OrderTransactionErrorCodeGenericError OrderTransactionErrorCode = "GENERIC_ERROR"
	// The payment method is not available in the customer's country.
	OrderTransactionErrorCodeInvalidCountry OrderTransactionErrorCode = "INVALID_COUNTRY"
	// The amount is either too high or too low for the provider.
	OrderTransactionErrorCodeInvalidAmount OrderTransactionErrorCode = "INVALID_AMOUNT"
	// The payment method is momentarily unavailable.
	OrderTransactionErrorCodePaymentMethodUnavailable OrderTransactionErrorCode = "PAYMENT_METHOD_UNAVAILABLE"
	// The payment method was invalid.
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod OrderTransactionErrorCode = "AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD"
	// The maximum amount has been captured.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED"
	// The maximum amount has been refunded.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED"
	// The maximum of 10 authorizations has been captured for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED"
	// The maximum of 10 refunds has been processed for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED"
	// The order was canceled, which canceled all open authorizations.
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled OrderTransactionErrorCode = "AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED"
	// The order was not confirmed within three hours.
	OrderTransactionErrorCodeAmazonPaymentsStale OrderTransactionErrorCode = "AMAZON_PAYMENTS_STALE"
)

var AllOrderTransactionErrorCode = []OrderTransactionErrorCode{
	OrderTransactionErrorCodeIncorrectNumber,
	OrderTransactionErrorCodeInvalidNumber,
	OrderTransactionErrorCodeInvalidExpiryDate,
	OrderTransactionErrorCodeInvalidCvc,
	OrderTransactionErrorCodeExpiredCard,
	OrderTransactionErrorCodeIncorrectCvc,
	OrderTransactionErrorCodeIncorrectZip,
	OrderTransactionErrorCodeIncorrectAddress,
	OrderTransactionErrorCodeIncorrectPin,
	OrderTransactionErrorCodeCardDeclined,
	OrderTransactionErrorCodeProcessingError,
	OrderTransactionErrorCodeCallIssuer,
	OrderTransactionErrorCodePickUpCard,
	OrderTransactionErrorCodeConfigError,
	OrderTransactionErrorCodeTestModeLiveCard,
	OrderTransactionErrorCodeUnsupportedFeature,
	OrderTransactionErrorCodeGenericError,
	OrderTransactionErrorCodeInvalidCountry,
	OrderTransactionErrorCodeInvalidAmount,
	OrderTransactionErrorCodePaymentMethodUnavailable,
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded,
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured,
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed,
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled,
	OrderTransactionErrorCodeAmazonPaymentsStale,
}

func (e OrderTransactionErrorCode) IsValid() bool {
	switch e {
	case OrderTransactionErrorCodeIncorrectNumber, OrderTransactionErrorCodeInvalidNumber, OrderTransactionErrorCodeInvalidExpiryDate, OrderTransactionErrorCodeInvalidCvc, OrderTransactionErrorCodeExpiredCard, OrderTransactionErrorCodeIncorrectCvc, OrderTransactionErrorCodeIncorrectZip, OrderTransactionErrorCodeIncorrectAddress, OrderTransactionErrorCodeIncorrectPin, OrderTransactionErrorCodeCardDeclined, OrderTransactionErrorCodeProcessingError, OrderTransactionErrorCodeCallIssuer, OrderTransactionErrorCodePickUpCard, OrderTransactionErrorCodeConfigError, OrderTransactionErrorCodeTestModeLiveCard, OrderTransactionErrorCodeUnsupportedFeature, OrderTransactionErrorCodeGenericError, OrderTransactionErrorCodeInvalidCountry, OrderTransactionErrorCodeInvalidAmount, OrderTransactionErrorCodePaymentMethodUnavailable, OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod, OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged, OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded, OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured, OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed, OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled, OrderTransactionErrorCodeAmazonPaymentsStale:
		return true
	}
	return false
}

func (e OrderTransactionErrorCode) String() string {
	return string(e)
}

func (e *OrderTransactionErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionErrorCode", str)
	}
	return nil
}

func (e OrderTransactionErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of order transactions.
type OrderTransactionKind string

const (
	// An authorization and capture performed together in a single step.
	OrderTransactionKindSale OrderTransactionKind = "SALE"
	// A transfer of the money that was reserved by an authorization.
	OrderTransactionKindCapture OrderTransactionKind = "CAPTURE"
	// An amount reserved against the cardholder's funding source.
	// Money does not change hands until the authorization is captured.
	//
	OrderTransactionKindAuthorization OrderTransactionKind = "AUTHORIZATION"
	// A cancelation of an authorization transaction.
	OrderTransactionKindVoid OrderTransactionKind = "VOID"
	// A partial or full return of captured funds to the cardholder.
	// A refund can happen only after a capture is processed.
	//
	OrderTransactionKindRefund OrderTransactionKind = "REFUND"
	// The money returned to the customer when they've paid too much during a cash transaction.
	//
	OrderTransactionKindChange OrderTransactionKind = "CHANGE"
	// An authorization for a payment taken with an EMV credit card reader.
	OrderTransactionKindEmvAuthorization OrderTransactionKind = "EMV_AUTHORIZATION"
	// A suggested refund transaction that can be used to create a refund.
	OrderTransactionKindSuggestedRefund OrderTransactionKind = "SUGGESTED_REFUND"
)

var AllOrderTransactionKind = []OrderTransactionKind{
	OrderTransactionKindSale,
	OrderTransactionKindCapture,
	OrderTransactionKindAuthorization,
	OrderTransactionKindVoid,
	OrderTransactionKindRefund,
	OrderTransactionKindChange,
	OrderTransactionKindEmvAuthorization,
	OrderTransactionKindSuggestedRefund,
}

func (e OrderTransactionKind) IsValid() bool {
	switch e {
	case OrderTransactionKindSale, OrderTransactionKindCapture, OrderTransactionKindAuthorization, OrderTransactionKindVoid, OrderTransactionKindRefund, OrderTransactionKindChange, OrderTransactionKindEmvAuthorization, OrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e OrderTransactionKind) String() string {
	return string(e)
}

func (e *OrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionKind", str)
	}
	return nil
}

func (e OrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different states that an `OrderTransaction` can have.
type OrderTransactionStatus string

const (
	// The transaction succeeded.
	OrderTransactionStatusSuccess OrderTransactionStatus = "SUCCESS"
	// The transaction failed.
	OrderTransactionStatusFailure OrderTransactionStatus = "FAILURE"
	// The transaction is pending.
	OrderTransactionStatusPending OrderTransactionStatus = "PENDING"
	// There was an error while processing the transaction.
	OrderTransactionStatusError OrderTransactionStatus = "ERROR"
	// Awaiting a response.
	OrderTransactionStatusAwaitingResponse OrderTransactionStatus = "AWAITING_RESPONSE"
	// The transaction status is unknown.
	OrderTransactionStatusUnknown OrderTransactionStatus = "UNKNOWN"
)

var AllOrderTransactionStatus = []OrderTransactionStatus{
	OrderTransactionStatusSuccess,
	OrderTransactionStatusFailure,
	OrderTransactionStatusPending,
	OrderTransactionStatusError,
	OrderTransactionStatusAwaitingResponse,
	OrderTransactionStatusUnknown,
}

func (e OrderTransactionStatus) IsValid() bool {
	switch e {
	case OrderTransactionStatusSuccess, OrderTransactionStatusFailure, OrderTransactionStatusPending, OrderTransactionStatusError, OrderTransactionStatusAwaitingResponse, OrderTransactionStatusUnknown:
		return true
	}
	return false
}

func (e OrderTransactionStatus) String() string {
	return string(e)
}

func (e *OrderTransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionStatus", str)
	}
	return nil
}

func (e OrderTransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ShopifyQL parsing errors.
type ParseErrorCode string

const (
	// Syntax not recognized.
	ParseErrorCodeSyntaxNotRecognized ParseErrorCode = "SYNTAX_NOT_RECOGNIZED"
	// Semantically invalid.
	ParseErrorCodeSemanticallyInvalid ParseErrorCode = "SEMANTICALLY_INVALID"
	// Table not found.
	ParseErrorCodeTableNotFound ParseErrorCode = "TABLE_NOT_FOUND"
	// Column not found.
	ParseErrorCodeColumnNotFound ParseErrorCode = "COLUMN_NOT_FOUND"
	// Value isn't parsable.
	ParseErrorCodeValueNotParsable ParseErrorCode = "VALUE_NOT_PARSABLE"
	// Date isn't parsable.
	ParseErrorCodeDateNotParsable ParseErrorCode = "DATE_NOT_PARSABLE"
	// Datetime value isn't parsable.
	ParseErrorCodeDateTimeNotParsable ParseErrorCode = "DATE_TIME_NOT_PARSABLE"
	// Date interval not found.
	ParseErrorCodeDateIntervalNotFound ParseErrorCode = "DATE_INTERVAL_NOT_FOUND"
	// Named date not found.
	ParseErrorCodeNamedDateNotFound ParseErrorCode = "NAMED_DATE_NOT_FOUND"
	// Sort field not found.
	ParseErrorCodeSortFieldNotFound ParseErrorCode = "SORT_FIELD_NOT_FOUND"
	// Limit is invalid.
	ParseErrorCodeLimitInvalid ParseErrorCode = "LIMIT_INVALID"
	// The type of visualization is invalid. Acceptable types: bar, line.
	ParseErrorCodeVisualizeChartTypeNotFound ParseErrorCode = "VISUALIZE_CHART_TYPE_NOT_FOUND"
	// Function does not have any valid modifiers.
	ParseErrorCodeFunctionModifierNotFound ParseErrorCode = "FUNCTION_MODIFIER_NOT_FOUND"
	// Function is missing required argument(s).
	ParseErrorCodeFunctionArgumentsNotFound ParseErrorCode = "FUNCTION_ARGUMENTS_NOT_FOUND"
	// Function has too many arguments.
	ParseErrorCodeFunctionExcessArguments ParseErrorCode = "FUNCTION_EXCESS_ARGUMENTS"
	// Keyword `FROM` not found.
	ParseErrorCodeFromNotFound ParseErrorCode = "FROM_NOT_FOUND"
	// Query is missing `SHOW` or `VISUALIZE`.
	ParseErrorCodePresentmentNotFound ParseErrorCode = "PRESENTMENT_NOT_FOUND"
	// Use the correct syntax for either `SHOW` or `VISUALIZE`.
	ParseErrorCodeExcessPresentments ParseErrorCode = "EXCESS_PRESENTMENTS"
	// Function has incompatible types.
	ParseErrorCodeFunctionIncompatibleTypes ParseErrorCode = "FUNCTION_INCOMPATIBLE_TYPES"
	// Visualize has too many projections.
	ParseErrorCodeVisualizeExcessProjections ParseErrorCode = "VISUALIZE_EXCESS_PROJECTIONS"
	// Unknown error.
	ParseErrorCodeUnknown ParseErrorCode = "UNKNOWN"
	// Invalid arguments for operator.
	ParseErrorCodeOperatorIncompatibleTypes ParseErrorCode = "OPERATOR_INCOMPATIBLE_TYPES"
	// Function `VISUALIZE` contains a data type which cannot be plotted.
	ParseErrorCodeVisualizeIncompatibleTypes ParseErrorCode = "VISUALIZE_INCOMPATIBLE_TYPES"
	// Function `VISUALIZE` requires `GROUP BY`.
	ParseErrorCodeVisualizeGroupByNotFound ParseErrorCode = "VISUALIZE_GROUP_BY_NOT_FOUND"
	// Function `VISUALIZE` can only use `GROUP BY` or `GROUP BY` with the `ALL` modifier, not both.
	ParseErrorCodeVisualizeGroupByMixedBackfill ParseErrorCode = "VISUALIZE_GROUP_BY_MIXED_BACKFILL"
	// Mixing an aggregate expression and a non-aggregate expression is not allowed.
	ParseErrorCodeMixedAggregateAndNonAggregate ParseErrorCode = "MIXED_AGGREGATE_AND_NON_AGGREGATE"
	// An aggregate function received a nested aggregate argument, which is not allowed.
	ParseErrorCodeFunctionNestedAggregate ParseErrorCode = "FUNCTION_NESTED_AGGREGATE"
	// Time function is incompatible in a `GROUP BY` clause with the `ALL` modifier.
	ParseErrorCodeTimeFunctionNotFound ParseErrorCode = "TIME_FUNCTION_NOT_FOUND"
	// Mixing of `IN` list arguments of different data types is not allowed.
	ParseErrorCodeListMixedArgumentTypes ParseErrorCode = "LIST_MIXED_ARGUMENT_TYPES"
	// Mixing of `SINCE` and/or `UNTIL` with `DURING` is not allowed.
	ParseErrorCodeExcessPeriods ParseErrorCode = "EXCESS_PERIODS"
	// Invalid entry.
	ParseErrorCodeSyntaxInvalidToken ParseErrorCode = "SYNTAX_INVALID_TOKEN"
	// Identifier after `SHOW` is not valid in its current position.
	ParseErrorCodeSyntaxNoViableAlternative ParseErrorCode = "SYNTAX_NO_VIABLE_ALTERNATIVE"
	// Invalid `COMPARE TO` period specified. Make sure it's not the same as the `DURING` clause.
	ParseErrorCodeCompareToInvalidPeriod ParseErrorCode = "COMPARE_TO_INVALID_PERIOD"
	// The time period for `COMPARE TO` must be the same length as `DURING`.
	ParseErrorCodeCompareToIncompatiblePeriod ParseErrorCode = "COMPARE_TO_INCOMPATIBLE_PERIOD"
	// When using `COMPARE TO` with a time-based `GROUP BY`, `ALL` must be used.
	ParseErrorCodeUnbackfilledTimeGroupByComparison ParseErrorCode = "UNBACKFILLED_TIME_GROUP_BY_COMPARISON"
	// Comparison queries must only contain aggregated fields.
	ParseErrorCodeComparisonWithNonAggregateFields ParseErrorCode = "COMPARISON_WITH_NON_AGGREGATE_FIELDS"
	// Column must include `GROUP BY` arg1.
	ParseErrorCodeRequiredGroupByNotFound ParseErrorCode = "REQUIRED_GROUP_BY_NOT_FOUND"
	// Identifier or function out of place.
	ParseErrorCodeSyntaxInputMismatch ParseErrorCode = "SYNTAX_INPUT_MISMATCH"
	// Identifier or function out of place.
	ParseErrorCodeSyntaxUnwantedToken ParseErrorCode = "SYNTAX_UNWANTED_TOKEN"
	// Query is incomplete.
	ParseErrorCodeSyntaxMissingToken ParseErrorCode = "SYNTAX_MISSING_TOKEN"
	// Function not found.
	ParseErrorCodeFunctionNotFound ParseErrorCode = "FUNCTION_NOT_FOUND"
	// The `SINCE` date must be before or the same as the `UNTIL` date.
	ParseErrorCodeInvalidDateRange ParseErrorCode = "INVALID_DATE_RANGE"
	// The `GROUP BY` function is limited to one parameter with the `ALL` modifier.
	ParseErrorCodeExcessBackfillDimensions ParseErrorCode = "EXCESS_BACKFILL_DIMENSIONS"
	// When using `GROUP BY` with the `ALL` modifier, `SINCE` or `DURING` must be defined.
	ParseErrorCodeBackfillDateRangeNotFound ParseErrorCode = "BACKFILL_DATE_RANGE_NOT_FOUND"
	// Cannot use a `COMPARE TO` clause without `DURING` or `SINCE`.
	ParseErrorCodeCompareToMissingPeriod ParseErrorCode = "COMPARE_TO_MISSING_PERIOD"
	// The `GROUP BY` function has too many parameters.
	// When using `VISUALIZE` with `COMPARE TO` use only one `GROUP BY` parameter.
	//
	ParseErrorCodeExcessDimensions ParseErrorCode = "EXCESS_DIMENSIONS"
	// A semantic predicate failed during validation.
	ParseErrorCodeSyntaxFailedPredicate ParseErrorCode = "SYNTAX_FAILED_PREDICATE"
)

var AllParseErrorCode = []ParseErrorCode{
	ParseErrorCodeSyntaxNotRecognized,
	ParseErrorCodeSemanticallyInvalid,
	ParseErrorCodeTableNotFound,
	ParseErrorCodeColumnNotFound,
	ParseErrorCodeValueNotParsable,
	ParseErrorCodeDateNotParsable,
	ParseErrorCodeDateTimeNotParsable,
	ParseErrorCodeDateIntervalNotFound,
	ParseErrorCodeNamedDateNotFound,
	ParseErrorCodeSortFieldNotFound,
	ParseErrorCodeLimitInvalid,
	ParseErrorCodeVisualizeChartTypeNotFound,
	ParseErrorCodeFunctionModifierNotFound,
	ParseErrorCodeFunctionArgumentsNotFound,
	ParseErrorCodeFunctionExcessArguments,
	ParseErrorCodeFromNotFound,
	ParseErrorCodePresentmentNotFound,
	ParseErrorCodeExcessPresentments,
	ParseErrorCodeFunctionIncompatibleTypes,
	ParseErrorCodeVisualizeExcessProjections,
	ParseErrorCodeUnknown,
	ParseErrorCodeOperatorIncompatibleTypes,
	ParseErrorCodeVisualizeIncompatibleTypes,
	ParseErrorCodeVisualizeGroupByNotFound,
	ParseErrorCodeVisualizeGroupByMixedBackfill,
	ParseErrorCodeMixedAggregateAndNonAggregate,
	ParseErrorCodeFunctionNestedAggregate,
	ParseErrorCodeTimeFunctionNotFound,
	ParseErrorCodeListMixedArgumentTypes,
	ParseErrorCodeExcessPeriods,
	ParseErrorCodeSyntaxInvalidToken,
	ParseErrorCodeSyntaxNoViableAlternative,
	ParseErrorCodeCompareToInvalidPeriod,
	ParseErrorCodeCompareToIncompatiblePeriod,
	ParseErrorCodeUnbackfilledTimeGroupByComparison,
	ParseErrorCodeComparisonWithNonAggregateFields,
	ParseErrorCodeRequiredGroupByNotFound,
	ParseErrorCodeSyntaxInputMismatch,
	ParseErrorCodeSyntaxUnwantedToken,
	ParseErrorCodeSyntaxMissingToken,
	ParseErrorCodeFunctionNotFound,
	ParseErrorCodeInvalidDateRange,
	ParseErrorCodeExcessBackfillDimensions,
	ParseErrorCodeBackfillDateRangeNotFound,
	ParseErrorCodeCompareToMissingPeriod,
	ParseErrorCodeExcessDimensions,
	ParseErrorCodeSyntaxFailedPredicate,
}

func (e ParseErrorCode) IsValid() bool {
	switch e {
	case ParseErrorCodeSyntaxNotRecognized, ParseErrorCodeSemanticallyInvalid, ParseErrorCodeTableNotFound, ParseErrorCodeColumnNotFound, ParseErrorCodeValueNotParsable, ParseErrorCodeDateNotParsable, ParseErrorCodeDateTimeNotParsable, ParseErrorCodeDateIntervalNotFound, ParseErrorCodeNamedDateNotFound, ParseErrorCodeSortFieldNotFound, ParseErrorCodeLimitInvalid, ParseErrorCodeVisualizeChartTypeNotFound, ParseErrorCodeFunctionModifierNotFound, ParseErrorCodeFunctionArgumentsNotFound, ParseErrorCodeFunctionExcessArguments, ParseErrorCodeFromNotFound, ParseErrorCodePresentmentNotFound, ParseErrorCodeExcessPresentments, ParseErrorCodeFunctionIncompatibleTypes, ParseErrorCodeVisualizeExcessProjections, ParseErrorCodeUnknown, ParseErrorCodeOperatorIncompatibleTypes, ParseErrorCodeVisualizeIncompatibleTypes, ParseErrorCodeVisualizeGroupByNotFound, ParseErrorCodeVisualizeGroupByMixedBackfill, ParseErrorCodeMixedAggregateAndNonAggregate, ParseErrorCodeFunctionNestedAggregate, ParseErrorCodeTimeFunctionNotFound, ParseErrorCodeListMixedArgumentTypes, ParseErrorCodeExcessPeriods, ParseErrorCodeSyntaxInvalidToken, ParseErrorCodeSyntaxNoViableAlternative, ParseErrorCodeCompareToInvalidPeriod, ParseErrorCodeCompareToIncompatiblePeriod, ParseErrorCodeUnbackfilledTimeGroupByComparison, ParseErrorCodeComparisonWithNonAggregateFields, ParseErrorCodeRequiredGroupByNotFound, ParseErrorCodeSyntaxInputMismatch, ParseErrorCodeSyntaxUnwantedToken, ParseErrorCodeSyntaxMissingToken, ParseErrorCodeFunctionNotFound, ParseErrorCodeInvalidDateRange, ParseErrorCodeExcessBackfillDimensions, ParseErrorCodeBackfillDateRangeNotFound, ParseErrorCodeCompareToMissingPeriod, ParseErrorCodeExcessDimensions, ParseErrorCodeSyntaxFailedPredicate:
		return true
	}
	return false
}

func (e ParseErrorCode) String() string {
	return string(e)
}

func (e *ParseErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParseErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParseErrorCode", str)
	}
	return nil
}

func (e ParseErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentCustomizationError`.
type PaymentCustomizationErrorCode string

const (
	// The input value is invalid.
	PaymentCustomizationErrorCodeInvalid PaymentCustomizationErrorCode = "INVALID"
	// Function not found.
	PaymentCustomizationErrorCodeFunctionNotFound PaymentCustomizationErrorCode = "FUNCTION_NOT_FOUND"
	// Payment customization not found.
	PaymentCustomizationErrorCodePaymentCustomizationNotFound PaymentCustomizationErrorCode = "PAYMENT_CUSTOMIZATION_NOT_FOUND"
	// Shop must be on a Shopify Plus plan to activate payment customizations from a custom app.
	PaymentCustomizationErrorCodePaymentCustomizationFunctionNotEligible PaymentCustomizationErrorCode = "PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
	// Maximum payment customizations are already enabled.
	PaymentCustomizationErrorCodeMaximumActivePaymentCustomizations PaymentCustomizationErrorCode = "MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS"
	// Shop must be on a Shopify Plus plan to activate functions from a custom app.
	PaymentCustomizationErrorCodeCustomAppFunctionNotEligible PaymentCustomizationErrorCode = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
	// Function does not implement the required interface for this payment customization.
	PaymentCustomizationErrorCodeFunctionDoesNotImplement PaymentCustomizationErrorCode = "FUNCTION_DOES_NOT_IMPLEMENT"
	// Function is pending deletion.
	PaymentCustomizationErrorCodeFunctionPendingDeletion PaymentCustomizationErrorCode = "FUNCTION_PENDING_DELETION"
	// Function ID cannot be changed.
	PaymentCustomizationErrorCodeFunctionIDCannotBeChanged PaymentCustomizationErrorCode = "FUNCTION_ID_CANNOT_BE_CHANGED"
	// Required input field must be present.
	PaymentCustomizationErrorCodeRequiredInputField PaymentCustomizationErrorCode = "REQUIRED_INPUT_FIELD"
	// Could not create or update metafields.
	PaymentCustomizationErrorCodeInvalidMetafields PaymentCustomizationErrorCode = "INVALID_METAFIELDS"
)

var AllPaymentCustomizationErrorCode = []PaymentCustomizationErrorCode{
	PaymentCustomizationErrorCodeInvalid,
	PaymentCustomizationErrorCodeFunctionNotFound,
	PaymentCustomizationErrorCodePaymentCustomizationNotFound,
	PaymentCustomizationErrorCodePaymentCustomizationFunctionNotEligible,
	PaymentCustomizationErrorCodeMaximumActivePaymentCustomizations,
	PaymentCustomizationErrorCodeCustomAppFunctionNotEligible,
	PaymentCustomizationErrorCodeFunctionDoesNotImplement,
	PaymentCustomizationErrorCodeFunctionPendingDeletion,
	PaymentCustomizationErrorCodeFunctionIDCannotBeChanged,
	PaymentCustomizationErrorCodeRequiredInputField,
	PaymentCustomizationErrorCodeInvalidMetafields,
}

func (e PaymentCustomizationErrorCode) IsValid() bool {
	switch e {
	case PaymentCustomizationErrorCodeInvalid, PaymentCustomizationErrorCodeFunctionNotFound, PaymentCustomizationErrorCodePaymentCustomizationNotFound, PaymentCustomizationErrorCodePaymentCustomizationFunctionNotEligible, PaymentCustomizationErrorCodeMaximumActivePaymentCustomizations, PaymentCustomizationErrorCodeCustomAppFunctionNotEligible, PaymentCustomizationErrorCodeFunctionDoesNotImplement, PaymentCustomizationErrorCodeFunctionPendingDeletion, PaymentCustomizationErrorCodeFunctionIDCannotBeChanged, PaymentCustomizationErrorCodeRequiredInputField, PaymentCustomizationErrorCodeInvalidMetafields:
		return true
	}
	return false
}

func (e PaymentCustomizationErrorCode) String() string {
	return string(e)
}

func (e *PaymentCustomizationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentCustomizationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentCustomizationErrorCode", str)
	}
	return nil
}

func (e PaymentCustomizationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Some of the payment methods used in Shopify.
type PaymentMethods string

const (
	PaymentMethodsVisa            PaymentMethods = "VISA"
	PaymentMethodsMastercard      PaymentMethods = "MASTERCARD"
	PaymentMethodsDiscover        PaymentMethods = "DISCOVER"
	PaymentMethodsAmericanExpress PaymentMethods = "AMERICAN_EXPRESS"
	PaymentMethodsDinersClub      PaymentMethods = "DINERS_CLUB"
	PaymentMethodsJcb             PaymentMethods = "JCB"
	// The payment method for UnionPay payment.
	PaymentMethodsUnionpay PaymentMethods = "UNIONPAY"
	// The payment method for Elo payment.
	PaymentMethodsElo                PaymentMethods = "ELO"
	PaymentMethodsDankort            PaymentMethods = "DANKORT"
	PaymentMethodsMaestro            PaymentMethods = "MAESTRO"
	PaymentMethodsForbrugsforeningen PaymentMethods = "FORBRUGSFORENINGEN"
	PaymentMethodsPaypal             PaymentMethods = "PAYPAL"
	PaymentMethodsBogus              PaymentMethods = "BOGUS"
	PaymentMethodsBitcoin            PaymentMethods = "BITCOIN"
	PaymentMethodsLitecoin           PaymentMethods = "LITECOIN"
	PaymentMethodsDogecoin           PaymentMethods = "DOGECOIN"
	// The payment method for Interac payment.
	PaymentMethodsInterac PaymentMethods = "INTERAC"
	// The payment method for eftpos_au payment.
	PaymentMethodsEftpos PaymentMethods = "EFTPOS"
)

var AllPaymentMethods = []PaymentMethods{
	PaymentMethodsVisa,
	PaymentMethodsMastercard,
	PaymentMethodsDiscover,
	PaymentMethodsAmericanExpress,
	PaymentMethodsDinersClub,
	PaymentMethodsJcb,
	PaymentMethodsUnionpay,
	PaymentMethodsElo,
	PaymentMethodsDankort,
	PaymentMethodsMaestro,
	PaymentMethodsForbrugsforeningen,
	PaymentMethodsPaypal,
	PaymentMethodsBogus,
	PaymentMethodsBitcoin,
	PaymentMethodsLitecoin,
	PaymentMethodsDogecoin,
	PaymentMethodsInterac,
	PaymentMethodsEftpos,
}

func (e PaymentMethods) IsValid() bool {
	switch e {
	case PaymentMethodsVisa, PaymentMethodsMastercard, PaymentMethodsDiscover, PaymentMethodsAmericanExpress, PaymentMethodsDinersClub, PaymentMethodsJcb, PaymentMethodsUnionpay, PaymentMethodsElo, PaymentMethodsDankort, PaymentMethodsMaestro, PaymentMethodsForbrugsforeningen, PaymentMethodsPaypal, PaymentMethodsBogus, PaymentMethodsBitcoin, PaymentMethodsLitecoin, PaymentMethodsDogecoin, PaymentMethodsInterac, PaymentMethodsEftpos:
		return true
	}
	return false
}

func (e PaymentMethods) String() string {
	return string(e)
}

func (e *PaymentMethods) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethods", str)
	}
	return nil
}

func (e PaymentMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentReminderSendUserError`.
type PaymentReminderSendUserErrorCode string

const (
	// An error occurred while sending the payment reminder.
	PaymentReminderSendUserErrorCodePaymentReminderSendUnsuccessful PaymentReminderSendUserErrorCode = "PAYMENT_REMINDER_SEND_UNSUCCESSFUL"
)

var AllPaymentReminderSendUserErrorCode = []PaymentReminderSendUserErrorCode{
	PaymentReminderSendUserErrorCodePaymentReminderSendUnsuccessful,
}

func (e PaymentReminderSendUserErrorCode) IsValid() bool {
	switch e {
	case PaymentReminderSendUserErrorCodePaymentReminderSendUnsuccessful:
		return true
	}
	return false
}

func (e PaymentReminderSendUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentReminderSendUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentReminderSendUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentReminderSendUserErrorCode", str)
	}
	return nil
}

func (e PaymentReminderSendUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsCreateUserError`.
type PaymentTermsCreateUserErrorCode string

const (
	// An error occurred while creating payment terms.
	PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful PaymentTermsCreateUserErrorCode = "PAYMENT_TERMS_CREATION_UNSUCCESSFUL"
)

var AllPaymentTermsCreateUserErrorCode = []PaymentTermsCreateUserErrorCode{
	PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful,
}

func (e PaymentTermsCreateUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsCreateUserErrorCodePaymentTermsCreationUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsCreateUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsCreateUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
type PaymentTermsDeleteUserErrorCode string

const (
	// An error occurred while deleting payment terms.
	PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful PaymentTermsDeleteUserErrorCode = "PAYMENT_TERMS_DELETE_UNSUCCESSFUL"
)

var AllPaymentTermsDeleteUserErrorCode = []PaymentTermsDeleteUserErrorCode{
	PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful,
}

func (e PaymentTermsDeleteUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsDeleteUserErrorCodePaymentTermsDeleteUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsDeleteUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a payment terms or a payment terms template.
type PaymentTermsType string

const (
	// The payment terms or payment terms template is due on receipt.
	PaymentTermsTypeReceipt PaymentTermsType = "RECEIPT"
	// The payment terms or payment terms template is a net type. It's due a number of days after issue.
	PaymentTermsTypeNet PaymentTermsType = "NET"
	// The payment terms or payment terms template is a fixed type. It's due on a specified date.
	PaymentTermsTypeFixed PaymentTermsType = "FIXED"
	// The payment terms or payment terms template is due on fulfillment.
	PaymentTermsTypeFulfillment PaymentTermsType = "FULFILLMENT"
	// The type of the payment terms or payment terms template is unknown.
	PaymentTermsTypeUnknown PaymentTermsType = "UNKNOWN"
)

var AllPaymentTermsType = []PaymentTermsType{
	PaymentTermsTypeReceipt,
	PaymentTermsTypeNet,
	PaymentTermsTypeFixed,
	PaymentTermsTypeFulfillment,
	PaymentTermsTypeUnknown,
}

func (e PaymentTermsType) IsValid() bool {
	switch e {
	case PaymentTermsTypeReceipt, PaymentTermsTypeNet, PaymentTermsTypeFixed, PaymentTermsTypeFulfillment, PaymentTermsTypeUnknown:
		return true
	}
	return false
}

func (e PaymentTermsType) String() string {
	return string(e)
}

func (e *PaymentTermsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsType", str)
	}
	return nil
}

func (e PaymentTermsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
type PaymentTermsUpdateUserErrorCode string

const (
	// An error occurred while updating payment terms.
	PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful PaymentTermsUpdateUserErrorCode = "PAYMENT_TERMS_UPDATE_UNSUCCESSFUL"
)

var AllPaymentTermsUpdateUserErrorCode = []PaymentTermsUpdateUserErrorCode{
	PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful,
}

func (e PaymentTermsUpdateUserErrorCode) IsValid() bool {
	switch e {
	case PaymentTermsUpdateUserErrorCodePaymentTermsUpdateUnsuccessful:
		return true
	}
	return false
}

func (e PaymentTermsUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *PaymentTermsUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTermsUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentTermsUpdateUserErrorCode", str)
	}
	return nil
}

func (e PaymentTermsUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a valid PayPal Express subscriptions gateway status.
type PaypalExpressSubscriptionsGatewayStatus string

const (
	// The status is enabled.
	PaypalExpressSubscriptionsGatewayStatusEnabled PaypalExpressSubscriptionsGatewayStatus = "ENABLED"
	// The status is disabled.
	PaypalExpressSubscriptionsGatewayStatusDisabled PaypalExpressSubscriptionsGatewayStatus = "DISABLED"
	// The status is pending.
	PaypalExpressSubscriptionsGatewayStatusPending PaypalExpressSubscriptionsGatewayStatus = "PENDING"
)

var AllPaypalExpressSubscriptionsGatewayStatus = []PaypalExpressSubscriptionsGatewayStatus{
	PaypalExpressSubscriptionsGatewayStatusEnabled,
	PaypalExpressSubscriptionsGatewayStatusDisabled,
	PaypalExpressSubscriptionsGatewayStatusPending,
}

func (e PaypalExpressSubscriptionsGatewayStatus) IsValid() bool {
	switch e {
	case PaypalExpressSubscriptionsGatewayStatusEnabled, PaypalExpressSubscriptionsGatewayStatusDisabled, PaypalExpressSubscriptionsGatewayStatusPending:
		return true
	}
	return false
}

func (e PaypalExpressSubscriptionsGatewayStatus) String() string {
	return string(e)
}

func (e *PaypalExpressSubscriptionsGatewayStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaypalExpressSubscriptionsGatewayStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaypalExpressSubscriptionsGatewayStatus", str)
	}
	return nil
}

func (e PaypalExpressSubscriptionsGatewayStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// How to caluclate the parent product variant's price while bulk updating variant relationships.
type PriceCalculationType string

const (
	// The price of the parent will be the sum of the components price times their quantity.
	PriceCalculationTypeComponentsSum PriceCalculationType = "COMPONENTS_SUM"
	// The price of the parent will be set to the price provided.
	PriceCalculationTypeFixed PriceCalculationType = "FIXED"
	// The price of the parent will not be adjusted.
	PriceCalculationTypeNone PriceCalculationType = "NONE"
)

var AllPriceCalculationType = []PriceCalculationType{
	PriceCalculationTypeComponentsSum,
	PriceCalculationTypeFixed,
	PriceCalculationTypeNone,
}

func (e PriceCalculationType) IsValid() bool {
	switch e {
	case PriceCalculationTypeComponentsSum, PriceCalculationTypeFixed, PriceCalculationTypeNone:
		return true
	}
	return false
}

func (e PriceCalculationType) String() string {
	return string(e)
}

func (e *PriceCalculationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceCalculationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceCalculationType", str)
	}
	return nil
}

func (e PriceCalculationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a percentage price adjustment type.
type PriceListAdjustmentType string

const (
	// Percentage decrease type. Prices will have a lower value.
	PriceListAdjustmentTypePercentageDecrease PriceListAdjustmentType = "PERCENTAGE_DECREASE"
	// Percentage increase type. Prices will have a higher value.
	PriceListAdjustmentTypePercentageIncrease PriceListAdjustmentType = "PERCENTAGE_INCREASE"
)

var AllPriceListAdjustmentType = []PriceListAdjustmentType{
	PriceListAdjustmentTypePercentageDecrease,
	PriceListAdjustmentTypePercentageIncrease,
}

func (e PriceListAdjustmentType) IsValid() bool {
	switch e {
	case PriceListAdjustmentTypePercentageDecrease, PriceListAdjustmentTypePercentageIncrease:
		return true
	}
	return false
}

func (e PriceListAdjustmentType) String() string {
	return string(e)
}

func (e *PriceListAdjustmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListAdjustmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListAdjustmentType", str)
	}
	return nil
}

func (e PriceListAdjustmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents how the compare at price will be determined for a price list.
type PriceListCompareAtMode string

const (
	// The compare at price is adjusted based on percentage specified in price list.
	PriceListCompareAtModeAdjusted PriceListCompareAtMode = "ADJUSTED"
	// The compare at prices are set to `null` unless explicitly defined by a fixed price value.
	PriceListCompareAtModeNullify PriceListCompareAtMode = "NULLIFY"
)

var AllPriceListCompareAtMode = []PriceListCompareAtMode{
	PriceListCompareAtModeAdjusted,
	PriceListCompareAtModeNullify,
}

func (e PriceListCompareAtMode) IsValid() bool {
	switch e {
	case PriceListCompareAtModeAdjusted, PriceListCompareAtModeNullify:
		return true
	}
	return false
}

func (e PriceListCompareAtMode) String() string {
	return string(e)
}

func (e *PriceListCompareAtMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListCompareAtMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListCompareAtMode", str)
	}
	return nil
}

func (e PriceListCompareAtMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PriceListFixedPricesByProductBulkUpdateUserError`.
type PriceListFixedPricesByProductBulkUpdateUserErrorCode string

const (
	// No update operations specified.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeNoUpdateOperationsSpecified PriceListFixedPricesByProductBulkUpdateUserErrorCode = "NO_UPDATE_OPERATIONS_SPECIFIED"
	// The currency specified does not match the price list's currency.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePricesToAddCurrencyMismatch PriceListFixedPricesByProductBulkUpdateUserErrorCode = "PRICES_TO_ADD_CURRENCY_MISMATCH"
	// Price list does not exist.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceListDoesNotExist PriceListFixedPricesByProductBulkUpdateUserErrorCode = "PRICE_LIST_DOES_NOT_EXIST"
	// Duplicate ID in input.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeDuplicateIDInInput PriceListFixedPricesByProductBulkUpdateUserErrorCode = "DUPLICATE_ID_IN_INPUT"
	// IDs must be mutually exclusive across add or delete operations.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeIDMustBeMutuallyExclusive PriceListFixedPricesByProductBulkUpdateUserErrorCode = "ID_MUST_BE_MUTUALLY_EXCLUSIVE"
	// Product does not exist.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeProductDoesNotExist PriceListFixedPricesByProductBulkUpdateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Exceeded the 10000 prices to add limit.
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceLimitExceeded PriceListFixedPricesByProductBulkUpdateUserErrorCode = "PRICE_LIMIT_EXCEEDED"
)

var AllPriceListFixedPricesByProductBulkUpdateUserErrorCode = []PriceListFixedPricesByProductBulkUpdateUserErrorCode{
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeNoUpdateOperationsSpecified,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePricesToAddCurrencyMismatch,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceListDoesNotExist,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeDuplicateIDInInput,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeIDMustBeMutuallyExclusive,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodeProductDoesNotExist,
	PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceLimitExceeded,
}

func (e PriceListFixedPricesByProductBulkUpdateUserErrorCode) IsValid() bool {
	switch e {
	case PriceListFixedPricesByProductBulkUpdateUserErrorCodeNoUpdateOperationsSpecified, PriceListFixedPricesByProductBulkUpdateUserErrorCodePricesToAddCurrencyMismatch, PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceListDoesNotExist, PriceListFixedPricesByProductBulkUpdateUserErrorCodeDuplicateIDInInput, PriceListFixedPricesByProductBulkUpdateUserErrorCodeIDMustBeMutuallyExclusive, PriceListFixedPricesByProductBulkUpdateUserErrorCodeProductDoesNotExist, PriceListFixedPricesByProductBulkUpdateUserErrorCodePriceLimitExceeded:
		return true
	}
	return false
}

func (e PriceListFixedPricesByProductBulkUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *PriceListFixedPricesByProductBulkUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListFixedPricesByProductBulkUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListFixedPricesByProductBulkUpdateUserErrorCode", str)
	}
	return nil
}

func (e PriceListFixedPricesByProductBulkUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
type PriceListPriceOriginType string

const (
	// The price is defined on the price list.
	PriceListPriceOriginTypeFixed PriceListPriceOriginType = "FIXED"
	// The price is relative to the adjustment type and value.
	PriceListPriceOriginTypeRelative PriceListPriceOriginType = "RELATIVE"
)

var AllPriceListPriceOriginType = []PriceListPriceOriginType{
	PriceListPriceOriginTypeFixed,
	PriceListPriceOriginTypeRelative,
}

func (e PriceListPriceOriginType) IsValid() bool {
	switch e {
	case PriceListPriceOriginTypeFixed, PriceListPriceOriginTypeRelative:
		return true
	}
	return false
}

func (e PriceListPriceOriginType) String() string {
	return string(e)
}

func (e *PriceListPriceOriginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListPriceOriginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListPriceOriginType", str)
	}
	return nil
}

func (e PriceListPriceOriginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PriceListPriceUserError`.
type PriceListPriceUserErrorCode string

const (
	// The input value is blank.
	PriceListPriceUserErrorCodeBlank PriceListPriceUserErrorCode = "BLANK"
	// The price list doesn't exist.
	PriceListPriceUserErrorCodePriceListNotFound PriceListPriceUserErrorCode = "PRICE_LIST_NOT_FOUND"
	// The specified currency doesn't match the price list's currency.
	PriceListPriceUserErrorCodePriceListCurrencyMismatch PriceListPriceUserErrorCode = "PRICE_LIST_CURRENCY_MISMATCH"
	// A fixed price for the specified product variant doesn't exist.
	PriceListPriceUserErrorCodeVariantNotFound PriceListPriceUserErrorCode = "VARIANT_NOT_FOUND"
	// Only fixed prices can be deleted.
	PriceListPriceUserErrorCodePriceNotFixed PriceListPriceUserErrorCode = "PRICE_NOT_FIXED"
)

var AllPriceListPriceUserErrorCode = []PriceListPriceUserErrorCode{
	PriceListPriceUserErrorCodeBlank,
	PriceListPriceUserErrorCodePriceListNotFound,
	PriceListPriceUserErrorCodePriceListCurrencyMismatch,
	PriceListPriceUserErrorCodeVariantNotFound,
	PriceListPriceUserErrorCodePriceNotFixed,
}

func (e PriceListPriceUserErrorCode) IsValid() bool {
	switch e {
	case PriceListPriceUserErrorCodeBlank, PriceListPriceUserErrorCodePriceListNotFound, PriceListPriceUserErrorCodePriceListCurrencyMismatch, PriceListPriceUserErrorCodeVariantNotFound, PriceListPriceUserErrorCodePriceNotFixed:
		return true
	}
	return false
}

func (e PriceListPriceUserErrorCode) String() string {
	return string(e)
}

func (e *PriceListPriceUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListPriceUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListPriceUserErrorCode", str)
	}
	return nil
}

func (e PriceListPriceUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the PriceList query.
type PriceListSortKeys string

const (
	// Sort by the `name` value.
	PriceListSortKeysName PriceListSortKeys = "NAME"
	// Sort by the `id` value.
	PriceListSortKeysID PriceListSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	PriceListSortKeysRelevance PriceListSortKeys = "RELEVANCE"
)

var AllPriceListSortKeys = []PriceListSortKeys{
	PriceListSortKeysName,
	PriceListSortKeysID,
	PriceListSortKeysRelevance,
}

func (e PriceListSortKeys) IsValid() bool {
	switch e {
	case PriceListSortKeysName, PriceListSortKeysID, PriceListSortKeysRelevance:
		return true
	}
	return false
}

func (e PriceListSortKeys) String() string {
	return string(e)
}

func (e *PriceListSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListSortKeys", str)
	}
	return nil
}

func (e PriceListSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PriceListUserError`.
type PriceListUserErrorCode string

const (
	// The input value is already taken.
	PriceListUserErrorCodeTaken PriceListUserErrorCode = "TAKEN"
	// The input value is blank.
	PriceListUserErrorCodeBlank PriceListUserErrorCode = "BLANK"
	// The input value isn't included in the list.
	PriceListUserErrorCodeInclusion PriceListUserErrorCode = "INCLUSION"
	// The input value is too long.
	PriceListUserErrorCodeTooLong PriceListUserErrorCode = "TOO_LONG"
	// The specified price list doesn't exist.
	PriceListUserErrorCodePriceListNotFound PriceListUserErrorCode = "PRICE_LIST_NOT_FOUND"
	// The price list is currently being modified. Please try again later.
	PriceListUserErrorCodePriceListLocked PriceListUserErrorCode = "PRICE_LIST_LOCKED"
	// Cannot save the price list with context rule because the limit of context rules per shop was reached.
	PriceListUserErrorCodeContextRuleLimitReached PriceListUserErrorCode = "CONTEXT_RULE_LIMIT_REACHED"
	// A price list context rule cannot have more than one country.
	PriceListUserErrorCodeContextRuleCountriesLimit PriceListUserErrorCode = "CONTEXT_RULE_COUNTRIES_LIMIT"
	// A price list’s currency must be of the pricing rule’s country.
	PriceListUserErrorCodeCurrencyCountryMismatch PriceListUserErrorCode = "CURRENCY_COUNTRY_MISMATCH"
	// A country in a context rule must use a valid currency.
	PriceListUserErrorCodeCountryCurrencyMismatch PriceListUserErrorCode = "COUNTRY_CURRENCY_MISMATCH"
	// A price list’s currency must be the market currency.
	PriceListUserErrorCodeCurrencyMarketMismatch PriceListUserErrorCode = "CURRENCY_MARKET_MISMATCH"
	// The context rule's market does not use the price list currency.
	PriceListUserErrorCodeMarketCurrencyMismatch PriceListUserErrorCode = "MARKET_CURRENCY_MISMATCH"
	// The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
	PriceListUserErrorCodeInvalidAdjustmentValue PriceListUserErrorCode = "INVALID_ADJUSTMENT_VALUE"
	// The adjustment value must not be greater than 100% for `type` `PERCENTAGE_DECREASE`.
	PriceListUserErrorCodeInvalidAdjustmentMinValue PriceListUserErrorCode = "INVALID_ADJUSTMENT_MIN_VALUE"
	// The adjustment value must not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
	PriceListUserErrorCodeInvalidAdjustmentMaxValue PriceListUserErrorCode = "INVALID_ADJUSTMENT_MAX_VALUE"
	// A price list for this country is already taken.
	PriceListUserErrorCodeContextRuleCountryTaken PriceListUserErrorCode = "CONTEXT_RULE_COUNTRY_TAKEN"
	// Quantity rules can be associated only with company location catalogs.
	PriceListUserErrorCodeCatalogContextDoesNotSupportQuantityRules PriceListUserErrorCode = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
	// Only one context rule option may be specified.
	PriceListUserErrorCodeContextRuleLimitOneOption PriceListUserErrorCode = "CONTEXT_RULE_LIMIT_ONE_OPTION"
	// The specified market wasn't found.
	PriceListUserErrorCodeContextRuleMarketNotFound PriceListUserErrorCode = "CONTEXT_RULE_MARKET_NOT_FOUND"
	// A price list for this market is already taken.
	PriceListUserErrorCodeContextRuleMarketTaken PriceListUserErrorCode = "CONTEXT_RULE_MARKET_TAKEN"
	// The price list currency is not supported by the shop's payment gateway.
	PriceListUserErrorCodeCurrencyNotSupported PriceListUserErrorCode = "CURRENCY_NOT_SUPPORTED"
	// Cannot create price list for a primary market.
	PriceListUserErrorCodePriceListNotAllowedForPrimaryMarket PriceListUserErrorCode = "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
	// Cannot assign a catalog to a price list that also has context rules.
	PriceListUserErrorCodeCatalogAssignmentNotAllowed PriceListUserErrorCode = "CATALOG_ASSIGNMENT_NOT_ALLOWED"
	// The specified catalog does not exist.
	PriceListUserErrorCodeCatalogDoesNotExist PriceListUserErrorCode = "CATALOG_DOES_NOT_EXIST"
	// The context type of a catalog cannot be changed.
	PriceListUserErrorCodeCatalogCannotChangeContextType PriceListUserErrorCode = "CATALOG_CANNOT_CHANGE_CONTEXT_TYPE"
	// The price list currency must match the market catalog currency.
	PriceListUserErrorCodeCatalogMarketAndPriceListCurrencyMismatch PriceListUserErrorCode = "CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
	// Catalog has a price list already assigned.
	PriceListUserErrorCodeCatalogTaken PriceListUserErrorCode = "CATALOG_TAKEN"
	// A country catalog cannot be assigned to a price list.
	PriceListUserErrorCodeCountryPriceListAssignment PriceListUserErrorCode = "COUNTRY_PRICE_LIST_ASSIGNMENT"
	// An app catalog cannot be assigned to a price list.
	PriceListUserErrorCodeAppCatalogPriceListAssignment PriceListUserErrorCode = "APP_CATALOG_PRICE_LIST_ASSIGNMENT"
	// Something went wrong when trying to save the price list. Please try again.
	PriceListUserErrorCodeGenericError PriceListUserErrorCode = "GENERIC_ERROR"
)

var AllPriceListUserErrorCode = []PriceListUserErrorCode{
	PriceListUserErrorCodeTaken,
	PriceListUserErrorCodeBlank,
	PriceListUserErrorCodeInclusion,
	PriceListUserErrorCodeTooLong,
	PriceListUserErrorCodePriceListNotFound,
	PriceListUserErrorCodePriceListLocked,
	PriceListUserErrorCodeContextRuleLimitReached,
	PriceListUserErrorCodeContextRuleCountriesLimit,
	PriceListUserErrorCodeCurrencyCountryMismatch,
	PriceListUserErrorCodeCountryCurrencyMismatch,
	PriceListUserErrorCodeCurrencyMarketMismatch,
	PriceListUserErrorCodeMarketCurrencyMismatch,
	PriceListUserErrorCodeInvalidAdjustmentValue,
	PriceListUserErrorCodeInvalidAdjustmentMinValue,
	PriceListUserErrorCodeInvalidAdjustmentMaxValue,
	PriceListUserErrorCodeContextRuleCountryTaken,
	PriceListUserErrorCodeCatalogContextDoesNotSupportQuantityRules,
	PriceListUserErrorCodeContextRuleLimitOneOption,
	PriceListUserErrorCodeContextRuleMarketNotFound,
	PriceListUserErrorCodeContextRuleMarketTaken,
	PriceListUserErrorCodeCurrencyNotSupported,
	PriceListUserErrorCodePriceListNotAllowedForPrimaryMarket,
	PriceListUserErrorCodeCatalogAssignmentNotAllowed,
	PriceListUserErrorCodeCatalogDoesNotExist,
	PriceListUserErrorCodeCatalogCannotChangeContextType,
	PriceListUserErrorCodeCatalogMarketAndPriceListCurrencyMismatch,
	PriceListUserErrorCodeCatalogTaken,
	PriceListUserErrorCodeCountryPriceListAssignment,
	PriceListUserErrorCodeAppCatalogPriceListAssignment,
	PriceListUserErrorCodeGenericError,
}

func (e PriceListUserErrorCode) IsValid() bool {
	switch e {
	case PriceListUserErrorCodeTaken, PriceListUserErrorCodeBlank, PriceListUserErrorCodeInclusion, PriceListUserErrorCodeTooLong, PriceListUserErrorCodePriceListNotFound, PriceListUserErrorCodePriceListLocked, PriceListUserErrorCodeContextRuleLimitReached, PriceListUserErrorCodeContextRuleCountriesLimit, PriceListUserErrorCodeCurrencyCountryMismatch, PriceListUserErrorCodeCountryCurrencyMismatch, PriceListUserErrorCodeCurrencyMarketMismatch, PriceListUserErrorCodeMarketCurrencyMismatch, PriceListUserErrorCodeInvalidAdjustmentValue, PriceListUserErrorCodeInvalidAdjustmentMinValue, PriceListUserErrorCodeInvalidAdjustmentMaxValue, PriceListUserErrorCodeContextRuleCountryTaken, PriceListUserErrorCodeCatalogContextDoesNotSupportQuantityRules, PriceListUserErrorCodeContextRuleLimitOneOption, PriceListUserErrorCodeContextRuleMarketNotFound, PriceListUserErrorCodeContextRuleMarketTaken, PriceListUserErrorCodeCurrencyNotSupported, PriceListUserErrorCodePriceListNotAllowedForPrimaryMarket, PriceListUserErrorCodeCatalogAssignmentNotAllowed, PriceListUserErrorCodeCatalogDoesNotExist, PriceListUserErrorCodeCatalogCannotChangeContextType, PriceListUserErrorCodeCatalogMarketAndPriceListCurrencyMismatch, PriceListUserErrorCodeCatalogTaken, PriceListUserErrorCodeCountryPriceListAssignment, PriceListUserErrorCodeAppCatalogPriceListAssignment, PriceListUserErrorCodeGenericError:
		return true
	}
	return false
}

func (e PriceListUserErrorCode) String() string {
	return string(e)
}

func (e *PriceListUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceListUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceListUserErrorCode", str)
	}
	return nil
}

func (e PriceListUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the price rule's value is allocated to its entitled items.
type PriceRuleAllocationMethod string

const (
	// The value will be applied to each of the entitled items.
	PriceRuleAllocationMethodEach PriceRuleAllocationMethod = "EACH"
	// The value will be applied once across the entitled items.
	PriceRuleAllocationMethodAcross PriceRuleAllocationMethod = "ACROSS"
)

var AllPriceRuleAllocationMethod = []PriceRuleAllocationMethod{
	PriceRuleAllocationMethodEach,
	PriceRuleAllocationMethodAcross,
}

func (e PriceRuleAllocationMethod) IsValid() bool {
	switch e {
	case PriceRuleAllocationMethodEach, PriceRuleAllocationMethodAcross:
		return true
	}
	return false
}

func (e PriceRuleAllocationMethod) String() string {
	return string(e)
}

func (e *PriceRuleAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleAllocationMethod", str)
	}
	return nil
}

func (e PriceRuleAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by a price rule mutation.
type PriceRuleErrorCode string

const (
	// The input value is blank.
	PriceRuleErrorCodeBlank PriceRuleErrorCode = "BLANK"
	// The input value should be equal to the value allowed.
	PriceRuleErrorCodeEqualTo PriceRuleErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	PriceRuleErrorCodeGreaterThan PriceRuleErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	PriceRuleErrorCodeGreaterThanOrEqualTo PriceRuleErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value is invalid.
	PriceRuleErrorCodeInvalid PriceRuleErrorCode = "INVALID"
	// The input value should be less than the maximum value allowed.
	PriceRuleErrorCodeLessThan PriceRuleErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	PriceRuleErrorCodeLessThanOrEqualTo PriceRuleErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is already taken.
	PriceRuleErrorCodeTaken PriceRuleErrorCode = "TAKEN"
	// The input value is too long.
	PriceRuleErrorCodeTooLong PriceRuleErrorCode = "TOO_LONG"
	// The input value is too short.
	PriceRuleErrorCodeTooShort PriceRuleErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	PriceRuleErrorCodeInternalError PriceRuleErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	PriceRuleErrorCodeTooManyArguments PriceRuleErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	PriceRuleErrorCodeMissingArgument PriceRuleErrorCode = "MISSING_ARGUMENT"
	// Can't exceed the maximum number.
	PriceRuleErrorCodeExceededMax PriceRuleErrorCode = "EXCEEDED_MAX"
	// The allocation limit can only be set on Buy x, get y (BXGY) discounts.
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO"
	// The allocation limit must be a non-zero positive number.
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO"
	// The number of discount codes in the shop has reached its limit.
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode PriceRuleErrorCode = "PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE"
	// The number of discounts in the shop has reached its limit.
	PriceRuleErrorCodeShopExceededMaxPriceRules PriceRuleErrorCode = "SHOP_EXCEEDED_MAX_PRICE_RULES"
	// The discount end date must be after the start date.
	PriceRuleErrorCodeEndDateBeforeStartDate PriceRuleErrorCode = "END_DATE_BEFORE_START_DATE"
	// The percentage value must be between 0 and -100.
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange PriceRuleErrorCode = "PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE"
	// Only one of the minimum subtotal or minimum quantity condition can be defined.
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent PriceRuleErrorCode = "PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// The allocation method must be `ACROSS` for the provided target selection.
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection PriceRuleErrorCode = "ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION"
	// The discount must apply on either one-time purchase or subscription items, or both.
	PriceRuleErrorCodeAppliesOnNothing PriceRuleErrorCode = "APPLIES_ON_NOTHING"
	// The recurring cycle limit must be 1 when a discount doesn't apply on subscription items.
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems PriceRuleErrorCode = "MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS"
	// Invalid BOGO target selection.
	PriceRuleErrorCodeBogoInvalidTargetSelection PriceRuleErrorCode = "BOGO_INVALID_TARGET_SELECTION"
	// Invalid BOGO target type.
	PriceRuleErrorCodeBogoInvalidTargetType PriceRuleErrorCode = "BOGO_INVALID_TARGET_TYPE"
	// Invalid BOGO value type.
	PriceRuleErrorCodeBogoInvalidValueType PriceRuleErrorCode = "BOGO_INVALID_VALUE_TYPE"
	// A duplicate discount code exists.
	PriceRuleErrorCodeDiscountCodeDuplicate PriceRuleErrorCode = "DISCOUNT_CODE_DUPLICATE"
	// Can't use both prerequisite customers and saved search.
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected PriceRuleErrorCode = "BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED"
	// A duplicate customer saved search exists.
	PriceRuleErrorCodeCustomerSavedSearchDuplicate PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_DUPLICATE"
	// The customer saved search exceeded the maximum number.
	PriceRuleErrorCodeCustomerSavedSearchExceededMax PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX"
	// Invalid customer saved search.
	PriceRuleErrorCodeCustomerSavedSearchInvalid PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_INVALID"
	// The customer prerequisites exceeded the maximum number.
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_EXCEEDED_MAX"
	// Invalid customer prerequisites selection.
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_INVALID_SELECTION"
	// A duplicate customer prerequisite ID exists.
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate PriceRuleErrorCode = "CUSTOMER_PREREQUISITE_DUPLICATE"
	// Customer prerequisites are missing.
	PriceRuleErrorCodeCustomerPrerequisitesMissing PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_MISSING"
	// Can't have both prerequisite customers and prerequisite segments.
	PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected PriceRuleErrorCode = "BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED"
	// Can't have both saved searches and segments prerequisites.
	PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected PriceRuleErrorCode = "BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED"
	// The customer segment prerequisites exceeded the maximum number.
	PriceRuleErrorCodeCustomerSegmentExceededMax PriceRuleErrorCode = "CUSTOMER_SEGMENT_EXCEEDED_MAX"
	// The customer segment prerequisite ID is invalid.
	PriceRuleErrorCodeCustomerSegmentInvalid PriceRuleErrorCode = "CUSTOMER_SEGMENT_INVALID"
	// A duplicate customer segment prerequisite ID exists.
	PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate PriceRuleErrorCode = "CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE"
	// Can't use collections as a prequisite in combination with product variants or products.
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants PriceRuleErrorCode = "CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS"
	// Can't add the same collection twice.
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_COLLECTION"
	// Can't add the same product twice.
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_PRODUCT"
	// Can't add the same variant twice.
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_VARIANT"
	// Can't exceed the maximum number of item prerequisites.
	PriceRuleErrorCodeItemPrerequisitesExceededMax PriceRuleErrorCode = "ITEM_PREREQUISITES_EXCEEDED_MAX"
	// Invalid collection.
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_COLLECTION"
	// Invalid type.
	PriceRuleErrorCodeItemPrerequisitesInvalidType PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_TYPE"
	// Invalid product.
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_PRODUCT"
	// Invalid variant.
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_VARIANT"
	// Item prerequisites must be empty if the prerequisite quantity ratio isn't defined.
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty PriceRuleErrorCode = "ITEM_PREREQUISITES_MUST_BE_EMPTY"
	// Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined.
	PriceRuleErrorCodeItemPrerequisitesMissing PriceRuleErrorCode = "ITEM_PREREQUISITES_MISSING"
	// Can't entitle collections in combination with product variants or products.
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants PriceRuleErrorCode = "CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS"
	// Can't add the same collection twice.
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION"
	// Can't add the same product twice.
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT"
	// Can't add the same collection twice.
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_VARIANT"
	// Can't exceed the maximum number of collection entitlements.
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION"
	// Can't exceed the maximum number of product entitlements.
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT"
	// Can't exceed the maximum number of variant entitlements.
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT"
	// Invalid entitlement type.
	PriceRuleErrorCodeItemEntitlementInvalidType PriceRuleErrorCode = "ITEM_ENTITLEMENT_INVALID_TYPE"
	// Invalid collection.
	PriceRuleErrorCodeItemEntitlementsInvalidCollection PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_COLLECTION"
	// Invalid product.
	PriceRuleErrorCodeItemEntitlementsInvalidProduct PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_PRODUCT"
	// Invalid variant.
	PriceRuleErrorCodeItemEntitlementsInvalidVariant PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_VARIANT"
	// Invalid combination of target type and selection.
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	// Entitlements are missing.
	PriceRuleErrorCodeItemEntitlementsMissing PriceRuleErrorCode = "ITEM_ENTITLEMENTS_MISSING"
	// The variant is already entitled through a product.
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct PriceRuleErrorCode = "VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT"
	// A duplicate country code exists.
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY"
	// Can't exceed the maximum number of entitlements.
	PriceRuleErrorCodeShippingEntitlementsExceededMax PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_EXCEEDED_MAX"
	// The country is unknown.
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_COUNTRY"
	// Invalid target type or selection.
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	// Missing entitlements.
	PriceRuleErrorCodeShippingEntitlementsMissing PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_MISSING"
	// Unsupported destination type.
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE"
	// The target type is invalid when defining a prerequisite shipping price range.
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange PriceRuleErrorCode = "INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE"
	// The `combinesWith` settings are invalid for the discount class.
	PriceRuleErrorCodeInvalidCombinesWithForDiscountClass PriceRuleErrorCode = "INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS"
	// The discountClass is invalid for the price rule.
	PriceRuleErrorCodeInvalidDiscountClassForPriceRule PriceRuleErrorCode = "INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE"
)

var AllPriceRuleErrorCode = []PriceRuleErrorCode{
	PriceRuleErrorCodeBlank,
	PriceRuleErrorCodeEqualTo,
	PriceRuleErrorCodeGreaterThan,
	PriceRuleErrorCodeGreaterThanOrEqualTo,
	PriceRuleErrorCodeInvalid,
	PriceRuleErrorCodeLessThan,
	PriceRuleErrorCodeLessThanOrEqualTo,
	PriceRuleErrorCodeTaken,
	PriceRuleErrorCodeTooLong,
	PriceRuleErrorCodeTooShort,
	PriceRuleErrorCodeInternalError,
	PriceRuleErrorCodeTooManyArguments,
	PriceRuleErrorCodeMissingArgument,
	PriceRuleErrorCodeExceededMax,
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo,
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero,
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode,
	PriceRuleErrorCodeShopExceededMaxPriceRules,
	PriceRuleErrorCodeEndDateBeforeStartDate,
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange,
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent,
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection,
	PriceRuleErrorCodeAppliesOnNothing,
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems,
	PriceRuleErrorCodeBogoInvalidTargetSelection,
	PriceRuleErrorCodeBogoInvalidTargetType,
	PriceRuleErrorCodeBogoInvalidValueType,
	PriceRuleErrorCodeDiscountCodeDuplicate,
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected,
	PriceRuleErrorCodeCustomerSavedSearchDuplicate,
	PriceRuleErrorCodeCustomerSavedSearchExceededMax,
	PriceRuleErrorCodeCustomerSavedSearchInvalid,
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax,
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection,
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate,
	PriceRuleErrorCodeCustomerPrerequisitesMissing,
	PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected,
	PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected,
	PriceRuleErrorCodeCustomerSegmentExceededMax,
	PriceRuleErrorCodeCustomerSegmentInvalid,
	PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate,
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants,
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection,
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct,
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant,
	PriceRuleErrorCodeItemPrerequisitesExceededMax,
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection,
	PriceRuleErrorCodeItemPrerequisitesInvalidType,
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct,
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant,
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty,
	PriceRuleErrorCodeItemPrerequisitesMissing,
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants,
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection,
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct,
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant,
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection,
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct,
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant,
	PriceRuleErrorCodeItemEntitlementInvalidType,
	PriceRuleErrorCodeItemEntitlementsInvalidCollection,
	PriceRuleErrorCodeItemEntitlementsInvalidProduct,
	PriceRuleErrorCodeItemEntitlementsInvalidVariant,
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeItemEntitlementsMissing,
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct,
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry,
	PriceRuleErrorCodeShippingEntitlementsExceededMax,
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry,
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeShippingEntitlementsMissing,
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType,
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange,
	PriceRuleErrorCodeInvalidCombinesWithForDiscountClass,
	PriceRuleErrorCodeInvalidDiscountClassForPriceRule,
}

func (e PriceRuleErrorCode) IsValid() bool {
	switch e {
	case PriceRuleErrorCodeBlank, PriceRuleErrorCodeEqualTo, PriceRuleErrorCodeGreaterThan, PriceRuleErrorCodeGreaterThanOrEqualTo, PriceRuleErrorCodeInvalid, PriceRuleErrorCodeLessThan, PriceRuleErrorCodeLessThanOrEqualTo, PriceRuleErrorCodeTaken, PriceRuleErrorCodeTooLong, PriceRuleErrorCodeTooShort, PriceRuleErrorCodeInternalError, PriceRuleErrorCodeTooManyArguments, PriceRuleErrorCodeMissingArgument, PriceRuleErrorCodeExceededMax, PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo, PriceRuleErrorCodePriceRuleAllocationLimitIsZero, PriceRuleErrorCodePriceRuleExceededMaxDiscountCode, PriceRuleErrorCodeShopExceededMaxPriceRules, PriceRuleErrorCodeEndDateBeforeStartDate, PriceRuleErrorCodePriceRulePercentageValueOutsideRange, PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent, PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection, PriceRuleErrorCodeAppliesOnNothing, PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems, PriceRuleErrorCodeBogoInvalidTargetSelection, PriceRuleErrorCodeBogoInvalidTargetType, PriceRuleErrorCodeBogoInvalidValueType, PriceRuleErrorCodeDiscountCodeDuplicate, PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected, PriceRuleErrorCodeCustomerSavedSearchDuplicate, PriceRuleErrorCodeCustomerSavedSearchExceededMax, PriceRuleErrorCodeCustomerSavedSearchInvalid, PriceRuleErrorCodeCustomerPrerequisitesExceededMax, PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection, PriceRuleErrorCodeCustomerPrerequisiteDuplicate, PriceRuleErrorCodeCustomerPrerequisitesMissing, PriceRuleErrorCodeBothCustomerAndSegmentPrerequisitesSelected, PriceRuleErrorCodeBothSavedSearchAndSegmentPrerequisitesSelected, PriceRuleErrorCodeCustomerSegmentExceededMax, PriceRuleErrorCodeCustomerSegmentInvalid, PriceRuleErrorCodeCustomerSegmentPrerequisiteDuplicate, PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants, PriceRuleErrorCodeItemPrerequisitesDuplicateCollection, PriceRuleErrorCodeItemPrerequisitesDuplicateProduct, PriceRuleErrorCodeItemPrerequisitesDuplicateVariant, PriceRuleErrorCodeItemPrerequisitesExceededMax, PriceRuleErrorCodeItemPrerequisitesInvalidCollection, PriceRuleErrorCodeItemPrerequisitesInvalidType, PriceRuleErrorCodeItemPrerequisitesInvalidProduct, PriceRuleErrorCodeItemPrerequisitesInvalidVariant, PriceRuleErrorCodeItemPrerequisitesMustBeEmpty, PriceRuleErrorCodeItemPrerequisitesMissing, PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants, PriceRuleErrorCodeItemEntitlementsDuplicateCollection, PriceRuleErrorCodeItemEntitlementsDuplicateProduct, PriceRuleErrorCodeItemEntitlementsDuplicateVariant, PriceRuleErrorCodeItemEntitlementsExceededMaxCollection, PriceRuleErrorCodeItemEntitlementsExceededMaxProduct, PriceRuleErrorCodeItemEntitlementsExceededMaxVariant, PriceRuleErrorCodeItemEntitlementInvalidType, PriceRuleErrorCodeItemEntitlementsInvalidCollection, PriceRuleErrorCodeItemEntitlementsInvalidProduct, PriceRuleErrorCodeItemEntitlementsInvalidVariant, PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeItemEntitlementsMissing, PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct, PriceRuleErrorCodeShippingEntitlementsDuplicateCountry, PriceRuleErrorCodeShippingEntitlementsExceededMax, PriceRuleErrorCodeShippingEntitlementsInvalidCountry, PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeShippingEntitlementsMissing, PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType, PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange, PriceRuleErrorCodeInvalidCombinesWithForDiscountClass, PriceRuleErrorCodeInvalidDiscountClassForPriceRule:
		return true
	}
	return false
}

func (e PriceRuleErrorCode) String() string {
	return string(e)
}

func (e *PriceRuleErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleErrorCode", str)
	}
	return nil
}

func (e PriceRuleErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The list of features that can be supported by a price rule.
type PriceRuleFeature string

const (
	// The price rule supports Buy X, Get Y (BXGY) discounts.
	PriceRuleFeatureBuyOneGetOne PriceRuleFeature = "BUY_ONE_GET_ONE"
	// The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit PriceRuleFeature = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleFeatureBulk PriceRuleFeature = "BULK"
	// The price rule targets specific customers.
	PriceRuleFeatureSpecificCustomers PriceRuleFeature = "SPECIFIC_CUSTOMERS"
	// The price rule supports discounts that require a quantity.
	PriceRuleFeatureQuantityDiscounts PriceRuleFeature = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleFeature = []PriceRuleFeature{
	PriceRuleFeatureBuyOneGetOne,
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit,
	PriceRuleFeatureBulk,
	PriceRuleFeatureSpecificCustomers,
	PriceRuleFeatureQuantityDiscounts,
}

func (e PriceRuleFeature) IsValid() bool {
	switch e {
	case PriceRuleFeatureBuyOneGetOne, PriceRuleFeatureBuyOneGetOneWithAllocationLimit, PriceRuleFeatureBulk, PriceRuleFeatureSpecificCustomers, PriceRuleFeatureQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleFeature) String() string {
	return string(e)
}

func (e *PriceRuleFeature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleFeature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleFeature", str)
	}
	return nil
}

func (e PriceRuleFeature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of page where a shareable price rule URL lands.
type PriceRuleShareableURLTargetType string

const (
	// The URL lands on a home page.
	PriceRuleShareableURLTargetTypeHome PriceRuleShareableURLTargetType = "HOME"
	// The URL lands on a product page.
	PriceRuleShareableURLTargetTypeProduct PriceRuleShareableURLTargetType = "PRODUCT"
	// The URL lands on a collection page.
	PriceRuleShareableURLTargetTypeCollection PriceRuleShareableURLTargetType = "COLLECTION"
)

var AllPriceRuleShareableURLTargetType = []PriceRuleShareableURLTargetType{
	PriceRuleShareableURLTargetTypeHome,
	PriceRuleShareableURLTargetTypeProduct,
	PriceRuleShareableURLTargetTypeCollection,
}

func (e PriceRuleShareableURLTargetType) IsValid() bool {
	switch e {
	case PriceRuleShareableURLTargetTypeHome, PriceRuleShareableURLTargetTypeProduct, PriceRuleShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e PriceRuleShareableURLTargetType) String() string {
	return string(e)
}

func (e *PriceRuleShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleShareableUrlTargetType", str)
	}
	return nil
}

func (e PriceRuleShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the PriceRule query.
type PriceRuleSortKeys string

const (
	// Sort by the `starts_at` value.
	PriceRuleSortKeysStartsAt PriceRuleSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	PriceRuleSortKeysEndsAt PriceRuleSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	PriceRuleSortKeysTitle PriceRuleSortKeys = "TITLE"
	// Sort by the `created_at` value.
	PriceRuleSortKeysCreatedAt PriceRuleSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	PriceRuleSortKeysUpdatedAt PriceRuleSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	PriceRuleSortKeysID PriceRuleSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	PriceRuleSortKeysRelevance PriceRuleSortKeys = "RELEVANCE"
)

var AllPriceRuleSortKeys = []PriceRuleSortKeys{
	PriceRuleSortKeysStartsAt,
	PriceRuleSortKeysEndsAt,
	PriceRuleSortKeysTitle,
	PriceRuleSortKeysCreatedAt,
	PriceRuleSortKeysUpdatedAt,
	PriceRuleSortKeysID,
	PriceRuleSortKeysRelevance,
}

func (e PriceRuleSortKeys) IsValid() bool {
	switch e {
	case PriceRuleSortKeysStartsAt, PriceRuleSortKeysEndsAt, PriceRuleSortKeysTitle, PriceRuleSortKeysCreatedAt, PriceRuleSortKeysUpdatedAt, PriceRuleSortKeysID, PriceRuleSortKeysRelevance:
		return true
	}
	return false
}

func (e PriceRuleSortKeys) String() string {
	return string(e)
}

func (e *PriceRuleSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleSortKeys", str)
	}
	return nil
}

func (e PriceRuleSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the price rule.
type PriceRuleStatus string

const (
	// The price rule is active.
	PriceRuleStatusActive PriceRuleStatus = "ACTIVE"
	// The price rule is expired.
	PriceRuleStatusExpired PriceRuleStatus = "EXPIRED"
	// The price rule is scheduled.
	PriceRuleStatusScheduled PriceRuleStatus = "SCHEDULED"
)

var AllPriceRuleStatus = []PriceRuleStatus{
	PriceRuleStatusActive,
	PriceRuleStatusExpired,
	PriceRuleStatusScheduled,
}

func (e PriceRuleStatus) IsValid() bool {
	switch e {
	case PriceRuleStatusActive, PriceRuleStatusExpired, PriceRuleStatusScheduled:
		return true
	}
	return false
}

func (e PriceRuleStatus) String() string {
	return string(e)
}

func (e *PriceRuleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleStatus", str)
	}
	return nil
}

func (e PriceRuleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of lines (line_item or shipping_line) to which the price rule applies.
type PriceRuleTarget string

const (
	// The price rule applies to line items.
	PriceRuleTargetLineItem PriceRuleTarget = "LINE_ITEM"
	// The price rule applies to shipping lines.
	PriceRuleTargetShippingLine PriceRuleTarget = "SHIPPING_LINE"
)

var AllPriceRuleTarget = []PriceRuleTarget{
	PriceRuleTargetLineItem,
	PriceRuleTargetShippingLine,
}

func (e PriceRuleTarget) IsValid() bool {
	switch e {
	case PriceRuleTargetLineItem, PriceRuleTargetShippingLine:
		return true
	}
	return false
}

func (e PriceRuleTarget) String() string {
	return string(e)
}

func (e *PriceRuleTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTarget", str)
	}
	return nil
}

func (e PriceRuleTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The list of features that can be supported by a price rule.
type PriceRuleTrait string

const (
	// The price rule supports Buy X, Get Y (BXGY) discounts.
	PriceRuleTraitBuyOneGetOne PriceRuleTrait = "BUY_ONE_GET_ONE"
	// The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
	PriceRuleTraitBuyOneGetOneWithAllocationLimit PriceRuleTrait = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleTraitBulk PriceRuleTrait = "BULK"
	// The price rule targets specific customers.
	PriceRuleTraitSpecificCustomers PriceRuleTrait = "SPECIFIC_CUSTOMERS"
	// The price rule supports discounts that require a quantity.
	PriceRuleTraitQuantityDiscounts PriceRuleTrait = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleTrait = []PriceRuleTrait{
	PriceRuleTraitBuyOneGetOne,
	PriceRuleTraitBuyOneGetOneWithAllocationLimit,
	PriceRuleTraitBulk,
	PriceRuleTraitSpecificCustomers,
	PriceRuleTraitQuantityDiscounts,
}

func (e PriceRuleTrait) IsValid() bool {
	switch e {
	case PriceRuleTraitBuyOneGetOne, PriceRuleTraitBuyOneGetOneWithAllocationLimit, PriceRuleTraitBulk, PriceRuleTraitSpecificCustomers, PriceRuleTraitQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleTrait) String() string {
	return string(e)
}

func (e *PriceRuleTrait) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTrait(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTrait", str)
	}
	return nil
}

func (e PriceRuleTrait) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Supported private metafield value types.
type PrivateMetafieldValueType string

const (
	// A string metafield.
	PrivateMetafieldValueTypeString PrivateMetafieldValueType = "STRING"
	// An integer metafield.
	PrivateMetafieldValueTypeInteger PrivateMetafieldValueType = "INTEGER"
	// A JSON string metafield.
	PrivateMetafieldValueTypeJSONString PrivateMetafieldValueType = "JSON_STRING"
)

var AllPrivateMetafieldValueType = []PrivateMetafieldValueType{
	PrivateMetafieldValueTypeString,
	PrivateMetafieldValueTypeInteger,
	PrivateMetafieldValueTypeJSONString,
}

func (e PrivateMetafieldValueType) IsValid() bool {
	switch e {
	case PrivateMetafieldValueTypeString, PrivateMetafieldValueTypeInteger, PrivateMetafieldValueTypeJSONString:
		return true
	}
	return false
}

func (e PrivateMetafieldValueType) String() string {
	return string(e)
}

func (e *PrivateMetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrivateMetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrivateMetafieldValueType", str)
	}
	return nil
}

func (e PrivateMetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductChangeStatusUserError`.
type ProductChangeStatusUserErrorCode string

const (
	// Product could not be found.
	ProductChangeStatusUserErrorCodeProductNotFound ProductChangeStatusUserErrorCode = "PRODUCT_NOT_FOUND"
)

var AllProductChangeStatusUserErrorCode = []ProductChangeStatusUserErrorCode{
	ProductChangeStatusUserErrorCodeProductNotFound,
}

func (e ProductChangeStatusUserErrorCode) IsValid() bool {
	switch e {
	case ProductChangeStatusUserErrorCodeProductNotFound:
		return true
	}
	return false
}

func (e ProductChangeStatusUserErrorCode) String() string {
	return string(e)
}

func (e *ProductChangeStatusUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductChangeStatusUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductChangeStatusUserErrorCode", str)
	}
	return nil
}

func (e ProductChangeStatusUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductCollection query.
type ProductCollectionSortKeys string

const (
	// Sort by the `title` value.
	ProductCollectionSortKeysTitle ProductCollectionSortKeys = "TITLE"
	// Sort by the `price` value.
	ProductCollectionSortKeysPrice ProductCollectionSortKeys = "PRICE"
	// Sort by the `best-selling` value.
	ProductCollectionSortKeysBestSelling ProductCollectionSortKeys = "BEST_SELLING"
	// Sort by the `created` value.
	ProductCollectionSortKeysCreated ProductCollectionSortKeys = "CREATED"
	// Sort by the `id` value.
	ProductCollectionSortKeysID ProductCollectionSortKeys = "ID"
	// Sort by the `manual` value.
	ProductCollectionSortKeysManual ProductCollectionSortKeys = "MANUAL"
	// Sort by the `collection-default` value.
	ProductCollectionSortKeysCollectionDefault ProductCollectionSortKeys = "COLLECTION_DEFAULT"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	ProductCollectionSortKeysRelevance ProductCollectionSortKeys = "RELEVANCE"
)

var AllProductCollectionSortKeys = []ProductCollectionSortKeys{
	ProductCollectionSortKeysTitle,
	ProductCollectionSortKeysPrice,
	ProductCollectionSortKeysBestSelling,
	ProductCollectionSortKeysCreated,
	ProductCollectionSortKeysID,
	ProductCollectionSortKeysManual,
	ProductCollectionSortKeysCollectionDefault,
	ProductCollectionSortKeysRelevance,
}

func (e ProductCollectionSortKeys) IsValid() bool {
	switch e {
	case ProductCollectionSortKeysTitle, ProductCollectionSortKeysPrice, ProductCollectionSortKeysBestSelling, ProductCollectionSortKeysCreated, ProductCollectionSortKeysID, ProductCollectionSortKeysManual, ProductCollectionSortKeysCollectionDefault, ProductCollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductCollectionSortKeys) String() string {
	return string(e)
}

func (e *ProductCollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductCollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductCollectionSortKeys", str)
	}
	return nil
}

func (e ProductCollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductDeleteUserError`.
type ProductDeleteUserErrorCode string

const (
	// Product does not exist.
	ProductDeleteUserErrorCodeProductDoesNotExist ProductDeleteUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Something went wrong, please try again.
	ProductDeleteUserErrorCodeGenericError ProductDeleteUserErrorCode = "GENERIC_ERROR"
)

var AllProductDeleteUserErrorCode = []ProductDeleteUserErrorCode{
	ProductDeleteUserErrorCodeProductDoesNotExist,
	ProductDeleteUserErrorCodeGenericError,
}

func (e ProductDeleteUserErrorCode) IsValid() bool {
	switch e {
	case ProductDeleteUserErrorCodeProductDoesNotExist, ProductDeleteUserErrorCodeGenericError:
		return true
	}
	return false
}

func (e ProductDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *ProductDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductDeleteUserErrorCode", str)
	}
	return nil
}

func (e ProductDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductDuplicateUserError`.
type ProductDuplicateUserErrorCode string

const (
	// The product does not exist.
	ProductDuplicateUserErrorCodeProductDoesNotExist ProductDuplicateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Cannot duplicate a product which has no variants.
	ProductDuplicateUserErrorCodeEmptyVariant ProductDuplicateUserErrorCode = "EMPTY_VARIANT"
	// The title cannot be empty.
	ProductDuplicateUserErrorCodeEmptyTitle ProductDuplicateUserErrorCode = "EMPTY_TITLE"
	// Something went wrong, please try again.
	ProductDuplicateUserErrorCodeGenericError ProductDuplicateUserErrorCode = "GENERIC_ERROR"
	// Something went wrong when saving the product, please try again.
	ProductDuplicateUserErrorCodeFailedToSave ProductDuplicateUserErrorCode = "FAILED_TO_SAVE"
)

var AllProductDuplicateUserErrorCode = []ProductDuplicateUserErrorCode{
	ProductDuplicateUserErrorCodeProductDoesNotExist,
	ProductDuplicateUserErrorCodeEmptyVariant,
	ProductDuplicateUserErrorCodeEmptyTitle,
	ProductDuplicateUserErrorCodeGenericError,
	ProductDuplicateUserErrorCodeFailedToSave,
}

func (e ProductDuplicateUserErrorCode) IsValid() bool {
	switch e {
	case ProductDuplicateUserErrorCodeProductDoesNotExist, ProductDuplicateUserErrorCodeEmptyVariant, ProductDuplicateUserErrorCodeEmptyTitle, ProductDuplicateUserErrorCodeGenericError, ProductDuplicateUserErrorCodeFailedToSave:
		return true
	}
	return false
}

func (e ProductDuplicateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductDuplicateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductDuplicateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductDuplicateUserErrorCode", str)
	}
	return nil
}

func (e ProductDuplicateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductFeedCreateUserError`.
type ProductFeedCreateUserErrorCode string

const (
	// The input value is invalid.
	ProductFeedCreateUserErrorCodeInvalid ProductFeedCreateUserErrorCode = "INVALID"
	// The input value is already taken.
	ProductFeedCreateUserErrorCodeTaken ProductFeedCreateUserErrorCode = "TAKEN"
)

var AllProductFeedCreateUserErrorCode = []ProductFeedCreateUserErrorCode{
	ProductFeedCreateUserErrorCodeInvalid,
	ProductFeedCreateUserErrorCodeTaken,
}

func (e ProductFeedCreateUserErrorCode) IsValid() bool {
	switch e {
	case ProductFeedCreateUserErrorCodeInvalid, ProductFeedCreateUserErrorCodeTaken:
		return true
	}
	return false
}

func (e ProductFeedCreateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductFeedCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductFeedCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductFeedCreateUserErrorCode", str)
	}
	return nil
}

func (e ProductFeedCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductFeedDeleteUserError`.
type ProductFeedDeleteUserErrorCode string

const (
	// The input value is invalid.
	ProductFeedDeleteUserErrorCodeInvalid ProductFeedDeleteUserErrorCode = "INVALID"
)

var AllProductFeedDeleteUserErrorCode = []ProductFeedDeleteUserErrorCode{
	ProductFeedDeleteUserErrorCodeInvalid,
}

func (e ProductFeedDeleteUserErrorCode) IsValid() bool {
	switch e {
	case ProductFeedDeleteUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e ProductFeedDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *ProductFeedDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductFeedDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductFeedDeleteUserErrorCode", str)
	}
	return nil
}

func (e ProductFeedDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the status of product feed.
type ProductFeedStatus string

const (
	// The product feed is active.
	ProductFeedStatusActive ProductFeedStatus = "ACTIVE"
	// The product feed is inactive.
	ProductFeedStatusInactive ProductFeedStatus = "INACTIVE"
)

var AllProductFeedStatus = []ProductFeedStatus{
	ProductFeedStatusActive,
	ProductFeedStatusInactive,
}

func (e ProductFeedStatus) IsValid() bool {
	switch e {
	case ProductFeedStatusActive, ProductFeedStatusInactive:
		return true
	}
	return false
}

func (e ProductFeedStatus) String() string {
	return string(e)
}

func (e *ProductFeedStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductFeedStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductFeedStatus", str)
	}
	return nil
}

func (e ProductFeedStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductFullSyncUserError`.
type ProductFullSyncUserErrorCode string

const (
	// The input value is invalid.
	ProductFullSyncUserErrorCodeInvalid ProductFullSyncUserErrorCode = "INVALID"
)

var AllProductFullSyncUserErrorCode = []ProductFullSyncUserErrorCode{
	ProductFullSyncUserErrorCodeInvalid,
}

func (e ProductFullSyncUserErrorCode) IsValid() bool {
	switch e {
	case ProductFullSyncUserErrorCodeInvalid:
		return true
	}
	return false
}

func (e ProductFullSyncUserErrorCode) String() string {
	return string(e)
}

func (e *ProductFullSyncUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductFullSyncUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductFullSyncUserErrorCode", str)
	}
	return nil
}

func (e ProductFullSyncUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductImage query.
type ProductImageSortKeys string

const (
	// Sort by the `created_at` value.
	ProductImageSortKeysCreatedAt ProductImageSortKeys = "CREATED_AT"
	// Sort by the `position` value.
	ProductImageSortKeysPosition ProductImageSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductImageSortKeysID ProductImageSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	ProductImageSortKeysRelevance ProductImageSortKeys = "RELEVANCE"
)

var AllProductImageSortKeys = []ProductImageSortKeys{
	ProductImageSortKeysCreatedAt,
	ProductImageSortKeysPosition,
	ProductImageSortKeysID,
	ProductImageSortKeysRelevance,
}

func (e ProductImageSortKeys) IsValid() bool {
	switch e {
	case ProductImageSortKeysCreatedAt, ProductImageSortKeysPosition, ProductImageSortKeysID, ProductImageSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductImageSortKeys) String() string {
	return string(e)
}

func (e *ProductImageSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductImageSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductImageSortKeys", str)
	}
	return nil
}

func (e ProductImageSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductMedia query.
type ProductMediaSortKeys string

const (
	// Sort by the `position` value.
	ProductMediaSortKeysPosition ProductMediaSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductMediaSortKeysID ProductMediaSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	ProductMediaSortKeysRelevance ProductMediaSortKeys = "RELEVANCE"
)

var AllProductMediaSortKeys = []ProductMediaSortKeys{
	ProductMediaSortKeysPosition,
	ProductMediaSortKeysID,
	ProductMediaSortKeysRelevance,
}

func (e ProductMediaSortKeys) IsValid() bool {
	switch e {
	case ProductMediaSortKeysPosition, ProductMediaSortKeysID, ProductMediaSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductMediaSortKeys) String() string {
	return string(e)
}

func (e *ProductMediaSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductMediaSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductMediaSortKeys", str)
	}
	return nil
}

func (e ProductMediaSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Product query.
type ProductSortKeys string

const (
	// Sort by the `title` value.
	ProductSortKeysTitle ProductSortKeys = "TITLE"
	// Sort by the `product_type` value.
	ProductSortKeysProductType ProductSortKeys = "PRODUCT_TYPE"
	// Sort by the `vendor` value.
	ProductSortKeysVendor ProductSortKeys = "VENDOR"
	// Sort by the `inventory_total` value.
	ProductSortKeysInventoryTotal ProductSortKeys = "INVENTORY_TOTAL"
	// Sort by the `updated_at` value.
	ProductSortKeysUpdatedAt ProductSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	ProductSortKeysCreatedAt ProductSortKeys = "CREATED_AT"
	// Sort by the `published_at` value.
	ProductSortKeysPublishedAt ProductSortKeys = "PUBLISHED_AT"
	// Sort by the `id` value.
	ProductSortKeysID ProductSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	// Pagination isn't supported when using this sort key.
	ProductSortKeysRelevance ProductSortKeys = "RELEVANCE"
)

var AllProductSortKeys = []ProductSortKeys{
	ProductSortKeysTitle,
	ProductSortKeysProductType,
	ProductSortKeysVendor,
	ProductSortKeysInventoryTotal,
	ProductSortKeysUpdatedAt,
	ProductSortKeysCreatedAt,
	ProductSortKeysPublishedAt,
	ProductSortKeysID,
	ProductSortKeysRelevance,
}

func (e ProductSortKeys) IsValid() bool {
	switch e {
	case ProductSortKeysTitle, ProductSortKeysProductType, ProductSortKeysVendor, ProductSortKeysInventoryTotal, ProductSortKeysUpdatedAt, ProductSortKeysCreatedAt, ProductSortKeysPublishedAt, ProductSortKeysID, ProductSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductSortKeys) String() string {
	return string(e)
}

func (e *ProductSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSortKeys", str)
	}
	return nil
}

func (e ProductSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible product statuses.
type ProductStatus string

const (
	// The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active.
	ProductStatusActive ProductStatus = "ACTIVE"
	// The product is no longer being sold and isn't available to customers on sales channels and apps.
	ProductStatusArchived ProductStatus = "ARCHIVED"
	// The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
	ProductStatusDraft ProductStatus = "DRAFT"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusArchived,
	ProductStatusDraft,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusArchived, ProductStatusDraft:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the method of inventory tracking for a product variant.
type ProductVariantInventoryManagement string

const (
	// This product variant's inventory is tracked by Shopify. Inventory can be tracked by store location(s) and/or third-party fulfillment service(s).
	ProductVariantInventoryManagementShopify ProductVariantInventoryManagement = "SHOPIFY"
	// This product variant's inventory is not tracked.
	ProductVariantInventoryManagementNotManaged ProductVariantInventoryManagement = "NOT_MANAGED"
	// This product variant's inventory is tracked by a third-party fulfillment service.
	ProductVariantInventoryManagementFulfillmentService ProductVariantInventoryManagement = "FULFILLMENT_SERVICE"
)

var AllProductVariantInventoryManagement = []ProductVariantInventoryManagement{
	ProductVariantInventoryManagementShopify,
	ProductVariantInventoryManagementNotManaged,
	ProductVariantInventoryManagementFulfillmentService,
}

func (e ProductVariantInventoryManagement) IsValid() bool {
	switch e {
	case ProductVariantInventoryManagementShopify, ProductVariantInventoryManagementNotManaged, ProductVariantInventoryManagementFulfillmentService:
		return true
	}
	return false
}

func (e ProductVariantInventoryManagement) String() string {
	return string(e)
}

func (e *ProductVariantInventoryManagement) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryManagement(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryManagement", str)
	}
	return nil
}

func (e ProductVariantInventoryManagement) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the inventory policy of a product variant once it is out of stock.
type ProductVariantInventoryPolicy string

const (
	// Customers can't buy this product variant after it's out of stock.
	ProductVariantInventoryPolicyDeny ProductVariantInventoryPolicy = "DENY"
	// Customers can buy this product variant after it's out of stock.
	ProductVariantInventoryPolicyContinue ProductVariantInventoryPolicy = "CONTINUE"
)

var AllProductVariantInventoryPolicy = []ProductVariantInventoryPolicy{
	ProductVariantInventoryPolicyDeny,
	ProductVariantInventoryPolicyContinue,
}

func (e ProductVariantInventoryPolicy) IsValid() bool {
	switch e {
	case ProductVariantInventoryPolicyDeny, ProductVariantInventoryPolicyContinue:
		return true
	}
	return false
}

func (e ProductVariantInventoryPolicy) String() string {
	return string(e)
}

func (e *ProductVariantInventoryPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryPolicy", str)
	}
	return nil
}

func (e ProductVariantInventoryPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantRelationshipBulkUpdateUserError`.
type ProductVariantRelationshipBulkUpdateUserErrorCode string

const (
	// A parent product variant ID or product ID must be provided.
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentRequired ProductVariantRelationshipBulkUpdateUserErrorCode = "PARENT_REQUIRED"
	// Unable to create parent product variant.
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToCreate ProductVariantRelationshipBulkUpdateUserErrorCode = "FAILED_TO_CREATE"
	// The product variants were not found.
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotFound ProductVariantRelationshipBulkUpdateUserErrorCode = "PRODUCT_VARIANTS_NOT_FOUND"
	// A parent product variant cannot contain itself as a component.
	ProductVariantRelationshipBulkUpdateUserErrorCodeCircularReference ProductVariantRelationshipBulkUpdateUserErrorCode = "CIRCULAR_REFERENCE"
	// Nested parent product variants aren't supported.
	ProductVariantRelationshipBulkUpdateUserErrorCodeNestedParentProductVariant ProductVariantRelationshipBulkUpdateUserErrorCode = "NESTED_PARENT_PRODUCT_VARIANT"
	// Product variant relationships must have a quantity greater than 0.
	ProductVariantRelationshipBulkUpdateUserErrorCodeInvalidQuantity ProductVariantRelationshipBulkUpdateUserErrorCode = "INVALID_QUANTITY"
	// A parent product variant must not contain duplicate product variant relationships.
	ProductVariantRelationshipBulkUpdateUserErrorCodeDuplicateProductVariantRelationship ProductVariantRelationshipBulkUpdateUserErrorCode = "DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP"
	// Exceeded the maximum allowable product variant relationships in a parent product variant.
	ProductVariantRelationshipBulkUpdateUserErrorCodeExceededProductVariantRelationshipLimit ProductVariantRelationshipBulkUpdateUserErrorCode = "EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT"
	// A Core type relationship cannot be added to a composite product variant with SFN type relationships.
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantRelationshipTypeConflict ProductVariantRelationshipBulkUpdateUserErrorCode = "PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT"
	// Unexpected error.
	ProductVariantRelationshipBulkUpdateUserErrorCodeUnexpectedError ProductVariantRelationshipBulkUpdateUserErrorCode = "UNEXPECTED_ERROR"
	// Unable to remove product variant relationships.
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToRemove ProductVariantRelationshipBulkUpdateUserErrorCode = "FAILED_TO_REMOVE"
	// The product variant relationships to remove must be specified if all the parent product variant's components aren't being removed.
	ProductVariantRelationshipBulkUpdateUserErrorCodeMustSpecifyComponents ProductVariantRelationshipBulkUpdateUserErrorCode = "MUST_SPECIFY_COMPONENTS"
	// Unable to update product variant relationships.
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdate ProductVariantRelationshipBulkUpdateUserErrorCode = "FAILED_TO_UPDATE"
	// Unable to update parent product variant price.
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdateParentProductVariantPrice ProductVariantRelationshipBulkUpdateUserErrorCode = "FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE"
	// A price must be provided for a parent product variant if the price calucation is set to fixed.
	ProductVariantRelationshipBulkUpdateUserErrorCodeUpdateParentVariantPriceRequired ProductVariantRelationshipBulkUpdateUserErrorCode = "UPDATE_PARENT_VARIANT_PRICE_REQUIRED"
	// Some of the provided product variants are not components of the specified parent product variant.
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotComponents ProductVariantRelationshipBulkUpdateUserErrorCode = "PRODUCT_VARIANTS_NOT_COMPONENTS"
	// The products for these product variants are already owned by another App.
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductExpanderAppOwnershipAlreadyExists ProductVariantRelationshipBulkUpdateUserErrorCode = "PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS"
	// Multipack bundles are not supported.
	ProductVariantRelationshipBulkUpdateUserErrorCodeUnsupportedMultipackRelationship ProductVariantRelationshipBulkUpdateUserErrorCode = "UNSUPPORTED_MULTIPACK_RELATIONSHIP"
	// Gift cards cannot be parent product variants.
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotBeGiftCard ProductVariantRelationshipBulkUpdateUserErrorCode = "PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD"
	// Parent product variants cannot require a selling plan.
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotRequireSellingPlan ProductVariantRelationshipBulkUpdateUserErrorCode = "PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN"
)

var AllProductVariantRelationshipBulkUpdateUserErrorCode = []ProductVariantRelationshipBulkUpdateUserErrorCode{
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentRequired,
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToCreate,
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotFound,
	ProductVariantRelationshipBulkUpdateUserErrorCodeCircularReference,
	ProductVariantRelationshipBulkUpdateUserErrorCodeNestedParentProductVariant,
	ProductVariantRelationshipBulkUpdateUserErrorCodeInvalidQuantity,
	ProductVariantRelationshipBulkUpdateUserErrorCodeDuplicateProductVariantRelationship,
	ProductVariantRelationshipBulkUpdateUserErrorCodeExceededProductVariantRelationshipLimit,
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantRelationshipTypeConflict,
	ProductVariantRelationshipBulkUpdateUserErrorCodeUnexpectedError,
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToRemove,
	ProductVariantRelationshipBulkUpdateUserErrorCodeMustSpecifyComponents,
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdate,
	ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdateParentProductVariantPrice,
	ProductVariantRelationshipBulkUpdateUserErrorCodeUpdateParentVariantPriceRequired,
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotComponents,
	ProductVariantRelationshipBulkUpdateUserErrorCodeProductExpanderAppOwnershipAlreadyExists,
	ProductVariantRelationshipBulkUpdateUserErrorCodeUnsupportedMultipackRelationship,
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotBeGiftCard,
	ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotRequireSellingPlan,
}

func (e ProductVariantRelationshipBulkUpdateUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantRelationshipBulkUpdateUserErrorCodeParentRequired, ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToCreate, ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotFound, ProductVariantRelationshipBulkUpdateUserErrorCodeCircularReference, ProductVariantRelationshipBulkUpdateUserErrorCodeNestedParentProductVariant, ProductVariantRelationshipBulkUpdateUserErrorCodeInvalidQuantity, ProductVariantRelationshipBulkUpdateUserErrorCodeDuplicateProductVariantRelationship, ProductVariantRelationshipBulkUpdateUserErrorCodeExceededProductVariantRelationshipLimit, ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantRelationshipTypeConflict, ProductVariantRelationshipBulkUpdateUserErrorCodeUnexpectedError, ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToRemove, ProductVariantRelationshipBulkUpdateUserErrorCodeMustSpecifyComponents, ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdate, ProductVariantRelationshipBulkUpdateUserErrorCodeFailedToUpdateParentProductVariantPrice, ProductVariantRelationshipBulkUpdateUserErrorCodeUpdateParentVariantPriceRequired, ProductVariantRelationshipBulkUpdateUserErrorCodeProductVariantsNotComponents, ProductVariantRelationshipBulkUpdateUserErrorCodeProductExpanderAppOwnershipAlreadyExists, ProductVariantRelationshipBulkUpdateUserErrorCodeUnsupportedMultipackRelationship, ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotBeGiftCard, ProductVariantRelationshipBulkUpdateUserErrorCodeParentProductVariantCannotRequireSellingPlan:
		return true
	}
	return false
}

func (e ProductVariantRelationshipBulkUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantRelationshipBulkUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantRelationshipBulkUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantRelationshipBulkUpdateUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantRelationshipBulkUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductVariant query.
type ProductVariantSortKeys string

const (
	// Sort by the `title` value.
	ProductVariantSortKeysTitle ProductVariantSortKeys = "TITLE"
	// Sort by the `name` value.
	ProductVariantSortKeysName ProductVariantSortKeys = "NAME"
	// Sort by the `sku` value.
	ProductVariantSortKeysSku ProductVariantSortKeys = "SKU"
	// Sort by the `inventory_quantity` value.
	ProductVariantSortKeysInventoryQuantity ProductVariantSortKeys = "INVENTORY_QUANTITY"
	// Sort by the `inventory_management` value.
	ProductVariantSortKeysInventoryManagement ProductVariantSortKeys = "INVENTORY_MANAGEMENT"
	// Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
	// Don't use this sort key when no `location_id` in query is specified.
	//
	ProductVariantSortKeysInventoryLevelsAvailable ProductVariantSortKeys = "INVENTORY_LEVELS_AVAILABLE"
	// Sort by the `inventory_policy` value.
	ProductVariantSortKeysInventoryPolicy ProductVariantSortKeys = "INVENTORY_POLICY"
	// Sort by the `full_title` value.
	ProductVariantSortKeysFullTitle ProductVariantSortKeys = "FULL_TITLE"
	// Sort by the `popular` value.
	ProductVariantSortKeysPopular ProductVariantSortKeys = "POPULAR"
	// Sort by the `position` value.
	ProductVariantSortKeysPosition ProductVariantSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductVariantSortKeysID ProductVariantSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	ProductVariantSortKeysRelevance ProductVariantSortKeys = "RELEVANCE"
)

var AllProductVariantSortKeys = []ProductVariantSortKeys{
	ProductVariantSortKeysTitle,
	ProductVariantSortKeysName,
	ProductVariantSortKeysSku,
	ProductVariantSortKeysInventoryQuantity,
	ProductVariantSortKeysInventoryManagement,
	ProductVariantSortKeysInventoryLevelsAvailable,
	ProductVariantSortKeysInventoryPolicy,
	ProductVariantSortKeysFullTitle,
	ProductVariantSortKeysPopular,
	ProductVariantSortKeysPosition,
	ProductVariantSortKeysID,
	ProductVariantSortKeysRelevance,
}

func (e ProductVariantSortKeys) IsValid() bool {
	switch e {
	case ProductVariantSortKeysTitle, ProductVariantSortKeysName, ProductVariantSortKeysSku, ProductVariantSortKeysInventoryQuantity, ProductVariantSortKeysInventoryManagement, ProductVariantSortKeysInventoryLevelsAvailable, ProductVariantSortKeysInventoryPolicy, ProductVariantSortKeysFullTitle, ProductVariantSortKeysPopular, ProductVariantSortKeysPosition, ProductVariantSortKeysID, ProductVariantSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductVariantSortKeys) String() string {
	return string(e)
}

func (e *ProductVariantSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantSortKeys", str)
	}
	return nil
}

func (e ProductVariantSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
type ProductVariantsBulkCreateUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist ProductVariantsBulkCreateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// On create, this key cannot be used.
	ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate ProductVariantsBulkCreateUserErrorCode = "NO_KEY_ON_CREATE"
	// Variant already exists.
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists ProductVariantsBulkCreateUserErrorCode = "VARIANT_ALREADY_EXISTS"
	// Variant price must be greater than or equal to zero.
	ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo ProductVariantsBulkCreateUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Variant options are not enough.
	ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues ProductVariantsBulkCreateUserErrorCode = "NEED_TO_ADD_OPTION_VALUES"
	// Variant options are more than the product options.
	ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions ProductVariantsBulkCreateUserErrorCode = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
	// Inventory locations cannot exceed the allowed resource limit or 10.
	ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations ProductVariantsBulkCreateUserErrorCode = "TOO_MANY_INVENTORY_LOCATIONS"
	// You reached the limit of available SKUs in your current plan.
	ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation ProductVariantsBulkCreateUserErrorCode = "SUBSCRIPTION_VIOLATION"
	// Variant options already exist. Please change the variant option(s).
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue ProductVariantsBulkCreateUserErrorCode = "VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE"
	// Quantity could not be set. The location was not found.
	ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound ProductVariantsBulkCreateUserErrorCode = "TRACKED_VARIANT_LOCATION_NOT_FOUND"
	// Input must be for this product.
	ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct ProductVariantsBulkCreateUserErrorCode = "MUST_BE_FOR_THIS_PRODUCT"
	// Input is not defined for this shop.
	ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop ProductVariantsBulkCreateUserErrorCode = "NOT_DEFINED_FOR_SHOP"
	// Invalid input detected.
	ProductVariantsBulkCreateUserErrorCodeInvalid ProductVariantsBulkCreateUserErrorCode = "INVALID"
	// Price cannot take a negative value.
	ProductVariantsBulkCreateUserErrorCodeNegativePriceValue ProductVariantsBulkCreateUserErrorCode = "NEGATIVE_PRICE_VALUE"
)

var AllProductVariantsBulkCreateUserErrorCode = []ProductVariantsBulkCreateUserErrorCode{
	ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate,
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists,
	ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo,
	ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues,
	ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions,
	ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations,
	ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation,
	ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue,
	ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound,
	ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct,
	ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop,
	ProductVariantsBulkCreateUserErrorCodeInvalid,
	ProductVariantsBulkCreateUserErrorCodeNegativePriceValue,
}

func (e ProductVariantsBulkCreateUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkCreateUserErrorCodeProductDoesNotExist, ProductVariantsBulkCreateUserErrorCodeNoKeyOnCreate, ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExists, ProductVariantsBulkCreateUserErrorCodeGreaterThanOrEqualTo, ProductVariantsBulkCreateUserErrorCodeNeedToAddOptionValues, ProductVariantsBulkCreateUserErrorCodeOptionValuesForNumberOfUnknownOptions, ProductVariantsBulkCreateUserErrorCodeTooManyInventoryLocations, ProductVariantsBulkCreateUserErrorCodeSubscriptionViolation, ProductVariantsBulkCreateUserErrorCodeVariantAlreadyExistsChangeOptionValue, ProductVariantsBulkCreateUserErrorCodeTrackedVariantLocationNotFound, ProductVariantsBulkCreateUserErrorCodeMustBeForThisProduct, ProductVariantsBulkCreateUserErrorCodeNotDefinedForShop, ProductVariantsBulkCreateUserErrorCodeInvalid, ProductVariantsBulkCreateUserErrorCodeNegativePriceValue:
		return true
	}
	return false
}

func (e ProductVariantsBulkCreateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkCreateUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
type ProductVariantsBulkDeleteUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist ProductVariantsBulkDeleteUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Cannot delete default variant.
	ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant ProductVariantsBulkDeleteUserErrorCode = "CANNOT_DELETE_LAST_VARIANT"
	// The variant does not exist.
	ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct ProductVariantsBulkDeleteUserErrorCode = "AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT"
)

var AllProductVariantsBulkDeleteUserErrorCode = []ProductVariantsBulkDeleteUserErrorCode{
	ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant,
	ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct,
}

func (e ProductVariantsBulkDeleteUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkDeleteUserErrorCodeProductDoesNotExist, ProductVariantsBulkDeleteUserErrorCodeCannotDeleteLastVariant, ProductVariantsBulkDeleteUserErrorCodeAtLeastOneVariantDoesNotBelongToTheProduct:
		return true
	}
	return false
}

func (e ProductVariantsBulkDeleteUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkDeleteUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkDeleteUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkDeleteUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkDeleteUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
type ProductVariantsBulkReorderUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist ProductVariantsBulkReorderUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Product variant does not exist.
	ProductVariantsBulkReorderUserErrorCodeMissingVariant ProductVariantsBulkReorderUserErrorCode = "MISSING_VARIANT"
	// Product variant position cannot be zero or negative number.
	ProductVariantsBulkReorderUserErrorCodeInvalidPosition ProductVariantsBulkReorderUserErrorCode = "INVALID_POSITION"
	// Product variant IDs must be unique.
	ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID ProductVariantsBulkReorderUserErrorCode = "DUPLICATED_VARIANT_ID"
)

var AllProductVariantsBulkReorderUserErrorCode = []ProductVariantsBulkReorderUserErrorCode{
	ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkReorderUserErrorCodeMissingVariant,
	ProductVariantsBulkReorderUserErrorCodeInvalidPosition,
	ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID,
}

func (e ProductVariantsBulkReorderUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkReorderUserErrorCodeProductDoesNotExist, ProductVariantsBulkReorderUserErrorCodeMissingVariant, ProductVariantsBulkReorderUserErrorCodeInvalidPosition, ProductVariantsBulkReorderUserErrorCodeDuplicatedVariantID:
		return true
	}
	return false
}

func (e ProductVariantsBulkReorderUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkReorderUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkReorderUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkReorderUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkReorderUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
type ProductVariantsBulkUpdateUserErrorCode string

const (
	// Product does not exist.
	ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Product variant is missing ID attribute.
	ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_VARIANT_ID_MISSING"
	// Product variant does not exist.
	ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist ProductVariantsBulkUpdateUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Inventory quantities cannot be updated with variants API.
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate ProductVariantsBulkUpdateUserErrorCode = "NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE"
	// The variant already exists.
	ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists ProductVariantsBulkUpdateUserErrorCode = "VARIANT_ALREADY_EXISTS"
	// The price of the variant must be greater than or equal to zero.
	ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo ProductVariantsBulkUpdateUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Variant options are not enough.
	ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues ProductVariantsBulkUpdateUserErrorCode = "NEED_TO_ADD_OPTION_VALUES"
	// Variant options are more than the product options.
	ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions ProductVariantsBulkUpdateUserErrorCode = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
	// You reached the limit of available SKUs in your current plan.
	ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation ProductVariantsBulkUpdateUserErrorCode = "SUBSCRIPTION_VIOLATION"
	// Inventory quantities cannot be provided during update.
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate ProductVariantsBulkUpdateUserErrorCode = "NO_INVENTORY_QUANTITES_DURING_UPDATE"
	// Price cannot take a negative value.
	ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue ProductVariantsBulkUpdateUserErrorCode = "NEGATIVE_PRICE_VALUE"
)

var AllProductVariantsBulkUpdateUserErrorCode = []ProductVariantsBulkUpdateUserErrorCode{
	ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist,
	ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing,
	ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist,
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate,
	ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists,
	ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo,
	ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues,
	ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions,
	ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation,
	ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate,
	ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue,
}

func (e ProductVariantsBulkUpdateUserErrorCode) IsValid() bool {
	switch e {
	case ProductVariantsBulkUpdateUserErrorCodeProductDoesNotExist, ProductVariantsBulkUpdateUserErrorCodeProductVariantIDMissing, ProductVariantsBulkUpdateUserErrorCodeProductVariantDoesNotExist, ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitiesOnVariantsUpdate, ProductVariantsBulkUpdateUserErrorCodeVariantAlreadyExists, ProductVariantsBulkUpdateUserErrorCodeGreaterThanOrEqualTo, ProductVariantsBulkUpdateUserErrorCodeNeedToAddOptionValues, ProductVariantsBulkUpdateUserErrorCodeOptionValuesForNumberOfUnknownOptions, ProductVariantsBulkUpdateUserErrorCodeSubscriptionViolation, ProductVariantsBulkUpdateUserErrorCodeNoInventoryQuantitesDuringUpdate, ProductVariantsBulkUpdateUserErrorCodeNegativePriceValue:
		return true
	}
	return false
}

func (e ProductVariantsBulkUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *ProductVariantsBulkUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantsBulkUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantsBulkUpdateUserErrorCode", str)
	}
	return nil
}

func (e ProductVariantsBulkUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProfileItem query.
type ProfileItemSortKeys string

const (
	// Sort by the `title` value.
	ProfileItemSortKeysTitle ProfileItemSortKeys = "TITLE"
	// Sort by the `product_type` value.
	ProfileItemSortKeysProductType ProfileItemSortKeys = "PRODUCT_TYPE"
	// Sort by the `vendor` value.
	ProfileItemSortKeysVendor ProfileItemSortKeys = "VENDOR"
	// Sort by the `inventory_total` value.
	ProfileItemSortKeysInventoryTotal ProfileItemSortKeys = "INVENTORY_TOTAL"
	// Sort by the `updated_at` value.
	ProfileItemSortKeysUpdatedAt ProfileItemSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	ProfileItemSortKeysCreatedAt ProfileItemSortKeys = "CREATED_AT"
	// Sort by the `published_at` value.
	ProfileItemSortKeysPublishedAt ProfileItemSortKeys = "PUBLISHED_AT"
	// Sort by the `id` value.
	ProfileItemSortKeysID ProfileItemSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	ProfileItemSortKeysRelevance ProfileItemSortKeys = "RELEVANCE"
)

var AllProfileItemSortKeys = []ProfileItemSortKeys{
	ProfileItemSortKeysTitle,
	ProfileItemSortKeysProductType,
	ProfileItemSortKeysVendor,
	ProfileItemSortKeysInventoryTotal,
	ProfileItemSortKeysUpdatedAt,
	ProfileItemSortKeysCreatedAt,
	ProfileItemSortKeysPublishedAt,
	ProfileItemSortKeysID,
	ProfileItemSortKeysRelevance,
}

func (e ProfileItemSortKeys) IsValid() bool {
	switch e {
	case ProfileItemSortKeysTitle, ProfileItemSortKeysProductType, ProfileItemSortKeysVendor, ProfileItemSortKeysInventoryTotal, ProfileItemSortKeysUpdatedAt, ProfileItemSortKeysCreatedAt, ProfileItemSortKeysPublishedAt, ProfileItemSortKeysID, ProfileItemSortKeysRelevance:
		return true
	}
	return false
}

func (e ProfileItemSortKeys) String() string {
	return string(e)
}

func (e *ProfileItemSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProfileItemSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProfileItemSortKeys", str)
	}
	return nil
}

func (e ProfileItemSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
type PubSubWebhookSubscriptionCreateUserErrorCode string

const (
	// Invalid parameters provided.
	PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters PubSubWebhookSubscriptionCreateUserErrorCode = "INVALID_PARAMETERS"
)

var AllPubSubWebhookSubscriptionCreateUserErrorCode = []PubSubWebhookSubscriptionCreateUserErrorCode{
	PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters,
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) IsValid() bool {
	switch e {
	case PubSubWebhookSubscriptionCreateUserErrorCodeInvalidParameters:
		return true
	}
	return false
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) String() string {
	return string(e)
}

func (e *PubSubWebhookSubscriptionCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PubSubWebhookSubscriptionCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PubSubWebhookSubscriptionCreateUserErrorCode", str)
	}
	return nil
}

func (e PubSubWebhookSubscriptionCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
type PubSubWebhookSubscriptionUpdateUserErrorCode string

const (
	// Invalid parameters provided.
	PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters PubSubWebhookSubscriptionUpdateUserErrorCode = "INVALID_PARAMETERS"
)

var AllPubSubWebhookSubscriptionUpdateUserErrorCode = []PubSubWebhookSubscriptionUpdateUserErrorCode{
	PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters,
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) IsValid() bool {
	switch e {
	case PubSubWebhookSubscriptionUpdateUserErrorCodeInvalidParameters:
		return true
	}
	return false
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) String() string {
	return string(e)
}

func (e *PubSubWebhookSubscriptionUpdateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PubSubWebhookSubscriptionUpdateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PubSubWebhookSubscriptionUpdateUserErrorCode", str)
	}
	return nil
}

func (e PubSubWebhookSubscriptionUpdateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The input fields for the possible values for the default state of a publication.
type PublicationCreateInputPublicationDefaultState string

const (
	// The publication is empty.
	PublicationCreateInputPublicationDefaultStateEmpty PublicationCreateInputPublicationDefaultState = "EMPTY"
	// The publication is populated with all products.
	PublicationCreateInputPublicationDefaultStateAllProducts PublicationCreateInputPublicationDefaultState = "ALL_PRODUCTS"
)

var AllPublicationCreateInputPublicationDefaultState = []PublicationCreateInputPublicationDefaultState{
	PublicationCreateInputPublicationDefaultStateEmpty,
	PublicationCreateInputPublicationDefaultStateAllProducts,
}

func (e PublicationCreateInputPublicationDefaultState) IsValid() bool {
	switch e {
	case PublicationCreateInputPublicationDefaultStateEmpty, PublicationCreateInputPublicationDefaultStateAllProducts:
		return true
	}
	return false
}

func (e PublicationCreateInputPublicationDefaultState) String() string {
	return string(e)
}

func (e *PublicationCreateInputPublicationDefaultState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublicationCreateInputPublicationDefaultState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublicationCreateInputPublicationDefaultState", str)
	}
	return nil
}

func (e PublicationCreateInputPublicationDefaultState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `PublicationUserError`.
type PublicationUserErrorCode string

const (
	// Can't perform this action on a publication.
	PublicationUserErrorCodeUnsupportedPublicationAction PublicationUserErrorCode = "UNSUPPORTED_PUBLICATION_ACTION"
	// Publication not found.
	PublicationUserErrorCodePublicationNotFound PublicationUserErrorCode = "PUBLICATION_NOT_FOUND"
	// The publication is currently being modified. Please try again later.
	PublicationUserErrorCodePublicationLocked PublicationUserErrorCode = "PUBLICATION_LOCKED"
	// A catalog publication can only contain products.
	PublicationUserErrorCodeUnsupportedPublishableType PublicationUserErrorCode = "UNSUPPORTED_PUBLISHABLE_TYPE"
	// Publishable ID not found.
	PublicationUserErrorCodeInvalidPublishableID PublicationUserErrorCode = "INVALID_PUBLISHABLE_ID"
	// Market does not exist.
	PublicationUserErrorCodeMarketNotFound PublicationUserErrorCode = "MARKET_NOT_FOUND"
	// Catalog does not exist.
	PublicationUserErrorCodeCatalogNotFound PublicationUserErrorCode = "CATALOG_NOT_FOUND"
	// Can't modify a publication that belongs to an app catalog.
	PublicationUserErrorCodeCannotModifyAppCatalogPublication PublicationUserErrorCode = "CANNOT_MODIFY_APP_CATALOG_PUBLICATION"
	// Can't modify a publication that belongs to a market catalog.
	PublicationUserErrorCodeCannotModifyMarketCatalogPublication PublicationUserErrorCode = "CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION"
	// Cannot modify a catalog for an app.
	PublicationUserErrorCodeCannotModifyAppCatalog PublicationUserErrorCode = "CANNOT_MODIFY_APP_CATALOG"
	// Cannot modify a catalog for a market.
	PublicationUserErrorCodeCannotModifyMarketCatalog PublicationUserErrorCode = "CANNOT_MODIFY_MARKET_CATALOG"
	// The input value is invalid.
	PublicationUserErrorCodeInvalid PublicationUserErrorCode = "INVALID"
	// The input value is already taken.
	PublicationUserErrorCodeTaken PublicationUserErrorCode = "TAKEN"
	// The input value is too long.
	PublicationUserErrorCodeTooLong PublicationUserErrorCode = "TOO_LONG"
	// The input value is too short.
	PublicationUserErrorCodeTooShort PublicationUserErrorCode = "TOO_SHORT"
	// The input value is blank.
	PublicationUserErrorCodeBlank PublicationUserErrorCode = "BLANK"
	// A product publication cannot be created because the catalog type associated with this publication does not permit publications of this product type.
	PublicationUserErrorCodeProductTypeIncompatibleWithCatalogType PublicationUserErrorCode = "PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE"
	// The limit for simultaneous publication updates has been exceeded.
	PublicationUserErrorCodePublicationUpdateLimitExceeded PublicationUserErrorCode = "PUBLICATION_UPDATE_LIMIT_EXCEEDED"
)

var AllPublicationUserErrorCode = []PublicationUserErrorCode{
	PublicationUserErrorCodeUnsupportedPublicationAction,
	PublicationUserErrorCodePublicationNotFound,
	PublicationUserErrorCodePublicationLocked,
	PublicationUserErrorCodeUnsupportedPublishableType,
	PublicationUserErrorCodeInvalidPublishableID,
	PublicationUserErrorCodeMarketNotFound,
	PublicationUserErrorCodeCatalogNotFound,
	PublicationUserErrorCodeCannotModifyAppCatalogPublication,
	PublicationUserErrorCodeCannotModifyMarketCatalogPublication,
	PublicationUserErrorCodeCannotModifyAppCatalog,
	PublicationUserErrorCodeCannotModifyMarketCatalog,
	PublicationUserErrorCodeInvalid,
	PublicationUserErrorCodeTaken,
	PublicationUserErrorCodeTooLong,
	PublicationUserErrorCodeTooShort,
	PublicationUserErrorCodeBlank,
	PublicationUserErrorCodeProductTypeIncompatibleWithCatalogType,
	PublicationUserErrorCodePublicationUpdateLimitExceeded,
}

func (e PublicationUserErrorCode) IsValid() bool {
	switch e {
	case PublicationUserErrorCodeUnsupportedPublicationAction, PublicationUserErrorCodePublicationNotFound, PublicationUserErrorCodePublicationLocked, PublicationUserErrorCodeUnsupportedPublishableType, PublicationUserErrorCodeInvalidPublishableID, PublicationUserErrorCodeMarketNotFound, PublicationUserErrorCodeCatalogNotFound, PublicationUserErrorCodeCannotModifyAppCatalogPublication, PublicationUserErrorCodeCannotModifyMarketCatalogPublication, PublicationUserErrorCodeCannotModifyAppCatalog, PublicationUserErrorCodeCannotModifyMarketCatalog, PublicationUserErrorCodeInvalid, PublicationUserErrorCodeTaken, PublicationUserErrorCodeTooLong, PublicationUserErrorCodeTooShort, PublicationUserErrorCodeBlank, PublicationUserErrorCodeProductTypeIncompatibleWithCatalogType, PublicationUserErrorCodePublicationUpdateLimitExceeded:
		return true
	}
	return false
}

func (e PublicationUserErrorCode) String() string {
	return string(e)
}

func (e *PublicationUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublicationUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublicationUserErrorCode", str)
	}
	return nil
}

func (e PublicationUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The origin of quantity rule on a price list.
type QuantityRuleOriginType string

const (
	// Quantity rule is explicitly defined.
	QuantityRuleOriginTypeFixed QuantityRuleOriginType = "FIXED"
	// Quantity rule falls back to the relative rule.
	QuantityRuleOriginTypeRelative QuantityRuleOriginType = "RELATIVE"
)

var AllQuantityRuleOriginType = []QuantityRuleOriginType{
	QuantityRuleOriginTypeFixed,
	QuantityRuleOriginTypeRelative,
}

func (e QuantityRuleOriginType) IsValid() bool {
	switch e {
	case QuantityRuleOriginTypeFixed, QuantityRuleOriginTypeRelative:
		return true
	}
	return false
}

func (e QuantityRuleOriginType) String() string {
	return string(e)
}

func (e *QuantityRuleOriginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuantityRuleOriginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuantityRuleOriginType", str)
	}
	return nil
}

func (e QuantityRuleOriginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `QuantityRuleUserError`.
type QuantityRuleUserErrorCode string

const (
	// The input value is blank.
	QuantityRuleUserErrorCodeBlank QuantityRuleUserErrorCode = "BLANK"
	// Product variant ID does not exist.
	QuantityRuleUserErrorCodeProductVariantDoesNotExist QuantityRuleUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Price list does not exist.
	QuantityRuleUserErrorCodePriceListDoesNotExist QuantityRuleUserErrorCode = "PRICE_LIST_DOES_NOT_EXIST"
	// Quantity rule for variant associated with the price list provided does not exist.
	QuantityRuleUserErrorCodeVariantQuantityRuleDoesNotExist QuantityRuleUserErrorCode = "VARIANT_QUANTITY_RULE_DOES_NOT_EXIST"
	// Minimum must be lower than or equal to the maximum.
	QuantityRuleUserErrorCodeMinimumIsGreaterThanMaximum QuantityRuleUserErrorCode = "MINIMUM_IS_GREATER_THAN_MAXIMUM"
	// Increment must be lower than or equal to the minimum.
	QuantityRuleUserErrorCodeIncrementIsGreaterThanMinimum QuantityRuleUserErrorCode = "INCREMENT_IS_GREATER_THAN_MINIMUM"
	// Value must be greater than or equal to 1.
	QuantityRuleUserErrorCodeGreaterThanOrEqualTo QuantityRuleUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The maximum must be a multiple of the increment.
	QuantityRuleUserErrorCodeMaximumNotMultipleOfIncrement QuantityRuleUserErrorCode = "MAXIMUM_NOT_MULTIPLE_OF_INCREMENT"
	// The minimum must be a multiple of the increment.
	QuantityRuleUserErrorCodeMinimumNotMultipleOfIncrement QuantityRuleUserErrorCode = "MINIMUM_NOT_MULTIPLE_OF_INCREMENT"
	// Quantity rules can be associated only with company location catalogs.
	QuantityRuleUserErrorCodeCatalogContextDoesNotSupportQuantityRules QuantityRuleUserErrorCode = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
	// Something went wrong when trying to save the quantity rule. Please try again later.
	QuantityRuleUserErrorCodeGenericError QuantityRuleUserErrorCode = "GENERIC_ERROR"
)

var AllQuantityRuleUserErrorCode = []QuantityRuleUserErrorCode{
	QuantityRuleUserErrorCodeBlank,
	QuantityRuleUserErrorCodeProductVariantDoesNotExist,
	QuantityRuleUserErrorCodePriceListDoesNotExist,
	QuantityRuleUserErrorCodeVariantQuantityRuleDoesNotExist,
	QuantityRuleUserErrorCodeMinimumIsGreaterThanMaximum,
	QuantityRuleUserErrorCodeIncrementIsGreaterThanMinimum,
	QuantityRuleUserErrorCodeGreaterThanOrEqualTo,
	QuantityRuleUserErrorCodeMaximumNotMultipleOfIncrement,
	QuantityRuleUserErrorCodeMinimumNotMultipleOfIncrement,
	QuantityRuleUserErrorCodeCatalogContextDoesNotSupportQuantityRules,
	QuantityRuleUserErrorCodeGenericError,
}

func (e QuantityRuleUserErrorCode) IsValid() bool {
	switch e {
	case QuantityRuleUserErrorCodeBlank, QuantityRuleUserErrorCodeProductVariantDoesNotExist, QuantityRuleUserErrorCodePriceListDoesNotExist, QuantityRuleUserErrorCodeVariantQuantityRuleDoesNotExist, QuantityRuleUserErrorCodeMinimumIsGreaterThanMaximum, QuantityRuleUserErrorCodeIncrementIsGreaterThanMinimum, QuantityRuleUserErrorCodeGreaterThanOrEqualTo, QuantityRuleUserErrorCodeMaximumNotMultipleOfIncrement, QuantityRuleUserErrorCodeMinimumNotMultipleOfIncrement, QuantityRuleUserErrorCodeCatalogContextDoesNotSupportQuantityRules, QuantityRuleUserErrorCodeGenericError:
		return true
	}
	return false
}

func (e QuantityRuleUserErrorCode) String() string {
	return string(e)
}

func (e *QuantityRuleUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuantityRuleUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuantityRuleUserErrorCode", str)
	}
	return nil
}

func (e QuantityRuleUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of refund to perform for a particular refund duty.
type RefundDutyRefundType string

const (
	// The duty is proportionally refunded based on the quantity of the refunded line item.
	RefundDutyRefundTypeProportional RefundDutyRefundType = "PROPORTIONAL"
	// The duty is fully refunded.
	RefundDutyRefundTypeFull RefundDutyRefundType = "FULL"
)

var AllRefundDutyRefundType = []RefundDutyRefundType{
	RefundDutyRefundTypeProportional,
	RefundDutyRefundTypeFull,
}

func (e RefundDutyRefundType) IsValid() bool {
	switch e {
	case RefundDutyRefundTypeProportional, RefundDutyRefundTypeFull:
		return true
	}
	return false
}

func (e RefundDutyRefundType) String() string {
	return string(e)
}

func (e *RefundDutyRefundType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundDutyRefundType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundDutyRefundType", str)
	}
	return nil
}

func (e RefundDutyRefundType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of restock performed for a particular refund line item.
type RefundLineItemRestockType string

const (
	// The refund line item was returned. Use this when restocking line items that were fulfilled.
	RefundLineItemRestockTypeReturn RefundLineItemRestockType = "RETURN"
	// The refund line item was canceled. Use this when restocking unfulfilled line items.
	RefundLineItemRestockTypeCancel RefundLineItemRestockType = "CANCEL"
	// Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds.
	RefundLineItemRestockTypeLegacyRestock RefundLineItemRestockType = "LEGACY_RESTOCK"
	// Refund line item was not restocked.
	RefundLineItemRestockTypeNoRestock RefundLineItemRestockType = "NO_RESTOCK"
)

var AllRefundLineItemRestockType = []RefundLineItemRestockType{
	RefundLineItemRestockTypeReturn,
	RefundLineItemRestockTypeCancel,
	RefundLineItemRestockTypeLegacyRestock,
	RefundLineItemRestockTypeNoRestock,
}

func (e RefundLineItemRestockType) IsValid() bool {
	switch e {
	case RefundLineItemRestockTypeReturn, RefundLineItemRestockTypeCancel, RefundLineItemRestockTypeLegacyRestock, RefundLineItemRestockTypeNoRestock:
		return true
	}
	return false
}

func (e RefundLineItemRestockType) String() string {
	return string(e)
}

func (e *RefundLineItemRestockType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundLineItemRestockType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundLineItemRestockType", str)
	}
	return nil
}

func (e RefundLineItemRestockType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available icons for resource alerts.
type ResourceAlertIcon string

const (
	// A checkmark inside a circle.
	ResourceAlertIconCheckmarkCircle ResourceAlertIcon = "CHECKMARK_CIRCLE"
	// A lowercase `i` inside a circle.
	ResourceAlertIconInformationCircle ResourceAlertIcon = "INFORMATION_CIRCLE"
)

var AllResourceAlertIcon = []ResourceAlertIcon{
	ResourceAlertIconCheckmarkCircle,
	ResourceAlertIconInformationCircle,
}

func (e ResourceAlertIcon) IsValid() bool {
	switch e {
	case ResourceAlertIconCheckmarkCircle, ResourceAlertIconInformationCircle:
		return true
	}
	return false
}

func (e ResourceAlertIcon) String() string {
	return string(e)
}

func (e *ResourceAlertIcon) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertIcon(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertIcon", str)
	}
	return nil
}

func (e ResourceAlertIcon) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible severity levels for a resource alert.
type ResourceAlertSeverity string

const (
	// Indicates a neutral alert. For example, an accepted dispute.
	ResourceAlertSeverityDefault ResourceAlertSeverity = "DEFAULT"
	// Indicates an informative alert. For example, an escalated dispute.
	ResourceAlertSeverityInfo ResourceAlertSeverity = "INFO"
	// Indicates an informative alert. For example, a new dispute.
	ResourceAlertSeverityWarning ResourceAlertSeverity = "WARNING"
	// Indicates a success alert. For example, a winning a dispute.
	ResourceAlertSeveritySuccess ResourceAlertSeverity = "SUCCESS"
	// Indicates a critical alert. For example, a blocked app.
	ResourceAlertSeverityCritical ResourceAlertSeverity = "CRITICAL"
	ResourceAlertSeverityError    ResourceAlertSeverity = "ERROR"
)

var AllResourceAlertSeverity = []ResourceAlertSeverity{
	ResourceAlertSeverityDefault,
	ResourceAlertSeverityInfo,
	ResourceAlertSeverityWarning,
	ResourceAlertSeveritySuccess,
	ResourceAlertSeverityCritical,
	ResourceAlertSeverityError,
}

func (e ResourceAlertSeverity) IsValid() bool {
	switch e {
	case ResourceAlertSeverityDefault, ResourceAlertSeverityInfo, ResourceAlertSeverityWarning, ResourceAlertSeveritySuccess, ResourceAlertSeverityCritical, ResourceAlertSeverityError:
		return true
	}
	return false
}

func (e ResourceAlertSeverity) String() string {
	return string(e)
}

func (e *ResourceAlertSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertSeverity", str)
	}
	return nil
}

func (e ResourceAlertSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The state of the resource feedback.
type ResourceFeedbackState string

const (
	// No action required from merchant.
	ResourceFeedbackStateAccepted ResourceFeedbackState = "ACCEPTED"
	// The merchant needs to resolve an issue with the resource.
	ResourceFeedbackStateRequiresAction ResourceFeedbackState = "REQUIRES_ACTION"
)

var AllResourceFeedbackState = []ResourceFeedbackState{
	ResourceFeedbackStateAccepted,
	ResourceFeedbackStateRequiresAction,
}

func (e ResourceFeedbackState) IsValid() bool {
	switch e {
	case ResourceFeedbackStateAccepted, ResourceFeedbackStateRequiresAction:
		return true
	}
	return false
}

func (e ResourceFeedbackState) String() string {
	return string(e)
}

func (e *ResourceFeedbackState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceFeedbackState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceFeedbackState", str)
	}
	return nil
}

func (e ResourceFeedbackState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the state of this catalog operation.
type ResourceOperationStatus string

const (
	// Operation has been created.
	ResourceOperationStatusCreated ResourceOperationStatus = "CREATED"
	// Operation is currently running.
	ResourceOperationStatusActive ResourceOperationStatus = "ACTIVE"
	// Operation is complete.
	ResourceOperationStatusComplete ResourceOperationStatus = "COMPLETE"
)

var AllResourceOperationStatus = []ResourceOperationStatus{
	ResourceOperationStatusCreated,
	ResourceOperationStatusActive,
	ResourceOperationStatusComplete,
}

func (e ResourceOperationStatus) IsValid() bool {
	switch e {
	case ResourceOperationStatusCreated, ResourceOperationStatusActive, ResourceOperationStatusComplete:
		return true
	}
	return false
}

func (e ResourceOperationStatus) String() string {
	return string(e)
}

func (e *ResourceOperationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceOperationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceOperationStatus", str)
	}
	return nil
}

func (e ResourceOperationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason why the merchant declined a customer's return request.
type ReturnDeclineReason string

const (
	// The return period has ended.
	ReturnDeclineReasonReturnPeriodEnded ReturnDeclineReason = "RETURN_PERIOD_ENDED"
	// The return contains final sale items.
	ReturnDeclineReasonFinalSale ReturnDeclineReason = "FINAL_SALE"
	// The return is declined for another reason.
	ReturnDeclineReasonOther ReturnDeclineReason = "OTHER"
)

var AllReturnDeclineReason = []ReturnDeclineReason{
	ReturnDeclineReasonReturnPeriodEnded,
	ReturnDeclineReasonFinalSale,
	ReturnDeclineReasonOther,
}

func (e ReturnDeclineReason) IsValid() bool {
	switch e {
	case ReturnDeclineReasonReturnPeriodEnded, ReturnDeclineReasonFinalSale, ReturnDeclineReasonOther:
		return true
	}
	return false
}

func (e ReturnDeclineReason) String() string {
	return string(e)
}

func (e *ReturnDeclineReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReturnDeclineReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReturnDeclineReason", str)
	}
	return nil
}

func (e ReturnDeclineReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ReturnUserError`.
type ReturnErrorCode string

const (
	// Unexpected internal error happened.
	ReturnErrorCodeInternalError ReturnErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	ReturnErrorCodeTooManyArguments ReturnErrorCode = "TOO_MANY_ARGUMENTS"
	// The input value is blank.
	ReturnErrorCodeBlank ReturnErrorCode = "BLANK"
	// The input value should be equal to the value allowed.
	ReturnErrorCodeEqualTo ReturnErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	ReturnErrorCodeGreaterThan ReturnErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	ReturnErrorCodeGreaterThanOrEqualTo ReturnErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value isn't included in the list.
	ReturnErrorCodeInclusion ReturnErrorCode = "INCLUSION"
	// The input value is invalid.
	ReturnErrorCodeInvalid ReturnErrorCode = "INVALID"
	// The input value should be less than the maximum value allowed.
	ReturnErrorCodeLessThan ReturnErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	ReturnErrorCodeLessThanOrEqualTo ReturnErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is not a number.
	ReturnErrorCodeNotANumber ReturnErrorCode = "NOT_A_NUMBER"
	// The input value needs to be blank.
	ReturnErrorCodePresent ReturnErrorCode = "PRESENT"
	// The input value is already taken.
	ReturnErrorCodeTaken ReturnErrorCode = "TAKEN"
	// The input value is too big.
	ReturnErrorCodeTooBig ReturnErrorCode = "TOO_BIG"
	// The input value is too long.
	ReturnErrorCodeTooLong ReturnErrorCode = "TOO_LONG"
	// The input value is too short.
	ReturnErrorCodeTooShort ReturnErrorCode = "TOO_SHORT"
	// The input value is the wrong length.
	ReturnErrorCodeWrongLength ReturnErrorCode = "WRONG_LENGTH"
	// The requested resource already exists.
	ReturnErrorCodeAlreadyExists ReturnErrorCode = "ALREADY_EXISTS"
	// A requested resource could not be created.
	ReturnErrorCodeCreationFailed ReturnErrorCode = "CREATION_FAILED"
	// A required feature is not enabled.
	ReturnErrorCodeFeatureNotEnabled ReturnErrorCode = "FEATURE_NOT_ENABLED"
	// A resource was not in the correct state for the operation to succeed.
	ReturnErrorCodeInvalidState ReturnErrorCode = "INVALID_STATE"
	// A requested notification could not be sent.
	ReturnErrorCodeNotificationFailed ReturnErrorCode = "NOTIFICATION_FAILED"
	// A requested item is not editable.
	ReturnErrorCodeNotEditable ReturnErrorCode = "NOT_EDITABLE"
	// A requested item could not be found.
	ReturnErrorCodeNotFound ReturnErrorCode = "NOT_FOUND"
)

var AllReturnErrorCode = []ReturnErrorCode{
	ReturnErrorCodeInternalError,
	ReturnErrorCodeTooManyArguments,
	ReturnErrorCodeBlank,
	ReturnErrorCodeEqualTo,
	ReturnErrorCodeGreaterThan,
	ReturnErrorCodeGreaterThanOrEqualTo,
	ReturnErrorCodeInclusion,
	ReturnErrorCodeInvalid,
	ReturnErrorCodeLessThan,
	ReturnErrorCodeLessThanOrEqualTo,
	ReturnErrorCodeNotANumber,
	ReturnErrorCodePresent,
	ReturnErrorCodeTaken,
	ReturnErrorCodeTooBig,
	ReturnErrorCodeTooLong,
	ReturnErrorCodeTooShort,
	ReturnErrorCodeWrongLength,
	ReturnErrorCodeAlreadyExists,
	ReturnErrorCodeCreationFailed,
	ReturnErrorCodeFeatureNotEnabled,
	ReturnErrorCodeInvalidState,
	ReturnErrorCodeNotificationFailed,
	ReturnErrorCodeNotEditable,
	ReturnErrorCodeNotFound,
}

func (e ReturnErrorCode) IsValid() bool {
	switch e {
	case ReturnErrorCodeInternalError, ReturnErrorCodeTooManyArguments, ReturnErrorCodeBlank, ReturnErrorCodeEqualTo, ReturnErrorCodeGreaterThan, ReturnErrorCodeGreaterThanOrEqualTo, ReturnErrorCodeInclusion, ReturnErrorCodeInvalid, ReturnErrorCodeLessThan, ReturnErrorCodeLessThanOrEqualTo, ReturnErrorCodeNotANumber, ReturnErrorCodePresent, ReturnErrorCodeTaken, ReturnErrorCodeTooBig, ReturnErrorCodeTooLong, ReturnErrorCodeTooShort, ReturnErrorCodeWrongLength, ReturnErrorCodeAlreadyExists, ReturnErrorCodeCreationFailed, ReturnErrorCodeFeatureNotEnabled, ReturnErrorCodeInvalidState, ReturnErrorCodeNotificationFailed, ReturnErrorCodeNotEditable, ReturnErrorCodeNotFound:
		return true
	}
	return false
}

func (e ReturnErrorCode) String() string {
	return string(e)
}

func (e *ReturnErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReturnErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReturnErrorCode", str)
	}
	return nil
}

func (e ReturnErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for returning the return line item.
type ReturnReason string

const (
	// The item is returned because the size was too small.
	ReturnReasonSizeTooSmall ReturnReason = "SIZE_TOO_SMALL"
	// The item is returned because the size was too large.
	ReturnReasonSizeTooLarge ReturnReason = "SIZE_TOO_LARGE"
	// The item is returned because the customer changed their mind.
	ReturnReasonUnwanted ReturnReason = "UNWANTED"
	// The item is returned because it was not as described.
	ReturnReasonNotAsDescribed ReturnReason = "NOT_AS_DESCRIBED"
	// The item is returned because the customer received the wrong one.
	ReturnReasonWrongItem ReturnReason = "WRONG_ITEM"
	// The item is returned because it is damaged or defective.
	ReturnReasonDefective ReturnReason = "DEFECTIVE"
	// The item is returned because the buyer did not like the style.
	ReturnReasonStyle ReturnReason = "STYLE"
	// The item is returned because the buyer did not like the color.
	ReturnReasonColor ReturnReason = "COLOR"
	// The item is returned for another reason. For this value, a return reason note is also provided.
	ReturnReasonOther ReturnReason = "OTHER"
	// The item is returned because of an unknown reason.
	ReturnReasonUnknown ReturnReason = "UNKNOWN"
)

var AllReturnReason = []ReturnReason{
	ReturnReasonSizeTooSmall,
	ReturnReasonSizeTooLarge,
	ReturnReasonUnwanted,
	ReturnReasonNotAsDescribed,
	ReturnReasonWrongItem,
	ReturnReasonDefective,
	ReturnReasonStyle,
	ReturnReasonColor,
	ReturnReasonOther,
	ReturnReasonUnknown,
}

func (e ReturnReason) IsValid() bool {
	switch e {
	case ReturnReasonSizeTooSmall, ReturnReasonSizeTooLarge, ReturnReasonUnwanted, ReturnReasonNotAsDescribed, ReturnReasonWrongItem, ReturnReasonDefective, ReturnReasonStyle, ReturnReasonColor, ReturnReasonOther, ReturnReasonUnknown:
		return true
	}
	return false
}

func (e ReturnReason) String() string {
	return string(e)
}

func (e *ReturnReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReturnReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReturnReason", str)
	}
	return nil
}

func (e ReturnReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a return.
type ReturnStatus string

const (
	// The return has been canceled.
	ReturnStatusCanceled ReturnStatus = "CANCELED"
	// The return has been completed.
	ReturnStatusClosed ReturnStatus = "CLOSED"
	// The return is in progress.
	ReturnStatusOpen ReturnStatus = "OPEN"
	// The return was requested.
	ReturnStatusRequested ReturnStatus = "REQUESTED"
	// The return was declined.
	ReturnStatusDeclined ReturnStatus = "DECLINED"
)

var AllReturnStatus = []ReturnStatus{
	ReturnStatusCanceled,
	ReturnStatusClosed,
	ReturnStatusOpen,
	ReturnStatusRequested,
	ReturnStatusDeclined,
}

func (e ReturnStatus) IsValid() bool {
	switch e {
	case ReturnStatusCanceled, ReturnStatusClosed, ReturnStatusOpen, ReturnStatusRequested, ReturnStatusDeclined:
		return true
	}
	return false
}

func (e ReturnStatus) String() string {
	return string(e)
}

func (e *ReturnStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReturnStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReturnStatus", str)
	}
	return nil
}

func (e ReturnStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The final arrangement of an item from a reverse fulfillment order.
type ReverseFulfillmentOrderDispositionType string

const (
	// An item that was restocked.
	ReverseFulfillmentOrderDispositionTypeRestocked ReverseFulfillmentOrderDispositionType = "RESTOCKED"
	// An item that requires further processing before being restocked or discarded.
	ReverseFulfillmentOrderDispositionTypeProcessingRequired ReverseFulfillmentOrderDispositionType = "PROCESSING_REQUIRED"
	// An item that wasn't restocked.
	ReverseFulfillmentOrderDispositionTypeNotRestocked ReverseFulfillmentOrderDispositionType = "NOT_RESTOCKED"
	// An item that was expected but absent.
	ReverseFulfillmentOrderDispositionTypeMissing ReverseFulfillmentOrderDispositionType = "MISSING"
)

var AllReverseFulfillmentOrderDispositionType = []ReverseFulfillmentOrderDispositionType{
	ReverseFulfillmentOrderDispositionTypeRestocked,
	ReverseFulfillmentOrderDispositionTypeProcessingRequired,
	ReverseFulfillmentOrderDispositionTypeNotRestocked,
	ReverseFulfillmentOrderDispositionTypeMissing,
}

func (e ReverseFulfillmentOrderDispositionType) IsValid() bool {
	switch e {
	case ReverseFulfillmentOrderDispositionTypeRestocked, ReverseFulfillmentOrderDispositionTypeProcessingRequired, ReverseFulfillmentOrderDispositionTypeNotRestocked, ReverseFulfillmentOrderDispositionTypeMissing:
		return true
	}
	return false
}

func (e ReverseFulfillmentOrderDispositionType) String() string {
	return string(e)
}

func (e *ReverseFulfillmentOrderDispositionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReverseFulfillmentOrderDispositionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReverseFulfillmentOrderDispositionType", str)
	}
	return nil
}

func (e ReverseFulfillmentOrderDispositionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a reverse fulfillment order.
type ReverseFulfillmentOrderStatus string

const (
	// The reverse fulfillment order has been canceled.
	ReverseFulfillmentOrderStatusCanceled ReverseFulfillmentOrderStatus = "CANCELED"
	// The reverse fulfillment order has been completed.
	ReverseFulfillmentOrderStatusClosed ReverseFulfillmentOrderStatus = "CLOSED"
	// The reverse fulfillment order is in progress.
	ReverseFulfillmentOrderStatusOpen ReverseFulfillmentOrderStatus = "OPEN"
)

var AllReverseFulfillmentOrderStatus = []ReverseFulfillmentOrderStatus{
	ReverseFulfillmentOrderStatusCanceled,
	ReverseFulfillmentOrderStatusClosed,
	ReverseFulfillmentOrderStatusOpen,
}

func (e ReverseFulfillmentOrderStatus) IsValid() bool {
	switch e {
	case ReverseFulfillmentOrderStatusCanceled, ReverseFulfillmentOrderStatusClosed, ReverseFulfillmentOrderStatusOpen:
		return true
	}
	return false
}

func (e ReverseFulfillmentOrderStatus) String() string {
	return string(e)
}

func (e *ReverseFulfillmentOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReverseFulfillmentOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReverseFulfillmentOrderStatus", str)
	}
	return nil
}

func (e ReverseFulfillmentOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a reverse fulfillment order third-party confirmation.
type ReverseFulfillmentOrderThirdPartyConfirmationStatus string

const (
	// The reverse fulfillment order was accepted by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusAccepted ReverseFulfillmentOrderThirdPartyConfirmationStatus = "ACCEPTED"
	// The reverse fulfillment order cancelation was accepted by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelAccepted ReverseFulfillmentOrderThirdPartyConfirmationStatus = "CANCEL_ACCEPTED"
	// The reverse fulfillment order cancelation was rejected by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelRejected ReverseFulfillmentOrderThirdPartyConfirmationStatus = "CANCEL_REJECTED"
	// The reverse fulfillment order is awaiting acceptance by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingAcceptance ReverseFulfillmentOrderThirdPartyConfirmationStatus = "PENDING_ACCEPTANCE"
	// The reverse fulfillment order is awaiting cancelation by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingCancelation ReverseFulfillmentOrderThirdPartyConfirmationStatus = "PENDING_CANCELATION"
	// The reverse fulfillment order was rejected by the fulfillment service.
	ReverseFulfillmentOrderThirdPartyConfirmationStatusRejected ReverseFulfillmentOrderThirdPartyConfirmationStatus = "REJECTED"
)

var AllReverseFulfillmentOrderThirdPartyConfirmationStatus = []ReverseFulfillmentOrderThirdPartyConfirmationStatus{
	ReverseFulfillmentOrderThirdPartyConfirmationStatusAccepted,
	ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelAccepted,
	ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelRejected,
	ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingAcceptance,
	ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingCancelation,
	ReverseFulfillmentOrderThirdPartyConfirmationStatusRejected,
}

func (e ReverseFulfillmentOrderThirdPartyConfirmationStatus) IsValid() bool {
	switch e {
	case ReverseFulfillmentOrderThirdPartyConfirmationStatusAccepted, ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelAccepted, ReverseFulfillmentOrderThirdPartyConfirmationStatusCancelRejected, ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingAcceptance, ReverseFulfillmentOrderThirdPartyConfirmationStatusPendingCancelation, ReverseFulfillmentOrderThirdPartyConfirmationStatusRejected:
		return true
	}
	return false
}

func (e ReverseFulfillmentOrderThirdPartyConfirmationStatus) String() string {
	return string(e)
}

func (e *ReverseFulfillmentOrderThirdPartyConfirmationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReverseFulfillmentOrderThirdPartyConfirmationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReverseFulfillmentOrderThirdPartyConfirmationStatus", str)
	}
	return nil
}

func (e ReverseFulfillmentOrderThirdPartyConfirmationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible order action types for a sale.
type SaleActionType string

const (
	// A purchase or charge.
	SaleActionTypeOrder SaleActionType = "ORDER"
	// A removal or return.
	SaleActionTypeReturn SaleActionType = "RETURN"
	// A change to the price, taxes, or discounts for a prior purchase.
	SaleActionTypeUpdate SaleActionType = "UPDATE"
	// An unknown order action. Represents new actions that may be added in future versions.
	SaleActionTypeUnknown SaleActionType = "UNKNOWN"
)

var AllSaleActionType = []SaleActionType{
	SaleActionTypeOrder,
	SaleActionTypeReturn,
	SaleActionTypeUpdate,
	SaleActionTypeUnknown,
}

func (e SaleActionType) IsValid() bool {
	switch e {
	case SaleActionTypeOrder, SaleActionTypeReturn, SaleActionTypeUpdate, SaleActionTypeUnknown:
		return true
	}
	return false
}

func (e SaleActionType) String() string {
	return string(e)
}

func (e *SaleActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SaleActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SaleActionType", str)
	}
	return nil
}

func (e SaleActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible line types for a sale record. One of the possible order line types for a sale is an adjustment. Sales adjustments occur when a refund is issued for a line item that is either more or less than the total value of the line item. Examples are restocking fees and goodwill payments. When this happens, Shopify produces a sales agreement with sale records for each line item that is returned or refunded and an additional sale record for the adjustment (for example, a restocking fee). The sales records for the returned or refunded items represent the reversal of the original line item sale value. The additional adjustment sale record represents the difference between the original total value of all line items that were refunded, and the actual amount refunded.
type SaleLineType string

const (
	// A product purchased, returned or exchanged.
	SaleLineTypeProduct SaleLineType = "PRODUCT"
	// A tip added by the customer.
	SaleLineTypeTip SaleLineType = "TIP"
	// A gift card.
	SaleLineTypeGiftCard SaleLineType = "GIFT_CARD"
	// A shipping cost.
	SaleLineTypeShipping SaleLineType = "SHIPPING"
	// A duty charge.
	SaleLineTypeDuty SaleLineType = "DUTY"
	// An additional fee.
	SaleLineTypeAdditionalFee SaleLineType = "ADDITIONAL_FEE"
	// An unknown sale line. Represents new types that may be added in future versions.
	SaleLineTypeUnknown SaleLineType = "UNKNOWN"
	// A sale adjustment.
	SaleLineTypeAdjustment SaleLineType = "ADJUSTMENT"
)

var AllSaleLineType = []SaleLineType{
	SaleLineTypeProduct,
	SaleLineTypeTip,
	SaleLineTypeGiftCard,
	SaleLineTypeShipping,
	SaleLineTypeDuty,
	SaleLineTypeAdditionalFee,
	SaleLineTypeUnknown,
	SaleLineTypeAdjustment,
}

func (e SaleLineType) IsValid() bool {
	switch e {
	case SaleLineTypeProduct, SaleLineTypeTip, SaleLineTypeGiftCard, SaleLineTypeShipping, SaleLineTypeDuty, SaleLineTypeAdditionalFee, SaleLineTypeUnknown, SaleLineTypeAdjustment:
		return true
	}
	return false
}

func (e SaleLineType) String() string {
	return string(e)
}

func (e *SaleLineType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SaleLineType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SaleLineType", str)
	}
	return nil
}

func (e SaleLineType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The page or pages on the online store where the script should be included.
type ScriptTagDisplayScope string

const (
	// Include the script on both the web storefront and the order status page.
	ScriptTagDisplayScopeAll ScriptTagDisplayScope = "ALL"
	// Include the script only on the order status page.
	ScriptTagDisplayScopeOrderStatus ScriptTagDisplayScope = "ORDER_STATUS"
	// Include the script only on the web storefront.
	ScriptTagDisplayScopeOnlineStore ScriptTagDisplayScope = "ONLINE_STORE"
)

var AllScriptTagDisplayScope = []ScriptTagDisplayScope{
	ScriptTagDisplayScopeAll,
	ScriptTagDisplayScopeOrderStatus,
	ScriptTagDisplayScopeOnlineStore,
}

func (e ScriptTagDisplayScope) IsValid() bool {
	switch e {
	case ScriptTagDisplayScopeAll, ScriptTagDisplayScopeOrderStatus, ScriptTagDisplayScopeOnlineStore:
		return true
	}
	return false
}

func (e ScriptTagDisplayScope) String() string {
	return string(e)
}

func (e *ScriptTagDisplayScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptTagDisplayScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptTagDisplayScope", str)
	}
	return nil
}

func (e ScriptTagDisplayScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources to be returned from a search.
type SearchResultType string

const (
	SearchResultTypeCustomer   SearchResultType = "CUSTOMER"
	SearchResultTypeDraftOrder SearchResultType = "DRAFT_ORDER"
	SearchResultTypeProduct    SearchResultType = "PRODUCT"
	SearchResultTypeCollection SearchResultType = "COLLECTION"
	// A file.
	SearchResultTypeFile               SearchResultType = "FILE"
	SearchResultTypeOnlineStorePage    SearchResultType = "ONLINE_STORE_PAGE"
	SearchResultTypeOnlineStoreBlog    SearchResultType = "ONLINE_STORE_BLOG"
	SearchResultTypeOnlineStoreArticle SearchResultType = "ONLINE_STORE_ARTICLE"
	// A URL redirect.
	SearchResultTypeURLRedirect SearchResultType = "URL_REDIRECT"
	SearchResultTypePriceRule   SearchResultType = "PRICE_RULE"
	// A code discount redeem code.
	SearchResultTypeDiscountRedeemCode SearchResultType = "DISCOUNT_REDEEM_CODE"
	SearchResultTypeOrder              SearchResultType = "ORDER"
)

var AllSearchResultType = []SearchResultType{
	SearchResultTypeCustomer,
	SearchResultTypeDraftOrder,
	SearchResultTypeProduct,
	SearchResultTypeCollection,
	SearchResultTypeFile,
	SearchResultTypeOnlineStorePage,
	SearchResultTypeOnlineStoreBlog,
	SearchResultTypeOnlineStoreArticle,
	SearchResultTypeURLRedirect,
	SearchResultTypePriceRule,
	SearchResultTypeDiscountRedeemCode,
	SearchResultTypeOrder,
}

func (e SearchResultType) IsValid() bool {
	switch e {
	case SearchResultTypeCustomer, SearchResultTypeDraftOrder, SearchResultTypeProduct, SearchResultTypeCollection, SearchResultTypeFile, SearchResultTypeOnlineStorePage, SearchResultTypeOnlineStoreBlog, SearchResultTypeOnlineStoreArticle, SearchResultTypeURLRedirect, SearchResultTypePriceRule, SearchResultTypeDiscountRedeemCode, SearchResultTypeOrder:
		return true
	}
	return false
}

func (e SearchResultType) String() string {
	return string(e)
}

func (e *SearchResultType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchResultType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchResultType", str)
	}
	return nil
}

func (e SearchResultType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Segment query.
type SegmentSortKeys string

const (
	// Sort by the `creation_date` value.
	SegmentSortKeysCreationDate SegmentSortKeys = "CREATION_DATE"
	// Sort by the `last_edit_date` value.
	SegmentSortKeysLastEditDate SegmentSortKeys = "LAST_EDIT_DATE"
	// Sort by the `id` value.
	SegmentSortKeysID SegmentSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	SegmentSortKeysRelevance SegmentSortKeys = "RELEVANCE"
)

var AllSegmentSortKeys = []SegmentSortKeys{
	SegmentSortKeysCreationDate,
	SegmentSortKeysLastEditDate,
	SegmentSortKeysID,
	SegmentSortKeysRelevance,
}

func (e SegmentSortKeys) IsValid() bool {
	switch e {
	case SegmentSortKeysCreationDate, SegmentSortKeysLastEditDate, SegmentSortKeysID, SegmentSortKeysRelevance:
		return true
	}
	return false
}

func (e SegmentSortKeys) String() string {
	return string(e)
}

func (e *SegmentSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SegmentSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SegmentSortKeys", str)
	}
	return nil
}

func (e SegmentSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the anchor type.
type SellingPlanAnchorType string

const (
	// Which day of the week, between 1-7.
	SellingPlanAnchorTypeWeekday SellingPlanAnchorType = "WEEKDAY"
	// Which day of the month, between 1-31.
	SellingPlanAnchorTypeMonthday SellingPlanAnchorType = "MONTHDAY"
	// Which days of the month and year, month between 1-12, and day between 1-31.
	SellingPlanAnchorTypeYearday SellingPlanAnchorType = "YEARDAY"
)

var AllSellingPlanAnchorType = []SellingPlanAnchorType{
	SellingPlanAnchorTypeWeekday,
	SellingPlanAnchorTypeMonthday,
	SellingPlanAnchorTypeYearday,
}

func (e SellingPlanAnchorType) IsValid() bool {
	switch e {
	case SellingPlanAnchorTypeWeekday, SellingPlanAnchorTypeMonthday, SellingPlanAnchorTypeYearday:
		return true
	}
	return false
}

func (e SellingPlanAnchorType) String() string {
	return string(e)
}

func (e *SellingPlanAnchorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanAnchorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanAnchorType", str)
	}
	return nil
}

func (e SellingPlanAnchorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The category of the selling plan. For the `OTHER` category,
// you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
// where we'll review your request for a new purchase option.
type SellingPlanCategory string

const (
	// The selling plan is for anything not in one of the other categories.
	SellingPlanCategoryOther SellingPlanCategory = "OTHER"
	// The selling plan is for pre-orders.
	SellingPlanCategoryPreOrder SellingPlanCategory = "PRE_ORDER"
	// The selling plan is for subscriptions.
	SellingPlanCategorySubscription SellingPlanCategory = "SUBSCRIPTION"
	// The selling plan is for try before you buy purchases.
	SellingPlanCategoryTryBeforeYouBuy SellingPlanCategory = "TRY_BEFORE_YOU_BUY"
)

var AllSellingPlanCategory = []SellingPlanCategory{
	SellingPlanCategoryOther,
	SellingPlanCategoryPreOrder,
	SellingPlanCategorySubscription,
	SellingPlanCategoryTryBeforeYouBuy,
}

func (e SellingPlanCategory) IsValid() bool {
	switch e {
	case SellingPlanCategoryOther, SellingPlanCategoryPreOrder, SellingPlanCategorySubscription, SellingPlanCategoryTryBeforeYouBuy:
		return true
	}
	return false
}

func (e SellingPlanCategory) String() string {
	return string(e)
}

func (e *SellingPlanCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanCategory", str)
	}
	return nil
}

func (e SellingPlanCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The checkout charge when the full amount isn't charged at checkout.
type SellingPlanCheckoutChargeType string

const (
	// The checkout charge is a percentage of the product or variant price.
	SellingPlanCheckoutChargeTypePercentage SellingPlanCheckoutChargeType = "PERCENTAGE"
	// The checkout charge is a fixed price amount.
	SellingPlanCheckoutChargeTypePrice SellingPlanCheckoutChargeType = "PRICE"
)

var AllSellingPlanCheckoutChargeType = []SellingPlanCheckoutChargeType{
	SellingPlanCheckoutChargeTypePercentage,
	SellingPlanCheckoutChargeTypePrice,
}

func (e SellingPlanCheckoutChargeType) IsValid() bool {
	switch e {
	case SellingPlanCheckoutChargeTypePercentage, SellingPlanCheckoutChargeTypePrice:
		return true
	}
	return false
}

func (e SellingPlanCheckoutChargeType) String() string {
	return string(e)
}

func (e *SellingPlanCheckoutChargeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanCheckoutChargeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanCheckoutChargeType", str)
	}
	return nil
}

func (e SellingPlanCheckoutChargeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible intentions of a Delivery Policy.
type SellingPlanFixedDeliveryPolicyIntent string

const (
	// A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
	//
	SellingPlanFixedDeliveryPolicyIntentFulfillmentBegin SellingPlanFixedDeliveryPolicyIntent = "FULFILLMENT_BEGIN"
)

var AllSellingPlanFixedDeliveryPolicyIntent = []SellingPlanFixedDeliveryPolicyIntent{
	SellingPlanFixedDeliveryPolicyIntentFulfillmentBegin,
}

func (e SellingPlanFixedDeliveryPolicyIntent) IsValid() bool {
	switch e {
	case SellingPlanFixedDeliveryPolicyIntentFulfillmentBegin:
		return true
	}
	return false
}

func (e SellingPlanFixedDeliveryPolicyIntent) String() string {
	return string(e)
}

func (e *SellingPlanFixedDeliveryPolicyIntent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanFixedDeliveryPolicyIntent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanFixedDeliveryPolicyIntent", str)
	}
	return nil
}

func (e SellingPlanFixedDeliveryPolicyIntent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
type SellingPlanFixedDeliveryPolicyPreAnchorBehavior string

const (
	// Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.
	//
	SellingPlanFixedDeliveryPolicyPreAnchorBehaviorAsap SellingPlanFixedDeliveryPolicyPreAnchorBehavior = "ASAP"
	// Orders placed can be fulfilled / delivered at the next anchor date.
	// Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
	// delivered at the following anchor.
	//
	SellingPlanFixedDeliveryPolicyPreAnchorBehaviorNext SellingPlanFixedDeliveryPolicyPreAnchorBehavior = "NEXT"
)

var AllSellingPlanFixedDeliveryPolicyPreAnchorBehavior = []SellingPlanFixedDeliveryPolicyPreAnchorBehavior{
	SellingPlanFixedDeliveryPolicyPreAnchorBehaviorAsap,
	SellingPlanFixedDeliveryPolicyPreAnchorBehaviorNext,
}

func (e SellingPlanFixedDeliveryPolicyPreAnchorBehavior) IsValid() bool {
	switch e {
	case SellingPlanFixedDeliveryPolicyPreAnchorBehaviorAsap, SellingPlanFixedDeliveryPolicyPreAnchorBehaviorNext:
		return true
	}
	return false
}

func (e SellingPlanFixedDeliveryPolicyPreAnchorBehavior) String() string {
	return string(e)
}

func (e *SellingPlanFixedDeliveryPolicyPreAnchorBehavior) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanFixedDeliveryPolicyPreAnchorBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanFixedDeliveryPolicyPreAnchorBehavior", str)
	}
	return nil
}

func (e SellingPlanFixedDeliveryPolicyPreAnchorBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Describes what triggers fulfillment.
type SellingPlanFulfillmentTrigger string

const (
	// Use the anchor values to calculate fulfillment date.
	SellingPlanFulfillmentTriggerAnchor SellingPlanFulfillmentTrigger = "ANCHOR"
	// As soon as possible.
	SellingPlanFulfillmentTriggerAsap SellingPlanFulfillmentTrigger = "ASAP"
	// At an exact time defined by the fulfillment_exact_time field.
	SellingPlanFulfillmentTriggerExactTime SellingPlanFulfillmentTrigger = "EXACT_TIME"
	// Unknown. Usually to be determined in the future.
	SellingPlanFulfillmentTriggerUnknown SellingPlanFulfillmentTrigger = "UNKNOWN"
)

var AllSellingPlanFulfillmentTrigger = []SellingPlanFulfillmentTrigger{
	SellingPlanFulfillmentTriggerAnchor,
	SellingPlanFulfillmentTriggerAsap,
	SellingPlanFulfillmentTriggerExactTime,
	SellingPlanFulfillmentTriggerUnknown,
}

func (e SellingPlanFulfillmentTrigger) IsValid() bool {
	switch e {
	case SellingPlanFulfillmentTriggerAnchor, SellingPlanFulfillmentTriggerAsap, SellingPlanFulfillmentTriggerExactTime, SellingPlanFulfillmentTriggerUnknown:
		return true
	}
	return false
}

func (e SellingPlanFulfillmentTrigger) String() string {
	return string(e)
}

func (e *SellingPlanFulfillmentTrigger) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanFulfillmentTrigger(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanFulfillmentTrigger", str)
	}
	return nil
}

func (e SellingPlanFulfillmentTrigger) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the SellingPlanGroup query.
type SellingPlanGroupSortKeys string

const (
	// Sort by the `name` value.
	SellingPlanGroupSortKeysName SellingPlanGroupSortKeys = "NAME"
	// Sort by the `updated_at` value.
	SellingPlanGroupSortKeysUpdatedAt SellingPlanGroupSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	SellingPlanGroupSortKeysCreatedAt SellingPlanGroupSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	SellingPlanGroupSortKeysID SellingPlanGroupSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	SellingPlanGroupSortKeysRelevance SellingPlanGroupSortKeys = "RELEVANCE"
)

var AllSellingPlanGroupSortKeys = []SellingPlanGroupSortKeys{
	SellingPlanGroupSortKeysName,
	SellingPlanGroupSortKeysUpdatedAt,
	SellingPlanGroupSortKeysCreatedAt,
	SellingPlanGroupSortKeysID,
	SellingPlanGroupSortKeysRelevance,
}

func (e SellingPlanGroupSortKeys) IsValid() bool {
	switch e {
	case SellingPlanGroupSortKeysName, SellingPlanGroupSortKeysUpdatedAt, SellingPlanGroupSortKeysCreatedAt, SellingPlanGroupSortKeysID, SellingPlanGroupSortKeysRelevance:
		return true
	}
	return false
}

func (e SellingPlanGroupSortKeys) String() string {
	return string(e)
}

func (e *SellingPlanGroupSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupSortKeys", str)
	}
	return nil
}

func (e SellingPlanGroupSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SellingPlanGroupUserError`.
type SellingPlanGroupUserErrorCode string

const (
	// The input value is blank.
	SellingPlanGroupUserErrorCodeBlank SellingPlanGroupUserErrorCode = "BLANK"
	// The input value should be equal to the value allowed.
	SellingPlanGroupUserErrorCodeEqualTo SellingPlanGroupUserErrorCode = "EQUAL_TO"
	// The input value should be greater than the minimum allowed value.
	SellingPlanGroupUserErrorCodeGreaterThan SellingPlanGroupUserErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo SellingPlanGroupUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value isn't included in the list.
	SellingPlanGroupUserErrorCodeInclusion SellingPlanGroupUserErrorCode = "INCLUSION"
	// The input value is invalid.
	SellingPlanGroupUserErrorCodeInvalid SellingPlanGroupUserErrorCode = "INVALID"
	// The input value should be less than the maximum value allowed.
	SellingPlanGroupUserErrorCodeLessThan SellingPlanGroupUserErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo SellingPlanGroupUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is not a number.
	SellingPlanGroupUserErrorCodeNotANumber SellingPlanGroupUserErrorCode = "NOT_A_NUMBER"
	// The record with the ID used as the input value couldn't be found.
	SellingPlanGroupUserErrorCodeNotFound SellingPlanGroupUserErrorCode = "NOT_FOUND"
	// The input value needs to be blank.
	SellingPlanGroupUserErrorCodePresent SellingPlanGroupUserErrorCode = "PRESENT"
	// The input value is already taken.
	SellingPlanGroupUserErrorCodeTaken SellingPlanGroupUserErrorCode = "TAKEN"
	// The input value is too big.
	SellingPlanGroupUserErrorCodeTooBig SellingPlanGroupUserErrorCode = "TOO_BIG"
	// The input value is too long.
	SellingPlanGroupUserErrorCodeTooLong SellingPlanGroupUserErrorCode = "TOO_LONG"
	// The input value is too short.
	SellingPlanGroupUserErrorCodeTooShort SellingPlanGroupUserErrorCode = "TOO_SHORT"
	// The input value is the wrong length.
	SellingPlanGroupUserErrorCodeWrongLength SellingPlanGroupUserErrorCode = "WRONG_LENGTH"
	// Exceeded the selling plan limit (31).
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_UPPER_BOUND"
	// Must include at least one selling plan.
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_LOWER_BOUND"
	// Selling plan's billing policy max cycles must be greater than min cycles.
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SellingPlanGroupUserErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// Selling plan's billing and delivery policies anchors must be equal.
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL"
	// Selling plan's billing cycle must be a multiple of delivery cycle.
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE"
	// Selling plan's pricing policies must contain one fixed pricing policy.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY"
	// Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP"
	// Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP"
	// Selling plan's option2 is required because option2 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plan's option3 is required because option3 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plans can't have more than 2 pricing policies.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_LIMIT"
	// The selling plan list provided contains 1 or more invalid IDs.
	SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS SellingPlanGroupUserErrorCode = "RESOURCE_LIST_CONTAINS_INVALID_IDS"
	// Product variant does not exist.
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Product does not exist.
	SellingPlanGroupUserErrorCodeProductDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Selling plan group does not exist.
	SellingPlanGroupUserErrorCodeGroupDoesNotExist SellingPlanGroupUserErrorCode = "GROUP_DOES_NOT_EXIST"
	// Selling plan group could not be deleted.
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted SellingPlanGroupUserErrorCode = "GROUP_COULD_NOT_BE_DELETED"
	// Could not add the resource to the selling plan group.
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup SellingPlanGroupUserErrorCode = "ERROR_ADDING_RESOURCE_TO_GROUP"
	// Missing delivery policy.
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_DELIVERY_POLICY_MISSING"
	// Missing billing policy.
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_POLICY_MISSING"
	// Selling plan does not exist.
	SellingPlanGroupUserErrorCodePlanDoesNotExist SellingPlanGroupUserErrorCode = "PLAN_DOES_NOT_EXIST"
	// Selling plan ID must be specified to update.
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate SellingPlanGroupUserErrorCode = "PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE"
	// Only one billing policy type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOneBillingPolicyType SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_BILLING_POLICY_TYPE"
	// Only one delivery policy type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOneDeliveryPolicyType SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_DELIVERY_POLICY_TYPE"
	// Only one pricing policy type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_TYPE"
	// Billing and delivery policy types must be the same.
	SellingPlanGroupUserErrorCodeBillingAndDeliveryPolicyTypesMustBeTheSame SellingPlanGroupUserErrorCode = "BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME"
	// Only one pricing policy adjustment value type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_VALUE"
	// Pricing policy's adjustment value and adjustment type must match.
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch SellingPlanGroupUserErrorCode = "PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH"
	// Cannot have multiple selling plans with the same name.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_NAME"
	// Cannot have multiple selling plans with the same options.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_OPTIONS"
	// A fixed selling plan can have at most one pricing policy.
	SellingPlanGroupUserErrorCodeSellingPlanFixedPricingPoliciesLimit SellingPlanGroupUserErrorCode = "SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT"
	// A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeRequired SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED"
	// A fixed billing policy's checkout charge value and type must match.
	SellingPlanGroupUserErrorCodeCheckoutChargeValueAndTypeMustMatch SellingPlanGroupUserErrorCode = "CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH"
	// A fixed billing policy's checkout charge can have at most one value.
	SellingPlanGroupUserErrorCodeOnlyNeedOneCheckoutChargeValue SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE"
	// A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeNotAllowed SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED"
	// A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTimeAfterCheckoutMustBeGreaterThanZero SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO"
	// A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerOnFullCheckout SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT"
	// A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPartialPercentageCheckoutCharge SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE"
	// A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE.
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPriceCheckoutCharge SellingPlanGroupUserErrorCode = "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE"
	// A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME.
	SellingPlanGroupUserErrorCodeFulfillmentExactTimeRequired SellingPlanGroupUserErrorCode = "FULFILLMENT_EXACT_TIME_REQUIRED"
	// A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME.
	SellingPlanGroupUserErrorCodeFulfillmentExactTimeNotAllowed SellingPlanGroupUserErrorCode = "FULFILLMENT_EXACT_TIME_NOT_ALLOWED"
	// A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR.
	SellingPlanGroupUserErrorCodeSellingPlanAnchorsNotAllowed SellingPlanGroupUserErrorCode = "SELLING_PLAN_ANCHORS_NOT_ALLOWED"
	// A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR.
	SellingPlanGroupUserErrorCodeSellingPlanAnchorsRequired SellingPlanGroupUserErrorCode = "SELLING_PLAN_ANCHORS_REQUIRED"
	// A selling plan can't have both fixed and recurring billing policies.
	SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringBilling SellingPlanGroupUserErrorCode = "ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING"
	// A selling plan can't have both fixed and recurring delivery policies.
	SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringDelivery SellingPlanGroupUserErrorCode = "ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY"
)

var AllSellingPlanGroupUserErrorCode = []SellingPlanGroupUserErrorCode{
	SellingPlanGroupUserErrorCodeBlank,
	SellingPlanGroupUserErrorCodeEqualTo,
	SellingPlanGroupUserErrorCodeGreaterThan,
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo,
	SellingPlanGroupUserErrorCodeInclusion,
	SellingPlanGroupUserErrorCodeInvalid,
	SellingPlanGroupUserErrorCodeLessThan,
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo,
	SellingPlanGroupUserErrorCodeNotANumber,
	SellingPlanGroupUserErrorCodeNotFound,
	SellingPlanGroupUserErrorCodePresent,
	SellingPlanGroupUserErrorCodeTaken,
	SellingPlanGroupUserErrorCodeTooBig,
	SellingPlanGroupUserErrorCodeTooLong,
	SellingPlanGroupUserErrorCodeTooShort,
	SellingPlanGroupUserErrorCodeWrongLength,
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound,
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound,
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual,
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit,
	SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS,
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist,
	SellingPlanGroupUserErrorCodeProductDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted,
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup,
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing,
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing,
	SellingPlanGroupUserErrorCodePlanDoesNotExist,
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate,
	SellingPlanGroupUserErrorCodeOnlyNeedOneBillingPolicyType,
	SellingPlanGroupUserErrorCodeOnlyNeedOneDeliveryPolicyType,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType,
	SellingPlanGroupUserErrorCodeBillingAndDeliveryPolicyTypesMustBeTheSame,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue,
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions,
	SellingPlanGroupUserErrorCodeSellingPlanFixedPricingPoliciesLimit,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeRequired,
	SellingPlanGroupUserErrorCodeCheckoutChargeValueAndTypeMustMatch,
	SellingPlanGroupUserErrorCodeOnlyNeedOneCheckoutChargeValue,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeNotAllowed,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTimeAfterCheckoutMustBeGreaterThanZero,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerOnFullCheckout,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPartialPercentageCheckoutCharge,
	SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPriceCheckoutCharge,
	SellingPlanGroupUserErrorCodeFulfillmentExactTimeRequired,
	SellingPlanGroupUserErrorCodeFulfillmentExactTimeNotAllowed,
	SellingPlanGroupUserErrorCodeSellingPlanAnchorsNotAllowed,
	SellingPlanGroupUserErrorCodeSellingPlanAnchorsRequired,
	SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringBilling,
	SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringDelivery,
}

func (e SellingPlanGroupUserErrorCode) IsValid() bool {
	switch e {
	case SellingPlanGroupUserErrorCodeBlank, SellingPlanGroupUserErrorCodeEqualTo, SellingPlanGroupUserErrorCodeGreaterThan, SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo, SellingPlanGroupUserErrorCodeInclusion, SellingPlanGroupUserErrorCodeInvalid, SellingPlanGroupUserErrorCodeLessThan, SellingPlanGroupUserErrorCodeLessThanOrEqualTo, SellingPlanGroupUserErrorCodeNotANumber, SellingPlanGroupUserErrorCodeNotFound, SellingPlanGroupUserErrorCodePresent, SellingPlanGroupUserErrorCodeTaken, SellingPlanGroupUserErrorCodeTooBig, SellingPlanGroupUserErrorCodeTooLong, SellingPlanGroupUserErrorCodeTooShort, SellingPlanGroupUserErrorCodeWrongLength, SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound, SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound, SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual, SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy, SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit, SellingPlanGroupUserErrorCodeResourceListContainsInvalidIDS, SellingPlanGroupUserErrorCodeProductVariantDoesNotExist, SellingPlanGroupUserErrorCodeProductDoesNotExist, SellingPlanGroupUserErrorCodeGroupDoesNotExist, SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted, SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup, SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing, SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing, SellingPlanGroupUserErrorCodePlanDoesNotExist, SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate, SellingPlanGroupUserErrorCodeOnlyNeedOneBillingPolicyType, SellingPlanGroupUserErrorCodeOnlyNeedOneDeliveryPolicyType, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType, SellingPlanGroupUserErrorCodeBillingAndDeliveryPolicyTypesMustBeTheSame, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue, SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch, SellingPlanGroupUserErrorCodeSellingPlanDuplicateName, SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions, SellingPlanGroupUserErrorCodeSellingPlanFixedPricingPoliciesLimit, SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeRequired, SellingPlanGroupUserErrorCodeCheckoutChargeValueAndTypeMustMatch, SellingPlanGroupUserErrorCodeOnlyNeedOneCheckoutChargeValue, SellingPlanGroupUserErrorCodeRemainingBalanceChargeExactTimeNotAllowed, SellingPlanGroupUserErrorCodeRemainingBalanceChargeTimeAfterCheckoutMustBeGreaterThanZero, SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerOnFullCheckout, SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPartialPercentageCheckoutCharge, SellingPlanGroupUserErrorCodeRemainingBalanceChargeTriggerNoRemainingBalanceOnPriceCheckoutCharge, SellingPlanGroupUserErrorCodeFulfillmentExactTimeRequired, SellingPlanGroupUserErrorCodeFulfillmentExactTimeNotAllowed, SellingPlanGroupUserErrorCodeSellingPlanAnchorsNotAllowed, SellingPlanGroupUserErrorCodeSellingPlanAnchorsRequired, SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringBilling, SellingPlanGroupUserErrorCodeOnlyOneOfFixedOrRecurringDelivery:
		return true
	}
	return false
}

func (e SellingPlanGroupUserErrorCode) String() string {
	return string(e)
}

func (e *SellingPlanGroupUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupUserErrorCode", str)
	}
	return nil
}

func (e SellingPlanGroupUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents valid selling plan interval.
type SellingPlanInterval string

const (
	// Day interval.
	SellingPlanIntervalDay SellingPlanInterval = "DAY"
	// Week interval.
	SellingPlanIntervalWeek SellingPlanInterval = "WEEK"
	// Month interval.
	SellingPlanIntervalMonth SellingPlanInterval = "MONTH"
	// Year interval.
	SellingPlanIntervalYear SellingPlanInterval = "YEAR"
)

var AllSellingPlanInterval = []SellingPlanInterval{
	SellingPlanIntervalDay,
	SellingPlanIntervalWeek,
	SellingPlanIntervalMonth,
	SellingPlanIntervalYear,
}

func (e SellingPlanInterval) IsValid() bool {
	switch e {
	case SellingPlanIntervalDay, SellingPlanIntervalWeek, SellingPlanIntervalMonth, SellingPlanIntervalYear:
		return true
	}
	return false
}

func (e SellingPlanInterval) String() string {
	return string(e)
}

func (e *SellingPlanInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanInterval", str)
	}
	return nil
}

func (e SellingPlanInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a selling plan pricing policy adjustment type.
type SellingPlanPricingPolicyAdjustmentType string

const (
	// Percentage off adjustment.
	SellingPlanPricingPolicyAdjustmentTypePercentage SellingPlanPricingPolicyAdjustmentType = "PERCENTAGE"
	// Fixed amount off adjustment.
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount SellingPlanPricingPolicyAdjustmentType = "FIXED_AMOUNT"
	// Price of the policy.
	SellingPlanPricingPolicyAdjustmentTypePrice SellingPlanPricingPolicyAdjustmentType = "PRICE"
)

var AllSellingPlanPricingPolicyAdjustmentType = []SellingPlanPricingPolicyAdjustmentType{
	SellingPlanPricingPolicyAdjustmentTypePercentage,
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount,
	SellingPlanPricingPolicyAdjustmentTypePrice,
}

func (e SellingPlanPricingPolicyAdjustmentType) IsValid() bool {
	switch e {
	case SellingPlanPricingPolicyAdjustmentTypePercentage, SellingPlanPricingPolicyAdjustmentTypeFixedAmount, SellingPlanPricingPolicyAdjustmentTypePrice:
		return true
	}
	return false
}

func (e SellingPlanPricingPolicyAdjustmentType) String() string {
	return string(e)
}

func (e *SellingPlanPricingPolicyAdjustmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanPricingPolicyAdjustmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanPricingPolicyAdjustmentType", str)
	}
	return nil
}

func (e SellingPlanPricingPolicyAdjustmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Whether the delivery policy is merchant or buyer-centric.
type SellingPlanRecurringDeliveryPolicyIntent string

const (
	// A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
	//
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin SellingPlanRecurringDeliveryPolicyIntent = "FULFILLMENT_BEGIN"
)

var AllSellingPlanRecurringDeliveryPolicyIntent = []SellingPlanRecurringDeliveryPolicyIntent{
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin,
}

func (e SellingPlanRecurringDeliveryPolicyIntent) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyIntent) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyIntent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyIntent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyIntent", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyIntent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
type SellingPlanRecurringDeliveryPolicyPreAnchorBehavior string

const (
	// The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor.
	//
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "ASAP"
	// The orders placed can be fulfilled or delivered at the next anchor date.
	// The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
	// delivered at the following anchor.
	//
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "NEXT"
)

var AllSellingPlanRecurringDeliveryPolicyPreAnchorBehavior = []SellingPlanRecurringDeliveryPolicyPreAnchorBehavior{
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap,
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext,
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap, SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyPreAnchorBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyPreAnchorBehavior", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// When to capture the payment for the remaining amount due.
type SellingPlanRemainingBalanceChargeTrigger string

const (
	// When there's no remaining balance to be charged after checkout.
	SellingPlanRemainingBalanceChargeTriggerNoRemainingBalance SellingPlanRemainingBalanceChargeTrigger = "NO_REMAINING_BALANCE"
	// At an exact time defined by the remaining_balance_charge_exact_time field.
	SellingPlanRemainingBalanceChargeTriggerExactTime SellingPlanRemainingBalanceChargeTrigger = "EXACT_TIME"
	// After the duration defined by the remaining_balance_charge_time_after_checkout field.
	SellingPlanRemainingBalanceChargeTriggerTimeAfterCheckout SellingPlanRemainingBalanceChargeTrigger = "TIME_AFTER_CHECKOUT"
)

var AllSellingPlanRemainingBalanceChargeTrigger = []SellingPlanRemainingBalanceChargeTrigger{
	SellingPlanRemainingBalanceChargeTriggerNoRemainingBalance,
	SellingPlanRemainingBalanceChargeTriggerExactTime,
	SellingPlanRemainingBalanceChargeTriggerTimeAfterCheckout,
}

func (e SellingPlanRemainingBalanceChargeTrigger) IsValid() bool {
	switch e {
	case SellingPlanRemainingBalanceChargeTriggerNoRemainingBalance, SellingPlanRemainingBalanceChargeTriggerExactTime, SellingPlanRemainingBalanceChargeTriggerTimeAfterCheckout:
		return true
	}
	return false
}

func (e SellingPlanRemainingBalanceChargeTrigger) String() string {
	return string(e)
}

func (e *SellingPlanRemainingBalanceChargeTrigger) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRemainingBalanceChargeTrigger(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRemainingBalanceChargeTrigger", str)
	}
	return nil
}

func (e SellingPlanRemainingBalanceChargeTrigger) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// When to reserve inventory for a selling plan.
type SellingPlanReserve string

const (
	// Reserve inventory when order is fulfilled.
	SellingPlanReserveOnFulfillment SellingPlanReserve = "ON_FULFILLMENT"
	// Reserve inventory at time of sale.
	SellingPlanReserveOnSale SellingPlanReserve = "ON_SALE"
)

var AllSellingPlanReserve = []SellingPlanReserve{
	SellingPlanReserveOnFulfillment,
	SellingPlanReserveOnSale,
}

func (e SellingPlanReserve) IsValid() bool {
	switch e {
	case SellingPlanReserveOnFulfillment, SellingPlanReserveOnSale:
		return true
	}
	return false
}

func (e SellingPlanReserve) String() string {
	return string(e)
}

func (e *SellingPlanReserve) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanReserve(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanReserve", str)
	}
	return nil
}

func (e SellingPlanReserve) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The current state of a server pixel.
type ServerPixelStatus string

const (
	// This server pixel is connected: it will stream customer events to the endpoint if it is configured properly.
	ServerPixelStatusConnected ServerPixelStatus = "CONNECTED"
	// This server pixel is disconnected and unconfigured: it does not stream events to the endpoint and no endpoint address had been added to the server pixel.
	ServerPixelStatusDisconnectedUnconfigured ServerPixelStatus = "DISCONNECTED_UNCONFIGURED"
	// This server pixel is disconnected: it does not stream events to the endpoint and an endpoint address has been added to the server pixel.
	ServerPixelStatusDisconnectedConfigured ServerPixelStatus = "DISCONNECTED_CONFIGURED"
)

var AllServerPixelStatus = []ServerPixelStatus{
	ServerPixelStatusConnected,
	ServerPixelStatusDisconnectedUnconfigured,
	ServerPixelStatusDisconnectedConfigured,
}

func (e ServerPixelStatus) IsValid() bool {
	switch e {
	case ServerPixelStatusConnected, ServerPixelStatusDisconnectedUnconfigured, ServerPixelStatusDisconnectedConfigured:
		return true
	}
	return false
}

func (e ServerPixelStatus) String() string {
	return string(e)
}

func (e *ServerPixelStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerPixelStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerPixelStatus", str)
	}
	return nil
}

func (e ServerPixelStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The class of the discount for combining purposes.
type ShippingDiscountClass string

const (
	// Combined as a shipping discount.
	ShippingDiscountClassShipping ShippingDiscountClass = "SHIPPING"
)

var AllShippingDiscountClass = []ShippingDiscountClass{
	ShippingDiscountClassShipping,
}

func (e ShippingDiscountClass) IsValid() bool {
	switch e {
	case ShippingDiscountClassShipping:
		return true
	}
	return false
}

func (e ShippingDiscountClass) String() string {
	return string(e)
}

func (e *ShippingDiscountClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShippingDiscountClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShippingDiscountClass", str)
	}
	return nil
}

func (e ShippingDiscountClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of a shipping package.
type ShippingPackageType string

const (
	// A shipping box.
	ShippingPackageTypeBox ShippingPackageType = "BOX"
	// A flat rate packaging supplied by a carrier.
	ShippingPackageTypeFlatRate ShippingPackageType = "FLAT_RATE"
	// An envelope.
	ShippingPackageTypeEnvelope ShippingPackageType = "ENVELOPE"
	// A soft-pack, bubble-wrap or vinyl envelope.
	ShippingPackageTypeSoftPack ShippingPackageType = "SOFT_PACK"
)

var AllShippingPackageType = []ShippingPackageType{
	ShippingPackageTypeBox,
	ShippingPackageTypeFlatRate,
	ShippingPackageTypeEnvelope,
	ShippingPackageTypeSoftPack,
}

func (e ShippingPackageType) IsValid() bool {
	switch e {
	case ShippingPackageTypeBox, ShippingPackageTypeFlatRate, ShippingPackageTypeEnvelope, ShippingPackageTypeSoftPack:
		return true
	}
	return false
}

func (e ShippingPackageType) String() string {
	return string(e)
}

func (e *ShippingPackageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShippingPackageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShippingPackageType", str)
	}
	return nil
}

func (e ShippingPackageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible branding of a shop.
// Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
type ShopBranding string

const (
	// Shop has Shopify Gold branding.
	ShopBrandingShopifyGold ShopBranding = "SHOPIFY_GOLD"
	// Shop has Shopify Plus branding.
	ShopBrandingShopifyPlus ShopBranding = "SHOPIFY_PLUS"
	// Shop has Rogers branding.
	ShopBrandingRogers ShopBranding = "ROGERS"
	// Shop has Shopify branding.
	ShopBrandingShopify ShopBranding = "SHOPIFY"
)

var AllShopBranding = []ShopBranding{
	ShopBrandingShopifyGold,
	ShopBrandingShopifyPlus,
	ShopBrandingRogers,
	ShopBrandingShopify,
}

func (e ShopBranding) IsValid() bool {
	switch e {
	case ShopBrandingShopifyGold, ShopBrandingShopifyPlus, ShopBrandingRogers, ShopBrandingShopify:
		return true
	}
	return false
}

func (e ShopBranding) String() string {
	return string(e)
}

func (e *ShopBranding) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopBranding(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopBranding", str)
	}
	return nil
}

func (e ShopBranding) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the shop's customer account requirement preference.
type ShopCustomerAccountsSetting string

const (
	ShopCustomerAccountsSettingRequired ShopCustomerAccountsSetting = "REQUIRED"
	ShopCustomerAccountsSettingOptional ShopCustomerAccountsSetting = "OPTIONAL"
	ShopCustomerAccountsSettingDisabled ShopCustomerAccountsSetting = "DISABLED"
)

var AllShopCustomerAccountsSetting = []ShopCustomerAccountsSetting{
	ShopCustomerAccountsSettingRequired,
	ShopCustomerAccountsSettingOptional,
	ShopCustomerAccountsSettingDisabled,
}

func (e ShopCustomerAccountsSetting) IsValid() bool {
	switch e {
	case ShopCustomerAccountsSettingRequired, ShopCustomerAccountsSettingOptional, ShopCustomerAccountsSettingDisabled:
		return true
	}
	return false
}

func (e ShopCustomerAccountsSetting) String() string {
	return string(e)
}

func (e *ShopCustomerAccountsSetting) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopCustomerAccountsSetting(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopCustomerAccountsSetting", str)
	}
	return nil
}

func (e ShopCustomerAccountsSetting) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ShopPolicyUserError`.
type ShopPolicyErrorCode string

const (
	// The input value is too big.
	ShopPolicyErrorCodeTooBig ShopPolicyErrorCode = "TOO_BIG"
)

var AllShopPolicyErrorCode = []ShopPolicyErrorCode{
	ShopPolicyErrorCodeTooBig,
}

func (e ShopPolicyErrorCode) IsValid() bool {
	switch e {
	case ShopPolicyErrorCodeTooBig:
		return true
	}
	return false
}

func (e ShopPolicyErrorCode) String() string {
	return string(e)
}

func (e *ShopPolicyErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyErrorCode", str)
	}
	return nil
}

func (e ShopPolicyErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available shop policy types.
type ShopPolicyType string

const (
	// The refund policy.
	ShopPolicyTypeRefundPolicy ShopPolicyType = "REFUND_POLICY"
	// The shipping policy.
	ShopPolicyTypeShippingPolicy ShopPolicyType = "SHIPPING_POLICY"
	// The privacy policy.
	ShopPolicyTypePrivacyPolicy ShopPolicyType = "PRIVACY_POLICY"
	// The terms of service.
	ShopPolicyTypeTermsOfService ShopPolicyType = "TERMS_OF_SERVICE"
	// The terms of sale.
	ShopPolicyTypeTermsOfSale ShopPolicyType = "TERMS_OF_SALE"
	// The legal notice.
	ShopPolicyTypeLegalNotice ShopPolicyType = "LEGAL_NOTICE"
	// The purchase options cancellation policy.
	ShopPolicyTypeSubscriptionPolicy ShopPolicyType = "SUBSCRIPTION_POLICY"
	// The contact information.
	ShopPolicyTypeContactInformation ShopPolicyType = "CONTACT_INFORMATION"
)

var AllShopPolicyType = []ShopPolicyType{
	ShopPolicyTypeRefundPolicy,
	ShopPolicyTypeShippingPolicy,
	ShopPolicyTypePrivacyPolicy,
	ShopPolicyTypeTermsOfService,
	ShopPolicyTypeTermsOfSale,
	ShopPolicyTypeLegalNotice,
	ShopPolicyTypeSubscriptionPolicy,
	ShopPolicyTypeContactInformation,
}

func (e ShopPolicyType) IsValid() bool {
	switch e {
	case ShopPolicyTypeRefundPolicy, ShopPolicyTypeShippingPolicy, ShopPolicyTypePrivacyPolicy, ShopPolicyTypeTermsOfService, ShopPolicyTypeTermsOfSale, ShopPolicyTypeLegalNotice, ShopPolicyTypeSubscriptionPolicy, ShopPolicyTypeContactInformation:
		return true
	}
	return false
}

func (e ShopPolicyType) String() string {
	return string(e)
}

func (e *ShopPolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyType", str)
	}
	return nil
}

func (e ShopPolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`.
type ShopResourceFeedbackCreateUserErrorCode string

const (
	// The feedback for a later version of the resource was already accepted.
	ShopResourceFeedbackCreateUserErrorCodeOutdatedFeedback ShopResourceFeedbackCreateUserErrorCode = "OUTDATED_FEEDBACK"
	// The input value is invalid.
	ShopResourceFeedbackCreateUserErrorCodeInvalid ShopResourceFeedbackCreateUserErrorCode = "INVALID"
	// The input value is blank.
	ShopResourceFeedbackCreateUserErrorCodeBlank ShopResourceFeedbackCreateUserErrorCode = "BLANK"
	// The input value needs to be blank.
	ShopResourceFeedbackCreateUserErrorCodePresent ShopResourceFeedbackCreateUserErrorCode = "PRESENT"
)

var AllShopResourceFeedbackCreateUserErrorCode = []ShopResourceFeedbackCreateUserErrorCode{
	ShopResourceFeedbackCreateUserErrorCodeOutdatedFeedback,
	ShopResourceFeedbackCreateUserErrorCodeInvalid,
	ShopResourceFeedbackCreateUserErrorCodeBlank,
	ShopResourceFeedbackCreateUserErrorCodePresent,
}

func (e ShopResourceFeedbackCreateUserErrorCode) IsValid() bool {
	switch e {
	case ShopResourceFeedbackCreateUserErrorCodeOutdatedFeedback, ShopResourceFeedbackCreateUserErrorCodeInvalid, ShopResourceFeedbackCreateUserErrorCodeBlank, ShopResourceFeedbackCreateUserErrorCodePresent:
		return true
	}
	return false
}

func (e ShopResourceFeedbackCreateUserErrorCode) String() string {
	return string(e)
}

func (e *ShopResourceFeedbackCreateUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopResourceFeedbackCreateUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopResourceFeedbackCreateUserErrorCode", str)
	}
	return nil
}

func (e ShopResourceFeedbackCreateUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible sort of tags.
type ShopTagSort string

const (
	// Alphabetical sort.
	ShopTagSortAlphabetical ShopTagSort = "ALPHABETICAL"
	// Popularity sort.
	ShopTagSortPopular ShopTagSort = "POPULAR"
)

var AllShopTagSort = []ShopTagSort{
	ShopTagSortAlphabetical,
	ShopTagSortPopular,
}

func (e ShopTagSort) IsValid() bool {
	switch e {
	case ShopTagSortAlphabetical, ShopTagSortPopular:
		return true
	}
	return false
}

func (e ShopTagSort) String() string {
	return string(e)
}

func (e *ShopTagSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopTagSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopTagSort", str)
	}
	return nil
}

func (e ShopTagSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The bank account status.
type ShopifyPaymentsBankAccountStatus string

const (
	// A bank account that hasn't had any activity and that's not validated.
	ShopifyPaymentsBankAccountStatusNew ShopifyPaymentsBankAccountStatus = "NEW"
	// It was determined that the bank account exists.
	ShopifyPaymentsBankAccountStatusValidated ShopifyPaymentsBankAccountStatus = "VALIDATED"
	// Bank account validation was successful.
	ShopifyPaymentsBankAccountStatusVerified ShopifyPaymentsBankAccountStatus = "VERIFIED"
	// A payout to the bank account failed.
	ShopifyPaymentsBankAccountStatusErrored ShopifyPaymentsBankAccountStatus = "ERRORED"
)

var AllShopifyPaymentsBankAccountStatus = []ShopifyPaymentsBankAccountStatus{
	ShopifyPaymentsBankAccountStatusNew,
	ShopifyPaymentsBankAccountStatusValidated,
	ShopifyPaymentsBankAccountStatusVerified,
	ShopifyPaymentsBankAccountStatusErrored,
}

func (e ShopifyPaymentsBankAccountStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsBankAccountStatusNew, ShopifyPaymentsBankAccountStatusValidated, ShopifyPaymentsBankAccountStatusVerified, ShopifyPaymentsBankAccountStatusErrored:
		return true
	}
	return false
}

func (e ShopifyPaymentsBankAccountStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsBankAccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsBankAccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsBankAccountStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsBankAccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible dispute evidence file types.
type ShopifyPaymentsDisputeEvidenceFileType string

const (
	// Customer Communication File.
	ShopifyPaymentsDisputeEvidenceFileTypeCustomerCommunicationFile ShopifyPaymentsDisputeEvidenceFileType = "CUSTOMER_COMMUNICATION_FILE"
	// Refund Policy File.
	ShopifyPaymentsDisputeEvidenceFileTypeRefundPolicyFile ShopifyPaymentsDisputeEvidenceFileType = "REFUND_POLICY_FILE"
	// Cancellation Policy File.
	ShopifyPaymentsDisputeEvidenceFileTypeCancellationPolicyFile ShopifyPaymentsDisputeEvidenceFileType = "CANCELLATION_POLICY_FILE"
	// Uncategorized File.
	ShopifyPaymentsDisputeEvidenceFileTypeUncategorizedFile ShopifyPaymentsDisputeEvidenceFileType = "UNCATEGORIZED_FILE"
	// Shipping Documentation File.
	ShopifyPaymentsDisputeEvidenceFileTypeShippingDocumentationFile ShopifyPaymentsDisputeEvidenceFileType = "SHIPPING_DOCUMENTATION_FILE"
	// Service Documentation File.
	ShopifyPaymentsDisputeEvidenceFileTypeServiceDocumentationFile ShopifyPaymentsDisputeEvidenceFileType = "SERVICE_DOCUMENTATION_FILE"
)

var AllShopifyPaymentsDisputeEvidenceFileType = []ShopifyPaymentsDisputeEvidenceFileType{
	ShopifyPaymentsDisputeEvidenceFileTypeCustomerCommunicationFile,
	ShopifyPaymentsDisputeEvidenceFileTypeRefundPolicyFile,
	ShopifyPaymentsDisputeEvidenceFileTypeCancellationPolicyFile,
	ShopifyPaymentsDisputeEvidenceFileTypeUncategorizedFile,
	ShopifyPaymentsDisputeEvidenceFileTypeShippingDocumentationFile,
	ShopifyPaymentsDisputeEvidenceFileTypeServiceDocumentationFile,
}

func (e ShopifyPaymentsDisputeEvidenceFileType) IsValid() bool {
	switch e {
	case ShopifyPaymentsDisputeEvidenceFileTypeCustomerCommunicationFile, ShopifyPaymentsDisputeEvidenceFileTypeRefundPolicyFile, ShopifyPaymentsDisputeEvidenceFileTypeCancellationPolicyFile, ShopifyPaymentsDisputeEvidenceFileTypeUncategorizedFile, ShopifyPaymentsDisputeEvidenceFileTypeShippingDocumentationFile, ShopifyPaymentsDisputeEvidenceFileTypeServiceDocumentationFile:
		return true
	}
	return false
}

func (e ShopifyPaymentsDisputeEvidenceFileType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsDisputeEvidenceFileType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsDisputeEvidenceFileType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsDisputeEvidenceFileType", str)
	}
	return nil
}

func (e ShopifyPaymentsDisputeEvidenceFileType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for the dispute provided by the cardholder's bank.
type ShopifyPaymentsDisputeReason string

const (
	// The cardholder claims that they didn’t authorize the payment.
	ShopifyPaymentsDisputeReasonFraudulent ShopifyPaymentsDisputeReason = "FRAUDULENT"
	// The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
	ShopifyPaymentsDisputeReasonGeneral ShopifyPaymentsDisputeReason = "GENERAL"
	// The customer doesn’t recognize the payment appearing on their card statement.
	ShopifyPaymentsDisputeReasonUnrecognized ShopifyPaymentsDisputeReason = "UNRECOGNIZED"
	// The customer claims they were charged multiple times for the same product or service.
	ShopifyPaymentsDisputeReasonDuplicate ShopifyPaymentsDisputeReason = "DUPLICATE"
	// The customer claims that you continued to charge them after a subscription was canceled.
	ShopifyPaymentsDisputeReasonSubscriptionCancelled ShopifyPaymentsDisputeReason = "SUBSCRIPTION_CANCELLED"
	// The product or service was received but was defective, damaged, or not as described.
	ShopifyPaymentsDisputeReasonProductUnacceptable ShopifyPaymentsDisputeReason = "PRODUCT_UNACCEPTABLE"
	// The customer claims they did not receive the products or services purchased.
	ShopifyPaymentsDisputeReasonProductNotReceived ShopifyPaymentsDisputeReason = "PRODUCT_NOT_RECEIVED"
	// The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit.
	ShopifyPaymentsDisputeReasonCreditNotProcessed ShopifyPaymentsDisputeReason = "CREDIT_NOT_PROCESSED"
	// The customer account associated with the purchase is incorrect.
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails ShopifyPaymentsDisputeReason = "INCORRECT_ACCOUNT_DETAILS"
	// The customer's bank account has insufficient funds.
	ShopifyPaymentsDisputeReasonInsufficientFunds ShopifyPaymentsDisputeReason = "INSUFFICIENT_FUNDS"
	// The customer's bank can't process the charge.
	ShopifyPaymentsDisputeReasonBankCannotProcess ShopifyPaymentsDisputeReason = "BANK_CANNOT_PROCESS"
	// The customer's bank can't proceed with the debit since it hasn't been authorized.
	ShopifyPaymentsDisputeReasonDebitNotAuthorized ShopifyPaymentsDisputeReason = "DEBIT_NOT_AUTHORIZED"
	// The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
	ShopifyPaymentsDisputeReasonCustomerInitiated ShopifyPaymentsDisputeReason = "CUSTOMER_INITIATED"
)

var AllShopifyPaymentsDisputeReason = []ShopifyPaymentsDisputeReason{
	ShopifyPaymentsDisputeReasonFraudulent,
	ShopifyPaymentsDisputeReasonGeneral,
	ShopifyPaymentsDisputeReasonUnrecognized,
	ShopifyPaymentsDisputeReasonDuplicate,
	ShopifyPaymentsDisputeReasonSubscriptionCancelled,
	ShopifyPaymentsDisputeReasonProductUnacceptable,
	ShopifyPaymentsDisputeReasonProductNotReceived,
	ShopifyPaymentsDisputeReasonCreditNotProcessed,
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails,
	ShopifyPaymentsDisputeReasonInsufficientFunds,
	ShopifyPaymentsDisputeReasonBankCannotProcess,
	ShopifyPaymentsDisputeReasonDebitNotAuthorized,
	ShopifyPaymentsDisputeReasonCustomerInitiated,
}

func (e ShopifyPaymentsDisputeReason) IsValid() bool {
	switch e {
	case ShopifyPaymentsDisputeReasonFraudulent, ShopifyPaymentsDisputeReasonGeneral, ShopifyPaymentsDisputeReasonUnrecognized, ShopifyPaymentsDisputeReasonDuplicate, ShopifyPaymentsDisputeReasonSubscriptionCancelled, ShopifyPaymentsDisputeReasonProductUnacceptable, ShopifyPaymentsDisputeReasonProductNotReceived, ShopifyPaymentsDisputeReasonCreditNotProcessed, ShopifyPaymentsDisputeReasonIncorrectAccountDetails, ShopifyPaymentsDisputeReasonInsufficientFunds, ShopifyPaymentsDisputeReasonBankCannotProcess, ShopifyPaymentsDisputeReasonDebitNotAuthorized, ShopifyPaymentsDisputeReasonCustomerInitiated:
		return true
	}
	return false
}

func (e ShopifyPaymentsDisputeReason) String() string {
	return string(e)
}

func (e *ShopifyPaymentsDisputeReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsDisputeReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsDisputeReason", str)
	}
	return nil
}

func (e ShopifyPaymentsDisputeReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The interval at which payouts are sent to the connected bank account.
type ShopifyPaymentsPayoutInterval string

const (
	// Each business day.
	ShopifyPaymentsPayoutIntervalDaily ShopifyPaymentsPayoutInterval = "DAILY"
	// Each week, on the day of week specified by weeklyAnchor.
	ShopifyPaymentsPayoutIntervalWeekly ShopifyPaymentsPayoutInterval = "WEEKLY"
	// Each month, on the day of month specified by monthlyAnchor.
	ShopifyPaymentsPayoutIntervalMonthly ShopifyPaymentsPayoutInterval = "MONTHLY"
	// Payouts will not be automatically made.
	ShopifyPaymentsPayoutIntervalManual ShopifyPaymentsPayoutInterval = "MANUAL"
)

var AllShopifyPaymentsPayoutInterval = []ShopifyPaymentsPayoutInterval{
	ShopifyPaymentsPayoutIntervalDaily,
	ShopifyPaymentsPayoutIntervalWeekly,
	ShopifyPaymentsPayoutIntervalMonthly,
	ShopifyPaymentsPayoutIntervalManual,
}

func (e ShopifyPaymentsPayoutInterval) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutIntervalDaily, ShopifyPaymentsPayoutIntervalWeekly, ShopifyPaymentsPayoutIntervalMonthly, ShopifyPaymentsPayoutIntervalManual:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutInterval) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutInterval", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The transfer status of the payout.
type ShopifyPaymentsPayoutStatus string

const (
	// The payout has been created and had transactions assigned to it, but
	// it has not yet been submitted to the bank.
	//
	ShopifyPaymentsPayoutStatusScheduled ShopifyPaymentsPayoutStatus = "SCHEDULED"
	// The payout has been submitted to the bank.
	ShopifyPaymentsPayoutStatusInTransit ShopifyPaymentsPayoutStatus = "IN_TRANSIT"
	// The payout has been successfully deposited into the bank.
	ShopifyPaymentsPayoutStatusPaid ShopifyPaymentsPayoutStatus = "PAID"
	// The payout has been declined by the bank.
	ShopifyPaymentsPayoutStatusFailed ShopifyPaymentsPayoutStatus = "FAILED"
	// The payout has been canceled by Shopify.
	ShopifyPaymentsPayoutStatusCanceled ShopifyPaymentsPayoutStatus = "CANCELED"
)

var AllShopifyPaymentsPayoutStatus = []ShopifyPaymentsPayoutStatus{
	ShopifyPaymentsPayoutStatusScheduled,
	ShopifyPaymentsPayoutStatusInTransit,
	ShopifyPaymentsPayoutStatusPaid,
	ShopifyPaymentsPayoutStatusFailed,
	ShopifyPaymentsPayoutStatusCanceled,
}

func (e ShopifyPaymentsPayoutStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutStatusScheduled, ShopifyPaymentsPayoutStatusInTransit, ShopifyPaymentsPayoutStatusPaid, ShopifyPaymentsPayoutStatusFailed, ShopifyPaymentsPayoutStatusCanceled:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible transaction types for a payout.
type ShopifyPaymentsPayoutTransactionType string

const (
	// The payout is a deposit.
	ShopifyPaymentsPayoutTransactionTypeDeposit ShopifyPaymentsPayoutTransactionType = "DEPOSIT"
	// The payout is a withdrawal.
	ShopifyPaymentsPayoutTransactionTypeWithdrawal ShopifyPaymentsPayoutTransactionType = "WITHDRAWAL"
)

var AllShopifyPaymentsPayoutTransactionType = []ShopifyPaymentsPayoutTransactionType{
	ShopifyPaymentsPayoutTransactionTypeDeposit,
	ShopifyPaymentsPayoutTransactionTypeWithdrawal,
}

func (e ShopifyPaymentsPayoutTransactionType) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutTransactionTypeDeposit, ShopifyPaymentsPayoutTransactionTypeWithdrawal:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutTransactionType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutTransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutTransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutTransactionType", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutTransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The types of possible verification documents.
type ShopifyPaymentsVerificationDocumentType string

const (
	// The subject's driver's license.
	ShopifyPaymentsVerificationDocumentTypeDriversLicense ShopifyPaymentsVerificationDocumentType = "DRIVERS_LICENSE"
	// A government's identification document of the subject.
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification ShopifyPaymentsVerificationDocumentType = "GOVERNMENT_IDENTIFICATION"
	// The subject's passport.
	ShopifyPaymentsVerificationDocumentTypePassport ShopifyPaymentsVerificationDocumentType = "PASSPORT"
)

var AllShopifyPaymentsVerificationDocumentType = []ShopifyPaymentsVerificationDocumentType{
	ShopifyPaymentsVerificationDocumentTypeDriversLicense,
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification,
	ShopifyPaymentsVerificationDocumentTypePassport,
}

func (e ShopifyPaymentsVerificationDocumentType) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationDocumentTypeDriversLicense, ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification, ShopifyPaymentsVerificationDocumentTypePassport:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationDocumentType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationDocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationDocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationDocumentType", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationDocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a verification.
type ShopifyPaymentsVerificationStatus string

const (
	// The verification has been verified.
	ShopifyPaymentsVerificationStatusVerified ShopifyPaymentsVerificationStatus = "VERIFIED"
	// The verification has not yet been verified.
	ShopifyPaymentsVerificationStatusUnverified ShopifyPaymentsVerificationStatus = "UNVERIFIED"
	// The verification request has been submitted but a response has not yet been given.
	ShopifyPaymentsVerificationStatusPending ShopifyPaymentsVerificationStatus = "PENDING"
)

var AllShopifyPaymentsVerificationStatus = []ShopifyPaymentsVerificationStatus{
	ShopifyPaymentsVerificationStatusVerified,
	ShopifyPaymentsVerificationStatusUnverified,
	ShopifyPaymentsVerificationStatusPending,
}

func (e ShopifyPaymentsVerificationStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationStatusVerified, ShopifyPaymentsVerificationStatusUnverified, ShopifyPaymentsVerificationStatusPending:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
type StaffMemberDefaultImage string

const (
	// Returns a default avatar image for the staff member.
	StaffMemberDefaultImageDefault StaffMemberDefaultImage = "DEFAULT"
	// Returns a transparent avatar image for the staff member.
	StaffMemberDefaultImageTransparent StaffMemberDefaultImage = "TRANSPARENT"
	// Returns a URL that returns a 404 error if the image is not present.
	StaffMemberDefaultImageNotFound StaffMemberDefaultImage = "NOT_FOUND"
)

var AllStaffMemberDefaultImage = []StaffMemberDefaultImage{
	StaffMemberDefaultImageDefault,
	StaffMemberDefaultImageTransparent,
	StaffMemberDefaultImageNotFound,
}

func (e StaffMemberDefaultImage) IsValid() bool {
	switch e {
	case StaffMemberDefaultImageDefault, StaffMemberDefaultImageTransparent, StaffMemberDefaultImageNotFound:
		return true
	}
	return false
}

func (e StaffMemberDefaultImage) String() string {
	return string(e)
}

func (e *StaffMemberDefaultImage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffMemberDefaultImage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffMemberDefaultImage", str)
	}
	return nil
}

func (e StaffMemberDefaultImage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents access permissions for a staff member.
type StaffMemberPermission string

const (
	// The staff member can manage and install apps and channels.
	StaffMemberPermissionApplications StaffMemberPermission = "APPLICATIONS"
	// The staff member can manage and install sales channels.
	StaffMemberPermissionChannels StaffMemberPermission = "CHANNELS"
	// The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API.
	StaffMemberPermissionCustomers StaffMemberPermission = "CUSTOMERS"
	// The staff member can view the Shopify Home page, which includes sales information and other shop data.
	StaffMemberPermissionDashboard StaffMemberPermission = "DASHBOARD"
	// The staff member can view, buy, and manage domains.
	StaffMemberPermissionDomains StaffMemberPermission = "DOMAINS"
	// The staff member can create, update, and delete draft orders.
	StaffMemberPermissionDraftOrders StaffMemberPermission = "DRAFT_ORDERS"
	// The staff member can update orders.
	StaffMemberPermissionEditOrders StaffMemberPermission = "EDIT_ORDERS"
	// The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
	StaffMemberPermissionFull StaffMemberPermission = "FULL"
	// The staff member can view, create, issue, and export gift cards to a CSV file.
	StaffMemberPermissionGiftCards StaffMemberPermission = "GIFT_CARDS"
	// The staff member can view and modify links and navigation menus.
	StaffMemberPermissionLinks StaffMemberPermission = "LINKS"
	// The staff member can create, update, and delete locations where inventory is stocked or managed.
	StaffMemberPermissionLocations StaffMemberPermission = "LOCATIONS"
	// The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
	StaffMemberPermissionMarketing StaffMemberPermission = "MARKETING"
	// The staff member can view, create, and automate marketing campaigns.
	StaffMemberPermissionMarketingSection StaffMemberPermission = "MARKETING_SECTION"
	// The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission.
	StaffMemberPermissionOrders StaffMemberPermission = "ORDERS"
	// The staff member can view the Overview and Live view pages,
	// which include sales information, and other shop and sales channels data.
	StaffMemberPermissionOverviews StaffMemberPermission = "OVERVIEWS"
	// The staff member can view, create, update, publish, and delete blog posts and pages.
	StaffMemberPermissionPages StaffMemberPermission = "PAGES"
	// The staff member can pay for an order by using a vaulted card.
	StaffMemberPermissionPayOrdersByVaultedCard StaffMemberPermission = "PAY_ORDERS_BY_VAULTED_CARD"
	// The staff member can view the preferences and configuration of a shop.
	StaffMemberPermissionPreferences StaffMemberPermission = "PREFERENCES"
	// The staff member can view, create, import, and update products, collections, and inventory.
	StaffMemberPermissionProducts StaffMemberPermission = "PRODUCTS"
	// The staff member can view and create all reports, which includes sales information and other shop data.
	StaffMemberPermissionReports StaffMemberPermission = "REPORTS"
	// The staff member can view, update, and publish themes.
	StaffMemberPermissionThemes StaffMemberPermission = "THEMES"
	// The staff member can view and create translations.
	StaffMemberPermissionTranslations StaffMemberPermission = "TRANSLATIONS"
)

var AllStaffMemberPermission = []StaffMemberPermission{
	StaffMemberPermissionApplications,
	StaffMemberPermissionChannels,
	StaffMemberPermissionCustomers,
	StaffMemberPermissionDashboard,
	StaffMemberPermissionDomains,
	StaffMemberPermissionDraftOrders,
	StaffMemberPermissionEditOrders,
	StaffMemberPermissionFull,
	StaffMemberPermissionGiftCards,
	StaffMemberPermissionLinks,
	StaffMemberPermissionLocations,
	StaffMemberPermissionMarketing,
	StaffMemberPermissionMarketingSection,
	StaffMemberPermissionOrders,
	StaffMemberPermissionOverviews,
	StaffMemberPermissionPages,
	StaffMemberPermissionPayOrdersByVaultedCard,
	StaffMemberPermissionPreferences,
	StaffMemberPermissionProducts,
	StaffMemberPermissionReports,
	StaffMemberPermissionThemes,
	StaffMemberPermissionTranslations,
}

func (e StaffMemberPermission) IsValid() bool {
	switch e {
	case StaffMemberPermissionApplications, StaffMemberPermissionChannels, StaffMemberPermissionCustomers, StaffMemberPermissionDashboard, StaffMemberPermissionDomains, StaffMemberPermissionDraftOrders, StaffMemberPermissionEditOrders, StaffMemberPermissionFull, StaffMemberPermissionGiftCards, StaffMemberPermissionLinks, StaffMemberPermissionLocations, StaffMemberPermissionMarketing, StaffMemberPermissionMarketingSection, StaffMemberPermissionOrders, StaffMemberPermissionOverviews, StaffMemberPermissionPages, StaffMemberPermissionPayOrdersByVaultedCard, StaffMemberPermissionPreferences, StaffMemberPermissionProducts, StaffMemberPermissionReports, StaffMemberPermissionThemes, StaffMemberPermissionTranslations:
		return true
	}
	return false
}

func (e StaffMemberPermission) String() string {
	return string(e)
}

func (e *StaffMemberPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffMemberPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffMemberPermission", str)
	}
	return nil
}

func (e StaffMemberPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible HTTP methods that can be used when sending a request to upload a file using information from a
// [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).
type StagedUploadHTTPMethodType string

const (
	// The POST HTTP method.
	StagedUploadHTTPMethodTypePost StagedUploadHTTPMethodType = "POST"
	// The PUT HTTP method.
	StagedUploadHTTPMethodTypePut StagedUploadHTTPMethodType = "PUT"
)

var AllStagedUploadHTTPMethodType = []StagedUploadHTTPMethodType{
	StagedUploadHTTPMethodTypePost,
	StagedUploadHTTPMethodTypePut,
}

func (e StagedUploadHTTPMethodType) IsValid() bool {
	switch e {
	case StagedUploadHTTPMethodTypePost, StagedUploadHTTPMethodTypePut:
		return true
	}
	return false
}

func (e StagedUploadHTTPMethodType) String() string {
	return string(e)
}

func (e *StagedUploadHTTPMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadHTTPMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadHttpMethodType", str)
	}
	return nil
}

func (e StagedUploadHTTPMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The resource type to receive.
type StagedUploadTargetGenerateUploadResource string

const (
	// An image associated with a collection.
	//
	// For example, after uploading an image, you can use the
	// [collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate)
	// to add the image to a collection.
	//
	StagedUploadTargetGenerateUploadResourceCollectionImage StagedUploadTargetGenerateUploadResource = "COLLECTION_IMAGE"
	// Represents any file other than HTML.
	//
	// For example, after uploading the file, you can add the file to the
	// [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
	// [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
	//
	StagedUploadTargetGenerateUploadResourceFile StagedUploadTargetGenerateUploadResource = "FILE"
	// An image.
	//
	// For example, after uploading an image, you can add the image to a product using the
	// [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
	// or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
	// [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
	//
	StagedUploadTargetGenerateUploadResourceImage StagedUploadTargetGenerateUploadResource = "IMAGE"
	// A Shopify hosted 3d model.
	//
	// For example, after uploading the 3d model, you can add the 3d model to a product using the
	// [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
	//
	StagedUploadTargetGenerateUploadResourceModel3d StagedUploadTargetGenerateUploadResource = "MODEL_3D"
	// An image that's associated with a product.
	//
	// For example, after uploading the image, you can add the image to a product using the
	// [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
	//
	StagedUploadTargetGenerateUploadResourceProductImage StagedUploadTargetGenerateUploadResource = "PRODUCT_IMAGE"
	// An image.
	//
	// For example, after uploading the image, you can add the image to the
	// [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
	// [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
	//
	StagedUploadTargetGenerateUploadResourceShopImage StagedUploadTargetGenerateUploadResource = "SHOP_IMAGE"
	// A Shopify-hosted video.
	//
	// For example, after uploading the video, you can add the video to a product using the
	// [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
	// or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
	// [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
	//
	StagedUploadTargetGenerateUploadResourceVideo StagedUploadTargetGenerateUploadResource = "VIDEO"
	// Represents bulk mutation variables.
	//
	// For example, bulk mutation variables can be used for bulk operations using the
	// [bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).
	//
	StagedUploadTargetGenerateUploadResourceBulkMutationVariables StagedUploadTargetGenerateUploadResource = "BULK_MUTATION_VARIABLES"
	// Represents a label associated with a return.
	//
	// For example, once uploaded, this resource can be used to [create a
	// ReverseDelivery](https://shopify.dev/api/admin-graphql/unstable/mutations/reverseDeliveryCreateWithShipping).
	//
	StagedUploadTargetGenerateUploadResourceReturnLabel StagedUploadTargetGenerateUploadResource = "RETURN_LABEL"
	// Represents a redirect CSV file.
	//
	// Example usage: This resource can be used for creating a
	// [UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)
	// object for use in the
	// [urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).
	//
	StagedUploadTargetGenerateUploadResourceURLRedirectImport StagedUploadTargetGenerateUploadResource = "URL_REDIRECT_IMPORT"
)

var AllStagedUploadTargetGenerateUploadResource = []StagedUploadTargetGenerateUploadResource{
	StagedUploadTargetGenerateUploadResourceCollectionImage,
	StagedUploadTargetGenerateUploadResourceFile,
	StagedUploadTargetGenerateUploadResourceImage,
	StagedUploadTargetGenerateUploadResourceModel3d,
	StagedUploadTargetGenerateUploadResourceProductImage,
	StagedUploadTargetGenerateUploadResourceShopImage,
	StagedUploadTargetGenerateUploadResourceVideo,
	StagedUploadTargetGenerateUploadResourceBulkMutationVariables,
	StagedUploadTargetGenerateUploadResourceReturnLabel,
	StagedUploadTargetGenerateUploadResourceURLRedirectImport,
}

func (e StagedUploadTargetGenerateUploadResource) IsValid() bool {
	switch e {
	case StagedUploadTargetGenerateUploadResourceCollectionImage, StagedUploadTargetGenerateUploadResourceFile, StagedUploadTargetGenerateUploadResourceImage, StagedUploadTargetGenerateUploadResourceModel3d, StagedUploadTargetGenerateUploadResourceProductImage, StagedUploadTargetGenerateUploadResourceShopImage, StagedUploadTargetGenerateUploadResourceVideo, StagedUploadTargetGenerateUploadResourceBulkMutationVariables, StagedUploadTargetGenerateUploadResourceReturnLabel, StagedUploadTargetGenerateUploadResourceURLRedirectImport:
		return true
	}
	return false
}

func (e StagedUploadTargetGenerateUploadResource) String() string {
	return string(e)
}

func (e *StagedUploadTargetGenerateUploadResource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadTargetGenerateUploadResource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadTargetGenerateUploadResource", str)
	}
	return nil
}

func (e StagedUploadTargetGenerateUploadResource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
type StandardMetafieldDefinitionEnableUserErrorCode string

const (
	// The input value is invalid.
	StandardMetafieldDefinitionEnableUserErrorCodeInvalid StandardMetafieldDefinitionEnableUserErrorCode = "INVALID"
	// The input value is already taken.
	StandardMetafieldDefinitionEnableUserErrorCodeTaken StandardMetafieldDefinitionEnableUserErrorCode = "TAKEN"
	// The standard metafield definition template was not found.
	StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound StandardMetafieldDefinitionEnableUserErrorCode = "TEMPLATE_NOT_FOUND"
	// The maximum number of definitions per owner type has been exceeded.
	StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded StandardMetafieldDefinitionEnableUserErrorCode = "LIMIT_EXCEEDED"
	// The namespace and key is already in use for a set of your metafields.
	StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists StandardMetafieldDefinitionEnableUserErrorCode = "UNSTRUCTURED_ALREADY_EXISTS"
	// The definition type is not eligible to be used as collection condition.
	StandardMetafieldDefinitionEnableUserErrorCodeTypeNotAllowedForConditions StandardMetafieldDefinitionEnableUserErrorCode = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
)

var AllStandardMetafieldDefinitionEnableUserErrorCode = []StandardMetafieldDefinitionEnableUserErrorCode{
	StandardMetafieldDefinitionEnableUserErrorCodeInvalid,
	StandardMetafieldDefinitionEnableUserErrorCodeTaken,
	StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound,
	StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded,
	StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists,
	StandardMetafieldDefinitionEnableUserErrorCodeTypeNotAllowedForConditions,
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) IsValid() bool {
	switch e {
	case StandardMetafieldDefinitionEnableUserErrorCodeInvalid, StandardMetafieldDefinitionEnableUserErrorCodeTaken, StandardMetafieldDefinitionEnableUserErrorCodeTemplateNotFound, StandardMetafieldDefinitionEnableUserErrorCodeLimitExceeded, StandardMetafieldDefinitionEnableUserErrorCodeUnstructuredAlreadyExists, StandardMetafieldDefinitionEnableUserErrorCodeTypeNotAllowedForConditions:
		return true
	}
	return false
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) String() string {
	return string(e)
}

func (e *StandardMetafieldDefinitionEnableUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StandardMetafieldDefinitionEnableUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StandardMetafieldDefinitionEnableUserErrorCode", str)
	}
	return nil
}

func (e StandardMetafieldDefinitionEnableUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible error codes associated with making billing attempts. The error codes supplement the
// `error_message` to provide consistent results and help with dunning management.
type SubscriptionBillingAttemptErrorCode string

const (
	// Payment method was not found.
	//
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_NOT_FOUND"
	// Payment provider is not enabled.
	//
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled SubscriptionBillingAttemptErrorCode = "PAYMENT_PROVIDER_IS_NOT_ENABLED"
	// Payment method is invalid. Please update or create a new payment method.
	//
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod SubscriptionBillingAttemptErrorCode = "INVALID_PAYMENT_METHOD"
	// There was an unexpected error during the billing attempt.
	//
	SubscriptionBillingAttemptErrorCodeUnexpectedError SubscriptionBillingAttemptErrorCode = "UNEXPECTED_ERROR"
	// Payment method is expired.
	//
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod SubscriptionBillingAttemptErrorCode = "EXPIRED_PAYMENT_METHOD"
	// Payment method was declined by processor.
	//
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_DECLINED"
	// There was an error during the authentication.
	//
	SubscriptionBillingAttemptErrorCodeAuthenticationError SubscriptionBillingAttemptErrorCode = "AUTHENTICATION_ERROR"
	// Gateway is in test mode and attempted to bill a live payment method.
	//
	SubscriptionBillingAttemptErrorCodeTestMode SubscriptionBillingAttemptErrorCode = "TEST_MODE"
	// Payment method was canceled by buyer.
	SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod SubscriptionBillingAttemptErrorCode = "BUYER_CANCELED_PAYMENT_METHOD"
	// Customer was not found.
	SubscriptionBillingAttemptErrorCodeCustomerNotFound SubscriptionBillingAttemptErrorCode = "CUSTOMER_NOT_FOUND"
	// Customer is invalid.
	SubscriptionBillingAttemptErrorCodeCustomerInvalid SubscriptionBillingAttemptErrorCode = "CUSTOMER_INVALID"
	// The shipping address is either missing or invalid.
	SubscriptionBillingAttemptErrorCodeInvalidShippingAddress SubscriptionBillingAttemptErrorCode = "INVALID_SHIPPING_ADDRESS"
	// The billing agreement ID or the transaction ID for the customer's payment method is invalid.
	SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement SubscriptionBillingAttemptErrorCode = "INVALID_CUSTOMER_BILLING_AGREEMENT"
	// A payment has already been made for this invoice.
	SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid SubscriptionBillingAttemptErrorCode = "INVOICE_ALREADY_PAID"
	// Payment method cannot be used with the current payment gateway test mode configuration.
	SubscriptionBillingAttemptErrorCodePaymentMethodIncompatibleWithGatewayConfig SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG"
	// The amount is too small.
	SubscriptionBillingAttemptErrorCodeAmountTooSmall SubscriptionBillingAttemptErrorCode = "AMOUNT_TOO_SMALL"
	// No inventory location found or enabled.
	SubscriptionBillingAttemptErrorCodeInventoryAllocationsNotFound SubscriptionBillingAttemptErrorCode = "INVENTORY_ALLOCATIONS_NOT_FOUND"
	// Transient error, try again later.
	SubscriptionBillingAttemptErrorCodeTransientError SubscriptionBillingAttemptErrorCode = "TRANSIENT_ERROR"
)

var AllSubscriptionBillingAttemptErrorCode = []SubscriptionBillingAttemptErrorCode{
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound,
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled,
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod,
	SubscriptionBillingAttemptErrorCodeUnexpectedError,
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod,
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined,
	SubscriptionBillingAttemptErrorCodeAuthenticationError,
	SubscriptionBillingAttemptErrorCodeTestMode,
	SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod,
	SubscriptionBillingAttemptErrorCodeCustomerNotFound,
	SubscriptionBillingAttemptErrorCodeCustomerInvalid,
	SubscriptionBillingAttemptErrorCodeInvalidShippingAddress,
	SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement,
	SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid,
	SubscriptionBillingAttemptErrorCodePaymentMethodIncompatibleWithGatewayConfig,
	SubscriptionBillingAttemptErrorCodeAmountTooSmall,
	SubscriptionBillingAttemptErrorCodeInventoryAllocationsNotFound,
	SubscriptionBillingAttemptErrorCodeTransientError,
}

func (e SubscriptionBillingAttemptErrorCode) IsValid() bool {
	switch e {
	case SubscriptionBillingAttemptErrorCodePaymentMethodNotFound, SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled, SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod, SubscriptionBillingAttemptErrorCodeUnexpectedError, SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod, SubscriptionBillingAttemptErrorCodePaymentMethodDeclined, SubscriptionBillingAttemptErrorCodeAuthenticationError, SubscriptionBillingAttemptErrorCodeTestMode, SubscriptionBillingAttemptErrorCodeBuyerCanceledPaymentMethod, SubscriptionBillingAttemptErrorCodeCustomerNotFound, SubscriptionBillingAttemptErrorCodeCustomerInvalid, SubscriptionBillingAttemptErrorCodeInvalidShippingAddress, SubscriptionBillingAttemptErrorCodeInvalidCustomerBillingAgreement, SubscriptionBillingAttemptErrorCodeInvoiceAlreadyPaid, SubscriptionBillingAttemptErrorCodePaymentMethodIncompatibleWithGatewayConfig, SubscriptionBillingAttemptErrorCodeAmountTooSmall, SubscriptionBillingAttemptErrorCodeInventoryAllocationsNotFound, SubscriptionBillingAttemptErrorCodeTransientError:
		return true
	}
	return false
}

func (e SubscriptionBillingAttemptErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionBillingAttemptErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingAttemptErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingAttemptErrorCode", str)
	}
	return nil
}

func (e SubscriptionBillingAttemptErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the SubscriptionBillingAttempts query.
type SubscriptionBillingAttemptsSortKeys string

const (
	// Sort by the `created_at` value.
	SubscriptionBillingAttemptsSortKeysCreatedAt SubscriptionBillingAttemptsSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	SubscriptionBillingAttemptsSortKeysID SubscriptionBillingAttemptsSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	SubscriptionBillingAttemptsSortKeysRelevance SubscriptionBillingAttemptsSortKeys = "RELEVANCE"
)

var AllSubscriptionBillingAttemptsSortKeys = []SubscriptionBillingAttemptsSortKeys{
	SubscriptionBillingAttemptsSortKeysCreatedAt,
	SubscriptionBillingAttemptsSortKeysID,
	SubscriptionBillingAttemptsSortKeysRelevance,
}

func (e SubscriptionBillingAttemptsSortKeys) IsValid() bool {
	switch e {
	case SubscriptionBillingAttemptsSortKeysCreatedAt, SubscriptionBillingAttemptsSortKeysID, SubscriptionBillingAttemptsSortKeysRelevance:
		return true
	}
	return false
}

func (e SubscriptionBillingAttemptsSortKeys) String() string {
	return string(e)
}

func (e *SubscriptionBillingAttemptsSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingAttemptsSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingAttemptsSortKeys", str)
	}
	return nil
}

func (e SubscriptionBillingAttemptsSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible status values of a subscription billing cycle.
type SubscriptionBillingCycleBillingCycleStatus string

const (
	// The billing cycle is billed.
	SubscriptionBillingCycleBillingCycleStatusBilled SubscriptionBillingCycleBillingCycleStatus = "BILLED"
	// The billing cycle hasn't been billed.
	SubscriptionBillingCycleBillingCycleStatusUnbilled SubscriptionBillingCycleBillingCycleStatus = "UNBILLED"
)

var AllSubscriptionBillingCycleBillingCycleStatus = []SubscriptionBillingCycleBillingCycleStatus{
	SubscriptionBillingCycleBillingCycleStatusBilled,
	SubscriptionBillingCycleBillingCycleStatusUnbilled,
}

func (e SubscriptionBillingCycleBillingCycleStatus) IsValid() bool {
	switch e {
	case SubscriptionBillingCycleBillingCycleStatusBilled, SubscriptionBillingCycleBillingCycleStatusUnbilled:
		return true
	}
	return false
}

func (e SubscriptionBillingCycleBillingCycleStatus) String() string {
	return string(e)
}

func (e *SubscriptionBillingCycleBillingCycleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingCycleBillingCycleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingCycleBillingCycleStatus", str)
	}
	return nil
}

func (e SubscriptionBillingCycleBillingCycleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SubscriptionBillingCycleUserError`.
type SubscriptionBillingCycleErrorCode string

const (
	// The input value is invalid.
	SubscriptionBillingCycleErrorCodeInvalid SubscriptionBillingCycleErrorCode = "INVALID"
	// Can't find the billing cycle.
	SubscriptionBillingCycleErrorCodeCycleNotFound SubscriptionBillingCycleErrorCode = "CYCLE_NOT_FOUND"
	// There's no contract or schedule edit associated with the targeted billing cycle(s).
	SubscriptionBillingCycleErrorCodeNoCycleEdits SubscriptionBillingCycleErrorCode = "NO_CYCLE_EDITS"
	// The index selector is invalid.
	SubscriptionBillingCycleErrorCodeInvalidCycleIndex SubscriptionBillingCycleErrorCode = "INVALID_CYCLE_INDEX"
	// The date selector is invalid.
	SubscriptionBillingCycleErrorCodeInvalidDate SubscriptionBillingCycleErrorCode = "INVALID_DATE"
	// Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule.
	SubscriptionBillingCycleErrorCodeEmptyBillingCycleEditScheduleInput SubscriptionBillingCycleErrorCode = "EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT"
	// Billing date cannot be set on skipped billing cycle.
	SubscriptionBillingCycleErrorCodeBillingDateSetOnSkipped SubscriptionBillingCycleErrorCode = "BILLING_DATE_SET_ON_SKIPPED"
	// Billing date of a cycle cannot be set to a value outside of its billing date range.
	SubscriptionBillingCycleErrorCodeOutOfBounds SubscriptionBillingCycleErrorCode = "OUT_OF_BOUNDS"
	// Billing cycle selector cannot select upcoming billing cycle past limit.
	SubscriptionBillingCycleErrorCodeUpcomingCycleLimitExceeded SubscriptionBillingCycleErrorCode = "UPCOMING_CYCLE_LIMIT_EXCEEDED"
	// Billing cycle selector cannot select billing cycle outside of index range.
	SubscriptionBillingCycleErrorCodeCycleIndexOutOfRange SubscriptionBillingCycleErrorCode = "CYCLE_INDEX_OUT_OF_RANGE"
	// Billing cycle selector cannot select billing cycle outside of start date range.
	SubscriptionBillingCycleErrorCodeCycleStartDateOutOfRange SubscriptionBillingCycleErrorCode = "CYCLE_START_DATE_OUT_OF_RANGE"
	// Billing cycle has incomplete billing attempts in progress.
	SubscriptionBillingCycleErrorCodeIncompleteBillingAttempts SubscriptionBillingCycleErrorCode = "INCOMPLETE_BILLING_ATTEMPTS"
)

var AllSubscriptionBillingCycleErrorCode = []SubscriptionBillingCycleErrorCode{
	SubscriptionBillingCycleErrorCodeInvalid,
	SubscriptionBillingCycleErrorCodeCycleNotFound,
	SubscriptionBillingCycleErrorCodeNoCycleEdits,
	SubscriptionBillingCycleErrorCodeInvalidCycleIndex,
	SubscriptionBillingCycleErrorCodeInvalidDate,
	SubscriptionBillingCycleErrorCodeEmptyBillingCycleEditScheduleInput,
	SubscriptionBillingCycleErrorCodeBillingDateSetOnSkipped,
	SubscriptionBillingCycleErrorCodeOutOfBounds,
	SubscriptionBillingCycleErrorCodeUpcomingCycleLimitExceeded,
	SubscriptionBillingCycleErrorCodeCycleIndexOutOfRange,
	SubscriptionBillingCycleErrorCodeCycleStartDateOutOfRange,
	SubscriptionBillingCycleErrorCodeIncompleteBillingAttempts,
}

func (e SubscriptionBillingCycleErrorCode) IsValid() bool {
	switch e {
	case SubscriptionBillingCycleErrorCodeInvalid, SubscriptionBillingCycleErrorCodeCycleNotFound, SubscriptionBillingCycleErrorCodeNoCycleEdits, SubscriptionBillingCycleErrorCodeInvalidCycleIndex, SubscriptionBillingCycleErrorCodeInvalidDate, SubscriptionBillingCycleErrorCodeEmptyBillingCycleEditScheduleInput, SubscriptionBillingCycleErrorCodeBillingDateSetOnSkipped, SubscriptionBillingCycleErrorCodeOutOfBounds, SubscriptionBillingCycleErrorCodeUpcomingCycleLimitExceeded, SubscriptionBillingCycleErrorCodeCycleIndexOutOfRange, SubscriptionBillingCycleErrorCodeCycleStartDateOutOfRange, SubscriptionBillingCycleErrorCodeIncompleteBillingAttempts:
		return true
	}
	return false
}

func (e SubscriptionBillingCycleErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionBillingCycleErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingCycleErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingCycleErrorCode", str)
	}
	return nil
}

func (e SubscriptionBillingCycleErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The input fields for possible reasons for editing the billing cycle's schedule.
type SubscriptionBillingCycleScheduleEditInputScheduleEditReason string

const (
	// Buyer initiated the schedule edit.
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonBuyerInitiated SubscriptionBillingCycleScheduleEditInputScheduleEditReason = "BUYER_INITIATED"
	// Merchant initiated the schedule edit.
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonMerchantInitiated SubscriptionBillingCycleScheduleEditInputScheduleEditReason = "MERCHANT_INITIATED"
	// Developer initiated the schedule edit.
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonDevInitiated SubscriptionBillingCycleScheduleEditInputScheduleEditReason = "DEV_INITIATED"
)

var AllSubscriptionBillingCycleScheduleEditInputScheduleEditReason = []SubscriptionBillingCycleScheduleEditInputScheduleEditReason{
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonBuyerInitiated,
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonMerchantInitiated,
	SubscriptionBillingCycleScheduleEditInputScheduleEditReasonDevInitiated,
}

func (e SubscriptionBillingCycleScheduleEditInputScheduleEditReason) IsValid() bool {
	switch e {
	case SubscriptionBillingCycleScheduleEditInputScheduleEditReasonBuyerInitiated, SubscriptionBillingCycleScheduleEditInputScheduleEditReasonMerchantInitiated, SubscriptionBillingCycleScheduleEditInputScheduleEditReasonDevInitiated:
		return true
	}
	return false
}

func (e SubscriptionBillingCycleScheduleEditInputScheduleEditReason) String() string {
	return string(e)
}

func (e *SubscriptionBillingCycleScheduleEditInputScheduleEditReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingCycleScheduleEditInputScheduleEditReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingCycleScheduleEditInputScheduleEditReason", str)
	}
	return nil
}

func (e SubscriptionBillingCycleScheduleEditInputScheduleEditReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the SubscriptionBillingCycles query.
type SubscriptionBillingCyclesSortKeys string

const (
	// Sort by the `cycle_index` value.
	SubscriptionBillingCyclesSortKeysCycleIndex SubscriptionBillingCyclesSortKeys = "CYCLE_INDEX"
	// Sort by the `id` value.
	SubscriptionBillingCyclesSortKeysID SubscriptionBillingCyclesSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	SubscriptionBillingCyclesSortKeysRelevance SubscriptionBillingCyclesSortKeys = "RELEVANCE"
)

var AllSubscriptionBillingCyclesSortKeys = []SubscriptionBillingCyclesSortKeys{
	SubscriptionBillingCyclesSortKeysCycleIndex,
	SubscriptionBillingCyclesSortKeysID,
	SubscriptionBillingCyclesSortKeysRelevance,
}

func (e SubscriptionBillingCyclesSortKeys) IsValid() bool {
	switch e {
	case SubscriptionBillingCyclesSortKeysCycleIndex, SubscriptionBillingCyclesSortKeysID, SubscriptionBillingCyclesSortKeysRelevance:
		return true
	}
	return false
}

func (e SubscriptionBillingCyclesSortKeys) String() string {
	return string(e)
}

func (e *SubscriptionBillingCyclesSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingCyclesSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingCyclesSortKeys", str)
	}
	return nil
}

func (e SubscriptionBillingCyclesSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Select subscription billing cycles to be targeted.
type SubscriptionBillingCyclesTargetSelection string

const (
	// Target all future subscription billing cycles.
	SubscriptionBillingCyclesTargetSelectionAll SubscriptionBillingCyclesTargetSelection = "ALL"
)

var AllSubscriptionBillingCyclesTargetSelection = []SubscriptionBillingCyclesTargetSelection{
	SubscriptionBillingCyclesTargetSelectionAll,
}

func (e SubscriptionBillingCyclesTargetSelection) IsValid() bool {
	switch e {
	case SubscriptionBillingCyclesTargetSelectionAll:
		return true
	}
	return false
}

func (e SubscriptionBillingCyclesTargetSelection) String() string {
	return string(e)
}

func (e *SubscriptionBillingCyclesTargetSelection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingCyclesTargetSelection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingCyclesTargetSelection", str)
	}
	return nil
}

func (e SubscriptionBillingCyclesTargetSelection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SubscriptionContractUserError`.
type SubscriptionContractErrorCode string

const (
	// The input value is invalid.
	SubscriptionContractErrorCodeInvalid SubscriptionContractErrorCode = "INVALID"
)

var AllSubscriptionContractErrorCode = []SubscriptionContractErrorCode{
	SubscriptionContractErrorCodeInvalid,
}

func (e SubscriptionContractErrorCode) IsValid() bool {
	switch e {
	case SubscriptionContractErrorCodeInvalid:
		return true
	}
	return false
}

func (e SubscriptionContractErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionContractErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractErrorCode", str)
	}
	return nil
}

func (e SubscriptionContractErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible status values of the last payment on a subscription contract.
type SubscriptionContractLastPaymentStatus string

const (
	// Successful subscription billing attempt.
	SubscriptionContractLastPaymentStatusSucceeded SubscriptionContractLastPaymentStatus = "SUCCEEDED"
	// Failed subscription billing attempt.
	SubscriptionContractLastPaymentStatusFailed SubscriptionContractLastPaymentStatus = "FAILED"
)

var AllSubscriptionContractLastPaymentStatus = []SubscriptionContractLastPaymentStatus{
	SubscriptionContractLastPaymentStatusSucceeded,
	SubscriptionContractLastPaymentStatusFailed,
}

func (e SubscriptionContractLastPaymentStatus) IsValid() bool {
	switch e {
	case SubscriptionContractLastPaymentStatusSucceeded, SubscriptionContractLastPaymentStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionContractLastPaymentStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractLastPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractLastPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractLastPaymentStatus", str)
	}
	return nil
}

func (e SubscriptionContractLastPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible status values of a subscription.
type SubscriptionContractSubscriptionStatus string

const (
	// The contract is active and continuing per its policies.
	SubscriptionContractSubscriptionStatusActive SubscriptionContractSubscriptionStatus = "ACTIVE"
	// The contract is temporarily paused and is expected to resume in the future.
	SubscriptionContractSubscriptionStatusPaused SubscriptionContractSubscriptionStatus = "PAUSED"
	// The contract was ended by an unplanned customer action.
	SubscriptionContractSubscriptionStatusCancelled SubscriptionContractSubscriptionStatus = "CANCELLED"
	// The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
	SubscriptionContractSubscriptionStatusExpired SubscriptionContractSubscriptionStatus = "EXPIRED"
	// The contract ended because billing failed and no further billing attempts are expected.
	SubscriptionContractSubscriptionStatusFailed SubscriptionContractSubscriptionStatus = "FAILED"
	// The contract has expired due to inactivity.
	SubscriptionContractSubscriptionStatusStale SubscriptionContractSubscriptionStatus = "STALE"
)

var AllSubscriptionContractSubscriptionStatus = []SubscriptionContractSubscriptionStatus{
	SubscriptionContractSubscriptionStatusActive,
	SubscriptionContractSubscriptionStatusPaused,
	SubscriptionContractSubscriptionStatusCancelled,
	SubscriptionContractSubscriptionStatusExpired,
	SubscriptionContractSubscriptionStatusFailed,
	SubscriptionContractSubscriptionStatusStale,
}

func (e SubscriptionContractSubscriptionStatus) IsValid() bool {
	switch e {
	case SubscriptionContractSubscriptionStatusActive, SubscriptionContractSubscriptionStatusPaused, SubscriptionContractSubscriptionStatusCancelled, SubscriptionContractSubscriptionStatusExpired, SubscriptionContractSubscriptionStatusFailed, SubscriptionContractSubscriptionStatusStale:
		return true
	}
	return false
}

func (e SubscriptionContractSubscriptionStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractSubscriptionStatus", str)
	}
	return nil
}

func (e SubscriptionContractSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a discount on a subscription draft was rejected.
type SubscriptionDiscountRejectionReason string

const (
	// Discount code is not found.
	SubscriptionDiscountRejectionReasonNotFound SubscriptionDiscountRejectionReason = "NOT_FOUND"
	// Discount does not apply to any of the given line items.
	SubscriptionDiscountRejectionReasonNoEntitledLineItems SubscriptionDiscountRejectionReason = "NO_ENTITLED_LINE_ITEMS"
	// Quantity of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonQuantityNotInRange SubscriptionDiscountRejectionReason = "QUANTITY_NOT_IN_RANGE"
	// Purchase amount of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonPurchaseNotInRange SubscriptionDiscountRejectionReason = "PURCHASE_NOT_IN_RANGE"
	// Given customer does not qualify for the discount.
	SubscriptionDiscountRejectionReasonCustomerNotEligible SubscriptionDiscountRejectionReason = "CUSTOMER_NOT_ELIGIBLE"
	// Discount usage limit has been reached.
	SubscriptionDiscountRejectionReasonUsageLimitReached SubscriptionDiscountRejectionReason = "USAGE_LIMIT_REACHED"
	// Customer usage limit has been reached.
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached SubscriptionDiscountRejectionReason = "CUSTOMER_USAGE_LIMIT_REACHED"
	// Discount is inactive.
	SubscriptionDiscountRejectionReasonCurrentlyInactive SubscriptionDiscountRejectionReason = "CURRENTLY_INACTIVE"
	// No applicable shipping lines.
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines SubscriptionDiscountRejectionReason = "NO_ENTITLED_SHIPPING_LINES"
	// Purchase type does not qualify for the discount.
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType SubscriptionDiscountRejectionReason = "INCOMPATIBLE_PURCHASE_TYPE"
	// Internal error during discount code validation.
	SubscriptionDiscountRejectionReasonInternalError SubscriptionDiscountRejectionReason = "INTERNAL_ERROR"
)

var AllSubscriptionDiscountRejectionReason = []SubscriptionDiscountRejectionReason{
	SubscriptionDiscountRejectionReasonNotFound,
	SubscriptionDiscountRejectionReasonNoEntitledLineItems,
	SubscriptionDiscountRejectionReasonQuantityNotInRange,
	SubscriptionDiscountRejectionReasonPurchaseNotInRange,
	SubscriptionDiscountRejectionReasonCustomerNotEligible,
	SubscriptionDiscountRejectionReasonUsageLimitReached,
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached,
	SubscriptionDiscountRejectionReasonCurrentlyInactive,
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines,
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType,
	SubscriptionDiscountRejectionReasonInternalError,
}

func (e SubscriptionDiscountRejectionReason) IsValid() bool {
	switch e {
	case SubscriptionDiscountRejectionReasonNotFound, SubscriptionDiscountRejectionReasonNoEntitledLineItems, SubscriptionDiscountRejectionReasonQuantityNotInRange, SubscriptionDiscountRejectionReasonPurchaseNotInRange, SubscriptionDiscountRejectionReasonCustomerNotEligible, SubscriptionDiscountRejectionReasonUsageLimitReached, SubscriptionDiscountRejectionReasonCustomerUsageLimitReached, SubscriptionDiscountRejectionReasonCurrentlyInactive, SubscriptionDiscountRejectionReasonNoEntitledShippingLines, SubscriptionDiscountRejectionReasonIncompatiblePurchaseType, SubscriptionDiscountRejectionReasonInternalError:
		return true
	}
	return false
}

func (e SubscriptionDiscountRejectionReason) String() string {
	return string(e)
}

func (e *SubscriptionDiscountRejectionReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDiscountRejectionReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDiscountRejectionReason", str)
	}
	return nil
}

func (e SubscriptionDiscountRejectionReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `SubscriptionDraftUserError`.
type SubscriptionDraftErrorCode string

const (
	// This line has already been removed.
	SubscriptionDraftErrorCodeAlreadyRemoved SubscriptionDraftErrorCode = "ALREADY_REMOVED"
	// Input value is not present.
	SubscriptionDraftErrorCodePresence SubscriptionDraftErrorCode = "PRESENCE"
	// Subscription draft has been already committed.
	SubscriptionDraftErrorCodeCommitted SubscriptionDraftErrorCode = "COMMITTED"
	// Value is not in range.
	SubscriptionDraftErrorCodeNotInRange SubscriptionDraftErrorCode = "NOT_IN_RANGE"
	// The value is not an integer.
	SubscriptionDraftErrorCodeNotAnInteger SubscriptionDraftErrorCode = "NOT_AN_INTEGER"
	// The maximum number of cycles must be greater than the minimum.
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SubscriptionDraftErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// The delivery policy interval must be a multiple of the billing policy interval.
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling SubscriptionDraftErrorCode = "DELIVERY_MUST_BE_MULTIPLE_OF_BILLING"
	// Next billing date is invalid.
	SubscriptionDraftErrorCodeInvalidBillingDate SubscriptionDraftErrorCode = "INVALID_BILLING_DATE"
	// Note length is too long.
	SubscriptionDraftErrorCodeInvalidNoteLength SubscriptionDraftErrorCode = "INVALID_NOTE_LENGTH"
	// Must have at least one line.
	SubscriptionDraftErrorCodeInvalidLines SubscriptionDraftErrorCode = "INVALID_LINES"
	// Discount must have at least one entitled line.
	SubscriptionDraftErrorCodeNoEntitledLines SubscriptionDraftErrorCode = "NO_ENTITLED_LINES"
	// The customer doesn't exist.
	SubscriptionDraftErrorCodeCustomerDoesNotExist SubscriptionDraftErrorCode = "CUSTOMER_DOES_NOT_EXIST"
	// The payment method customer must be the same as the contract customer.
	SubscriptionDraftErrorCodeCustomerMismatch SubscriptionDraftErrorCode = "CUSTOMER_MISMATCH"
	// The delivery method can't be blank if any lines require shipping.
	SubscriptionDraftErrorCodeDeliveryMethodRequired SubscriptionDraftErrorCode = "DELIVERY_METHOD_REQUIRED"
	// The local delivery options must be set for local delivery.
	SubscriptionDraftErrorCodeMissingLocalDeliveryOptions SubscriptionDraftErrorCode = "MISSING_LOCAL_DELIVERY_OPTIONS"
	// The after cycle attribute must be unique between cycle discounts.
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle SubscriptionDraftErrorCode = "CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE"
	// The adjustment value must the same type as the adjustment type.
	SubscriptionDraftErrorCodeInvalidAdjustmentType SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_TYPE"
	// The adjustment value must be either fixed_value or percentage.
	SubscriptionDraftErrorCodeInvalidAdjustmentValue SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_VALUE"
	// Another operation updated the contract concurrently as the commit was in progress.
	SubscriptionDraftErrorCodeStaleContract SubscriptionDraftErrorCode = "STALE_CONTRACT"
	// Currency is not enabled.
	SubscriptionDraftErrorCodeCurrencyNotEnabled SubscriptionDraftErrorCode = "CURRENCY_NOT_ENABLED"
	// Cannot update a subscription contract with a future contract or schedule edit.
	SubscriptionDraftErrorCodeHasFutureEdits SubscriptionDraftErrorCode = "HAS_FUTURE_EDITS"
	// Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit.
	SubscriptionDraftErrorCodeBillingCyclePresent SubscriptionDraftErrorCode = "BILLING_CYCLE_PRESENT"
	// Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit.
	SubscriptionDraftErrorCodeBillingCycleAbsent SubscriptionDraftErrorCode = "BILLING_CYCLE_ABSENT"
	// Delivery policy cannot be updated for billing cycle contract drafts.
	SubscriptionDraftErrorCodeBillingCycleContractDraftDeliveryPolicyInvalid SubscriptionDraftErrorCode = "BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID"
	// Billing policy cannot be updated for billing cycle contract drafts.
	SubscriptionDraftErrorCodeBillingCycleContractDraftBillingPolicyInvalid SubscriptionDraftErrorCode = "BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID"
	// Contract draft must be a billing cycle contract draft for contract concatenation.
	SubscriptionDraftErrorCodeConcatenationBillingCycleContractDraftRequired SubscriptionDraftErrorCode = "CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED"
	// Concatenated contracts cannot contain duplicate subscription contracts.
	SubscriptionDraftErrorCodeDuplicateConcatenatedContracts SubscriptionDraftErrorCode = "DUPLICATE_CONCATENATED_CONTRACTS"
	// Billing cycle selector cannot select upcoming billing cycle past limit.
	SubscriptionDraftErrorCodeUpcomingCycleLimitExceeded SubscriptionDraftErrorCode = "UPCOMING_CYCLE_LIMIT_EXCEEDED"
	// Billing cycle selector cannot select billing cycle outside of index range.
	SubscriptionDraftErrorCodeCycleIndexOutOfRange SubscriptionDraftErrorCode = "CYCLE_INDEX_OUT_OF_RANGE"
	// Billing cycle selector cannot select billing cycle outside of start date range.
	SubscriptionDraftErrorCodeCycleStartDateOutOfRange SubscriptionDraftErrorCode = "CYCLE_START_DATE_OUT_OF_RANGE"
	// Billing cycle selector requires exactly one of index or date to be provided.
	SubscriptionDraftErrorCodeCycleSelectorValidateOneOf SubscriptionDraftErrorCode = "CYCLE_SELECTOR_VALIDATE_ONE_OF"
	// Maximum number of concatenated contracts on a billing cycle contract draft exceeded.
	SubscriptionDraftErrorCodeExceededMaxConcatenatedContracts SubscriptionDraftErrorCode = "EXCEEDED_MAX_CONCATENATED_CONTRACTS"
	// The input value is invalid.
	SubscriptionDraftErrorCodeInvalid SubscriptionDraftErrorCode = "INVALID"
	// The input value is blank.
	SubscriptionDraftErrorCodeBlank SubscriptionDraftErrorCode = "BLANK"
	// The input value should be greater than the minimum allowed value.
	SubscriptionDraftErrorCodeGreaterThan SubscriptionDraftErrorCode = "GREATER_THAN"
	// The input value should be greater than or equal to the minimum value allowed.
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo SubscriptionDraftErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// The input value should be less than the maximum value allowed.
	SubscriptionDraftErrorCodeLessThan SubscriptionDraftErrorCode = "LESS_THAN"
	// The input value should be less than or equal to the maximum value allowed.
	SubscriptionDraftErrorCodeLessThanOrEqualTo SubscriptionDraftErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// The input value is too long.
	SubscriptionDraftErrorCodeTooLong SubscriptionDraftErrorCode = "TOO_LONG"
	// The input value is too short.
	SubscriptionDraftErrorCodeTooShort SubscriptionDraftErrorCode = "TOO_SHORT"
)

var AllSubscriptionDraftErrorCode = []SubscriptionDraftErrorCode{
	SubscriptionDraftErrorCodeAlreadyRemoved,
	SubscriptionDraftErrorCodePresence,
	SubscriptionDraftErrorCodeCommitted,
	SubscriptionDraftErrorCodeNotInRange,
	SubscriptionDraftErrorCodeNotAnInteger,
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling,
	SubscriptionDraftErrorCodeInvalidBillingDate,
	SubscriptionDraftErrorCodeInvalidNoteLength,
	SubscriptionDraftErrorCodeInvalidLines,
	SubscriptionDraftErrorCodeNoEntitledLines,
	SubscriptionDraftErrorCodeCustomerDoesNotExist,
	SubscriptionDraftErrorCodeCustomerMismatch,
	SubscriptionDraftErrorCodeDeliveryMethodRequired,
	SubscriptionDraftErrorCodeMissingLocalDeliveryOptions,
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle,
	SubscriptionDraftErrorCodeInvalidAdjustmentType,
	SubscriptionDraftErrorCodeInvalidAdjustmentValue,
	SubscriptionDraftErrorCodeStaleContract,
	SubscriptionDraftErrorCodeCurrencyNotEnabled,
	SubscriptionDraftErrorCodeHasFutureEdits,
	SubscriptionDraftErrorCodeBillingCyclePresent,
	SubscriptionDraftErrorCodeBillingCycleAbsent,
	SubscriptionDraftErrorCodeBillingCycleContractDraftDeliveryPolicyInvalid,
	SubscriptionDraftErrorCodeBillingCycleContractDraftBillingPolicyInvalid,
	SubscriptionDraftErrorCodeConcatenationBillingCycleContractDraftRequired,
	SubscriptionDraftErrorCodeDuplicateConcatenatedContracts,
	SubscriptionDraftErrorCodeUpcomingCycleLimitExceeded,
	SubscriptionDraftErrorCodeCycleIndexOutOfRange,
	SubscriptionDraftErrorCodeCycleStartDateOutOfRange,
	SubscriptionDraftErrorCodeCycleSelectorValidateOneOf,
	SubscriptionDraftErrorCodeExceededMaxConcatenatedContracts,
	SubscriptionDraftErrorCodeInvalid,
	SubscriptionDraftErrorCodeBlank,
	SubscriptionDraftErrorCodeGreaterThan,
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo,
	SubscriptionDraftErrorCodeLessThan,
	SubscriptionDraftErrorCodeLessThanOrEqualTo,
	SubscriptionDraftErrorCodeTooLong,
	SubscriptionDraftErrorCodeTooShort,
}

func (e SubscriptionDraftErrorCode) IsValid() bool {
	switch e {
	case SubscriptionDraftErrorCodeAlreadyRemoved, SubscriptionDraftErrorCodePresence, SubscriptionDraftErrorCodeCommitted, SubscriptionDraftErrorCodeNotInRange, SubscriptionDraftErrorCodeNotAnInteger, SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling, SubscriptionDraftErrorCodeInvalidBillingDate, SubscriptionDraftErrorCodeInvalidNoteLength, SubscriptionDraftErrorCodeInvalidLines, SubscriptionDraftErrorCodeNoEntitledLines, SubscriptionDraftErrorCodeCustomerDoesNotExist, SubscriptionDraftErrorCodeCustomerMismatch, SubscriptionDraftErrorCodeDeliveryMethodRequired, SubscriptionDraftErrorCodeMissingLocalDeliveryOptions, SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle, SubscriptionDraftErrorCodeInvalidAdjustmentType, SubscriptionDraftErrorCodeInvalidAdjustmentValue, SubscriptionDraftErrorCodeStaleContract, SubscriptionDraftErrorCodeCurrencyNotEnabled, SubscriptionDraftErrorCodeHasFutureEdits, SubscriptionDraftErrorCodeBillingCyclePresent, SubscriptionDraftErrorCodeBillingCycleAbsent, SubscriptionDraftErrorCodeBillingCycleContractDraftDeliveryPolicyInvalid, SubscriptionDraftErrorCodeBillingCycleContractDraftBillingPolicyInvalid, SubscriptionDraftErrorCodeConcatenationBillingCycleContractDraftRequired, SubscriptionDraftErrorCodeDuplicateConcatenatedContracts, SubscriptionDraftErrorCodeUpcomingCycleLimitExceeded, SubscriptionDraftErrorCodeCycleIndexOutOfRange, SubscriptionDraftErrorCodeCycleStartDateOutOfRange, SubscriptionDraftErrorCodeCycleSelectorValidateOneOf, SubscriptionDraftErrorCodeExceededMaxConcatenatedContracts, SubscriptionDraftErrorCodeInvalid, SubscriptionDraftErrorCodeBlank, SubscriptionDraftErrorCodeGreaterThan, SubscriptionDraftErrorCodeGreaterThanOrEqualTo, SubscriptionDraftErrorCodeLessThan, SubscriptionDraftErrorCodeLessThanOrEqualTo, SubscriptionDraftErrorCodeTooLong, SubscriptionDraftErrorCodeTooShort:
		return true
	}
	return false
}

func (e SubscriptionDraftErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionDraftErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDraftErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDraftErrorCode", str)
	}
	return nil
}

func (e SubscriptionDraftErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the kind of the suggested order transaction.
type SuggestedOrderTransactionKind string

const (
	// A suggested refund transaction for an order.
	SuggestedOrderTransactionKindSuggestedRefund SuggestedOrderTransactionKind = "SUGGESTED_REFUND"
)

var AllSuggestedOrderTransactionKind = []SuggestedOrderTransactionKind{
	SuggestedOrderTransactionKindSuggestedRefund,
}

func (e SuggestedOrderTransactionKind) IsValid() bool {
	switch e {
	case SuggestedOrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e SuggestedOrderTransactionKind) String() string {
	return string(e)
}

func (e *SuggestedOrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SuggestedOrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SuggestedOrderTransactionKind", str)
	}
	return nil
}

func (e SuggestedOrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `TaxAppConfigureUserError`.
type TaxAppConfigureUserErrorCode string

const (
	// Unable to find the tax partner record.
	TaxAppConfigureUserErrorCodeTaxPartnerNotFound TaxAppConfigureUserErrorCode = "TAX_PARTNER_NOT_FOUND"
	// Unable to update tax partner state.
	TaxAppConfigureUserErrorCodeTaxPartnerStateUpdateFailed TaxAppConfigureUserErrorCode = "TAX_PARTNER_STATE_UPDATE_FAILED"
	// Unable to update already active tax partner.
	TaxAppConfigureUserErrorCodeTaxPartnerAlreadyActive TaxAppConfigureUserErrorCode = "TAX_PARTNER_ALREADY_ACTIVE"
)

var AllTaxAppConfigureUserErrorCode = []TaxAppConfigureUserErrorCode{
	TaxAppConfigureUserErrorCodeTaxPartnerNotFound,
	TaxAppConfigureUserErrorCodeTaxPartnerStateUpdateFailed,
	TaxAppConfigureUserErrorCodeTaxPartnerAlreadyActive,
}

func (e TaxAppConfigureUserErrorCode) IsValid() bool {
	switch e {
	case TaxAppConfigureUserErrorCodeTaxPartnerNotFound, TaxAppConfigureUserErrorCodeTaxPartnerStateUpdateFailed, TaxAppConfigureUserErrorCodeTaxPartnerAlreadyActive:
		return true
	}
	return false
}

func (e TaxAppConfigureUserErrorCode) String() string {
	return string(e)
}

func (e *TaxAppConfigureUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxAppConfigureUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxAppConfigureUserErrorCode", str)
	}
	return nil
}

func (e TaxAppConfigureUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available customer tax exemptions.
type TaxExemption string

const (
	// This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
	TaxExemptionCaStatusCardExemption TaxExemption = "CA_STATUS_CARD_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
	TaxExemptionCaBcResellerExemption TaxExemption = "CA_BC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
	TaxExemptionCaMbResellerExemption TaxExemption = "CA_MB_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkResellerExemption TaxExemption = "CA_SK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
	TaxExemptionCaDiplomatExemption TaxExemption = "CA_DIPLOMAT_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcCommercialFisheryExemption TaxExemption = "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
	TaxExemptionCaMbCommercialFisheryExemption TaxExemption = "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsCommercialFisheryExemption TaxExemption = "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
	TaxExemptionCaPeCommercialFisheryExemption TaxExemption = "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkCommercialFisheryExemption TaxExemption = "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcProductionAndMachineryExemption TaxExemption = "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkProductionAndMachineryExemption TaxExemption = "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcSubContractorExemption TaxExemption = "CA_BC_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkSubContractorExemption TaxExemption = "CA_SK_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcContractorExemption TaxExemption = "CA_BC_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkContractorExemption TaxExemption = "CA_SK_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
	TaxExemptionCaOnPurchaseExemption TaxExemption = "CA_ON_PURCHASE_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
	TaxExemptionCaMbFarmerExemption TaxExemption = "CA_MB_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsFarmerExemption TaxExemption = "CA_NS_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkFarmerExemption TaxExemption = "CA_SK_FARMER_EXEMPTION"
	// This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
	TaxExemptionEuReverseChargeExemptionRule TaxExemption = "EU_REVERSE_CHARGE_EXEMPTION_RULE"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
	TaxExemptionUsAlResellerExemption TaxExemption = "US_AL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
	TaxExemptionUsAkResellerExemption TaxExemption = "US_AK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
	TaxExemptionUsAzResellerExemption TaxExemption = "US_AZ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
	TaxExemptionUsArResellerExemption TaxExemption = "US_AR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
	TaxExemptionUsCaResellerExemption TaxExemption = "US_CA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
	TaxExemptionUsCoResellerExemption TaxExemption = "US_CO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
	TaxExemptionUsCtResellerExemption TaxExemption = "US_CT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
	TaxExemptionUsDeResellerExemption TaxExemption = "US_DE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
	TaxExemptionUsFlResellerExemption TaxExemption = "US_FL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
	TaxExemptionUsGaResellerExemption TaxExemption = "US_GA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
	TaxExemptionUsHiResellerExemption TaxExemption = "US_HI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
	TaxExemptionUsIDResellerExemption TaxExemption = "US_ID_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
	TaxExemptionUsIlResellerExemption TaxExemption = "US_IL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
	TaxExemptionUsInResellerExemption TaxExemption = "US_IN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
	TaxExemptionUsIaResellerExemption TaxExemption = "US_IA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
	TaxExemptionUsKsResellerExemption TaxExemption = "US_KS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
	TaxExemptionUsKyResellerExemption TaxExemption = "US_KY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
	TaxExemptionUsLaResellerExemption TaxExemption = "US_LA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
	TaxExemptionUsMeResellerExemption TaxExemption = "US_ME_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
	TaxExemptionUsMdResellerExemption TaxExemption = "US_MD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
	TaxExemptionUsMaResellerExemption TaxExemption = "US_MA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
	TaxExemptionUsMiResellerExemption TaxExemption = "US_MI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
	TaxExemptionUsMnResellerExemption TaxExemption = "US_MN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
	TaxExemptionUsMsResellerExemption TaxExemption = "US_MS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
	TaxExemptionUsMoResellerExemption TaxExemption = "US_MO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
	TaxExemptionUsMtResellerExemption TaxExemption = "US_MT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
	TaxExemptionUsNeResellerExemption TaxExemption = "US_NE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
	TaxExemptionUsNvResellerExemption TaxExemption = "US_NV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
	TaxExemptionUsNhResellerExemption TaxExemption = "US_NH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
	TaxExemptionUsNjResellerExemption TaxExemption = "US_NJ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
	TaxExemptionUsNmResellerExemption TaxExemption = "US_NM_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
	TaxExemptionUsNyResellerExemption TaxExemption = "US_NY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
	TaxExemptionUsNcResellerExemption TaxExemption = "US_NC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
	TaxExemptionUsNdResellerExemption TaxExemption = "US_ND_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
	TaxExemptionUsOhResellerExemption TaxExemption = "US_OH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
	TaxExemptionUsOkResellerExemption TaxExemption = "US_OK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
	TaxExemptionUsOrResellerExemption TaxExemption = "US_OR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
	TaxExemptionUsPaResellerExemption TaxExemption = "US_PA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
	TaxExemptionUsRiResellerExemption TaxExemption = "US_RI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
	TaxExemptionUsScResellerExemption TaxExemption = "US_SC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
	TaxExemptionUsSdResellerExemption TaxExemption = "US_SD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
	TaxExemptionUsTnResellerExemption TaxExemption = "US_TN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
	TaxExemptionUsTxResellerExemption TaxExemption = "US_TX_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
	TaxExemptionUsUtResellerExemption TaxExemption = "US_UT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
	TaxExemptionUsVtResellerExemption TaxExemption = "US_VT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
	TaxExemptionUsVaResellerExemption TaxExemption = "US_VA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
	TaxExemptionUsWaResellerExemption TaxExemption = "US_WA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
	TaxExemptionUsWvResellerExemption TaxExemption = "US_WV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
	TaxExemptionUsWiResellerExemption TaxExemption = "US_WI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
	TaxExemptionUsWyResellerExemption TaxExemption = "US_WY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
	TaxExemptionUsDcResellerExemption TaxExemption = "US_DC_RESELLER_EXEMPTION"
)

var AllTaxExemption = []TaxExemption{
	TaxExemptionCaStatusCardExemption,
	TaxExemptionCaBcResellerExemption,
	TaxExemptionCaMbResellerExemption,
	TaxExemptionCaSkResellerExemption,
	TaxExemptionCaDiplomatExemption,
	TaxExemptionCaBcCommercialFisheryExemption,
	TaxExemptionCaMbCommercialFisheryExemption,
	TaxExemptionCaNsCommercialFisheryExemption,
	TaxExemptionCaPeCommercialFisheryExemption,
	TaxExemptionCaSkCommercialFisheryExemption,
	TaxExemptionCaBcProductionAndMachineryExemption,
	TaxExemptionCaSkProductionAndMachineryExemption,
	TaxExemptionCaBcSubContractorExemption,
	TaxExemptionCaSkSubContractorExemption,
	TaxExemptionCaBcContractorExemption,
	TaxExemptionCaSkContractorExemption,
	TaxExemptionCaOnPurchaseExemption,
	TaxExemptionCaMbFarmerExemption,
	TaxExemptionCaNsFarmerExemption,
	TaxExemptionCaSkFarmerExemption,
	TaxExemptionEuReverseChargeExemptionRule,
	TaxExemptionUsAlResellerExemption,
	TaxExemptionUsAkResellerExemption,
	TaxExemptionUsAzResellerExemption,
	TaxExemptionUsArResellerExemption,
	TaxExemptionUsCaResellerExemption,
	TaxExemptionUsCoResellerExemption,
	TaxExemptionUsCtResellerExemption,
	TaxExemptionUsDeResellerExemption,
	TaxExemptionUsFlResellerExemption,
	TaxExemptionUsGaResellerExemption,
	TaxExemptionUsHiResellerExemption,
	TaxExemptionUsIDResellerExemption,
	TaxExemptionUsIlResellerExemption,
	TaxExemptionUsInResellerExemption,
	TaxExemptionUsIaResellerExemption,
	TaxExemptionUsKsResellerExemption,
	TaxExemptionUsKyResellerExemption,
	TaxExemptionUsLaResellerExemption,
	TaxExemptionUsMeResellerExemption,
	TaxExemptionUsMdResellerExemption,
	TaxExemptionUsMaResellerExemption,
	TaxExemptionUsMiResellerExemption,
	TaxExemptionUsMnResellerExemption,
	TaxExemptionUsMsResellerExemption,
	TaxExemptionUsMoResellerExemption,
	TaxExemptionUsMtResellerExemption,
	TaxExemptionUsNeResellerExemption,
	TaxExemptionUsNvResellerExemption,
	TaxExemptionUsNhResellerExemption,
	TaxExemptionUsNjResellerExemption,
	TaxExemptionUsNmResellerExemption,
	TaxExemptionUsNyResellerExemption,
	TaxExemptionUsNcResellerExemption,
	TaxExemptionUsNdResellerExemption,
	TaxExemptionUsOhResellerExemption,
	TaxExemptionUsOkResellerExemption,
	TaxExemptionUsOrResellerExemption,
	TaxExemptionUsPaResellerExemption,
	TaxExemptionUsRiResellerExemption,
	TaxExemptionUsScResellerExemption,
	TaxExemptionUsSdResellerExemption,
	TaxExemptionUsTnResellerExemption,
	TaxExemptionUsTxResellerExemption,
	TaxExemptionUsUtResellerExemption,
	TaxExemptionUsVtResellerExemption,
	TaxExemptionUsVaResellerExemption,
	TaxExemptionUsWaResellerExemption,
	TaxExemptionUsWvResellerExemption,
	TaxExemptionUsWiResellerExemption,
	TaxExemptionUsWyResellerExemption,
	TaxExemptionUsDcResellerExemption,
}

func (e TaxExemption) IsValid() bool {
	switch e {
	case TaxExemptionCaStatusCardExemption, TaxExemptionCaBcResellerExemption, TaxExemptionCaMbResellerExemption, TaxExemptionCaSkResellerExemption, TaxExemptionCaDiplomatExemption, TaxExemptionCaBcCommercialFisheryExemption, TaxExemptionCaMbCommercialFisheryExemption, TaxExemptionCaNsCommercialFisheryExemption, TaxExemptionCaPeCommercialFisheryExemption, TaxExemptionCaSkCommercialFisheryExemption, TaxExemptionCaBcProductionAndMachineryExemption, TaxExemptionCaSkProductionAndMachineryExemption, TaxExemptionCaBcSubContractorExemption, TaxExemptionCaSkSubContractorExemption, TaxExemptionCaBcContractorExemption, TaxExemptionCaSkContractorExemption, TaxExemptionCaOnPurchaseExemption, TaxExemptionCaMbFarmerExemption, TaxExemptionCaNsFarmerExemption, TaxExemptionCaSkFarmerExemption, TaxExemptionEuReverseChargeExemptionRule, TaxExemptionUsAlResellerExemption, TaxExemptionUsAkResellerExemption, TaxExemptionUsAzResellerExemption, TaxExemptionUsArResellerExemption, TaxExemptionUsCaResellerExemption, TaxExemptionUsCoResellerExemption, TaxExemptionUsCtResellerExemption, TaxExemptionUsDeResellerExemption, TaxExemptionUsFlResellerExemption, TaxExemptionUsGaResellerExemption, TaxExemptionUsHiResellerExemption, TaxExemptionUsIDResellerExemption, TaxExemptionUsIlResellerExemption, TaxExemptionUsInResellerExemption, TaxExemptionUsIaResellerExemption, TaxExemptionUsKsResellerExemption, TaxExemptionUsKyResellerExemption, TaxExemptionUsLaResellerExemption, TaxExemptionUsMeResellerExemption, TaxExemptionUsMdResellerExemption, TaxExemptionUsMaResellerExemption, TaxExemptionUsMiResellerExemption, TaxExemptionUsMnResellerExemption, TaxExemptionUsMsResellerExemption, TaxExemptionUsMoResellerExemption, TaxExemptionUsMtResellerExemption, TaxExemptionUsNeResellerExemption, TaxExemptionUsNvResellerExemption, TaxExemptionUsNhResellerExemption, TaxExemptionUsNjResellerExemption, TaxExemptionUsNmResellerExemption, TaxExemptionUsNyResellerExemption, TaxExemptionUsNcResellerExemption, TaxExemptionUsNdResellerExemption, TaxExemptionUsOhResellerExemption, TaxExemptionUsOkResellerExemption, TaxExemptionUsOrResellerExemption, TaxExemptionUsPaResellerExemption, TaxExemptionUsRiResellerExemption, TaxExemptionUsScResellerExemption, TaxExemptionUsSdResellerExemption, TaxExemptionUsTnResellerExemption, TaxExemptionUsTxResellerExemption, TaxExemptionUsUtResellerExemption, TaxExemptionUsVtResellerExemption, TaxExemptionUsVaResellerExemption, TaxExemptionUsWaResellerExemption, TaxExemptionUsWvResellerExemption, TaxExemptionUsWiResellerExemption, TaxExemptionUsWyResellerExemption, TaxExemptionUsDcResellerExemption:
		return true
	}
	return false
}

func (e TaxExemption) String() string {
	return string(e)
}

func (e *TaxExemption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxExemption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxExemption", str)
	}
	return nil
}

func (e TaxExemption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// State of the tax app configuration.
type TaxPartnerState string

const (
	// App is not configured.
	TaxPartnerStatePending TaxPartnerState = "PENDING"
	// App is configured, but not used for tax calculations.
	TaxPartnerStateReady TaxPartnerState = "READY"
	// App is configured and to be used for tax calculations.
	TaxPartnerStateActive TaxPartnerState = "ACTIVE"
)

var AllTaxPartnerState = []TaxPartnerState{
	TaxPartnerStatePending,
	TaxPartnerStateReady,
	TaxPartnerStateActive,
}

func (e TaxPartnerState) IsValid() bool {
	switch e {
	case TaxPartnerStatePending, TaxPartnerStateReady, TaxPartnerStateActive:
		return true
	}
	return false
}

func (e TaxPartnerState) String() string {
	return string(e)
}

func (e *TaxPartnerState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxPartnerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxPartnerState", str)
	}
	return nil
}

func (e TaxPartnerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources that are translatable.
type TranslatableResourceType string

const (
	// A product collection. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
	TranslatableResourceTypeCollection TranslatableResourceType = "COLLECTION"
	// The delivery method definition. For example, "Standard", or "Expedited".
	// Translatable fields: `name`.
	TranslatableResourceTypeDeliveryMethodDefinition TranslatableResourceType = "DELIVERY_METHOD_DEFINITION"
	// An email template. Translatable fields: `title`, `body_html`.
	TranslatableResourceTypeEmailTemplate TranslatableResourceType = "EMAIL_TEMPLATE"
	// A filter. Translatable fields: `label`.
	TranslatableResourceTypeFilter TranslatableResourceType = "FILTER"
	// A link to direct users. Translatable fields: `title`.
	TranslatableResourceTypeLink TranslatableResourceType = "LINK"
	// A Metafield. Translatable fields: `value`.
	TranslatableResourceTypeMetafield TranslatableResourceType = "METAFIELD"
	// A Metaobject. Translatable fields are determined by the Metaobject type.
	TranslatableResourceTypeMetaobject TranslatableResourceType = "METAOBJECT"
	// An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `handle`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStoreArticle TranslatableResourceType = "ONLINE_STORE_ARTICLE"
	// An online store blog. Translatable fields: `title`, `handle`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStoreBlog TranslatableResourceType = "ONLINE_STORE_BLOG"
	// A category of links. Translatable fields: `title`.
	TranslatableResourceTypeOnlineStoreMenu TranslatableResourceType = "ONLINE_STORE_MENU"
	// An online store page. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
	TranslatableResourceTypeOnlineStorePage TranslatableResourceType = "ONLINE_STORE_PAGE"
	// An online store theme. Translatable fields: `dynamic keys based on theme data`.
	TranslatableResourceTypeOnlineStoreTheme TranslatableResourceType = "ONLINE_STORE_THEME"
	// A packing slip template. Translatable fields: `body`.
	TranslatableResourceTypePackingSlipTemplate TranslatableResourceType = "PACKING_SLIP_TEMPLATE"
	// A payment gateway. Translatable fields: `name`.
	TranslatableResourceTypePaymentGateway TranslatableResourceType = "PAYMENT_GATEWAY"
	// An online store product. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
	TranslatableResourceTypeProduct TranslatableResourceType = "PRODUCT"
	// An online store custom product property name. For example, "Size", "Color", or "Material".
	// Translatable fields: `name`.
	TranslatableResourceTypeProductOption TranslatableResourceType = "PRODUCT_OPTION"
	// An online store product variant. Translatable fields: `title`, `option1`, `option2`, `option3`. The field `title` has been deprecated.
	TranslatableResourceTypeProductVariant TranslatableResourceType = "PRODUCT_VARIANT"
	// A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`.
	TranslatableResourceTypeSellingPlan TranslatableResourceType = "SELLING_PLAN"
	// A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`.
	TranslatableResourceTypeSellingPlanGroup TranslatableResourceType = "SELLING_PLAN_GROUP"
	// A shop. Translatable fields: `meta_title`, `meta_description`.
	TranslatableResourceTypeShop TranslatableResourceType = "SHOP"
	// A shop policy. Translatable fields: `body`.
	TranslatableResourceTypeShopPolicy TranslatableResourceType = "SHOP_POLICY"
)

var AllTranslatableResourceType = []TranslatableResourceType{
	TranslatableResourceTypeCollection,
	TranslatableResourceTypeDeliveryMethodDefinition,
	TranslatableResourceTypeEmailTemplate,
	TranslatableResourceTypeFilter,
	TranslatableResourceTypeLink,
	TranslatableResourceTypeMetafield,
	TranslatableResourceTypeMetaobject,
	TranslatableResourceTypeOnlineStoreArticle,
	TranslatableResourceTypeOnlineStoreBlog,
	TranslatableResourceTypeOnlineStoreMenu,
	TranslatableResourceTypeOnlineStorePage,
	TranslatableResourceTypeOnlineStoreTheme,
	TranslatableResourceTypePackingSlipTemplate,
	TranslatableResourceTypePaymentGateway,
	TranslatableResourceTypeProduct,
	TranslatableResourceTypeProductOption,
	TranslatableResourceTypeProductVariant,
	TranslatableResourceTypeSellingPlan,
	TranslatableResourceTypeSellingPlanGroup,
	TranslatableResourceTypeShop,
	TranslatableResourceTypeShopPolicy,
}

func (e TranslatableResourceType) IsValid() bool {
	switch e {
	case TranslatableResourceTypeCollection, TranslatableResourceTypeDeliveryMethodDefinition, TranslatableResourceTypeEmailTemplate, TranslatableResourceTypeFilter, TranslatableResourceTypeLink, TranslatableResourceTypeMetafield, TranslatableResourceTypeMetaobject, TranslatableResourceTypeOnlineStoreArticle, TranslatableResourceTypeOnlineStoreBlog, TranslatableResourceTypeOnlineStoreMenu, TranslatableResourceTypeOnlineStorePage, TranslatableResourceTypeOnlineStoreTheme, TranslatableResourceTypePackingSlipTemplate, TranslatableResourceTypePaymentGateway, TranslatableResourceTypeProduct, TranslatableResourceTypeProductOption, TranslatableResourceTypeProductVariant, TranslatableResourceTypeSellingPlan, TranslatableResourceTypeSellingPlanGroup, TranslatableResourceTypeShop, TranslatableResourceTypeShopPolicy:
		return true
	}
	return false
}

func (e TranslatableResourceType) String() string {
	return string(e)
}

func (e *TranslatableResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslatableResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslatableResourceType", str)
	}
	return nil
}

func (e TranslatableResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `TranslationUserError`.
type TranslationErrorCode string

const (
	// The input value is blank.
	TranslationErrorCodeBlank TranslationErrorCode = "BLANK"
	// The input value is invalid.
	TranslationErrorCodeInvalid TranslationErrorCode = "INVALID"
	// Resource does not exist.
	TranslationErrorCodeResourceNotFound TranslationErrorCode = "RESOURCE_NOT_FOUND"
	// Resource is not translatable.
	TranslationErrorCodeResourceNotTranslatable TranslationErrorCode = "RESOURCE_NOT_TRANSLATABLE"
	// Too many translation keys for the resource.
	TranslationErrorCodeTooManyKeysForResource TranslationErrorCode = "TOO_MANY_KEYS_FOR_RESOURCE"
	// Translation key is invalid.
	TranslationErrorCodeInvalidKeyForModel TranslationErrorCode = "INVALID_KEY_FOR_MODEL"
	// Translation value is invalid.
	TranslationErrorCodeFailsResourceValidation TranslationErrorCode = "FAILS_RESOURCE_VALIDATION"
	// Translatable content is invalid.
	TranslationErrorCodeInvalidTranslatableContent TranslationErrorCode = "INVALID_TRANSLATABLE_CONTENT"
	// Market localizable content is invalid.
	TranslationErrorCodeInvalidMarketLocalizableContent TranslationErrorCode = "INVALID_MARKET_LOCALIZABLE_CONTENT"
	// Locale is invalid for the shop.
	TranslationErrorCodeInvalidLocaleForShop TranslationErrorCode = "INVALID_LOCALE_FOR_SHOP"
	// Locale language code is invalid.
	TranslationErrorCodeInvalidCode TranslationErrorCode = "INVALID_CODE"
	// Locale code format is invalid.
	TranslationErrorCodeInvalidFormat TranslationErrorCode = "INVALID_FORMAT"
	// The shop isn't allowed to operate on market custom content.
	TranslationErrorCodeMarketCustomContentNotAllowed TranslationErrorCode = "MARKET_CUSTOM_CONTENT_NOT_ALLOWED"
	// The market corresponding to the `marketId` argument doesn't exist.
	TranslationErrorCodeMarketDoesNotExist TranslationErrorCode = "MARKET_DOES_NOT_EXIST"
	// The market override locale creation failed.
	TranslationErrorCodeMarketLocaleCreationFailed TranslationErrorCode = "MARKET_LOCALE_CREATION_FAILED"
	// The specified resource can't be customized for a market.
	TranslationErrorCodeResourceNotMarketCustomizable TranslationErrorCode = "RESOURCE_NOT_MARKET_CUSTOMIZABLE"
	// The locale is missing on the market corresponding to the `marketId` argument.
	TranslationErrorCodeInvalidLocaleForMarket TranslationErrorCode = "INVALID_LOCALE_FOR_MARKET"
	// The handle is already taken for this resource.
	TranslationErrorCodeInvalidValueForHandleTranslation TranslationErrorCode = "INVALID_VALUE_FOR_HANDLE_TRANSLATION"
)

var AllTranslationErrorCode = []TranslationErrorCode{
	TranslationErrorCodeBlank,
	TranslationErrorCodeInvalid,
	TranslationErrorCodeResourceNotFound,
	TranslationErrorCodeResourceNotTranslatable,
	TranslationErrorCodeTooManyKeysForResource,
	TranslationErrorCodeInvalidKeyForModel,
	TranslationErrorCodeFailsResourceValidation,
	TranslationErrorCodeInvalidTranslatableContent,
	TranslationErrorCodeInvalidMarketLocalizableContent,
	TranslationErrorCodeInvalidLocaleForShop,
	TranslationErrorCodeInvalidCode,
	TranslationErrorCodeInvalidFormat,
	TranslationErrorCodeMarketCustomContentNotAllowed,
	TranslationErrorCodeMarketDoesNotExist,
	TranslationErrorCodeMarketLocaleCreationFailed,
	TranslationErrorCodeResourceNotMarketCustomizable,
	TranslationErrorCodeInvalidLocaleForMarket,
	TranslationErrorCodeInvalidValueForHandleTranslation,
}

func (e TranslationErrorCode) IsValid() bool {
	switch e {
	case TranslationErrorCodeBlank, TranslationErrorCodeInvalid, TranslationErrorCodeResourceNotFound, TranslationErrorCodeResourceNotTranslatable, TranslationErrorCodeTooManyKeysForResource, TranslationErrorCodeInvalidKeyForModel, TranslationErrorCodeFailsResourceValidation, TranslationErrorCodeInvalidTranslatableContent, TranslationErrorCodeInvalidMarketLocalizableContent, TranslationErrorCodeInvalidLocaleForShop, TranslationErrorCodeInvalidCode, TranslationErrorCodeInvalidFormat, TranslationErrorCodeMarketCustomContentNotAllowed, TranslationErrorCodeMarketDoesNotExist, TranslationErrorCodeMarketLocaleCreationFailed, TranslationErrorCodeResourceNotMarketCustomizable, TranslationErrorCodeInvalidLocaleForMarket, TranslationErrorCodeInvalidValueForHandleTranslation:
		return true
	}
	return false
}

func (e TranslationErrorCode) String() string {
	return string(e)
}

func (e *TranslationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslationErrorCode", str)
	}
	return nil
}

func (e TranslationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Systems of weights and measures.
type UnitSystem string

const (
	// Imperial system of weights and measures.
	UnitSystemImperialSystem UnitSystem = "IMPERIAL_SYSTEM"
	// Metric system of weights and measures.
	UnitSystemMetricSystem UnitSystem = "METRIC_SYSTEM"
)

var AllUnitSystem = []UnitSystem{
	UnitSystemImperialSystem,
	UnitSystemMetricSystem,
}

func (e UnitSystem) IsValid() bool {
	switch e {
	case UnitSystemImperialSystem, UnitSystemMetricSystem:
		return true
	}
	return false
}

func (e UnitSystem) String() string {
	return string(e)
}

func (e *UnitSystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitSystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitSystem", str)
	}
	return nil
}

func (e UnitSystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
type URLRedirectBulkDeleteByIdsUserErrorCode string

const (
	// You must pass one or more [`URLRedirect`](
	// https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
	// ) object IDs.
	URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty URLRedirectBulkDeleteByIdsUserErrorCode = "IDS_EMPTY"
)

var AllURLRedirectBulkDeleteByIdsUserErrorCode = []URLRedirectBulkDeleteByIdsUserErrorCode{
	URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty,
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteByIdsUserErrorCodeIDSEmpty:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteByIdsUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteByIdsUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteByIdsUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteByIdsUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
type URLRedirectBulkDeleteBySavedSearchUserErrorCode string

const (
	// Saved search not found.
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound URLRedirectBulkDeleteBySavedSearchUserErrorCode = "SAVED_SEARCH_NOT_FOUND"
	// The saved search's query cannot match all entries or be empty.
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery URLRedirectBulkDeleteBySavedSearchUserErrorCode = "INVALID_SAVED_SEARCH_QUERY"
)

var AllURLRedirectBulkDeleteBySavedSearchUserErrorCode = []URLRedirectBulkDeleteBySavedSearchUserErrorCode{
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound,
	URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery,
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteBySavedSearchUserErrorCodeSavedSearchNotFound, URLRedirectBulkDeleteBySavedSearchUserErrorCodeInvalidSavedSearchQuery:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteBySavedSearchUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteBySavedSearchUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteBySavedSearchUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteBySavedSearchUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
type URLRedirectBulkDeleteBySearchUserErrorCode string

const (
	// Invalid search string.
	URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument URLRedirectBulkDeleteBySearchUserErrorCode = "INVALID_SEARCH_ARGUMENT"
)

var AllURLRedirectBulkDeleteBySearchUserErrorCode = []URLRedirectBulkDeleteBySearchUserErrorCode{
	URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument,
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) IsValid() bool {
	switch e {
	case URLRedirectBulkDeleteBySearchUserErrorCodeInvalidSearchArgument:
		return true
	}
	return false
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectBulkDeleteBySearchUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectBulkDeleteBySearchUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectBulkDeleteBySearchUserErrorCode", str)
	}
	return nil
}

func (e URLRedirectBulkDeleteBySearchUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectUserError`.
type URLRedirectErrorCode string

const (
	// Redirect does not exist.
	URLRedirectErrorCodeDoesNotExist URLRedirectErrorCode = "DOES_NOT_EXIST"
	// Redirect could not be created.
	URLRedirectErrorCodeCreateFailed URLRedirectErrorCode = "CREATE_FAILED"
	// Redirect could not be updated.
	URLRedirectErrorCodeUpdateFailed URLRedirectErrorCode = "UPDATE_FAILED"
	// Redirect could not be deleted.
	URLRedirectErrorCodeDeleteFailed URLRedirectErrorCode = "DELETE_FAILED"
)

var AllURLRedirectErrorCode = []URLRedirectErrorCode{
	URLRedirectErrorCodeDoesNotExist,
	URLRedirectErrorCodeCreateFailed,
	URLRedirectErrorCodeUpdateFailed,
	URLRedirectErrorCodeDeleteFailed,
}

func (e URLRedirectErrorCode) IsValid() bool {
	switch e {
	case URLRedirectErrorCodeDoesNotExist, URLRedirectErrorCodeCreateFailed, URLRedirectErrorCodeUpdateFailed, URLRedirectErrorCodeDeleteFailed:
		return true
	}
	return false
}

func (e URLRedirectErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectErrorCode", str)
	}
	return nil
}

func (e URLRedirectErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that can be returned by `UrlRedirectImportUserError`.
type URLRedirectImportErrorCode string

const (
	// CSV file does not exist at given URL.
	URLRedirectImportErrorCodeFileDoesNotExist URLRedirectImportErrorCode = "FILE_DOES_NOT_EXIST"
	// URL redirect import not found.
	URLRedirectImportErrorCodeNotFound URLRedirectImportErrorCode = "NOT_FOUND"
	// The import has already completed.
	URLRedirectImportErrorCodeAlreadyImported URLRedirectImportErrorCode = "ALREADY_IMPORTED"
	// The import is already in progress.
	URLRedirectImportErrorCodeInProgress URLRedirectImportErrorCode = "IN_PROGRESS"
)

var AllURLRedirectImportErrorCode = []URLRedirectImportErrorCode{
	URLRedirectImportErrorCodeFileDoesNotExist,
	URLRedirectImportErrorCodeNotFound,
	URLRedirectImportErrorCodeAlreadyImported,
	URLRedirectImportErrorCodeInProgress,
}

func (e URLRedirectImportErrorCode) IsValid() bool {
	switch e {
	case URLRedirectImportErrorCodeFileDoesNotExist, URLRedirectImportErrorCodeNotFound, URLRedirectImportErrorCodeAlreadyImported, URLRedirectImportErrorCodeInProgress:
		return true
	}
	return false
}

func (e URLRedirectImportErrorCode) String() string {
	return string(e)
}

func (e *URLRedirectImportErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectImportErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectImportErrorCode", str)
	}
	return nil
}

func (e URLRedirectImportErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the UrlRedirect query.
type URLRedirectSortKeys string

const (
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	URLRedirectSortKeysRelevance URLRedirectSortKeys = "RELEVANCE"
	// Sort by the `path` value.
	URLRedirectSortKeysPath URLRedirectSortKeys = "PATH"
	// Sort by the `id` value.
	URLRedirectSortKeysID URLRedirectSortKeys = "ID"
)

var AllURLRedirectSortKeys = []URLRedirectSortKeys{
	URLRedirectSortKeysRelevance,
	URLRedirectSortKeysPath,
	URLRedirectSortKeysID,
}

func (e URLRedirectSortKeys) IsValid() bool {
	switch e {
	case URLRedirectSortKeysRelevance, URLRedirectSortKeysPath, URLRedirectSortKeysID:
		return true
	}
	return false
}

func (e URLRedirectSortKeys) String() string {
	return string(e)
}

func (e *URLRedirectSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = URLRedirectSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UrlRedirectSortKeys", str)
	}
	return nil
}

func (e URLRedirectSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A type of visualization.
type VisualizationType string

const (
	// Line Chart.
	VisualizationTypeLine VisualizationType = "LINE"
	// Bar Chart.
	VisualizationTypeBar VisualizationType = "BAR"
)

var AllVisualizationType = []VisualizationType{
	VisualizationTypeLine,
	VisualizationTypeBar,
}

func (e VisualizationType) IsValid() bool {
	switch e {
	case VisualizationTypeLine, VisualizationTypeBar:
		return true
	}
	return false
}

func (e VisualizationType) String() string {
	return string(e)
}

func (e *VisualizationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VisualizationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VisualizationType", str)
	}
	return nil
}

func (e VisualizationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported formats for webhook subscriptions.
type WebhookSubscriptionFormat string

const (
	WebhookSubscriptionFormatJSON WebhookSubscriptionFormat = "JSON"
	WebhookSubscriptionFormatXML  WebhookSubscriptionFormat = "XML"
)

var AllWebhookSubscriptionFormat = []WebhookSubscriptionFormat{
	WebhookSubscriptionFormatJSON,
	WebhookSubscriptionFormatXML,
}

func (e WebhookSubscriptionFormat) IsValid() bool {
	switch e {
	case WebhookSubscriptionFormatJSON, WebhookSubscriptionFormatXML:
		return true
	}
	return false
}

func (e WebhookSubscriptionFormat) String() string {
	return string(e)
}

func (e *WebhookSubscriptionFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionFormat", str)
	}
	return nil
}

func (e WebhookSubscriptionFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the WebhookSubscription query.
type WebhookSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	WebhookSubscriptionSortKeysCreatedAt WebhookSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	WebhookSubscriptionSortKeysID WebhookSubscriptionSortKeys = "ID"
	// Sort by relevance to the search terms when the `query` parameter is specified on the connection.
	// Don't use this sort key when no search query is specified.
	//
	WebhookSubscriptionSortKeysRelevance WebhookSubscriptionSortKeys = "RELEVANCE"
)

var AllWebhookSubscriptionSortKeys = []WebhookSubscriptionSortKeys{
	WebhookSubscriptionSortKeysCreatedAt,
	WebhookSubscriptionSortKeysID,
	WebhookSubscriptionSortKeysRelevance,
}

func (e WebhookSubscriptionSortKeys) IsValid() bool {
	switch e {
	case WebhookSubscriptionSortKeysCreatedAt, WebhookSubscriptionSortKeysID, WebhookSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e WebhookSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *WebhookSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionSortKeys", str)
	}
	return nil
}

func (e WebhookSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
// notifications about particular events in a shop.
//
// You don't create webhook subscriptions to
// [mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).
// Instead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.
type WebhookSubscriptionTopic string

const (
	// The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
	WebhookSubscriptionTopicAppUninstalled WebhookSubscriptionTopic = "APP_UNINSTALLED"
	// The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCartsCreate WebhookSubscriptionTopic = "CARTS_CREATE"
	// The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCartsUpdate WebhookSubscriptionTopic = "CARTS_UPDATE"
	// The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope.
	WebhookSubscriptionTopicChannelsDelete WebhookSubscriptionTopic = "CHANNELS_DELETE"
	// The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsCreate WebhookSubscriptionTopic = "CHECKOUTS_CREATE"
	// The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsDelete WebhookSubscriptionTopic = "CHECKOUTS_DELETE"
	// The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
	WebhookSubscriptionTopicCheckoutsUpdate WebhookSubscriptionTopic = "CHECKOUTS_UPDATE"
	// The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_CREATE"
	// The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_UPDATE"
	// The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope.
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_REVOKE"
	// The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsAdd WebhookSubscriptionTopic = "COLLECTION_LISTINGS_ADD"
	// The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsRemove WebhookSubscriptionTopic = "COLLECTION_LISTINGS_REMOVE"
	// The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicCollectionListingsUpdate WebhookSubscriptionTopic = "COLLECTION_LISTINGS_UPDATE"
	// The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsCreate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_CREATE"
	// The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsDelete WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_DELETE"
	// The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope.
	WebhookSubscriptionTopicCollectionPublicationsUpdate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_UPDATE"
	// The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsCreate WebhookSubscriptionTopic = "COLLECTIONS_CREATE"
	// The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsDelete WebhookSubscriptionTopic = "COLLECTIONS_DELETE"
	// The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope.
	WebhookSubscriptionTopicCollectionsUpdate WebhookSubscriptionTopic = "COLLECTIONS_UPDATE"
	// The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsCreate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_CREATE"
	// The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsDelete WebhookSubscriptionTopic = "CUSTOMER_GROUPS_DELETE"
	// The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerGroupsUpdate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_UPDATE"
	// The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersCreate WebhookSubscriptionTopic = "CUSTOMERS_CREATE"
	// The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersDelete WebhookSubscriptionTopic = "CUSTOMERS_DELETE"
	// The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersDisable WebhookSubscriptionTopic = "CUSTOMERS_DISABLE"
	// The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersEnable WebhookSubscriptionTopic = "CUSTOMERS_ENABLE"
	// The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersUpdate WebhookSubscriptionTopic = "CUSTOMERS_UPDATE"
	// The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's SMS marketing consent is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersMarketingConsentUpdate WebhookSubscriptionTopic = "CUSTOMERS_MARKETING_CONSENT_UPDATE"
	// The webhook topic for `customer.tags_added` events. Triggers when tags are added to a customer. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerTagsAdded WebhookSubscriptionTopic = "CUSTOMER_TAGS_ADDED"
	// The webhook topic for `customer.tags_removed` events. Triggers when tags are removed from a customer. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomerTagsRemoved WebhookSubscriptionTopic = "CUSTOMER_TAGS_REMOVED"
	// The webhook topic for `customers_email_marketing_consent/update` events. Occurs whenever a customer's email marketing consent is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCustomersEmailMarketingConsentUpdate WebhookSubscriptionTopic = "CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE"
	// The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope.
	WebhookSubscriptionTopicDisputesCreate WebhookSubscriptionTopic = "DISPUTES_CREATE"
	// The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope.
	WebhookSubscriptionTopicDisputesUpdate WebhookSubscriptionTopic = "DISPUTES_UPDATE"
	// The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersCreate WebhookSubscriptionTopic = "DRAFT_ORDERS_CREATE"
	// The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersDelete WebhookSubscriptionTopic = "DRAFT_ORDERS_DELETE"
	// The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope.
	WebhookSubscriptionTopicDraftOrdersUpdate WebhookSubscriptionTopic = "DRAFT_ORDERS_UPDATE"
	// The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentEventsCreate WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_CREATE"
	// The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope.
	WebhookSubscriptionTopicFulfillmentEventsDelete WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_DELETE"
	// The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
	WebhookSubscriptionTopicFulfillmentsCreate WebhookSubscriptionTopic = "FULFILLMENTS_CREATE"
	// The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
	WebhookSubscriptionTopicFulfillmentsUpdate WebhookSubscriptionTopic = "FULFILLMENTS_UPDATE"
	// The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope.
	WebhookSubscriptionTopicAttributedSessionsFirst WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_FIRST"
	// The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope.
	WebhookSubscriptionTopicAttributedSessionsLast WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_LAST"
	// The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
	WebhookSubscriptionTopicOrderTransactionsCreate WebhookSubscriptionTopic = "ORDER_TRANSACTIONS_CREATE"
	// The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
	WebhookSubscriptionTopicOrdersCancelled WebhookSubscriptionTopic = "ORDERS_CANCELLED"
	// The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
	WebhookSubscriptionTopicOrdersCreate WebhookSubscriptionTopic = "ORDERS_CREATE"
	// The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
	WebhookSubscriptionTopicOrdersDelete WebhookSubscriptionTopic = "ORDERS_DELETE"
	// The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
	WebhookSubscriptionTopicOrdersEdited WebhookSubscriptionTopic = "ORDERS_EDITED"
	// The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
	WebhookSubscriptionTopicOrdersFulfilled WebhookSubscriptionTopic = "ORDERS_FULFILLED"
	// The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
	WebhookSubscriptionTopicOrdersPaid WebhookSubscriptionTopic = "ORDERS_PAID"
	// The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
	WebhookSubscriptionTopicOrdersPartiallyFulfilled WebhookSubscriptionTopic = "ORDERS_PARTIALLY_FULFILLED"
	// The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
	WebhookSubscriptionTopicOrdersUpdated WebhookSubscriptionTopic = "ORDERS_UPDATED"
	// The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.
	//
	// * `original_fulfillment_order` - The final state of the original fulfillment order.
	// * `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
	// * `source_location` - The original location which was assigned to fulfill the line items (available as of the `2023-04` API version).
	// * `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.
	//
	// **Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
	// of the `original_fulfillment_order` might be changed by the move operation.
	// If you need to determine the originally assigned location, then you should refer to the `source_location`.
	//
	// [Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
	// Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersMoved WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_MOVED"
	// The webhook topic for `fulfillment_orders/hold_released` events. Occurs whenever a fulfillment order hold is released. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersHoldReleased WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_HOLD_RELEASED"
	// The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready` events. Occurs whenever a fulfillment order which was scheduled becomes due. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersScheduledFulfillmentOrderReady WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY"
	// The webhook topic for `fulfillment_orders/order_routing_complete` events. Occurs when an order has finished being routed and it's fulfillment orders assigned to a fulfillment service's location. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersOrderRoutingComplete WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE"
	// The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersCancelled WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_CANCELLED"
	// The webhook topic for `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentServiceFailedToComplete WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE"
	// The webhook topic for `fulfillment_orders/fulfillment_request_rejected` events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestRejected WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED"
	// The webhook topic for `fulfillment_orders/cancellation_request_submitted` events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestSubmitted WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED"
	// The webhook topic for `fulfillment_orders/cancellation_request_accepted` events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestAccepted WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED"
	// The webhook topic for `fulfillment_orders/cancellation_request_rejected` events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestRejected WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED"
	// The webhook topic for `fulfillment_orders/fulfillment_request_submitted` events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestSubmitted WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED"
	// The webhook topic for `fulfillment_orders/fulfillment_request_accepted` events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestAccepted WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED"
	// The webhook topic for `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForLocalDelivery WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY"
	// The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when a fulfillment order is placed on hold. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersPlacedOnHold WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_PLACED_ON_HOLD"
	// The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsAdd WebhookSubscriptionTopic = "PRODUCT_LISTINGS_ADD"
	// The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsRemove WebhookSubscriptionTopic = "PRODUCT_LISTINGS_REMOVE"
	// The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductListingsUpdate WebhookSubscriptionTopic = "PRODUCT_LISTINGS_UPDATE"
	// The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsAdd WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_ADD"
	// The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsUpdate WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_UPDATE"
	// The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicScheduledProductListingsRemove WebhookSubscriptionTopic = "SCHEDULED_PRODUCT_LISTINGS_REMOVE"
	// The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsCreate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_CREATE"
	// The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsDelete WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_DELETE"
	// The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope.
	WebhookSubscriptionTopicProductPublicationsUpdate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_UPDATE"
	// The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsCreate WebhookSubscriptionTopic = "PRODUCTS_CREATE"
	// The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsDelete WebhookSubscriptionTopic = "PRODUCTS_DELETE"
	// The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope.
	WebhookSubscriptionTopicProductsUpdate WebhookSubscriptionTopic = "PRODUCTS_UPDATE"
	// The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
	WebhookSubscriptionTopicRefundsCreate WebhookSubscriptionTopic = "REFUNDS_CREATE"
	// The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsCreate WebhookSubscriptionTopic = "SEGMENTS_CREATE"
	// The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsDelete WebhookSubscriptionTopic = "SEGMENTS_DELETE"
	// The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicSegmentsUpdate WebhookSubscriptionTopic = "SEGMENTS_UPDATE"
	// The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope.
	WebhookSubscriptionTopicShippingAddressesCreate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_CREATE"
	// The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope.
	WebhookSubscriptionTopicShippingAddressesUpdate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_UPDATE"
	// The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
	WebhookSubscriptionTopicShopUpdate WebhookSubscriptionTopic = "SHOP_UPDATE"
	// The webhook topic for `tax_partners/update` events. Occurs whenever a tax partner is created or updated. Requires the `read_taxes` scope.
	WebhookSubscriptionTopicTaxPartnersUpdate WebhookSubscriptionTopic = "TAX_PARTNERS_UPDATE"
	// The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope.
	WebhookSubscriptionTopicTaxServicesCreate WebhookSubscriptionTopic = "TAX_SERVICES_CREATE"
	// The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope.
	WebhookSubscriptionTopicTaxServicesUpdate WebhookSubscriptionTopic = "TAX_SERVICES_UPDATE"
	// The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesCreate WebhookSubscriptionTopic = "THEMES_CREATE"
	// The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesDelete WebhookSubscriptionTopic = "THEMES_DELETE"
	// The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesPublish WebhookSubscriptionTopic = "THEMES_PUBLISH"
	// The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope.
	WebhookSubscriptionTopicThemesUpdate WebhookSubscriptionTopic = "THEMES_UPDATE"
	// The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope.
	WebhookSubscriptionTopicVariantsInStock WebhookSubscriptionTopic = "VARIANTS_IN_STOCK"
	// The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope.
	WebhookSubscriptionTopicVariantsOutOfStock WebhookSubscriptionTopic = "VARIANTS_OUT_OF_STOCK"
	// The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsConnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_CONNECT"
	// The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsUpdate WebhookSubscriptionTopic = "INVENTORY_LEVELS_UPDATE"
	// The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryLevelsDisconnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_DISCONNECT"
	// The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsCreate WebhookSubscriptionTopic = "INVENTORY_ITEMS_CREATE"
	// The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsUpdate WebhookSubscriptionTopic = "INVENTORY_ITEMS_UPDATE"
	// The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope.
	WebhookSubscriptionTopicInventoryItemsDelete WebhookSubscriptionTopic = "INVENTORY_ITEMS_DELETE"
	// The webhook topic for `locations/activate` events. Occurs whenever a deactivated location is re-activated. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsActivate WebhookSubscriptionTopic = "LOCATIONS_ACTIVATE"
	// The webhook topic for `locations/deactivate` events. Occurs whenever a location is deactivated. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsDeactivate WebhookSubscriptionTopic = "LOCATIONS_DEACTIVATE"
	// The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsCreate WebhookSubscriptionTopic = "LOCATIONS_CREATE"
	// The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsUpdate WebhookSubscriptionTopic = "LOCATIONS_UPDATE"
	// The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope.
	WebhookSubscriptionTopicLocationsDelete WebhookSubscriptionTopic = "LOCATIONS_DELETE"
	// The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope.
	WebhookSubscriptionTopicTenderTransactionsCreate WebhookSubscriptionTopic = "TENDER_TRANSACTIONS_CREATE"
	// The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate WebhookSubscriptionTopic = "APP_PURCHASES_ONE_TIME_UPDATE"
	// The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount.
	WebhookSubscriptionTopicAppSubscriptionsApproachingCappedAmount WebhookSubscriptionTopic = "APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT"
	// The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
	WebhookSubscriptionTopicAppSubscriptionsUpdate WebhookSubscriptionTopic = "APP_SUBSCRIPTIONS_UPDATE"
	// The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
	WebhookSubscriptionTopicLocalesCreate WebhookSubscriptionTopic = "LOCALES_CREATE"
	// The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope.
	WebhookSubscriptionTopicLocalesUpdate WebhookSubscriptionTopic = "LOCALES_UPDATE"
	// The webhook topic for `domains/create` events. Occurs whenever a domain is created.
	WebhookSubscriptionTopicDomainsCreate WebhookSubscriptionTopic = "DOMAINS_CREATE"
	// The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
	WebhookSubscriptionTopicDomainsUpdate WebhookSubscriptionTopic = "DOMAINS_UPDATE"
	// The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
	WebhookSubscriptionTopicDomainsDestroy WebhookSubscriptionTopic = "DOMAINS_DESTROY"
	// The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionContractsCreate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_CREATE"
	// The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionContractsUpdate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_UPDATE"
	// The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs whenever a subscription contract billing cycle is edited. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsCreate WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE"
	// The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs whenever a subscription contract billing cycle edit is updated. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsUpdate WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE"
	// The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs whenever a subscription contract billing cycle edit is deleted. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsDelete WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE"
	// The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
	WebhookSubscriptionTopicProfilesCreate WebhookSubscriptionTopic = "PROFILES_CREATE"
	// The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
	WebhookSubscriptionTopicProfilesUpdate WebhookSubscriptionTopic = "PROFILES_UPDATE"
	// The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
	WebhookSubscriptionTopicProfilesDelete WebhookSubscriptionTopic = "PROFILES_DELETE"
	// The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS"
	// The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE"
	// The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED"
	// The webhook topic for `returns/cancel` events. Occurs whenever a return is canceled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsCancel WebhookSubscriptionTopic = "RETURNS_CANCEL"
	// The webhook topic for `returns/close` events. Occurs whenever a return is closed. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsClose WebhookSubscriptionTopic = "RETURNS_CLOSE"
	// The webhook topic for `returns/reopen` events. Occurs whenever a closed return is reopened. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsReopen WebhookSubscriptionTopic = "RETURNS_REOPEN"
	// The webhook topic for `returns/request` events. Occurs whenever a return is requested. This means `Return.status` is `REQUESTED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsRequest WebhookSubscriptionTopic = "RETURNS_REQUEST"
	// The webhook topic for `returns/approve` events. Occurs whenever a return is approved. This means `Return.status` is `OPEN`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsApprove WebhookSubscriptionTopic = "RETURNS_APPROVE"
	// The webhook topic for `returns/decline` events. Occurs whenever a return is declined. This means `Return.status` is `DECLINED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
	WebhookSubscriptionTopicReturnsDecline WebhookSubscriptionTopic = "RETURNS_DECLINE"
	// The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs whenever a deliverable is attached to a reverse delivery.
	// This occurs when a reverse delivery is created or updated with delivery metadata.
	// Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
	// Requires at least one of the following scopes: read_returns, read_marketplace_returns.
	WebhookSubscriptionTopicReverseDeliveriesAttachDeliverable WebhookSubscriptionTopic = "REVERSE_DELIVERIES_ATTACH_DELIVERABLE"
	// The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs whenever a disposition is made on a reverse fulfillment order.
	// This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
	// Requires at least one of the following scopes: read_returns, read_marketplace_returns.
	WebhookSubscriptionTopicReverseFulfillmentOrdersDispose WebhookSubscriptionTopic = "REVERSE_FULFILLMENT_ORDERS_DISPOSE"
	// The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsCreate WebhookSubscriptionTopic = "PAYMENT_TERMS_CREATE"
	// The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsDelete WebhookSubscriptionTopic = "PAYMENT_TERMS_DELETE"
	// The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentTermsUpdate WebhookSubscriptionTopic = "PAYMENT_TERMS_UPDATE"
	// The webhook topic for `payment_schedules/due` events. Occurs whenever payment schedules are due. Requires the `read_payment_terms` scope.
	WebhookSubscriptionTopicPaymentSchedulesDue WebhookSubscriptionTopic = "PAYMENT_SCHEDULES_DUE"
	// The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsCreate WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_CREATE"
	// The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsUpdate WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_UPDATE"
	// The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope.
	WebhookSubscriptionTopicSellingPlanGroupsDelete WebhookSubscriptionTopic = "SELLING_PLAN_GROUPS_DELETE"
	// The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
	WebhookSubscriptionTopicBulkOperationsFinish WebhookSubscriptionTopic = "BULK_OPERATIONS_FINISH"
	// The webhook topic for `product_feeds/create` events. Triggers when product feed is created Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductFeedsCreate WebhookSubscriptionTopic = "PRODUCT_FEEDS_CREATE"
	// The webhook topic for `product_feeds/update` events. Triggers when product feed is updated Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductFeedsUpdate WebhookSubscriptionTopic = "PRODUCT_FEEDS_UPDATE"
	// The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever a product publication is created, updated or removed for a product feed Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductFeedsIncrementalSync WebhookSubscriptionTopic = "PRODUCT_FEEDS_INCREMENTAL_SYNC"
	// The webhook topic for `product_feeds/full_sync` events. Triggers when a full sync for a product feed is performed Requires the `read_product_listings` scope.
	WebhookSubscriptionTopicProductFeedsFullSync WebhookSubscriptionTopic = "PRODUCT_FEEDS_FULL_SYNC"
	// The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
	WebhookSubscriptionTopicMarketsCreate WebhookSubscriptionTopic = "MARKETS_CREATE"
	// The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
	WebhookSubscriptionTopicMarketsUpdate WebhookSubscriptionTopic = "MARKETS_UPDATE"
	// The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
	WebhookSubscriptionTopicMarketsDelete WebhookSubscriptionTopic = "MARKETS_DELETE"
	// The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersRescheduled WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_RESCHEDULED"
	// The webhook topic for `audit_events/admin_api_activity` events. Triggers for each auditable Admin API request. This topic is limited to one active subscription per Plus store and requires the use of Google Cloud Pub/Sub or AWS EventBridge. Requires the `read_audit_events` scope.
	WebhookSubscriptionTopicAuditEventsAdminAPIActivity WebhookSubscriptionTopic = "AUDIT_EVENTS_ADMIN_API_ACTIVITY"
	// The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup` events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
	WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForPickup WebhookSubscriptionTopic = "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP"
	// The webhook topic for `companies/create` events. Occurs whenever a company is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompaniesCreate WebhookSubscriptionTopic = "COMPANIES_CREATE"
	// The webhook topic for `companies/update` events. Occurs whenever a company is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompaniesUpdate WebhookSubscriptionTopic = "COMPANIES_UPDATE"
	// The webhook topic for `companies/delete` events. Occurs whenever a company is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompaniesDelete WebhookSubscriptionTopic = "COMPANIES_DELETE"
	// The webhook topic for `company_locations/create` events. Occurs whenever a company location is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyLocationsCreate WebhookSubscriptionTopic = "COMPANY_LOCATIONS_CREATE"
	// The webhook topic for `company_locations/update` events. Occurs whenever a company location is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyLocationsUpdate WebhookSubscriptionTopic = "COMPANY_LOCATIONS_UPDATE"
	// The webhook topic for `company_locations/delete` events. Occurs whenever a company location is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyLocationsDelete WebhookSubscriptionTopic = "COMPANY_LOCATIONS_DELETE"
	// The webhook topic for `company_contacts/create` events. Occurs whenever a company contact is created. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyContactsCreate WebhookSubscriptionTopic = "COMPANY_CONTACTS_CREATE"
	// The webhook topic for `company_contacts/update` events. Occurs whenever a company contact is updated. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyContactsUpdate WebhookSubscriptionTopic = "COMPANY_CONTACTS_UPDATE"
	// The webhook topic for `company_contacts/delete` events. Occurs whenever a company contact is deleted. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyContactsDelete WebhookSubscriptionTopic = "COMPANY_CONTACTS_DELETE"
	// The webhook topic for `customers/merge` events. Triggers when two customers are merged Requires the `read_customer_merge` scope.
	WebhookSubscriptionTopicCustomersMerge WebhookSubscriptionTopic = "CUSTOMERS_MERGE"
	// The webhook topic for `company_contact_roles/assign` events. Occurs whenever a role is assigned to a contact at a location. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyContactRolesAssign WebhookSubscriptionTopic = "COMPANY_CONTACT_ROLES_ASSIGN"
	// The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a role is revoked from a contact at a location. Requires the `read_customers` scope.
	WebhookSubscriptionTopicCompanyContactRolesRevoke WebhookSubscriptionTopic = "COMPANY_CONTACT_ROLES_REVOKE"
)

var AllWebhookSubscriptionTopic = []WebhookSubscriptionTopic{
	WebhookSubscriptionTopicAppUninstalled,
	WebhookSubscriptionTopicCartsCreate,
	WebhookSubscriptionTopicCartsUpdate,
	WebhookSubscriptionTopicChannelsDelete,
	WebhookSubscriptionTopicCheckoutsCreate,
	WebhookSubscriptionTopicCheckoutsDelete,
	WebhookSubscriptionTopicCheckoutsUpdate,
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate,
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate,
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke,
	WebhookSubscriptionTopicCollectionListingsAdd,
	WebhookSubscriptionTopicCollectionListingsRemove,
	WebhookSubscriptionTopicCollectionListingsUpdate,
	WebhookSubscriptionTopicCollectionPublicationsCreate,
	WebhookSubscriptionTopicCollectionPublicationsDelete,
	WebhookSubscriptionTopicCollectionPublicationsUpdate,
	WebhookSubscriptionTopicCollectionsCreate,
	WebhookSubscriptionTopicCollectionsDelete,
	WebhookSubscriptionTopicCollectionsUpdate,
	WebhookSubscriptionTopicCustomerGroupsCreate,
	WebhookSubscriptionTopicCustomerGroupsDelete,
	WebhookSubscriptionTopicCustomerGroupsUpdate,
	WebhookSubscriptionTopicCustomersCreate,
	WebhookSubscriptionTopicCustomersDelete,
	WebhookSubscriptionTopicCustomersDisable,
	WebhookSubscriptionTopicCustomersEnable,
	WebhookSubscriptionTopicCustomersUpdate,
	WebhookSubscriptionTopicCustomersMarketingConsentUpdate,
	WebhookSubscriptionTopicCustomerTagsAdded,
	WebhookSubscriptionTopicCustomerTagsRemoved,
	WebhookSubscriptionTopicCustomersEmailMarketingConsentUpdate,
	WebhookSubscriptionTopicDisputesCreate,
	WebhookSubscriptionTopicDisputesUpdate,
	WebhookSubscriptionTopicDraftOrdersCreate,
	WebhookSubscriptionTopicDraftOrdersDelete,
	WebhookSubscriptionTopicDraftOrdersUpdate,
	WebhookSubscriptionTopicFulfillmentEventsCreate,
	WebhookSubscriptionTopicFulfillmentEventsDelete,
	WebhookSubscriptionTopicFulfillmentsCreate,
	WebhookSubscriptionTopicFulfillmentsUpdate,
	WebhookSubscriptionTopicAttributedSessionsFirst,
	WebhookSubscriptionTopicAttributedSessionsLast,
	WebhookSubscriptionTopicOrderTransactionsCreate,
	WebhookSubscriptionTopicOrdersCancelled,
	WebhookSubscriptionTopicOrdersCreate,
	WebhookSubscriptionTopicOrdersDelete,
	WebhookSubscriptionTopicOrdersEdited,
	WebhookSubscriptionTopicOrdersFulfilled,
	WebhookSubscriptionTopicOrdersPaid,
	WebhookSubscriptionTopicOrdersPartiallyFulfilled,
	WebhookSubscriptionTopicOrdersUpdated,
	WebhookSubscriptionTopicFulfillmentOrdersMoved,
	WebhookSubscriptionTopicFulfillmentOrdersHoldReleased,
	WebhookSubscriptionTopicFulfillmentOrdersScheduledFulfillmentOrderReady,
	WebhookSubscriptionTopicFulfillmentOrdersOrderRoutingComplete,
	WebhookSubscriptionTopicFulfillmentOrdersCancelled,
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentServiceFailedToComplete,
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestRejected,
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestSubmitted,
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestAccepted,
	WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestRejected,
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestSubmitted,
	WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestAccepted,
	WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForLocalDelivery,
	WebhookSubscriptionTopicFulfillmentOrdersPlacedOnHold,
	WebhookSubscriptionTopicProductListingsAdd,
	WebhookSubscriptionTopicProductListingsRemove,
	WebhookSubscriptionTopicProductListingsUpdate,
	WebhookSubscriptionTopicScheduledProductListingsAdd,
	WebhookSubscriptionTopicScheduledProductListingsUpdate,
	WebhookSubscriptionTopicScheduledProductListingsRemove,
	WebhookSubscriptionTopicProductPublicationsCreate,
	WebhookSubscriptionTopicProductPublicationsDelete,
	WebhookSubscriptionTopicProductPublicationsUpdate,
	WebhookSubscriptionTopicProductsCreate,
	WebhookSubscriptionTopicProductsDelete,
	WebhookSubscriptionTopicProductsUpdate,
	WebhookSubscriptionTopicRefundsCreate,
	WebhookSubscriptionTopicSegmentsCreate,
	WebhookSubscriptionTopicSegmentsDelete,
	WebhookSubscriptionTopicSegmentsUpdate,
	WebhookSubscriptionTopicShippingAddressesCreate,
	WebhookSubscriptionTopicShippingAddressesUpdate,
	WebhookSubscriptionTopicShopUpdate,
	WebhookSubscriptionTopicTaxPartnersUpdate,
	WebhookSubscriptionTopicTaxServicesCreate,
	WebhookSubscriptionTopicTaxServicesUpdate,
	WebhookSubscriptionTopicThemesCreate,
	WebhookSubscriptionTopicThemesDelete,
	WebhookSubscriptionTopicThemesPublish,
	WebhookSubscriptionTopicThemesUpdate,
	WebhookSubscriptionTopicVariantsInStock,
	WebhookSubscriptionTopicVariantsOutOfStock,
	WebhookSubscriptionTopicInventoryLevelsConnect,
	WebhookSubscriptionTopicInventoryLevelsUpdate,
	WebhookSubscriptionTopicInventoryLevelsDisconnect,
	WebhookSubscriptionTopicInventoryItemsCreate,
	WebhookSubscriptionTopicInventoryItemsUpdate,
	WebhookSubscriptionTopicInventoryItemsDelete,
	WebhookSubscriptionTopicLocationsActivate,
	WebhookSubscriptionTopicLocationsDeactivate,
	WebhookSubscriptionTopicLocationsCreate,
	WebhookSubscriptionTopicLocationsUpdate,
	WebhookSubscriptionTopicLocationsDelete,
	WebhookSubscriptionTopicTenderTransactionsCreate,
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate,
	WebhookSubscriptionTopicAppSubscriptionsApproachingCappedAmount,
	WebhookSubscriptionTopicAppSubscriptionsUpdate,
	WebhookSubscriptionTopicLocalesCreate,
	WebhookSubscriptionTopicLocalesUpdate,
	WebhookSubscriptionTopicDomainsCreate,
	WebhookSubscriptionTopicDomainsUpdate,
	WebhookSubscriptionTopicDomainsDestroy,
	WebhookSubscriptionTopicSubscriptionContractsCreate,
	WebhookSubscriptionTopicSubscriptionContractsUpdate,
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsCreate,
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsUpdate,
	WebhookSubscriptionTopicSubscriptionBillingCycleEditsDelete,
	WebhookSubscriptionTopicProfilesCreate,
	WebhookSubscriptionTopicProfilesUpdate,
	WebhookSubscriptionTopicProfilesDelete,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged,
	WebhookSubscriptionTopicReturnsCancel,
	WebhookSubscriptionTopicReturnsClose,
	WebhookSubscriptionTopicReturnsReopen,
	WebhookSubscriptionTopicReturnsRequest,
	WebhookSubscriptionTopicReturnsApprove,
	WebhookSubscriptionTopicReturnsDecline,
	WebhookSubscriptionTopicReverseDeliveriesAttachDeliverable,
	WebhookSubscriptionTopicReverseFulfillmentOrdersDispose,
	WebhookSubscriptionTopicPaymentTermsCreate,
	WebhookSubscriptionTopicPaymentTermsDelete,
	WebhookSubscriptionTopicPaymentTermsUpdate,
	WebhookSubscriptionTopicPaymentSchedulesDue,
	WebhookSubscriptionTopicSellingPlanGroupsCreate,
	WebhookSubscriptionTopicSellingPlanGroupsUpdate,
	WebhookSubscriptionTopicSellingPlanGroupsDelete,
	WebhookSubscriptionTopicBulkOperationsFinish,
	WebhookSubscriptionTopicProductFeedsCreate,
	WebhookSubscriptionTopicProductFeedsUpdate,
	WebhookSubscriptionTopicProductFeedsIncrementalSync,
	WebhookSubscriptionTopicProductFeedsFullSync,
	WebhookSubscriptionTopicMarketsCreate,
	WebhookSubscriptionTopicMarketsUpdate,
	WebhookSubscriptionTopicMarketsDelete,
	WebhookSubscriptionTopicFulfillmentOrdersRescheduled,
	WebhookSubscriptionTopicAuditEventsAdminAPIActivity,
	WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForPickup,
	WebhookSubscriptionTopicCompaniesCreate,
	WebhookSubscriptionTopicCompaniesUpdate,
	WebhookSubscriptionTopicCompaniesDelete,
	WebhookSubscriptionTopicCompanyLocationsCreate,
	WebhookSubscriptionTopicCompanyLocationsUpdate,
	WebhookSubscriptionTopicCompanyLocationsDelete,
	WebhookSubscriptionTopicCompanyContactsCreate,
	WebhookSubscriptionTopicCompanyContactsUpdate,
	WebhookSubscriptionTopicCompanyContactsDelete,
	WebhookSubscriptionTopicCustomersMerge,
	WebhookSubscriptionTopicCompanyContactRolesAssign,
	WebhookSubscriptionTopicCompanyContactRolesRevoke,
}

func (e WebhookSubscriptionTopic) IsValid() bool {
	switch e {
	case WebhookSubscriptionTopicAppUninstalled, WebhookSubscriptionTopicCartsCreate, WebhookSubscriptionTopicCartsUpdate, WebhookSubscriptionTopicChannelsDelete, WebhookSubscriptionTopicCheckoutsCreate, WebhookSubscriptionTopicCheckoutsDelete, WebhookSubscriptionTopicCheckoutsUpdate, WebhookSubscriptionTopicCustomerPaymentMethodsCreate, WebhookSubscriptionTopicCustomerPaymentMethodsUpdate, WebhookSubscriptionTopicCustomerPaymentMethodsRevoke, WebhookSubscriptionTopicCollectionListingsAdd, WebhookSubscriptionTopicCollectionListingsRemove, WebhookSubscriptionTopicCollectionListingsUpdate, WebhookSubscriptionTopicCollectionPublicationsCreate, WebhookSubscriptionTopicCollectionPublicationsDelete, WebhookSubscriptionTopicCollectionPublicationsUpdate, WebhookSubscriptionTopicCollectionsCreate, WebhookSubscriptionTopicCollectionsDelete, WebhookSubscriptionTopicCollectionsUpdate, WebhookSubscriptionTopicCustomerGroupsCreate, WebhookSubscriptionTopicCustomerGroupsDelete, WebhookSubscriptionTopicCustomerGroupsUpdate, WebhookSubscriptionTopicCustomersCreate, WebhookSubscriptionTopicCustomersDelete, WebhookSubscriptionTopicCustomersDisable, WebhookSubscriptionTopicCustomersEnable, WebhookSubscriptionTopicCustomersUpdate, WebhookSubscriptionTopicCustomersMarketingConsentUpdate, WebhookSubscriptionTopicCustomerTagsAdded, WebhookSubscriptionTopicCustomerTagsRemoved, WebhookSubscriptionTopicCustomersEmailMarketingConsentUpdate, WebhookSubscriptionTopicDisputesCreate, WebhookSubscriptionTopicDisputesUpdate, WebhookSubscriptionTopicDraftOrdersCreate, WebhookSubscriptionTopicDraftOrdersDelete, WebhookSubscriptionTopicDraftOrdersUpdate, WebhookSubscriptionTopicFulfillmentEventsCreate, WebhookSubscriptionTopicFulfillmentEventsDelete, WebhookSubscriptionTopicFulfillmentsCreate, WebhookSubscriptionTopicFulfillmentsUpdate, WebhookSubscriptionTopicAttributedSessionsFirst, WebhookSubscriptionTopicAttributedSessionsLast, WebhookSubscriptionTopicOrderTransactionsCreate, WebhookSubscriptionTopicOrdersCancelled, WebhookSubscriptionTopicOrdersCreate, WebhookSubscriptionTopicOrdersDelete, WebhookSubscriptionTopicOrdersEdited, WebhookSubscriptionTopicOrdersFulfilled, WebhookSubscriptionTopicOrdersPaid, WebhookSubscriptionTopicOrdersPartiallyFulfilled, WebhookSubscriptionTopicOrdersUpdated, WebhookSubscriptionTopicFulfillmentOrdersMoved, WebhookSubscriptionTopicFulfillmentOrdersHoldReleased, WebhookSubscriptionTopicFulfillmentOrdersScheduledFulfillmentOrderReady, WebhookSubscriptionTopicFulfillmentOrdersOrderRoutingComplete, WebhookSubscriptionTopicFulfillmentOrdersCancelled, WebhookSubscriptionTopicFulfillmentOrdersFulfillmentServiceFailedToComplete, WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestRejected, WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestSubmitted, WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestAccepted, WebhookSubscriptionTopicFulfillmentOrdersCancellationRequestRejected, WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestSubmitted, WebhookSubscriptionTopicFulfillmentOrdersFulfillmentRequestAccepted, WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForLocalDelivery, WebhookSubscriptionTopicFulfillmentOrdersPlacedOnHold, WebhookSubscriptionTopicProductListingsAdd, WebhookSubscriptionTopicProductListingsRemove, WebhookSubscriptionTopicProductListingsUpdate, WebhookSubscriptionTopicScheduledProductListingsAdd, WebhookSubscriptionTopicScheduledProductListingsUpdate, WebhookSubscriptionTopicScheduledProductListingsRemove, WebhookSubscriptionTopicProductPublicationsCreate, WebhookSubscriptionTopicProductPublicationsDelete, WebhookSubscriptionTopicProductPublicationsUpdate, WebhookSubscriptionTopicProductsCreate, WebhookSubscriptionTopicProductsDelete, WebhookSubscriptionTopicProductsUpdate, WebhookSubscriptionTopicRefundsCreate, WebhookSubscriptionTopicSegmentsCreate, WebhookSubscriptionTopicSegmentsDelete, WebhookSubscriptionTopicSegmentsUpdate, WebhookSubscriptionTopicShippingAddressesCreate, WebhookSubscriptionTopicShippingAddressesUpdate, WebhookSubscriptionTopicShopUpdate, WebhookSubscriptionTopicTaxPartnersUpdate, WebhookSubscriptionTopicTaxServicesCreate, WebhookSubscriptionTopicTaxServicesUpdate, WebhookSubscriptionTopicThemesCreate, WebhookSubscriptionTopicThemesDelete, WebhookSubscriptionTopicThemesPublish, WebhookSubscriptionTopicThemesUpdate, WebhookSubscriptionTopicVariantsInStock, WebhookSubscriptionTopicVariantsOutOfStock, WebhookSubscriptionTopicInventoryLevelsConnect, WebhookSubscriptionTopicInventoryLevelsUpdate, WebhookSubscriptionTopicInventoryLevelsDisconnect, WebhookSubscriptionTopicInventoryItemsCreate, WebhookSubscriptionTopicInventoryItemsUpdate, WebhookSubscriptionTopicInventoryItemsDelete, WebhookSubscriptionTopicLocationsActivate, WebhookSubscriptionTopicLocationsDeactivate, WebhookSubscriptionTopicLocationsCreate, WebhookSubscriptionTopicLocationsUpdate, WebhookSubscriptionTopicLocationsDelete, WebhookSubscriptionTopicTenderTransactionsCreate, WebhookSubscriptionTopicAppPurchasesOneTimeUpdate, WebhookSubscriptionTopicAppSubscriptionsApproachingCappedAmount, WebhookSubscriptionTopicAppSubscriptionsUpdate, WebhookSubscriptionTopicLocalesCreate, WebhookSubscriptionTopicLocalesUpdate, WebhookSubscriptionTopicDomainsCreate, WebhookSubscriptionTopicDomainsUpdate, WebhookSubscriptionTopicDomainsDestroy, WebhookSubscriptionTopicSubscriptionContractsCreate, WebhookSubscriptionTopicSubscriptionContractsUpdate, WebhookSubscriptionTopicSubscriptionBillingCycleEditsCreate, WebhookSubscriptionTopicSubscriptionBillingCycleEditsUpdate, WebhookSubscriptionTopicSubscriptionBillingCycleEditsDelete, WebhookSubscriptionTopicProfilesCreate, WebhookSubscriptionTopicProfilesUpdate, WebhookSubscriptionTopicProfilesDelete, WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess, WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure, WebhookSubscriptionTopicSubscriptionBillingAttemptsChallenged, WebhookSubscriptionTopicReturnsCancel, WebhookSubscriptionTopicReturnsClose, WebhookSubscriptionTopicReturnsReopen, WebhookSubscriptionTopicReturnsRequest, WebhookSubscriptionTopicReturnsApprove, WebhookSubscriptionTopicReturnsDecline, WebhookSubscriptionTopicReverseDeliveriesAttachDeliverable, WebhookSubscriptionTopicReverseFulfillmentOrdersDispose, WebhookSubscriptionTopicPaymentTermsCreate, WebhookSubscriptionTopicPaymentTermsDelete, WebhookSubscriptionTopicPaymentTermsUpdate, WebhookSubscriptionTopicPaymentSchedulesDue, WebhookSubscriptionTopicSellingPlanGroupsCreate, WebhookSubscriptionTopicSellingPlanGroupsUpdate, WebhookSubscriptionTopicSellingPlanGroupsDelete, WebhookSubscriptionTopicBulkOperationsFinish, WebhookSubscriptionTopicProductFeedsCreate, WebhookSubscriptionTopicProductFeedsUpdate, WebhookSubscriptionTopicProductFeedsIncrementalSync, WebhookSubscriptionTopicProductFeedsFullSync, WebhookSubscriptionTopicMarketsCreate, WebhookSubscriptionTopicMarketsUpdate, WebhookSubscriptionTopicMarketsDelete, WebhookSubscriptionTopicFulfillmentOrdersRescheduled, WebhookSubscriptionTopicAuditEventsAdminAPIActivity, WebhookSubscriptionTopicFulfillmentOrdersLineItemsPreparedForPickup, WebhookSubscriptionTopicCompaniesCreate, WebhookSubscriptionTopicCompaniesUpdate, WebhookSubscriptionTopicCompaniesDelete, WebhookSubscriptionTopicCompanyLocationsCreate, WebhookSubscriptionTopicCompanyLocationsUpdate, WebhookSubscriptionTopicCompanyLocationsDelete, WebhookSubscriptionTopicCompanyContactsCreate, WebhookSubscriptionTopicCompanyContactsUpdate, WebhookSubscriptionTopicCompanyContactsDelete, WebhookSubscriptionTopicCustomersMerge, WebhookSubscriptionTopicCompanyContactRolesAssign, WebhookSubscriptionTopicCompanyContactRolesRevoke:
		return true
	}
	return false
}

func (e WebhookSubscriptionTopic) String() string {
	return string(e)
}

func (e *WebhookSubscriptionTopic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionTopic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionTopic", str)
	}
	return nil
}

func (e WebhookSubscriptionTopic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Units of measurement for weight.
type WeightUnit string

const (
	// 1 kilogram equals 1000 grams.
	WeightUnitKilograms WeightUnit = "KILOGRAMS"
	// Metric system unit of mass.
	WeightUnitGrams WeightUnit = "GRAMS"
	// 1 pound equals 16 ounces.
	WeightUnitPounds WeightUnit = "POUNDS"
	// Imperial system unit of mass.
	WeightUnitOunces WeightUnit = "OUNCES"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitKilograms,
	WeightUnitGrams,
	WeightUnitPounds,
	WeightUnitOunces,
}

func (e WeightUnit) IsValid() bool {
	switch e {
	case WeightUnitKilograms, WeightUnitGrams, WeightUnitPounds, WeightUnitOunces:
		return true
	}
	return false
}

func (e WeightUnit) String() string {
	return string(e)
}

func (e *WeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeightUnit", str)
	}
	return nil
}

func (e WeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
